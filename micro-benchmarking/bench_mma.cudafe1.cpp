# 1 "bench_mma.cu"
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"
# 1
#pragma GCC diagnostic push
# 1
#pragma GCC diagnostic ignored "-Wunused-variable"
# 1
#pragma GCC diagnostic ignored "-Wunused-function"
# 1
static char __nv_inited_managed_rt = 0; static void **__nv_fatbinhandle_for_managed_rt; static void __nv_save_fatbinhandle_for_managed_rt(void **in){__nv_fatbinhandle_for_managed_rt = in;} static char __nv_init_managed_rt_with_module(void **); static inline void __nv_init_managed_rt(void) { __nv_inited_managed_rt = (__nv_inited_managed_rt ? __nv_inited_managed_rt                 : __nv_init_managed_rt_with_module(__nv_fatbinhandle_for_managed_rt));}
# 1
#pragma GCC diagnostic pop
# 1
#pragma GCC diagnostic ignored "-Wunused-variable"

# 1
#define __nv_is_extended_device_lambda_closure_type(X) false
#define __nv_is_extended_host_device_lambda_closure_type(X) false
#if defined(__nv_is_extended_device_lambda_closure_type) && defined(__nv_is_extended_host_device_lambda_closure_type)
#endif

# 1
# 61 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
#pragma GCC diagnostic push
# 64
#pragma GCC diagnostic ignored "-Wunused-function"
# 68 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_types.h"
#if 0
# 68
enum cudaRoundMode { 
# 70
cudaRoundNearest, 
# 71
cudaRoundZero, 
# 72
cudaRoundPosInf, 
# 73
cudaRoundMinInf
# 74
}; 
#endif
# 100 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 100
struct char1 { 
# 102
signed char x; 
# 103
}; 
#endif
# 105 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 105
struct uchar1 { 
# 107
unsigned char x; 
# 108
}; 
#endif
# 111 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 111
struct __attribute((aligned(2))) char2 { 
# 113
signed char x, y; 
# 114
}; 
#endif
# 116 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 116
struct __attribute((aligned(2))) uchar2 { 
# 118
unsigned char x, y; 
# 119
}; 
#endif
# 121 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 121
struct char3 { 
# 123
signed char x, y, z; 
# 124
}; 
#endif
# 126 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 126
struct uchar3 { 
# 128
unsigned char x, y, z; 
# 129
}; 
#endif
# 131 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 131
struct __attribute((aligned(4))) char4 { 
# 133
signed char x, y, z, w; 
# 134
}; 
#endif
# 136 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 136
struct __attribute((aligned(4))) uchar4 { 
# 138
unsigned char x, y, z, w; 
# 139
}; 
#endif
# 141 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 141
struct short1 { 
# 143
short x; 
# 144
}; 
#endif
# 146 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 146
struct ushort1 { 
# 148
unsigned short x; 
# 149
}; 
#endif
# 151 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 151
struct __attribute((aligned(4))) short2 { 
# 153
short x, y; 
# 154
}; 
#endif
# 156 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 156
struct __attribute((aligned(4))) ushort2 { 
# 158
unsigned short x, y; 
# 159
}; 
#endif
# 161 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 161
struct short3 { 
# 163
short x, y, z; 
# 164
}; 
#endif
# 166 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 166
struct ushort3 { 
# 168
unsigned short x, y, z; 
# 169
}; 
#endif
# 171 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 171
struct __attribute((aligned(8))) short4 { short x; short y; short z; short w; }; 
#endif
# 172 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 172
struct __attribute((aligned(8))) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; }; 
#endif
# 174 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 174
struct int1 { 
# 176
int x; 
# 177
}; 
#endif
# 179 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 179
struct uint1 { 
# 181
unsigned x; 
# 182
}; 
#endif
# 184 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 184
struct __attribute((aligned(8))) int2 { int x; int y; }; 
#endif
# 185 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 185
struct __attribute((aligned(8))) uint2 { unsigned x; unsigned y; }; 
#endif
# 187 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 187
struct int3 { 
# 189
int x, y, z; 
# 190
}; 
#endif
# 192 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 192
struct uint3 { 
# 194
unsigned x, y, z; 
# 195
}; 
#endif
# 197 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 197
struct __attribute((aligned(16))) int4 { 
# 199
int x, y, z, w; 
# 200
}; 
#endif
# 202 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 202
struct __attribute((aligned(16))) uint4 { 
# 204
unsigned x, y, z, w; 
# 205
}; 
#endif
# 207 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 207
struct long1 { 
# 209
long x; 
# 210
}; 
#endif
# 212 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 212
struct ulong1 { 
# 214
unsigned long x; 
# 215
}; 
#endif
# 222 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 222
struct __attribute((aligned((2) * sizeof(long)))) long2 { 
# 224
long x, y; 
# 225
}; 
#endif
# 227 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 227
struct __attribute((aligned((2) * sizeof(unsigned long)))) ulong2 { 
# 229
unsigned long x, y; 
# 230
}; 
#endif
# 234 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 234
struct long3 { 
# 236
long x, y, z; 
# 237
}; 
#endif
# 239 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 239
struct ulong3 { 
# 241
unsigned long x, y, z; 
# 242
}; 
#endif
# 244 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 244
struct __attribute((aligned(16))) long4 { 
# 246
long x, y, z, w; 
# 247
}; 
#endif
# 249 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 249
struct __attribute((aligned(16))) ulong4 { 
# 251
unsigned long x, y, z, w; 
# 252
}; 
#endif
# 254 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 254
struct float1 { 
# 256
float x; 
# 257
}; 
#endif
# 276 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 276
struct __attribute((aligned(8))) float2 { float x; float y; }; 
#endif
# 281 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 281
struct float3 { 
# 283
float x, y, z; 
# 284
}; 
#endif
# 286 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 286
struct __attribute((aligned(16))) float4 { 
# 288
float x, y, z, w; 
# 289
}; 
#endif
# 291 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 291
struct longlong1 { 
# 293
long long x; 
# 294
}; 
#endif
# 296 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 296
struct ulonglong1 { 
# 298
unsigned long long x; 
# 299
}; 
#endif
# 301 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 301
struct __attribute((aligned(16))) longlong2 { 
# 303
long long x, y; 
# 304
}; 
#endif
# 306 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 306
struct __attribute((aligned(16))) ulonglong2 { 
# 308
unsigned long long x, y; 
# 309
}; 
#endif
# 311 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 311
struct longlong3 { 
# 313
long long x, y, z; 
# 314
}; 
#endif
# 316 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 316
struct ulonglong3 { 
# 318
unsigned long long x, y, z; 
# 319
}; 
#endif
# 321 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 321
struct __attribute((aligned(16))) longlong4 { 
# 323
long long x, y, z, w; 
# 324
}; 
#endif
# 326 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 326
struct __attribute((aligned(16))) ulonglong4 { 
# 328
unsigned long long x, y, z, w; 
# 329
}; 
#endif
# 331 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 331
struct double1 { 
# 333
double x; 
# 334
}; 
#endif
# 336 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 336
struct __attribute((aligned(16))) double2 { 
# 338
double x, y; 
# 339
}; 
#endif
# 341 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 341
struct double3 { 
# 343
double x, y, z; 
# 344
}; 
#endif
# 346 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 346
struct __attribute((aligned(16))) double4 { 
# 348
double x, y, z, w; 
# 349
}; 
#endif
# 363 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef char1 
# 363
char1; 
#endif
# 364 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef uchar1 
# 364
uchar1; 
#endif
# 365 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef char2 
# 365
char2; 
#endif
# 366 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef uchar2 
# 366
uchar2; 
#endif
# 367 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef char3 
# 367
char3; 
#endif
# 368 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef uchar3 
# 368
uchar3; 
#endif
# 369 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef char4 
# 369
char4; 
#endif
# 370 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef uchar4 
# 370
uchar4; 
#endif
# 371 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef short1 
# 371
short1; 
#endif
# 372 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ushort1 
# 372
ushort1; 
#endif
# 373 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef short2 
# 373
short2; 
#endif
# 374 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ushort2 
# 374
ushort2; 
#endif
# 375 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef short3 
# 375
short3; 
#endif
# 376 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ushort3 
# 376
ushort3; 
#endif
# 377 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef short4 
# 377
short4; 
#endif
# 378 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ushort4 
# 378
ushort4; 
#endif
# 379 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef int1 
# 379
int1; 
#endif
# 380 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef uint1 
# 380
uint1; 
#endif
# 381 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef int2 
# 381
int2; 
#endif
# 382 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef uint2 
# 382
uint2; 
#endif
# 383 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef int3 
# 383
int3; 
#endif
# 384 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef uint3 
# 384
uint3; 
#endif
# 385 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef int4 
# 385
int4; 
#endif
# 386 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef uint4 
# 386
uint4; 
#endif
# 387 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef long1 
# 387
long1; 
#endif
# 388 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ulong1 
# 388
ulong1; 
#endif
# 389 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef long2 
# 389
long2; 
#endif
# 390 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ulong2 
# 390
ulong2; 
#endif
# 391 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef long3 
# 391
long3; 
#endif
# 392 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ulong3 
# 392
ulong3; 
#endif
# 393 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef long4 
# 393
long4; 
#endif
# 394 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ulong4 
# 394
ulong4; 
#endif
# 395 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef float1 
# 395
float1; 
#endif
# 396 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef float2 
# 396
float2; 
#endif
# 397 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef float3 
# 397
float3; 
#endif
# 398 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef float4 
# 398
float4; 
#endif
# 399 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef longlong1 
# 399
longlong1; 
#endif
# 400 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ulonglong1 
# 400
ulonglong1; 
#endif
# 401 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef longlong2 
# 401
longlong2; 
#endif
# 402 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ulonglong2 
# 402
ulonglong2; 
#endif
# 403 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef longlong3 
# 403
longlong3; 
#endif
# 404 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ulonglong3 
# 404
ulonglong3; 
#endif
# 405 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef longlong4 
# 405
longlong4; 
#endif
# 406 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ulonglong4 
# 406
ulonglong4; 
#endif
# 407 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef double1 
# 407
double1; 
#endif
# 408 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef double2 
# 408
double2; 
#endif
# 409 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef double3 
# 409
double3; 
#endif
# 410 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef double4 
# 410
double4; 
#endif
# 418 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 418
struct dim3 { 
# 420
unsigned x, y, z; 
# 432
}; 
#endif
# 434 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef dim3 
# 434
dim3; 
#endif
# 143 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3
typedef long ptrdiff_t; 
# 209 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3
typedef unsigned long size_t; 
#if !defined(__CUDA_INCLUDE_COMPILER_INTERNAL_HEADERS__)
#define __CUDA_INCLUDE_COMPILER_INTERNAL_HEADERS__
#endif
#include "crt/host_runtime.h"
# 426 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3
typedef 
# 415 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3
struct { 
# 416
long long __max_align_ll __attribute((__aligned__(__alignof__(long long)))); 
# 417
long double __max_align_ld __attribute((__aligned__(__alignof__(long double)))); 
# 426 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3
} max_align_t; 
# 433
typedef __decltype((nullptr)) nullptr_t; 
# 203 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 203
enum cudaError { 
# 210
cudaSuccess, 
# 216
cudaErrorInvalidValue, 
# 222
cudaErrorMemoryAllocation, 
# 228
cudaErrorInitializationError, 
# 235
cudaErrorCudartUnloading, 
# 242
cudaErrorProfilerDisabled, 
# 250
cudaErrorProfilerNotInitialized, 
# 257
cudaErrorProfilerAlreadyStarted, 
# 264
cudaErrorProfilerAlreadyStopped, 
# 273 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorInvalidConfiguration, 
# 279
cudaErrorInvalidPitchValue = 12, 
# 285
cudaErrorInvalidSymbol, 
# 293
cudaErrorInvalidHostPointer = 16, 
# 301
cudaErrorInvalidDevicePointer, 
# 307
cudaErrorInvalidTexture, 
# 313
cudaErrorInvalidTextureBinding, 
# 320
cudaErrorInvalidChannelDescriptor, 
# 326
cudaErrorInvalidMemcpyDirection, 
# 336 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorAddressOfConstant, 
# 345 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorTextureFetchFailed, 
# 354 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorTextureNotBound, 
# 363 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorSynchronizationError, 
# 369
cudaErrorInvalidFilterSetting, 
# 375
cudaErrorInvalidNormSetting, 
# 383
cudaErrorMixedDeviceExecution, 
# 391
cudaErrorNotYetImplemented = 31, 
# 400 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorMemoryValueTooLarge, 
# 407
cudaErrorStubLibrary = 34, 
# 414
cudaErrorInsufficientDriver, 
# 421
cudaErrorCallRequiresNewerDriver, 
# 427
cudaErrorInvalidSurface, 
# 433
cudaErrorDuplicateVariableName = 43, 
# 439
cudaErrorDuplicateTextureName, 
# 445
cudaErrorDuplicateSurfaceName, 
# 455 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorDevicesUnavailable, 
# 468 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorIncompatibleDriverContext = 49, 
# 474
cudaErrorMissingConfiguration = 52, 
# 483 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorPriorLaunchFailure, 
# 490
cudaErrorLaunchMaxDepthExceeded = 65, 
# 498
cudaErrorLaunchFileScopedTex, 
# 506
cudaErrorLaunchFileScopedSurf, 
# 522 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorSyncDepthExceeded, 
# 534 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorLaunchPendingCountExceeded, 
# 540
cudaErrorInvalidDeviceFunction = 98, 
# 546
cudaErrorNoDevice = 100, 
# 553
cudaErrorInvalidDevice, 
# 558
cudaErrorDeviceNotLicensed, 
# 567 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorSoftwareValidityNotEstablished, 
# 572
cudaErrorStartupFailure = 127, 
# 577
cudaErrorInvalidKernelImage = 200, 
# 587 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorDeviceUninitialized, 
# 592
cudaErrorMapBufferObjectFailed = 205, 
# 597
cudaErrorUnmapBufferObjectFailed, 
# 603
cudaErrorArrayIsMapped, 
# 608
cudaErrorAlreadyMapped, 
# 616
cudaErrorNoKernelImageForDevice, 
# 621
cudaErrorAlreadyAcquired, 
# 626
cudaErrorNotMapped, 
# 632
cudaErrorNotMappedAsArray, 
# 638
cudaErrorNotMappedAsPointer, 
# 644
cudaErrorECCUncorrectable, 
# 650
cudaErrorUnsupportedLimit, 
# 656
cudaErrorDeviceAlreadyInUse, 
# 662
cudaErrorPeerAccessUnsupported, 
# 668
cudaErrorInvalidPtx, 
# 673
cudaErrorInvalidGraphicsContext, 
# 679
cudaErrorNvlinkUncorrectable, 
# 686
cudaErrorJitCompilerNotFound, 
# 693
cudaErrorUnsupportedPtxVersion, 
# 700
cudaErrorJitCompilationDisabled, 
# 705
cudaErrorUnsupportedExecAffinity, 
# 711
cudaErrorUnsupportedDevSideSync, 
# 716
cudaErrorInvalidSource = 300, 
# 721
cudaErrorFileNotFound, 
# 726
cudaErrorSharedObjectSymbolNotFound, 
# 731
cudaErrorSharedObjectInitFailed, 
# 736
cudaErrorOperatingSystem, 
# 743
cudaErrorInvalidResourceHandle = 400, 
# 749
cudaErrorIllegalState, 
# 756
cudaErrorSymbolNotFound = 500, 
# 764
cudaErrorNotReady = 600, 
# 772
cudaErrorIllegalAddress = 700, 
# 781 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorLaunchOutOfResources, 
# 792 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorLaunchTimeout, 
# 798
cudaErrorLaunchIncompatibleTexturing, 
# 805
cudaErrorPeerAccessAlreadyEnabled, 
# 812
cudaErrorPeerAccessNotEnabled, 
# 825 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorSetOnActiveProcess = 708, 
# 832
cudaErrorContextIsDestroyed, 
# 839
cudaErrorAssert, 
# 846
cudaErrorTooManyPeers, 
# 852
cudaErrorHostMemoryAlreadyRegistered, 
# 858
cudaErrorHostMemoryNotRegistered, 
# 867 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorHardwareStackError, 
# 875
cudaErrorIllegalInstruction, 
# 884 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorMisalignedAddress, 
# 895 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorInvalidAddressSpace, 
# 903
cudaErrorInvalidPc, 
# 914 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorLaunchFailure, 
# 923 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorCooperativeLaunchTooLarge, 
# 928
cudaErrorNotPermitted = 800, 
# 934
cudaErrorNotSupported, 
# 943 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorSystemNotReady, 
# 950
cudaErrorSystemDriverMismatch, 
# 959 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorCompatNotSupportedOnDevice, 
# 964
cudaErrorMpsConnectionFailed, 
# 969
cudaErrorMpsRpcFailure, 
# 975
cudaErrorMpsServerNotReady, 
# 980
cudaErrorMpsMaxClientsReached, 
# 985
cudaErrorMpsMaxConnectionsReached, 
# 990
cudaErrorMpsClientTerminated, 
# 995
cudaErrorCdpNotSupported, 
# 1000
cudaErrorCdpVersionMismatch, 
# 1005
cudaErrorStreamCaptureUnsupported = 900, 
# 1011
cudaErrorStreamCaptureInvalidated, 
# 1017
cudaErrorStreamCaptureMerge, 
# 1022
cudaErrorStreamCaptureUnmatched, 
# 1028
cudaErrorStreamCaptureUnjoined, 
# 1035
cudaErrorStreamCaptureIsolation, 
# 1041
cudaErrorStreamCaptureImplicit, 
# 1047
cudaErrorCapturedEvent, 
# 1054
cudaErrorStreamCaptureWrongThread, 
# 1059
cudaErrorTimeout, 
# 1065
cudaErrorGraphExecUpdateFailure, 
# 1075 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorExternalDevice, 
# 1081
cudaErrorInvalidClusterSize, 
# 1086
cudaErrorUnknown = 999, 
# 1094
cudaErrorApiFailureBase = 10000
# 1095
}; 
#endif
# 1100 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1100
enum cudaChannelFormatKind { 
# 1102
cudaChannelFormatKindSigned, 
# 1103
cudaChannelFormatKindUnsigned, 
# 1104
cudaChannelFormatKindFloat, 
# 1105
cudaChannelFormatKindNone, 
# 1106
cudaChannelFormatKindNV12, 
# 1107
cudaChannelFormatKindUnsignedNormalized8X1, 
# 1108
cudaChannelFormatKindUnsignedNormalized8X2, 
# 1109
cudaChannelFormatKindUnsignedNormalized8X4, 
# 1110
cudaChannelFormatKindUnsignedNormalized16X1, 
# 1111
cudaChannelFormatKindUnsignedNormalized16X2, 
# 1112
cudaChannelFormatKindUnsignedNormalized16X4, 
# 1113
cudaChannelFormatKindSignedNormalized8X1, 
# 1114
cudaChannelFormatKindSignedNormalized8X2, 
# 1115
cudaChannelFormatKindSignedNormalized8X4, 
# 1116
cudaChannelFormatKindSignedNormalized16X1, 
# 1117
cudaChannelFormatKindSignedNormalized16X2, 
# 1118
cudaChannelFormatKindSignedNormalized16X4, 
# 1119
cudaChannelFormatKindUnsignedBlockCompressed1, 
# 1120
cudaChannelFormatKindUnsignedBlockCompressed1SRGB, 
# 1121
cudaChannelFormatKindUnsignedBlockCompressed2, 
# 1122
cudaChannelFormatKindUnsignedBlockCompressed2SRGB, 
# 1123
cudaChannelFormatKindUnsignedBlockCompressed3, 
# 1124
cudaChannelFormatKindUnsignedBlockCompressed3SRGB, 
# 1125
cudaChannelFormatKindUnsignedBlockCompressed4, 
# 1126
cudaChannelFormatKindSignedBlockCompressed4, 
# 1127
cudaChannelFormatKindUnsignedBlockCompressed5, 
# 1128
cudaChannelFormatKindSignedBlockCompressed5, 
# 1129
cudaChannelFormatKindUnsignedBlockCompressed6H, 
# 1130
cudaChannelFormatKindSignedBlockCompressed6H, 
# 1131
cudaChannelFormatKindUnsignedBlockCompressed7, 
# 1132
cudaChannelFormatKindUnsignedBlockCompressed7SRGB
# 1133
}; 
#endif
# 1138 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1138
struct cudaChannelFormatDesc { 
# 1140
int x; 
# 1141
int y; 
# 1142
int z; 
# 1143
int w; 
# 1144
cudaChannelFormatKind f; 
# 1145
}; 
#endif
# 1150 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
typedef struct cudaArray *cudaArray_t; 
# 1155
typedef const cudaArray *cudaArray_const_t; 
# 1157
struct cudaArray; 
# 1162
typedef struct cudaMipmappedArray *cudaMipmappedArray_t; 
# 1167
typedef const cudaMipmappedArray *cudaMipmappedArray_const_t; 
# 1169
struct cudaMipmappedArray; 
# 1179 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1179
struct cudaArraySparseProperties { 
# 1180
struct { 
# 1181
unsigned width; 
# 1182
unsigned height; 
# 1183
unsigned depth; 
# 1184
} tileExtent; 
# 1185
unsigned miptailFirstLevel; 
# 1186
unsigned long long miptailSize; 
# 1187
unsigned flags; 
# 1188
unsigned reserved[4]; 
# 1189
}; 
#endif
# 1194 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1194
struct cudaArrayMemoryRequirements { 
# 1195
size_t size; 
# 1196
size_t alignment; 
# 1197
unsigned reserved[4]; 
# 1198
}; 
#endif
# 1203 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1203
enum cudaMemoryType { 
# 1205
cudaMemoryTypeUnregistered, 
# 1206
cudaMemoryTypeHost, 
# 1207
cudaMemoryTypeDevice, 
# 1208
cudaMemoryTypeManaged
# 1209
}; 
#endif
# 1214 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1214
enum cudaMemcpyKind { 
# 1216
cudaMemcpyHostToHost, 
# 1217
cudaMemcpyHostToDevice, 
# 1218
cudaMemcpyDeviceToHost, 
# 1219
cudaMemcpyDeviceToDevice, 
# 1220
cudaMemcpyDefault
# 1221
}; 
#endif
# 1228 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1228
struct cudaPitchedPtr { 
# 1230
void *ptr; 
# 1231
size_t pitch; 
# 1232
size_t xsize; 
# 1233
size_t ysize; 
# 1234
}; 
#endif
# 1241 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1241
struct cudaExtent { 
# 1243
size_t width; 
# 1244
size_t height; 
# 1245
size_t depth; 
# 1246
}; 
#endif
# 1253 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1253
struct cudaPos { 
# 1255
size_t x; 
# 1256
size_t y; 
# 1257
size_t z; 
# 1258
}; 
#endif
# 1263 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1263
struct cudaMemcpy3DParms { 
# 1265
cudaArray_t srcArray; 
# 1266
cudaPos srcPos; 
# 1267
cudaPitchedPtr srcPtr; 
# 1269
cudaArray_t dstArray; 
# 1270
cudaPos dstPos; 
# 1271
cudaPitchedPtr dstPtr; 
# 1273
cudaExtent extent; 
# 1274
cudaMemcpyKind kind; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 1275
}; 
#endif
# 1280 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1280
struct cudaMemcpy3DPeerParms { 
# 1282
cudaArray_t srcArray; 
# 1283
cudaPos srcPos; 
# 1284
cudaPitchedPtr srcPtr; 
# 1285
int srcDevice; 
# 1287
cudaArray_t dstArray; 
# 1288
cudaPos dstPos; 
# 1289
cudaPitchedPtr dstPtr; 
# 1290
int dstDevice; 
# 1292
cudaExtent extent; 
# 1293
}; 
#endif
# 1298 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1298
struct cudaMemsetParams { 
# 1299
void *dst; 
# 1300
size_t pitch; 
# 1301
unsigned value; 
# 1302
unsigned elementSize; 
# 1303
size_t width; 
# 1304
size_t height; 
# 1305
}; 
#endif
# 1310 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1310
enum cudaAccessProperty { 
# 1311
cudaAccessPropertyNormal, 
# 1312
cudaAccessPropertyStreaming, 
# 1313
cudaAccessPropertyPersisting
# 1314
}; 
#endif
# 1327 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1327
struct cudaAccessPolicyWindow { 
# 1328
void *base_ptr; 
# 1329
size_t num_bytes; 
# 1330
float hitRatio; 
# 1331
cudaAccessProperty hitProp; 
# 1332
cudaAccessProperty missProp; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 1333
}; 
#endif
# 1345 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
typedef void (*cudaHostFn_t)(void * userData); 
# 1350
#if 0
# 1350
struct cudaHostNodeParams { 
# 1351
cudaHostFn_t fn; 
# 1352
void *userData; 
# 1353
}; 
#endif
# 1358 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1358
enum cudaStreamCaptureStatus { 
# 1359
cudaStreamCaptureStatusNone, 
# 1360
cudaStreamCaptureStatusActive, 
# 1361
cudaStreamCaptureStatusInvalidated
# 1363
}; 
#endif
# 1369 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1369
enum cudaStreamCaptureMode { 
# 1370
cudaStreamCaptureModeGlobal, 
# 1371
cudaStreamCaptureModeThreadLocal, 
# 1372
cudaStreamCaptureModeRelaxed
# 1373
}; 
#endif
# 1375 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1375
enum cudaSynchronizationPolicy { 
# 1376
cudaSyncPolicyAuto = 1, 
# 1377
cudaSyncPolicySpin, 
# 1378
cudaSyncPolicyYield, 
# 1379
cudaSyncPolicyBlockingSync
# 1380
}; 
#endif
# 1385 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1385
enum cudaClusterSchedulingPolicy { 
# 1386
cudaClusterSchedulingPolicyDefault, 
# 1387
cudaClusterSchedulingPolicySpread, 
# 1388
cudaClusterSchedulingPolicyLoadBalancing
# 1389
}; 
#endif
# 1394 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1394
enum cudaStreamUpdateCaptureDependenciesFlags { 
# 1395
cudaStreamAddCaptureDependencies, 
# 1396
cudaStreamSetCaptureDependencies
# 1397
}; 
#endif
# 1402 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1402
enum cudaUserObjectFlags { 
# 1403
cudaUserObjectNoDestructorSync = 1
# 1404
}; 
#endif
# 1409 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1409
enum cudaUserObjectRetainFlags { 
# 1410
cudaGraphUserObjectMove = 1
# 1411
}; 
#endif
# 1416 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
struct cudaGraphicsResource; 
# 1421
#if 0
# 1421
enum cudaGraphicsRegisterFlags { 
# 1423
cudaGraphicsRegisterFlagsNone, 
# 1424
cudaGraphicsRegisterFlagsReadOnly, 
# 1425
cudaGraphicsRegisterFlagsWriteDiscard, 
# 1426
cudaGraphicsRegisterFlagsSurfaceLoadStore = 4, 
# 1427
cudaGraphicsRegisterFlagsTextureGather = 8
# 1428
}; 
#endif
# 1433 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1433
enum cudaGraphicsMapFlags { 
# 1435
cudaGraphicsMapFlagsNone, 
# 1436
cudaGraphicsMapFlagsReadOnly, 
# 1437
cudaGraphicsMapFlagsWriteDiscard
# 1438
}; 
#endif
# 1443 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1443
enum cudaGraphicsCubeFace { 
# 1445
cudaGraphicsCubeFacePositiveX, 
# 1446
cudaGraphicsCubeFaceNegativeX, 
# 1447
cudaGraphicsCubeFacePositiveY, 
# 1448
cudaGraphicsCubeFaceNegativeY, 
# 1449
cudaGraphicsCubeFacePositiveZ, 
# 1450
cudaGraphicsCubeFaceNegativeZ
# 1451
}; 
#endif
# 1456 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1456
enum cudaResourceType { 
# 1458
cudaResourceTypeArray, 
# 1459
cudaResourceTypeMipmappedArray, 
# 1460
cudaResourceTypeLinear, 
# 1461
cudaResourceTypePitch2D
# 1462
}; 
#endif
# 1467 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1467
enum cudaResourceViewFormat { 
# 1469
cudaResViewFormatNone, 
# 1470
cudaResViewFormatUnsignedChar1, 
# 1471
cudaResViewFormatUnsignedChar2, 
# 1472
cudaResViewFormatUnsignedChar4, 
# 1473
cudaResViewFormatSignedChar1, 
# 1474
cudaResViewFormatSignedChar2, 
# 1475
cudaResViewFormatSignedChar4, 
# 1476
cudaResViewFormatUnsignedShort1, 
# 1477
cudaResViewFormatUnsignedShort2, 
# 1478
cudaResViewFormatUnsignedShort4, 
# 1479
cudaResViewFormatSignedShort1, 
# 1480
cudaResViewFormatSignedShort2, 
# 1481
cudaResViewFormatSignedShort4, 
# 1482
cudaResViewFormatUnsignedInt1, 
# 1483
cudaResViewFormatUnsignedInt2, 
# 1484
cudaResViewFormatUnsignedInt4, 
# 1485
cudaResViewFormatSignedInt1, 
# 1486
cudaResViewFormatSignedInt2, 
# 1487
cudaResViewFormatSignedInt4, 
# 1488
cudaResViewFormatHalf1, 
# 1489
cudaResViewFormatHalf2, 
# 1490
cudaResViewFormatHalf4, 
# 1491
cudaResViewFormatFloat1, 
# 1492
cudaResViewFormatFloat2, 
# 1493
cudaResViewFormatFloat4, 
# 1494
cudaResViewFormatUnsignedBlockCompressed1, 
# 1495
cudaResViewFormatUnsignedBlockCompressed2, 
# 1496
cudaResViewFormatUnsignedBlockCompressed3, 
# 1497
cudaResViewFormatUnsignedBlockCompressed4, 
# 1498
cudaResViewFormatSignedBlockCompressed4, 
# 1499
cudaResViewFormatUnsignedBlockCompressed5, 
# 1500
cudaResViewFormatSignedBlockCompressed5, 
# 1501
cudaResViewFormatUnsignedBlockCompressed6H, 
# 1502
cudaResViewFormatSignedBlockCompressed6H, 
# 1503
cudaResViewFormatUnsignedBlockCompressed7
# 1504
}; 
#endif
# 1509 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1509
struct cudaResourceDesc { 
# 1510
cudaResourceType resType; 
# 1512
union { 
# 1513
struct { 
# 1514
cudaArray_t array; 
# 1515
} array; 
# 1516
struct { 
# 1517
cudaMipmappedArray_t mipmap; 
# 1518
} mipmap; 
# 1519
struct { 
# 1520
void *devPtr; 
# 1521
cudaChannelFormatDesc desc; 
# 1522
size_t sizeInBytes; 
# 1523
} linear; 
# 1524
struct { 
# 1525
void *devPtr; 
# 1526
cudaChannelFormatDesc desc; 
# 1527
size_t width; 
# 1528
size_t height; 
# 1529
size_t pitchInBytes; 
# 1530
} pitch2D; 
# 1531
} res; 
# 1532
}; 
#endif
# 1537 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1537
struct cudaResourceViewDesc { 
# 1539
cudaResourceViewFormat format; 
# 1540
size_t width; 
# 1541
size_t height; 
# 1542
size_t depth; 
# 1543
unsigned firstMipmapLevel; 
# 1544
unsigned lastMipmapLevel; 
# 1545
unsigned firstLayer; 
# 1546
unsigned lastLayer; 
# 1547
}; 
#endif
# 1552 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1552
struct cudaPointerAttributes { 
# 1558
cudaMemoryType type; 
# 1569 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
int device; 
# 1575
void *devicePointer; 
# 1584 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
void *hostPointer; 
# 1585
}; 
#endif
# 1590 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1590
struct cudaFuncAttributes { 
# 1597
size_t sharedSizeBytes; 
# 1603
size_t constSizeBytes; 
# 1608
size_t localSizeBytes; 
# 1615
int maxThreadsPerBlock; 
# 1620
int numRegs; 
# 1627
int ptxVersion; 
# 1634
int binaryVersion; 
# 1640
int cacheModeCA; 
# 1647
int maxDynamicSharedSizeBytes; 
# 1656 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
int preferredShmemCarveout; 
# 1662
int clusterDimMustBeSet; 
# 1673 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
int requiredClusterWidth; 
# 1674
int requiredClusterHeight; 
# 1675
int requiredClusterDepth; 
# 1681
int clusterSchedulingPolicyPreference; 
# 1703 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
int nonPortableClusterSizeAllowed; 
# 1708
int reserved[16]; 
# 1709
}; 
#endif
# 1714 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1714
enum cudaFuncAttribute { 
# 1716
cudaFuncAttributeMaxDynamicSharedMemorySize = 8, 
# 1717
cudaFuncAttributePreferredSharedMemoryCarveout, 
# 1718
cudaFuncAttributeClusterDimMustBeSet, 
# 1719
cudaFuncAttributeRequiredClusterWidth, 
# 1720
cudaFuncAttributeRequiredClusterHeight, 
# 1721
cudaFuncAttributeRequiredClusterDepth, 
# 1722
cudaFuncAttributeNonPortableClusterSizeAllowed, 
# 1723
cudaFuncAttributeClusterSchedulingPolicyPreference, 
# 1724
cudaFuncAttributeMax
# 1725
}; 
#endif
# 1730 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1730
enum cudaFuncCache { 
# 1732
cudaFuncCachePreferNone, 
# 1733
cudaFuncCachePreferShared, 
# 1734
cudaFuncCachePreferL1, 
# 1735
cudaFuncCachePreferEqual
# 1736
}; 
#endif
# 1742 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1742
enum cudaSharedMemConfig { 
# 1744
cudaSharedMemBankSizeDefault, 
# 1745
cudaSharedMemBankSizeFourByte, 
# 1746
cudaSharedMemBankSizeEightByte
# 1747
}; 
#endif
# 1752 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1752
enum cudaSharedCarveout { 
# 1753
cudaSharedmemCarveoutDefault = (-1), 
# 1754
cudaSharedmemCarveoutMaxShared = 100, 
# 1755
cudaSharedmemCarveoutMaxL1 = 0
# 1756
}; 
#endif
# 1761 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1761
enum cudaComputeMode { 
# 1763
cudaComputeModeDefault, 
# 1764
cudaComputeModeExclusive, 
# 1765
cudaComputeModeProhibited, 
# 1766
cudaComputeModeExclusiveProcess
# 1767
}; 
#endif
# 1772 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1772
enum cudaLimit { 
# 1774
cudaLimitStackSize, 
# 1775
cudaLimitPrintfFifoSize, 
# 1776
cudaLimitMallocHeapSize, 
# 1777
cudaLimitDevRuntimeSyncDepth, 
# 1778
cudaLimitDevRuntimePendingLaunchCount, 
# 1779
cudaLimitMaxL2FetchGranularity, 
# 1780
cudaLimitPersistingL2CacheSize
# 1781
}; 
#endif
# 1786 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1786
enum cudaMemoryAdvise { 
# 1788
cudaMemAdviseSetReadMostly = 1, 
# 1789
cudaMemAdviseUnsetReadMostly, 
# 1790
cudaMemAdviseSetPreferredLocation, 
# 1791
cudaMemAdviseUnsetPreferredLocation, 
# 1792
cudaMemAdviseSetAccessedBy, 
# 1793
cudaMemAdviseUnsetAccessedBy
# 1794
}; 
#endif
# 1799 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1799
enum cudaMemRangeAttribute { 
# 1801
cudaMemRangeAttributeReadMostly = 1, 
# 1802
cudaMemRangeAttributePreferredLocation, 
# 1803
cudaMemRangeAttributeAccessedBy, 
# 1804
cudaMemRangeAttributeLastPrefetchLocation
# 1805
}; 
#endif
# 1810 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1810
enum cudaFlushGPUDirectRDMAWritesOptions { 
# 1811
cudaFlushGPUDirectRDMAWritesOptionHost = (1 << 0), 
# 1812
cudaFlushGPUDirectRDMAWritesOptionMemOps
# 1813
}; 
#endif
# 1818 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1818
enum cudaGPUDirectRDMAWritesOrdering { 
# 1819
cudaGPUDirectRDMAWritesOrderingNone, 
# 1820
cudaGPUDirectRDMAWritesOrderingOwner = 100, 
# 1821
cudaGPUDirectRDMAWritesOrderingAllDevices = 200
# 1822
}; 
#endif
# 1827 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1827
enum cudaFlushGPUDirectRDMAWritesScope { 
# 1828
cudaFlushGPUDirectRDMAWritesToOwner = 100, 
# 1829
cudaFlushGPUDirectRDMAWritesToAllDevices = 200
# 1830
}; 
#endif
# 1835 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1835
enum cudaFlushGPUDirectRDMAWritesTarget { 
# 1836
cudaFlushGPUDirectRDMAWritesTargetCurrentDevice
# 1837
}; 
#endif
# 1843 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1843
enum cudaDeviceAttr { 
# 1845
cudaDevAttrMaxThreadsPerBlock = 1, 
# 1846
cudaDevAttrMaxBlockDimX, 
# 1847
cudaDevAttrMaxBlockDimY, 
# 1848
cudaDevAttrMaxBlockDimZ, 
# 1849
cudaDevAttrMaxGridDimX, 
# 1850
cudaDevAttrMaxGridDimY, 
# 1851
cudaDevAttrMaxGridDimZ, 
# 1852
cudaDevAttrMaxSharedMemoryPerBlock, 
# 1853
cudaDevAttrTotalConstantMemory, 
# 1854
cudaDevAttrWarpSize, 
# 1855
cudaDevAttrMaxPitch, 
# 1856
cudaDevAttrMaxRegistersPerBlock, 
# 1857
cudaDevAttrClockRate, 
# 1858
cudaDevAttrTextureAlignment, 
# 1859
cudaDevAttrGpuOverlap, 
# 1860
cudaDevAttrMultiProcessorCount, 
# 1861
cudaDevAttrKernelExecTimeout, 
# 1862
cudaDevAttrIntegrated, 
# 1863
cudaDevAttrCanMapHostMemory, 
# 1864
cudaDevAttrComputeMode, 
# 1865
cudaDevAttrMaxTexture1DWidth, 
# 1866
cudaDevAttrMaxTexture2DWidth, 
# 1867
cudaDevAttrMaxTexture2DHeight, 
# 1868
cudaDevAttrMaxTexture3DWidth, 
# 1869
cudaDevAttrMaxTexture3DHeight, 
# 1870
cudaDevAttrMaxTexture3DDepth, 
# 1871
cudaDevAttrMaxTexture2DLayeredWidth, 
# 1872
cudaDevAttrMaxTexture2DLayeredHeight, 
# 1873
cudaDevAttrMaxTexture2DLayeredLayers, 
# 1874
cudaDevAttrSurfaceAlignment, 
# 1875
cudaDevAttrConcurrentKernels, 
# 1876
cudaDevAttrEccEnabled, 
# 1877
cudaDevAttrPciBusId, 
# 1878
cudaDevAttrPciDeviceId, 
# 1879
cudaDevAttrTccDriver, 
# 1880
cudaDevAttrMemoryClockRate, 
# 1881
cudaDevAttrGlobalMemoryBusWidth, 
# 1882
cudaDevAttrL2CacheSize, 
# 1883
cudaDevAttrMaxThreadsPerMultiProcessor, 
# 1884
cudaDevAttrAsyncEngineCount, 
# 1885
cudaDevAttrUnifiedAddressing, 
# 1886
cudaDevAttrMaxTexture1DLayeredWidth, 
# 1887
cudaDevAttrMaxTexture1DLayeredLayers, 
# 1888
cudaDevAttrMaxTexture2DGatherWidth = 45, 
# 1889
cudaDevAttrMaxTexture2DGatherHeight, 
# 1890
cudaDevAttrMaxTexture3DWidthAlt, 
# 1891
cudaDevAttrMaxTexture3DHeightAlt, 
# 1892
cudaDevAttrMaxTexture3DDepthAlt, 
# 1893
cudaDevAttrPciDomainId, 
# 1894
cudaDevAttrTexturePitchAlignment, 
# 1895
cudaDevAttrMaxTextureCubemapWidth, 
# 1896
cudaDevAttrMaxTextureCubemapLayeredWidth, 
# 1897
cudaDevAttrMaxTextureCubemapLayeredLayers, 
# 1898
cudaDevAttrMaxSurface1DWidth, 
# 1899
cudaDevAttrMaxSurface2DWidth, 
# 1900
cudaDevAttrMaxSurface2DHeight, 
# 1901
cudaDevAttrMaxSurface3DWidth, 
# 1902
cudaDevAttrMaxSurface3DHeight, 
# 1903
cudaDevAttrMaxSurface3DDepth, 
# 1904
cudaDevAttrMaxSurface1DLayeredWidth, 
# 1905
cudaDevAttrMaxSurface1DLayeredLayers, 
# 1906
cudaDevAttrMaxSurface2DLayeredWidth, 
# 1907
cudaDevAttrMaxSurface2DLayeredHeight, 
# 1908
cudaDevAttrMaxSurface2DLayeredLayers, 
# 1909
cudaDevAttrMaxSurfaceCubemapWidth, 
# 1910
cudaDevAttrMaxSurfaceCubemapLayeredWidth, 
# 1911
cudaDevAttrMaxSurfaceCubemapLayeredLayers, 
# 1912
cudaDevAttrMaxTexture1DLinearWidth, 
# 1913
cudaDevAttrMaxTexture2DLinearWidth, 
# 1914
cudaDevAttrMaxTexture2DLinearHeight, 
# 1915
cudaDevAttrMaxTexture2DLinearPitch, 
# 1916
cudaDevAttrMaxTexture2DMipmappedWidth, 
# 1917
cudaDevAttrMaxTexture2DMipmappedHeight, 
# 1918
cudaDevAttrComputeCapabilityMajor, 
# 1919
cudaDevAttrComputeCapabilityMinor, 
# 1920
cudaDevAttrMaxTexture1DMipmappedWidth, 
# 1921
cudaDevAttrStreamPrioritiesSupported, 
# 1922
cudaDevAttrGlobalL1CacheSupported, 
# 1923
cudaDevAttrLocalL1CacheSupported, 
# 1924
cudaDevAttrMaxSharedMemoryPerMultiprocessor, 
# 1925
cudaDevAttrMaxRegistersPerMultiprocessor, 
# 1926
cudaDevAttrManagedMemory, 
# 1927
cudaDevAttrIsMultiGpuBoard, 
# 1928
cudaDevAttrMultiGpuBoardGroupID, 
# 1929
cudaDevAttrHostNativeAtomicSupported, 
# 1930
cudaDevAttrSingleToDoublePrecisionPerfRatio, 
# 1931
cudaDevAttrPageableMemoryAccess, 
# 1932
cudaDevAttrConcurrentManagedAccess, 
# 1933
cudaDevAttrComputePreemptionSupported, 
# 1934
cudaDevAttrCanUseHostPointerForRegisteredMem, 
# 1935
cudaDevAttrReserved92, 
# 1936
cudaDevAttrReserved93, 
# 1937
cudaDevAttrReserved94, 
# 1938
cudaDevAttrCooperativeLaunch, 
# 1939
cudaDevAttrCooperativeMultiDeviceLaunch, 
# 1940
cudaDevAttrMaxSharedMemoryPerBlockOptin, 
# 1941
cudaDevAttrCanFlushRemoteWrites, 
# 1942
cudaDevAttrHostRegisterSupported, 
# 1943
cudaDevAttrPageableMemoryAccessUsesHostPageTables, 
# 1944
cudaDevAttrDirectManagedMemAccessFromHost, 
# 1945
cudaDevAttrMaxBlocksPerMultiprocessor = 106, 
# 1946
cudaDevAttrMaxPersistingL2CacheSize = 108, 
# 1947
cudaDevAttrMaxAccessPolicyWindowSize, 
# 1948
cudaDevAttrReservedSharedMemoryPerBlock = 111, 
# 1949
cudaDevAttrSparseCudaArraySupported, 
# 1950
cudaDevAttrHostRegisterReadOnlySupported, 
# 1951
cudaDevAttrTimelineSemaphoreInteropSupported, 
# 1952
cudaDevAttrMaxTimelineSemaphoreInteropSupported = 114, 
# 1953
cudaDevAttrMemoryPoolsSupported, 
# 1954
cudaDevAttrGPUDirectRDMASupported, 
# 1955
cudaDevAttrGPUDirectRDMAFlushWritesOptions, 
# 1956
cudaDevAttrGPUDirectRDMAWritesOrdering, 
# 1957
cudaDevAttrMemoryPoolSupportedHandleTypes, 
# 1958
cudaDevAttrClusterLaunch, 
# 1959
cudaDevAttrDeferredMappingCudaArraySupported, 
# 1960
cudaDevAttrReserved122, 
# 1961
cudaDevAttrReserved123, 
# 1962
cudaDevAttrReserved124, 
# 1963
cudaDevAttrIpcEventSupport, 
# 1964
cudaDevAttrMemSyncDomainCount, 
# 1965
cudaDevAttrReserved127, 
# 1966
cudaDevAttrReserved128, 
# 1967
cudaDevAttrReserved129, 
# 1968
cudaDevAttrReserved132 = 132, 
# 1969
cudaDevAttrMax
# 1970
}; 
#endif
# 1975 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1975
enum cudaMemPoolAttr { 
# 1985 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaMemPoolReuseFollowEventDependencies = 1, 
# 1992
cudaMemPoolReuseAllowOpportunistic, 
# 2000
cudaMemPoolReuseAllowInternalDependencies, 
# 2011 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaMemPoolAttrReleaseThreshold, 
# 2017
cudaMemPoolAttrReservedMemCurrent, 
# 2024
cudaMemPoolAttrReservedMemHigh, 
# 2030
cudaMemPoolAttrUsedMemCurrent, 
# 2037
cudaMemPoolAttrUsedMemHigh
# 2038
}; 
#endif
# 2043 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2043
enum cudaMemLocationType { 
# 2044
cudaMemLocationTypeInvalid, 
# 2045
cudaMemLocationTypeDevice
# 2046
}; 
#endif
# 2053 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2053
struct cudaMemLocation { 
# 2054
cudaMemLocationType type; 
# 2055
int id; 
# 2056
}; 
#endif
# 2061 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2061
enum cudaMemAccessFlags { 
# 2062
cudaMemAccessFlagsProtNone, 
# 2063
cudaMemAccessFlagsProtRead, 
# 2064
cudaMemAccessFlagsProtReadWrite = 3
# 2065
}; 
#endif
# 2070 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2070
struct cudaMemAccessDesc { 
# 2071
cudaMemLocation location; 
# 2072
cudaMemAccessFlags flags; 
# 2073
}; 
#endif
# 2078 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2078
enum cudaMemAllocationType { 
# 2079
cudaMemAllocationTypeInvalid, 
# 2083
cudaMemAllocationTypePinned, 
# 2084
cudaMemAllocationTypeMax = 2147483647
# 2085
}; 
#endif
# 2090 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2090
enum cudaMemAllocationHandleType { 
# 2091
cudaMemHandleTypeNone, 
# 2092
cudaMemHandleTypePosixFileDescriptor, 
# 2093
cudaMemHandleTypeWin32, 
# 2094
cudaMemHandleTypeWin32Kmt = 4
# 2095
}; 
#endif
# 2100 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2100
struct cudaMemPoolProps { 
# 2101
cudaMemAllocationType allocType; 
# 2102
cudaMemAllocationHandleType handleTypes; 
# 2103
cudaMemLocation location; 
# 2110
void *win32SecurityAttributes; 
# 2111
unsigned char reserved[64]; 
# 2112
}; 
#endif
# 2117 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2117
struct cudaMemPoolPtrExportData { 
# 2118
unsigned char reserved[64]; 
# 2119
}; 
#endif
# 2124 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2124
struct cudaMemAllocNodeParams { 
# 2129
cudaMemPoolProps poolProps; 
# 2130
const cudaMemAccessDesc *accessDescs; 
# 2131
size_t accessDescCount; 
# 2132
size_t bytesize; 
# 2133
void *dptr; 
# 2134
}; 
#endif
# 2139 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2139
enum cudaGraphMemAttributeType { 
# 2144
cudaGraphMemAttrUsedMemCurrent, 
# 2151
cudaGraphMemAttrUsedMemHigh, 
# 2158
cudaGraphMemAttrReservedMemCurrent, 
# 2165
cudaGraphMemAttrReservedMemHigh
# 2166
}; 
#endif
# 2172 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2172
enum cudaDeviceP2PAttr { 
# 2173
cudaDevP2PAttrPerformanceRank = 1, 
# 2174
cudaDevP2PAttrAccessSupported, 
# 2175
cudaDevP2PAttrNativeAtomicSupported, 
# 2176
cudaDevP2PAttrCudaArrayAccessSupported
# 2177
}; 
#endif
# 2184 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2184
struct CUuuid_st { 
# 2185
char bytes[16]; 
# 2186
}; 
#endif
# 2187 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef CUuuid_st 
# 2187
CUuuid; 
#endif
# 2189 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef CUuuid_st 
# 2189
cudaUUID_t; 
#endif
# 2194 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2194
struct cudaDeviceProp { 
# 2196
char name[256]; 
# 2197
cudaUUID_t uuid; 
# 2198
char luid[8]; 
# 2199
unsigned luidDeviceNodeMask; 
# 2200
size_t totalGlobalMem; 
# 2201
size_t sharedMemPerBlock; 
# 2202
int regsPerBlock; 
# 2203
int warpSize; 
# 2204
size_t memPitch; 
# 2205
int maxThreadsPerBlock; 
# 2206
int maxThreadsDim[3]; 
# 2207
int maxGridSize[3]; 
# 2208
int clockRate; 
# 2209
size_t totalConstMem; 
# 2210
int major; 
# 2211
int minor; 
# 2212
size_t textureAlignment; 
# 2213
size_t texturePitchAlignment; 
# 2214
int deviceOverlap; 
# 2215
int multiProcessorCount; 
# 2216
int kernelExecTimeoutEnabled; 
# 2217
int integrated; 
# 2218
int canMapHostMemory; 
# 2219
int computeMode; 
# 2220
int maxTexture1D; 
# 2221
int maxTexture1DMipmap; 
# 2222
int maxTexture1DLinear; 
# 2223
int maxTexture2D[2]; 
# 2224
int maxTexture2DMipmap[2]; 
# 2225
int maxTexture2DLinear[3]; 
# 2226
int maxTexture2DGather[2]; 
# 2227
int maxTexture3D[3]; 
# 2228
int maxTexture3DAlt[3]; 
# 2229
int maxTextureCubemap; 
# 2230
int maxTexture1DLayered[2]; 
# 2231
int maxTexture2DLayered[3]; 
# 2232
int maxTextureCubemapLayered[2]; 
# 2233
int maxSurface1D; 
# 2234
int maxSurface2D[2]; 
# 2235
int maxSurface3D[3]; 
# 2236
int maxSurface1DLayered[2]; 
# 2237
int maxSurface2DLayered[3]; 
# 2238
int maxSurfaceCubemap; 
# 2239
int maxSurfaceCubemapLayered[2]; 
# 2240
size_t surfaceAlignment; 
# 2241
int concurrentKernels; 
# 2242
int ECCEnabled; 
# 2243
int pciBusID; 
# 2244
int pciDeviceID; 
# 2245
int pciDomainID; 
# 2246
int tccDriver; 
# 2247
int asyncEngineCount; 
# 2248
int unifiedAddressing; 
# 2249
int memoryClockRate; 
# 2250
int memoryBusWidth; 
# 2251
int l2CacheSize; 
# 2252
int persistingL2CacheMaxSize; 
# 2253
int maxThreadsPerMultiProcessor; 
# 2254
int streamPrioritiesSupported; 
# 2255
int globalL1CacheSupported; 
# 2256
int localL1CacheSupported; 
# 2257
size_t sharedMemPerMultiprocessor; 
# 2258
int regsPerMultiprocessor; 
# 2259
int managedMemory; 
# 2260
int isMultiGpuBoard; 
# 2261
int multiGpuBoardGroupID; 
# 2262
int hostNativeAtomicSupported; 
# 2263
int singleToDoublePrecisionPerfRatio; 
# 2264
int pageableMemoryAccess; 
# 2265
int concurrentManagedAccess; 
# 2266
int computePreemptionSupported; 
# 2267
int canUseHostPointerForRegisteredMem; 
# 2268
int cooperativeLaunch; 
# 2269
int cooperativeMultiDeviceLaunch; 
# 2270
size_t sharedMemPerBlockOptin; 
# 2271
int pageableMemoryAccessUsesHostPageTables; 
# 2272
int directManagedMemAccessFromHost; 
# 2273
int maxBlocksPerMultiProcessor; 
# 2274
int accessPolicyMaxWindowSize; 
# 2275
size_t reservedSharedMemPerBlock; 
# 2276
int hostRegisterSupported; 
# 2277
int sparseCudaArraySupported; 
# 2278
int hostRegisterReadOnlySupported; 
# 2279
int timelineSemaphoreInteropSupported; 
# 2280
int memoryPoolsSupported; 
# 2281
int gpuDirectRDMASupported; 
# 2282
unsigned gpuDirectRDMAFlushWritesOptions; 
# 2283
int gpuDirectRDMAWritesOrdering; 
# 2284
unsigned memoryPoolSupportedHandleTypes; 
# 2285
int deferredMappingCudaArraySupported; 
# 2286
int ipcEventSupported; 
# 2287
int clusterLaunch; 
# 2288
int unifiedFunctionPointers; 
# 2289
int reserved2[2]; 
# 2290
int reserved[61]; 
# 2291
}; 
#endif
# 2304 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef 
# 2301
struct cudaIpcEventHandle_st { 
# 2303
char reserved[64]; 
# 2304
} cudaIpcEventHandle_t; 
#endif
# 2312 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef 
# 2309
struct cudaIpcMemHandle_st { 
# 2311
char reserved[64]; 
# 2312
} cudaIpcMemHandle_t; 
#endif
# 2317 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2317
enum cudaExternalMemoryHandleType { 
# 2321
cudaExternalMemoryHandleTypeOpaqueFd = 1, 
# 2325
cudaExternalMemoryHandleTypeOpaqueWin32, 
# 2329
cudaExternalMemoryHandleTypeOpaqueWin32Kmt, 
# 2333
cudaExternalMemoryHandleTypeD3D12Heap, 
# 2337
cudaExternalMemoryHandleTypeD3D12Resource, 
# 2341
cudaExternalMemoryHandleTypeD3D11Resource, 
# 2345
cudaExternalMemoryHandleTypeD3D11ResourceKmt, 
# 2349
cudaExternalMemoryHandleTypeNvSciBuf
# 2350
}; 
#endif
# 2392 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2392
struct cudaExternalMemoryHandleDesc { 
# 2396
cudaExternalMemoryHandleType type; 
# 2397
union { 
# 2403
int fd; 
# 2419 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
struct { 
# 2423
void *handle; 
# 2428
const void *name; 
# 2429
} win32; 
# 2434
const void *nvSciBufObject; 
# 2435
} handle; 
# 2439
unsigned long long size; 
# 2443
unsigned flags; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 2444
}; 
#endif
# 2449 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2449
struct cudaExternalMemoryBufferDesc { 
# 2453
unsigned long long offset; 
# 2457
unsigned long long size; 
# 2461
unsigned flags; 
# 2462
}; 
#endif
# 2467 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2467
struct cudaExternalMemoryMipmappedArrayDesc { 
# 2472
unsigned long long offset; 
# 2476
cudaChannelFormatDesc formatDesc; 
# 2480
cudaExtent extent; 
# 2485
unsigned flags; 
# 2489
unsigned numLevels; 
# 2490
}; 
#endif
# 2495 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2495
enum cudaExternalSemaphoreHandleType { 
# 2499
cudaExternalSemaphoreHandleTypeOpaqueFd = 1, 
# 2503
cudaExternalSemaphoreHandleTypeOpaqueWin32, 
# 2507
cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt, 
# 2511
cudaExternalSemaphoreHandleTypeD3D12Fence, 
# 2515
cudaExternalSemaphoreHandleTypeD3D11Fence, 
# 2519
cudaExternalSemaphoreHandleTypeNvSciSync, 
# 2523
cudaExternalSemaphoreHandleTypeKeyedMutex, 
# 2527
cudaExternalSemaphoreHandleTypeKeyedMutexKmt, 
# 2531
cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd, 
# 2535
cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32
# 2536
}; 
#endif
# 2541 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2541
struct cudaExternalSemaphoreHandleDesc { 
# 2545
cudaExternalSemaphoreHandleType type; 
# 2546
union { 
# 2553
int fd; 
# 2569 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
struct { 
# 2573
void *handle; 
# 2578
const void *name; 
# 2579
} win32; 
# 2583
const void *nvSciSyncObj; 
# 2584
} handle; 
# 2588
unsigned flags; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 2589
}; 
#endif
# 2594 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2594
struct cudaExternalSemaphoreSignalParams_v1 { 
# 2595
struct { 
# 2599
struct { 
# 2603
unsigned long long value; 
# 2604
} fence; 
# 2605
union { 
# 2610
void *fence; 
# 2611
unsigned long long reserved; 
# 2612
} nvSciSync; 
# 2616
struct { 
# 2620
unsigned long long key; 
# 2621
} keyedMutex; 
# 2622
} params; 
# 2633 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
unsigned flags; 
# 2634
}; 
#endif
# 2639 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2639
struct cudaExternalSemaphoreWaitParams_v1 { 
# 2640
struct { 
# 2644
struct { 
# 2648
unsigned long long value; 
# 2649
} fence; 
# 2650
union { 
# 2655
void *fence; 
# 2656
unsigned long long reserved; 
# 2657
} nvSciSync; 
# 2661
struct { 
# 2665
unsigned long long key; 
# 2669
unsigned timeoutMs; 
# 2670
} keyedMutex; 
# 2671
} params; 
# 2682 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
unsigned flags; 
# 2683
}; 
#endif
# 2688 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2688
struct cudaExternalSemaphoreSignalParams { 
# 2689
struct { 
# 2693
struct { 
# 2697
unsigned long long value; 
# 2698
} fence; 
# 2699
union { 
# 2704
void *fence; 
# 2705
unsigned long long reserved; 
# 2706
} nvSciSync; 
# 2710
struct { 
# 2714
unsigned long long key; 
# 2715
} keyedMutex; 
# 2716
unsigned reserved[12]; 
# 2717
} params; 
# 2728 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
unsigned flags; 
# 2729
unsigned reserved[16]; 
# 2730
}; 
#endif
# 2735 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2735
struct cudaExternalSemaphoreWaitParams { 
# 2736
struct { 
# 2740
struct { 
# 2744
unsigned long long value; 
# 2745
} fence; 
# 2746
union { 
# 2751
void *fence; 
# 2752
unsigned long long reserved; 
# 2753
} nvSciSync; 
# 2757
struct { 
# 2761
unsigned long long key; 
# 2765
unsigned timeoutMs; 
# 2766
} keyedMutex; 
# 2767
unsigned reserved[10]; 
# 2768
} params; 
# 2779 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
unsigned flags; 
# 2780
unsigned reserved[16]; 
# 2781
}; 
#endif
# 2792 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef cudaError 
# 2792
cudaError_t; 
#endif
# 2797 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUstream_st *
# 2797
cudaStream_t; 
#endif
# 2802 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUevent_st *
# 2802
cudaEvent_t; 
#endif
# 2807 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef cudaGraphicsResource *
# 2807
cudaGraphicsResource_t; 
#endif
# 2812 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUexternalMemory_st *
# 2812
cudaExternalMemory_t; 
#endif
# 2817 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUexternalSemaphore_st *
# 2817
cudaExternalSemaphore_t; 
#endif
# 2822 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUgraph_st *
# 2822
cudaGraph_t; 
#endif
# 2827 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUgraphNode_st *
# 2827
cudaGraphNode_t; 
#endif
# 2832 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUuserObject_st *
# 2832
cudaUserObject_t; 
#endif
# 2837 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUfunc_st *
# 2837
cudaFunction_t; 
#endif
# 2842 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUkern_st *
# 2842
cudaKernel_t; 
#endif
# 2847 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUmemPoolHandle_st *
# 2847
cudaMemPool_t; 
#endif
# 2852 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2852
enum cudaCGScope { 
# 2853
cudaCGScopeInvalid, 
# 2854
cudaCGScopeGrid, 
# 2855
cudaCGScopeMultiGrid
# 2856
}; 
#endif
# 2861 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2861
struct cudaLaunchParams { 
# 2863
void *func; 
# 2864
dim3 gridDim; 
# 2865
dim3 blockDim; 
# 2866
void **args; 
# 2867
size_t sharedMem; 
# 2868
cudaStream_t stream; 
# 2869
}; 
#endif
# 2874 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2874
struct cudaKernelNodeParams { 
# 2875
void *func; 
# 2876
dim3 gridDim; 
# 2877
dim3 blockDim; 
# 2878
unsigned sharedMemBytes; 
# 2879
void **kernelParams; 
# 2880
void **extra; 
# 2881
}; 
#endif
# 2886 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2886
struct cudaExternalSemaphoreSignalNodeParams { 
# 2887
cudaExternalSemaphore_t *extSemArray; 
# 2888
const cudaExternalSemaphoreSignalParams *paramsArray; 
# 2889
unsigned numExtSems; 
# 2890
}; 
#endif
# 2895 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2895
struct cudaExternalSemaphoreWaitNodeParams { 
# 2896
cudaExternalSemaphore_t *extSemArray; 
# 2897
const cudaExternalSemaphoreWaitParams *paramsArray; 
# 2898
unsigned numExtSems; 
# 2899
}; 
#endif
# 2904 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2904
enum cudaGraphNodeType { 
# 2905
cudaGraphNodeTypeKernel, 
# 2906
cudaGraphNodeTypeMemcpy, 
# 2907
cudaGraphNodeTypeMemset, 
# 2908
cudaGraphNodeTypeHost, 
# 2909
cudaGraphNodeTypeGraph, 
# 2910
cudaGraphNodeTypeEmpty, 
# 2911
cudaGraphNodeTypeWaitEvent, 
# 2912
cudaGraphNodeTypeEventRecord, 
# 2913
cudaGraphNodeTypeExtSemaphoreSignal, 
# 2914
cudaGraphNodeTypeExtSemaphoreWait, 
# 2915
cudaGraphNodeTypeMemAlloc, 
# 2916
cudaGraphNodeTypeMemFree, 
# 2917
cudaGraphNodeTypeCount
# 2918
}; 
#endif
# 2923 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
typedef struct CUgraphExec_st *cudaGraphExec_t; 
# 2928
#if 0
# 2928
enum cudaGraphExecUpdateResult { 
# 2929
cudaGraphExecUpdateSuccess, 
# 2930
cudaGraphExecUpdateError, 
# 2931
cudaGraphExecUpdateErrorTopologyChanged, 
# 2932
cudaGraphExecUpdateErrorNodeTypeChanged, 
# 2933
cudaGraphExecUpdateErrorFunctionChanged, 
# 2934
cudaGraphExecUpdateErrorParametersChanged, 
# 2935
cudaGraphExecUpdateErrorNotSupported, 
# 2936
cudaGraphExecUpdateErrorUnsupportedFunctionChange, 
# 2937
cudaGraphExecUpdateErrorAttributesChanged
# 2938
}; 
#endif
# 2949 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef 
# 2943
enum cudaGraphInstantiateResult { 
# 2944
cudaGraphInstantiateSuccess, 
# 2945
cudaGraphInstantiateError, 
# 2946
cudaGraphInstantiateInvalidStructure, 
# 2947
cudaGraphInstantiateNodeOperationNotSupported, 
# 2948
cudaGraphInstantiateMultipleDevicesNotSupported
# 2949
} cudaGraphInstantiateResult; 
#endif
# 2960 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef 
# 2954
struct cudaGraphInstantiateParams_st { 
# 2956
unsigned long long flags; 
# 2957
cudaStream_t uploadStream; 
# 2958
cudaGraphNode_t errNode_out; 
# 2959
cudaGraphInstantiateResult result_out; 
# 2960
} cudaGraphInstantiateParams; 
#endif
# 2982 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef 
# 2965
struct cudaGraphExecUpdateResultInfo_st { 
# 2969
cudaGraphExecUpdateResult result; 
# 2976
cudaGraphNode_t errorNode; 
# 2981
cudaGraphNode_t errorFromNode; 
# 2982
} cudaGraphExecUpdateResultInfo; 
#endif
# 2988 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2988
enum cudaGetDriverEntryPointFlags { 
# 2989
cudaEnableDefault, 
# 2990
cudaEnableLegacyStream, 
# 2991
cudaEnablePerThreadDefaultStream
# 2992
}; 
#endif
# 2997 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2997
enum cudaDriverEntryPointQueryResult { 
# 2998
cudaDriverEntryPointSuccess, 
# 2999
cudaDriverEntryPointSymbolNotFound, 
# 3000
cudaDriverEntryPointVersionNotSufficent
# 3001
}; 
#endif
# 3006 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 3006
enum cudaGraphDebugDotFlags { 
# 3007
cudaGraphDebugDotFlagsVerbose = (1 << 0), 
# 3008
cudaGraphDebugDotFlagsKernelNodeParams = (1 << 2), 
# 3009
cudaGraphDebugDotFlagsMemcpyNodeParams = (1 << 3), 
# 3010
cudaGraphDebugDotFlagsMemsetNodeParams = (1 << 4), 
# 3011
cudaGraphDebugDotFlagsHostNodeParams = (1 << 5), 
# 3012
cudaGraphDebugDotFlagsEventNodeParams = (1 << 6), 
# 3013
cudaGraphDebugDotFlagsExtSemasSignalNodeParams = (1 << 7), 
# 3014
cudaGraphDebugDotFlagsExtSemasWaitNodeParams = (1 << 8), 
# 3015
cudaGraphDebugDotFlagsKernelNodeAttributes = (1 << 9), 
# 3016
cudaGraphDebugDotFlagsHandles = (1 << 10)
# 3017
}; 
#endif
# 3022 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 3022
enum cudaGraphInstantiateFlags { 
# 3023
cudaGraphInstantiateFlagAutoFreeOnLaunch = 1, 
# 3024
cudaGraphInstantiateFlagUpload, 
# 3025
cudaGraphInstantiateFlagDeviceLaunch = 4, 
# 3026
cudaGraphInstantiateFlagUseNodePriority = 8
# 3028
}; 
#endif
# 3033 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef 
# 3030
enum cudaLaunchMemSyncDomain { 
# 3031
cudaLaunchMemSyncDomainDefault, 
# 3032
cudaLaunchMemSyncDomainRemote
# 3033
} cudaLaunchMemSyncDomain; 
#endif
# 3038 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef 
# 3035
struct cudaLaunchMemSyncDomainMap_st { 
# 3036
unsigned char default_; 
# 3037
unsigned char remote; 
# 3038
} cudaLaunchMemSyncDomainMap; 
#endif
# 3084 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef 
# 3043 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
enum cudaLaunchAttributeID { 
# 3044
cudaLaunchAttributeIgnore, 
# 3045
cudaLaunchAttributeAccessPolicyWindow, 
# 3046
cudaLaunchAttributeCooperative, 
# 3047
cudaLaunchAttributeSynchronizationPolicy, 
# 3048
cudaLaunchAttributeClusterDimension, 
# 3049
cudaLaunchAttributeClusterSchedulingPolicyPreference, 
# 3050
cudaLaunchAttributeProgrammaticStreamSerialization, 
# 3061 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaLaunchAttributeProgrammaticEvent, 
# 3081 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaLaunchAttributePriority, 
# 3082
cudaLaunchAttributeMemSyncDomainMap, 
# 3083
cudaLaunchAttributeMemSyncDomain
# 3084
} cudaLaunchAttributeID; 
#endif
# 3109 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef 
# 3089
union cudaLaunchAttributeValue { 
# 3090
char pad[64]; 
# 3091
cudaAccessPolicyWindow accessPolicyWindow; 
# 3092
int cooperative; 
# 3093
cudaSynchronizationPolicy syncPolicy; 
# 3094
struct { 
# 3095
unsigned x; 
# 3096
unsigned y; 
# 3097
unsigned z; 
# 3098
} clusterDim; 
# 3099
cudaClusterSchedulingPolicy clusterSchedulingPolicyPreference; 
# 3100
int programmaticStreamSerializationAllowed; 
# 3101
struct { 
# 3102
cudaEvent_t event; 
# 3103
int flags; 
# 3104
int triggerAtBlockStart; 
# 3105
} programmaticEvent; 
# 3106
int priority; 
# 3107
cudaLaunchMemSyncDomainMap memSyncDomainMap; 
# 3108
cudaLaunchMemSyncDomain memSyncDomain; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 3109
} cudaLaunchAttributeValue; 
#endif
# 3118 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef 
# 3114
struct cudaLaunchAttribute_st { 
# 3115
cudaLaunchAttributeID id; 
# 3116
char pad[(8) - sizeof(cudaLaunchAttributeID)]; 
# 3117
cudaLaunchAttributeValue val; 
# 3118
} cudaLaunchAttribute; 
#endif
# 3130 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef 
# 3123
struct cudaLaunchConfig_st { 
# 3124
dim3 gridDim; 
# 3125
dim3 blockDim; 
# 3126
size_t dynamicSmemBytes; 
# 3127
cudaStream_t stream; 
# 3128
cudaLaunchAttribute *attrs; 
# 3129
unsigned numAttrs; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 3130
} cudaLaunchConfig_t; 
#endif
# 84 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_types.h"
#if 0
# 84
enum cudaSurfaceBoundaryMode { 
# 86
cudaBoundaryModeZero, 
# 87
cudaBoundaryModeClamp, 
# 88
cudaBoundaryModeTrap
# 89
}; 
#endif
# 94 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_types.h"
#if 0
# 94
enum cudaSurfaceFormatMode { 
# 96
cudaFormatModeForced, 
# 97
cudaFormatModeAuto
# 98
}; 
#endif
# 103 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_types.h"
#if 0
typedef unsigned long long 
# 103
cudaSurfaceObject_t; 
#endif
# 84 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_types.h"
#if 0
# 84
enum cudaTextureAddressMode { 
# 86
cudaAddressModeWrap, 
# 87
cudaAddressModeClamp, 
# 88
cudaAddressModeMirror, 
# 89
cudaAddressModeBorder
# 90
}; 
#endif
# 95 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_types.h"
#if 0
# 95
enum cudaTextureFilterMode { 
# 97
cudaFilterModePoint, 
# 98
cudaFilterModeLinear
# 99
}; 
#endif
# 104 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_types.h"
#if 0
# 104
enum cudaTextureReadMode { 
# 106
cudaReadModeElementType, 
# 107
cudaReadModeNormalizedFloat
# 108
}; 
#endif
# 113 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_types.h"
#if 0
# 113
struct cudaTextureDesc { 
# 118
cudaTextureAddressMode addressMode[3]; 
# 122
cudaTextureFilterMode filterMode; 
# 126
cudaTextureReadMode readMode; 
# 130
int sRGB; 
# 134
float borderColor[4]; 
# 138
int normalizedCoords; 
# 142
unsigned maxAnisotropy; 
# 146
cudaTextureFilterMode mipmapFilterMode; 
# 150
float mipmapLevelBias; 
# 154
float minMipmapLevelClamp; 
# 158
float maxMipmapLevelClamp; 
# 162
int disableTrilinearOptimization; 
# 166
int seamlessCubemap; 
# 167
}; 
#endif
# 172 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_types.h"
#if 0
typedef unsigned long long 
# 172
cudaTextureObject_t; 
#endif
# 87 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/library_types.h"
typedef 
# 55
enum cudaDataType_t { 
# 57
CUDA_R_16F = 2, 
# 58
CUDA_C_16F = 6, 
# 59
CUDA_R_16BF = 14, 
# 60
CUDA_C_16BF, 
# 61
CUDA_R_32F = 0, 
# 62
CUDA_C_32F = 4, 
# 63
CUDA_R_64F = 1, 
# 64
CUDA_C_64F = 5, 
# 65
CUDA_R_4I = 16, 
# 66
CUDA_C_4I, 
# 67
CUDA_R_4U, 
# 68
CUDA_C_4U, 
# 69
CUDA_R_8I = 3, 
# 70
CUDA_C_8I = 7, 
# 71
CUDA_R_8U, 
# 72
CUDA_C_8U, 
# 73
CUDA_R_16I = 20, 
# 74
CUDA_C_16I, 
# 75
CUDA_R_16U, 
# 76
CUDA_C_16U, 
# 77
CUDA_R_32I = 10, 
# 78
CUDA_C_32I, 
# 79
CUDA_R_32U, 
# 80
CUDA_C_32U, 
# 81
CUDA_R_64I = 24, 
# 82
CUDA_C_64I, 
# 83
CUDA_R_64U, 
# 84
CUDA_C_64U, 
# 85
CUDA_R_8F_E4M3, 
# 86
CUDA_R_8F_E5M2
# 87
} cudaDataType; 
# 95
typedef 
# 90
enum libraryPropertyType_t { 
# 92
MAJOR_VERSION, 
# 93
MINOR_VERSION, 
# 94
PATCH_LEVEL
# 95
} libraryPropertyType; 
# 256 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 3
namespace std { 
# 258
typedef unsigned long size_t; 
# 259
typedef long ptrdiff_t; 
# 262
typedef __decltype((nullptr)) nullptr_t; 
# 264
}
# 278 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 3
namespace std { 
# 280
inline namespace __cxx11 __attribute((__abi_tag__("cxx11"))) { }
# 281
}
# 282
namespace __gnu_cxx { 
# 284
inline namespace __cxx11 __attribute((__abi_tag__("cxx11"))) { }
# 285
}
# 33 "/usr/include/stdlib.h" 3
extern "C" {
# 57 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3
typedef 
# 53
enum { 
# 54
P_ALL, 
# 55
P_PID, 
# 56
P_PGID
# 57
} idtype_t; 
# 214 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3
typedef float _Float32; 
# 251 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3
typedef double _Float64; 
# 268 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3
typedef double _Float32x; 
# 285 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3
typedef long double _Float64x; 
# 62 "/usr/include/stdlib.h" 3
typedef 
# 59
struct { 
# 60
int quot; 
# 61
int rem; 
# 62
} div_t; 
# 70
typedef 
# 67
struct { 
# 68
long quot; 
# 69
long rem; 
# 70
} ldiv_t; 
# 80
__extension__ typedef 
# 77
struct { 
# 78
long long quot; 
# 79
long long rem; 
# 80
} lldiv_t; 
# 97 "/usr/include/stdlib.h" 3
extern size_t __ctype_get_mb_cur_max() throw(); 
# 101
extern double atof(const char * __nptr) throw()
# 102
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 104
extern int atoi(const char * __nptr) throw()
# 105
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 107
extern long atol(const char * __nptr) throw()
# 108
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 112
__extension__ extern long long atoll(const char * __nptr) throw()
# 113
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 117
extern double strtod(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 119
 __attribute((__nonnull__(1))); 
# 123
extern float strtof(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 124
 __attribute((__nonnull__(1))); 
# 126
extern long double strtold(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 128
 __attribute((__nonnull__(1))); 
# 140 "/usr/include/stdlib.h" 3
extern _Float32 strtof32(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 142
 __attribute((__nonnull__(1))); 
# 146
extern _Float64 strtof64(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 148
 __attribute((__nonnull__(1))); 
# 158 "/usr/include/stdlib.h" 3
extern _Float32x strtof32x(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 160
 __attribute((__nonnull__(1))); 
# 164
extern _Float64x strtof64x(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 166
 __attribute((__nonnull__(1))); 
# 176 "/usr/include/stdlib.h" 3
extern long strtol(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 178
 __attribute((__nonnull__(1))); 
# 180
extern unsigned long strtoul(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 182
 __attribute((__nonnull__(1))); 
# 187
__extension__ extern long long strtoq(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 189
 __attribute((__nonnull__(1))); 
# 192
__extension__ extern unsigned long long strtouq(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 194
 __attribute((__nonnull__(1))); 
# 200
__extension__ extern long long strtoll(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 202
 __attribute((__nonnull__(1))); 
# 205
__extension__ extern unsigned long long strtoull(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 207
 __attribute((__nonnull__(1))); 
# 212
extern int strfromd(char * __dest, size_t __size, const char * __format, double __f) throw()
# 214
 __attribute((__nonnull__(3))); 
# 216
extern int strfromf(char * __dest, size_t __size, const char * __format, float __f) throw()
# 218
 __attribute((__nonnull__(3))); 
# 220
extern int strfroml(char * __dest, size_t __size, const char * __format, long double __f) throw()
# 222
 __attribute((__nonnull__(3))); 
# 232 "/usr/include/stdlib.h" 3
extern int strfromf32(char * __dest, size_t __size, const char * __format, _Float32 __f) throw()
# 234
 __attribute((__nonnull__(3))); 
# 238
extern int strfromf64(char * __dest, size_t __size, const char * __format, _Float64 __f) throw()
# 240
 __attribute((__nonnull__(3))); 
# 250 "/usr/include/stdlib.h" 3
extern int strfromf32x(char * __dest, size_t __size, const char * __format, _Float32x __f) throw()
# 252
 __attribute((__nonnull__(3))); 
# 256
extern int strfromf64x(char * __dest, size_t __size, const char * __format, _Float64x __f) throw()
# 258
 __attribute((__nonnull__(3))); 
# 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3
struct __locale_struct { 
# 31
struct __locale_data *__locales[13]; 
# 34
const unsigned short *__ctype_b; 
# 35
const int *__ctype_tolower; 
# 36
const int *__ctype_toupper; 
# 39
const char *__names[13]; 
# 40
}; 
# 42
typedef __locale_struct *__locale_t; 
# 24 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3
typedef __locale_t locale_t; 
# 274 "/usr/include/stdlib.h" 3
extern long strtol_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) throw()
# 276
 __attribute((__nonnull__(1, 4))); 
# 278
extern unsigned long strtoul_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) throw()
# 281
 __attribute((__nonnull__(1, 4))); 
# 284
__extension__ extern long long strtoll_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) throw()
# 287
 __attribute((__nonnull__(1, 4))); 
# 290
__extension__ extern unsigned long long strtoull_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) throw()
# 293
 __attribute((__nonnull__(1, 4))); 
# 295
extern double strtod_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 297
 __attribute((__nonnull__(1, 3))); 
# 299
extern float strtof_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 301
 __attribute((__nonnull__(1, 3))); 
# 303
extern long double strtold_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 306
 __attribute((__nonnull__(1, 3))); 
# 316 "/usr/include/stdlib.h" 3
extern _Float32 strtof32_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 319
 __attribute((__nonnull__(1, 3))); 
# 323
extern _Float64 strtof64_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 326
 __attribute((__nonnull__(1, 3))); 
# 337 "/usr/include/stdlib.h" 3
extern _Float32x strtof32x_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 340
 __attribute((__nonnull__(1, 3))); 
# 344
extern _Float64x strtof64x_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) throw()
# 347
 __attribute((__nonnull__(1, 3))); 
# 385 "/usr/include/stdlib.h" 3
extern char *l64a(long __n) throw(); 
# 388
extern long a64l(const char * __s) throw()
# 389
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
extern "C" {
# 31 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned char __u_char; 
# 32
typedef unsigned short __u_short; 
# 33
typedef unsigned __u_int; 
# 34
typedef unsigned long __u_long; 
# 37
typedef signed char __int8_t; 
# 38
typedef unsigned char __uint8_t; 
# 39
typedef signed short __int16_t; 
# 40
typedef unsigned short __uint16_t; 
# 41
typedef signed int __int32_t; 
# 42
typedef unsigned __uint32_t; 
# 44
typedef signed long __int64_t; 
# 45
typedef unsigned long __uint64_t; 
# 52
typedef __int8_t __int_least8_t; 
# 53
typedef __uint8_t __uint_least8_t; 
# 54
typedef __int16_t __int_least16_t; 
# 55
typedef __uint16_t __uint_least16_t; 
# 56
typedef __int32_t __int_least32_t; 
# 57
typedef __uint32_t __uint_least32_t; 
# 58
typedef __int64_t __int_least64_t; 
# 59
typedef __uint64_t __uint_least64_t; 
# 63
typedef long __quad_t; 
# 64
typedef unsigned long __u_quad_t; 
# 72
typedef long __intmax_t; 
# 73
typedef unsigned long __uintmax_t; 
# 145 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned long __dev_t; 
# 146
typedef unsigned __uid_t; 
# 147
typedef unsigned __gid_t; 
# 148
typedef unsigned long __ino_t; 
# 149
typedef unsigned long __ino64_t; 
# 150
typedef unsigned __mode_t; 
# 151
typedef unsigned long __nlink_t; 
# 152
typedef long __off_t; 
# 153
typedef long __off64_t; 
# 154
typedef int __pid_t; 
# 155
typedef struct { int __val[2]; } __fsid_t; 
# 156
typedef long __clock_t; 
# 157
typedef unsigned long __rlim_t; 
# 158
typedef unsigned long __rlim64_t; 
# 159
typedef unsigned __id_t; 
# 160
typedef long __time_t; 
# 161
typedef unsigned __useconds_t; 
# 162
typedef long __suseconds_t; 
# 164
typedef int __daddr_t; 
# 165
typedef int __key_t; 
# 168
typedef int __clockid_t; 
# 171
typedef void *__timer_t; 
# 174
typedef long __blksize_t; 
# 179
typedef long __blkcnt_t; 
# 180
typedef long __blkcnt64_t; 
# 183
typedef unsigned long __fsblkcnt_t; 
# 184
typedef unsigned long __fsblkcnt64_t; 
# 187
typedef unsigned long __fsfilcnt_t; 
# 188
typedef unsigned long __fsfilcnt64_t; 
# 191
typedef long __fsword_t; 
# 193
typedef long __ssize_t; 
# 196
typedef long __syscall_slong_t; 
# 198
typedef unsigned long __syscall_ulong_t; 
# 202
typedef __off64_t __loff_t; 
# 203
typedef char *__caddr_t; 
# 206
typedef long __intptr_t; 
# 209
typedef unsigned __socklen_t; 
# 214
typedef int __sig_atomic_t; 
# 33 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __u_char u_char; 
# 34
typedef __u_short u_short; 
# 35
typedef __u_int u_int; 
# 36
typedef __u_long u_long; 
# 37
typedef __quad_t quad_t; 
# 38
typedef __u_quad_t u_quad_t; 
# 39
typedef __fsid_t fsid_t; 
# 42
typedef __loff_t loff_t; 
# 47
typedef __ino_t ino_t; 
# 54
typedef __ino64_t ino64_t; 
# 59
typedef __dev_t dev_t; 
# 64
typedef __gid_t gid_t; 
# 69
typedef __mode_t mode_t; 
# 74
typedef __nlink_t nlink_t; 
# 79
typedef __uid_t uid_t; 
# 85
typedef __off_t off_t; 
# 92
typedef __off64_t off64_t; 
# 97
typedef __pid_t pid_t; 
# 103
typedef __id_t id_t; 
# 108
typedef __ssize_t ssize_t; 
# 114
typedef __daddr_t daddr_t; 
# 115
typedef __caddr_t caddr_t; 
# 121
typedef __key_t key_t; 
# 7 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 3
typedef __clock_t clock_t; 
# 7 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 3
typedef __clockid_t clockid_t; 
# 7 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 3
typedef __time_t time_t; 
# 7 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 3
typedef __timer_t timer_t; 
# 134 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __useconds_t useconds_t; 
# 138
typedef __suseconds_t suseconds_t; 
# 148 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef unsigned long ulong; 
# 149
typedef unsigned short ushort; 
# 150
typedef unsigned uint; 
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3
typedef __int8_t int8_t; 
# 25
typedef __int16_t int16_t; 
# 26
typedef __int32_t int32_t; 
# 27
typedef __int64_t int64_t; 
# 158 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __uint8_t u_int8_t; 
# 159
typedef __uint16_t u_int16_t; 
# 160
typedef __uint32_t u_int32_t; 
# 161
typedef __uint64_t u_int64_t; 
# 164
typedef long register_t __attribute((__mode__(__word__))); 
# 34 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3
static inline __uint16_t __bswap_16(__uint16_t __bsx) 
# 35
{ 
# 37
return __builtin_bswap16(__bsx); 
# 41
} 
# 49
static inline __uint32_t __bswap_32(__uint32_t __bsx) 
# 50
{ 
# 52
return __builtin_bswap32(__bsx); 
# 56
} 
# 70 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3
__extension__ static inline __uint64_t __bswap_64(__uint64_t __bsx) 
# 71
{ 
# 73
return __builtin_bswap64(__bsx); 
# 77
} 
# 33 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3
static inline __uint16_t __uint16_identity(__uint16_t __x) 
# 34
{ 
# 35
return __x; 
# 36
} 
# 39
static inline __uint32_t __uint32_identity(__uint32_t __x) 
# 40
{ 
# 41
return __x; 
# 42
} 
# 45
static inline __uint64_t __uint64_identity(__uint64_t __x) 
# 46
{ 
# 47
return __x; 
# 48
} 
# 8 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 3
typedef 
# 6
struct { 
# 7
unsigned long __val[(1024) / ((8) * sizeof(unsigned long))]; 
# 8
} __sigset_t; 
# 7 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 3
typedef __sigset_t sigset_t; 
# 8 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 3
struct timeval { 
# 10
__time_t tv_sec; 
# 11
__suseconds_t tv_usec; 
# 12
}; 
# 10 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3
struct timespec { 
# 12
__time_t tv_sec; 
# 16
__syscall_slong_t tv_nsec; 
# 26 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3
}; 
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
typedef long __fd_mask; 
# 70 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
typedef 
# 60
struct { 
# 64
__fd_mask fds_bits[1024 / (8 * ((int)sizeof(__fd_mask)))]; 
# 70
} fd_set; 
# 77
typedef __fd_mask fd_mask; 
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern "C" {
# 101 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern int select(int __nfds, fd_set *__restrict__ __readfds, fd_set *__restrict__ __writefds, fd_set *__restrict__ __exceptfds, timeval *__restrict__ __timeout); 
# 113 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern int pselect(int __nfds, fd_set *__restrict__ __readfds, fd_set *__restrict__ __writefds, fd_set *__restrict__ __exceptfds, const timespec *__restrict__ __timeout, const __sigset_t *__restrict__ __sigmask); 
# 126 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
}
# 185 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __blksize_t blksize_t; 
# 192
typedef __blkcnt_t blkcnt_t; 
# 196
typedef __fsblkcnt_t fsblkcnt_t; 
# 200
typedef __fsfilcnt_t fsfilcnt_t; 
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __blkcnt64_t blkcnt64_t; 
# 220
typedef __fsblkcnt64_t fsblkcnt64_t; 
# 221
typedef __fsfilcnt64_t fsfilcnt64_t; 
# 53 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3
typedef 
# 49
struct __pthread_internal_list { 
# 51
__pthread_internal_list *__prev; 
# 52
__pthread_internal_list *__next; 
# 53
} __pthread_list_t; 
# 58
typedef 
# 55
struct __pthread_internal_slist { 
# 57
__pthread_internal_slist *__next; 
# 58
} __pthread_slist_t; 
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3
struct __pthread_mutex_s { 
# 24
int __lock; 
# 25
unsigned __count; 
# 26
int __owner; 
# 28
unsigned __nusers; 
# 32
int __kind; 
# 34
short __spins; 
# 35
short __elision; 
# 36
__pthread_list_t __list; 
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3
}; 
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3
struct __pthread_rwlock_arch_t { 
# 25
unsigned __readers; 
# 26
unsigned __writers; 
# 27
unsigned __wrphase_futex; 
# 28
unsigned __writers_futex; 
# 29
unsigned __pad3; 
# 30
unsigned __pad4; 
# 32
int __cur_writer; 
# 33
int __shared; 
# 34
signed char __rwelision; 
# 39
unsigned char __pad1[7]; 
# 42
unsigned long __pad2; 
# 45
unsigned __flags; 
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3
}; 
# 92 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3
struct __pthread_cond_s { 
# 95
union { 
# 96
__extension__ unsigned long long __wseq; 
# 98
struct { 
# 99
unsigned __low; 
# 100
unsigned __high; 
# 101
} __wseq32; 
# 102
}; 
# 104
union { 
# 105
__extension__ unsigned long long __g1_start; 
# 107
struct { 
# 108
unsigned __low; 
# 109
unsigned __high; 
# 110
} __g1_start32; 
# 111
}; 
# 112
unsigned __g_refs[2]; 
# 113
unsigned __g_size[2]; 
# 114
unsigned __g1_orig_size; 
# 115
unsigned __wrefs; 
# 116
unsigned __g_signals[2]; 
# 117
}; 
# 27 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
typedef unsigned long pthread_t; 
# 36
typedef 
# 33
union { 
# 34
char __size[4]; 
# 35
int __align; 
# 36
} pthread_mutexattr_t; 
# 45
typedef 
# 42
union { 
# 43
char __size[4]; 
# 44
int __align; 
# 45
} pthread_condattr_t; 
# 49
typedef unsigned pthread_key_t; 
# 53
typedef int pthread_once_t; 
# 56
union pthread_attr_t { 
# 58
char __size[56]; 
# 59
long __align; 
# 60
}; 
# 62
typedef pthread_attr_t pthread_attr_t; 
# 72
typedef 
# 68
union { 
# 69
__pthread_mutex_s __data; 
# 70
char __size[40]; 
# 71
long __align; 
# 72
} pthread_mutex_t; 
# 80
typedef 
# 76
union { 
# 77
__pthread_cond_s __data; 
# 78
char __size[48]; 
# 79
__extension__ long long __align; 
# 80
} pthread_cond_t; 
# 91
typedef 
# 87
union { 
# 88
__pthread_rwlock_arch_t __data; 
# 89
char __size[56]; 
# 90
long __align; 
# 91
} pthread_rwlock_t; 
# 97
typedef 
# 94
union { 
# 95
char __size[8]; 
# 96
long __align; 
# 97
} pthread_rwlockattr_t; 
# 103
typedef volatile int pthread_spinlock_t; 
# 112
typedef 
# 109
union { 
# 110
char __size[32]; 
# 111
long __align; 
# 112
} pthread_barrier_t; 
# 118
typedef 
# 115
union { 
# 116
char __size[4]; 
# 117
int __align; 
# 118
} pthread_barrierattr_t; 
# 230 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
}
# 401 "/usr/include/stdlib.h" 3
extern long random() throw(); 
# 404
extern void srandom(unsigned __seed) throw(); 
# 410
extern char *initstate(unsigned __seed, char * __statebuf, size_t __statelen) throw()
# 411
 __attribute((__nonnull__(2))); 
# 415
extern char *setstate(char * __statebuf) throw() __attribute((__nonnull__(1))); 
# 423
struct random_data { 
# 425
int32_t *fptr; 
# 426
int32_t *rptr; 
# 427
int32_t *state; 
# 428
int rand_type; 
# 429
int rand_deg; 
# 430
int rand_sep; 
# 431
int32_t *end_ptr; 
# 432
}; 
# 434
extern int random_r(random_data *__restrict__ __buf, int32_t *__restrict__ __result) throw()
# 435
 __attribute((__nonnull__(1, 2))); 
# 437
extern int srandom_r(unsigned __seed, random_data * __buf) throw()
# 438
 __attribute((__nonnull__(2))); 
# 440
extern int initstate_r(unsigned __seed, char *__restrict__ __statebuf, size_t __statelen, random_data *__restrict__ __buf) throw()
# 443
 __attribute((__nonnull__(2, 4))); 
# 445
extern int setstate_r(char *__restrict__ __statebuf, random_data *__restrict__ __buf) throw()
# 447
 __attribute((__nonnull__(1, 2))); 
# 453
extern int rand() throw(); 
# 455
extern void srand(unsigned __seed) throw(); 
# 459
extern int rand_r(unsigned * __seed) throw(); 
# 467
extern double drand48() throw(); 
# 468
extern double erand48(unsigned short  __xsubi[3]) throw() __attribute((__nonnull__(1))); 
# 471
extern long lrand48() throw(); 
# 472
extern long nrand48(unsigned short  __xsubi[3]) throw()
# 473
 __attribute((__nonnull__(1))); 
# 476
extern long mrand48() throw(); 
# 477
extern long jrand48(unsigned short  __xsubi[3]) throw()
# 478
 __attribute((__nonnull__(1))); 
# 481
extern void srand48(long __seedval) throw(); 
# 482
extern unsigned short *seed48(unsigned short  __seed16v[3]) throw()
# 483
 __attribute((__nonnull__(1))); 
# 484
extern void lcong48(unsigned short  __param[7]) throw() __attribute((__nonnull__(1))); 
# 490
struct drand48_data { 
# 492
unsigned short __x[3]; 
# 493
unsigned short __old_x[3]; 
# 494
unsigned short __c; 
# 495
unsigned short __init; 
# 496
__extension__ unsigned long long __a; 
# 498
}; 
# 501
extern int drand48_r(drand48_data *__restrict__ __buffer, double *__restrict__ __result) throw()
# 502
 __attribute((__nonnull__(1, 2))); 
# 503
extern int erand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, double *__restrict__ __result) throw()
# 505
 __attribute((__nonnull__(1, 2))); 
# 508
extern int lrand48_r(drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 510
 __attribute((__nonnull__(1, 2))); 
# 511
extern int nrand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 514
 __attribute((__nonnull__(1, 2))); 
# 517
extern int mrand48_r(drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 519
 __attribute((__nonnull__(1, 2))); 
# 520
extern int jrand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 523
 __attribute((__nonnull__(1, 2))); 
# 526
extern int srand48_r(long __seedval, drand48_data * __buffer) throw()
# 527
 __attribute((__nonnull__(2))); 
# 529
extern int seed48_r(unsigned short  __seed16v[3], drand48_data * __buffer) throw()
# 530
 __attribute((__nonnull__(1, 2))); 
# 532
extern int lcong48_r(unsigned short  __param[7], drand48_data * __buffer) throw()
# 534
 __attribute((__nonnull__(1, 2))); 
# 539
extern void *malloc(size_t __size) throw() __attribute((__malloc__))
# 540
 __attribute((__alloc_size__(1))); 
# 542
extern void *calloc(size_t __nmemb, size_t __size) throw()
# 543
 __attribute((__malloc__)) __attribute((__alloc_size__(1, 2))); 
# 550
extern void *realloc(void * __ptr, size_t __size) throw()
# 551
 __attribute((__warn_unused_result__)) __attribute((__alloc_size__(2))); 
# 559
extern void *reallocarray(void * __ptr, size_t __nmemb, size_t __size) throw()
# 560
 __attribute((__warn_unused_result__))
# 561
 __attribute((__alloc_size__(2, 3))); 
# 565
extern void free(void * __ptr) throw(); 
# 26 "/usr/include/alloca.h" 3
extern "C" {
# 32
extern void *alloca(size_t __size) throw(); 
# 38
}
# 574 "/usr/include/stdlib.h" 3
extern void *valloc(size_t __size) throw() __attribute((__malloc__))
# 575
 __attribute((__alloc_size__(1))); 
# 580
extern int posix_memalign(void ** __memptr, size_t __alignment, size_t __size) throw()
# 581
 __attribute((__nonnull__(1))); 
# 586
extern void *aligned_alloc(size_t __alignment, size_t __size) throw()
# 587
 __attribute((__malloc__)) __attribute((__alloc_size__(2))); 
# 591
extern void abort() throw() __attribute((__noreturn__)); 
# 595
extern int atexit(void (* __func)(void)) throw() __attribute((__nonnull__(1))); 
# 600
extern "C++" int at_quick_exit(void (* __func)(void)) throw() __asm__("at_quick_exit")
# 601
 __attribute((__nonnull__(1))); 
# 610 "/usr/include/stdlib.h" 3
extern int on_exit(void (* __func)(int __status, void * __arg), void * __arg) throw()
# 611
 __attribute((__nonnull__(1))); 
# 617
extern void exit(int __status) throw() __attribute((__noreturn__)); 
# 623
extern void quick_exit(int __status) throw() __attribute((__noreturn__)); 
# 629
extern void _Exit(int __status) throw() __attribute((__noreturn__)); 
# 634
extern char *getenv(const char * __name) throw() __attribute((__nonnull__(1))); 
# 639
extern char *secure_getenv(const char * __name) throw()
# 640
 __attribute((__nonnull__(1))); 
# 647
extern int putenv(char * __string) throw() __attribute((__nonnull__(1))); 
# 653
extern int setenv(const char * __name, const char * __value, int __replace) throw()
# 654
 __attribute((__nonnull__(2))); 
# 657
extern int unsetenv(const char * __name) throw() __attribute((__nonnull__(1))); 
# 664
extern int clearenv() throw(); 
# 675 "/usr/include/stdlib.h" 3
extern char *mktemp(char * __template) throw() __attribute((__nonnull__(1))); 
# 688 "/usr/include/stdlib.h" 3
extern int mkstemp(char * __template) __attribute((__nonnull__(1))); 
# 698 "/usr/include/stdlib.h" 3
extern int mkstemp64(char * __template) __attribute((__nonnull__(1))); 
# 710 "/usr/include/stdlib.h" 3
extern int mkstemps(char * __template, int __suffixlen) __attribute((__nonnull__(1))); 
# 720 "/usr/include/stdlib.h" 3
extern int mkstemps64(char * __template, int __suffixlen)
# 721
 __attribute((__nonnull__(1))); 
# 731 "/usr/include/stdlib.h" 3
extern char *mkdtemp(char * __template) throw() __attribute((__nonnull__(1))); 
# 742 "/usr/include/stdlib.h" 3
extern int mkostemp(char * __template, int __flags) __attribute((__nonnull__(1))); 
# 752 "/usr/include/stdlib.h" 3
extern int mkostemp64(char * __template, int __flags) __attribute((__nonnull__(1))); 
# 762 "/usr/include/stdlib.h" 3
extern int mkostemps(char * __template, int __suffixlen, int __flags)
# 763
 __attribute((__nonnull__(1))); 
# 774 "/usr/include/stdlib.h" 3
extern int mkostemps64(char * __template, int __suffixlen, int __flags)
# 775
 __attribute((__nonnull__(1))); 
# 784 "/usr/include/stdlib.h" 3
extern int system(const char * __command); 
# 790
extern char *canonicalize_file_name(const char * __name) throw()
# 791
 __attribute((__nonnull__(1))); 
# 800 "/usr/include/stdlib.h" 3
extern char *realpath(const char *__restrict__ __name, char *__restrict__ __resolved) throw(); 
# 808
typedef int (*__compar_fn_t)(const void *, const void *); 
# 811
typedef __compar_fn_t comparison_fn_t; 
# 815
typedef int (*__compar_d_fn_t)(const void *, const void *, void *); 
# 820
extern void *bsearch(const void * __key, const void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
# 822
 __attribute((__nonnull__(1, 2, 5))); 
# 830
extern void qsort(void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
# 831
 __attribute((__nonnull__(1, 4))); 
# 833
extern void qsort_r(void * __base, size_t __nmemb, size_t __size, __compar_d_fn_t __compar, void * __arg)
# 835
 __attribute((__nonnull__(1, 4))); 
# 840
extern int abs(int __x) throw() __attribute((const)); 
# 841
extern long labs(long __x) throw() __attribute((const)); 
# 844
__extension__ extern long long llabs(long long __x) throw()
# 845
 __attribute((const)); 
# 852
extern div_t div(int __numer, int __denom) throw()
# 853
 __attribute((const)); 
# 854
extern ldiv_t ldiv(long __numer, long __denom) throw()
# 855
 __attribute((const)); 
# 858
__extension__ extern lldiv_t lldiv(long long __numer, long long __denom) throw()
# 860
 __attribute((const)); 
# 872 "/usr/include/stdlib.h" 3
extern char *ecvt(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 873
 __attribute((__nonnull__(3, 4))); 
# 878
extern char *fcvt(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 879
 __attribute((__nonnull__(3, 4))); 
# 884
extern char *gcvt(double __value, int __ndigit, char * __buf) throw()
# 885
 __attribute((__nonnull__(3))); 
# 890
extern char *qecvt(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 892
 __attribute((__nonnull__(3, 4))); 
# 893
extern char *qfcvt(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 895
 __attribute((__nonnull__(3, 4))); 
# 896
extern char *qgcvt(long double __value, int __ndigit, char * __buf) throw()
# 897
 __attribute((__nonnull__(3))); 
# 902
extern int ecvt_r(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) throw()
# 904
 __attribute((__nonnull__(3, 4, 5))); 
# 905
extern int fcvt_r(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) throw()
# 907
 __attribute((__nonnull__(3, 4, 5))); 
# 909
extern int qecvt_r(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) throw()
# 912
 __attribute((__nonnull__(3, 4, 5))); 
# 913
extern int qfcvt_r(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) throw()
# 916
 __attribute((__nonnull__(3, 4, 5))); 
# 922
extern int mblen(const char * __s, size_t __n) throw(); 
# 925
extern int mbtowc(wchar_t *__restrict__ __pwc, const char *__restrict__ __s, size_t __n) throw(); 
# 929
extern int wctomb(char * __s, wchar_t __wchar) throw(); 
# 933
extern size_t mbstowcs(wchar_t *__restrict__ __pwcs, const char *__restrict__ __s, size_t __n) throw(); 
# 936
extern size_t wcstombs(char *__restrict__ __s, const wchar_t *__restrict__ __pwcs, size_t __n) throw(); 
# 946
extern int rpmatch(const char * __response) throw() __attribute((__nonnull__(1))); 
# 957 "/usr/include/stdlib.h" 3
extern int getsubopt(char **__restrict__ __optionp, char *const *__restrict__ __tokens, char **__restrict__ __valuep) throw()
# 960
 __attribute((__nonnull__(1, 2, 3))); 
# 968
extern int posix_openpt(int __oflag); 
# 976
extern int grantpt(int __fd) throw(); 
# 980
extern int unlockpt(int __fd) throw(); 
# 985
extern char *ptsname(int __fd) throw(); 
# 992
extern int ptsname_r(int __fd, char * __buf, size_t __buflen) throw()
# 993
 __attribute((__nonnull__(2))); 
# 996
extern int getpt(); 
# 1003
extern int getloadavg(double  __loadavg[], int __nelem) throw()
# 1004
 __attribute((__nonnull__(1))); 
# 1023 "/usr/include/stdlib.h" 3
}
# 46 "/usr/include/c++/9/bits/std_abs.h" 3
extern "C++" {
# 48
namespace std __attribute((__visibility__("default"))) { 
# 52
using ::abs;
# 56
inline long abs(long __i) { return __builtin_labs(__i); } 
# 61
inline long long abs(long long __x) { return __builtin_llabs(__x); } 
# 71 "/usr/include/c++/9/bits/std_abs.h" 3
constexpr double abs(double __x) 
# 72
{ return __builtin_fabs(__x); } 
# 75
constexpr float abs(float __x) 
# 76
{ return __builtin_fabsf(__x); } 
# 79
constexpr long double abs(long double __x) 
# 80
{ return __builtin_fabsl(__x); } 
# 85
constexpr __int128 abs(__int128 __x) { return (__x >= (0)) ? __x : (-__x); } 
# 108 "/usr/include/c++/9/bits/std_abs.h" 3
}
# 109
}
# 121 "/usr/include/c++/9/cstdlib" 3
extern "C++" {
# 123
namespace std __attribute((__visibility__("default"))) { 
# 127
using ::div_t;
# 128
using ::ldiv_t;
# 130
using ::abort;
# 134
using ::atexit;
# 137
using ::at_quick_exit;
# 140
using ::atof;
# 141
using ::atoi;
# 142
using ::atol;
# 143
using ::bsearch;
# 144
using ::calloc;
# 145
using ::div;
# 146
using ::exit;
# 147
using ::free;
# 148
using ::getenv;
# 149
using ::labs;
# 150
using ::ldiv;
# 151
using ::malloc;
# 153
using ::mblen;
# 154
using ::mbstowcs;
# 155
using ::mbtowc;
# 157
using ::qsort;
# 160
using ::quick_exit;
# 163
using ::rand;
# 164
using ::realloc;
# 165
using ::srand;
# 166
using ::strtod;
# 167
using ::strtol;
# 168
using ::strtoul;
# 169
using ::system;
# 171
using ::wcstombs;
# 172
using ::wctomb;
# 177
inline ldiv_t div(long __i, long __j) { return ldiv(__i, __j); } 
# 182
}
# 195 "/usr/include/c++/9/cstdlib" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 200
using ::lldiv_t;
# 206
using ::_Exit;
# 210
using ::llabs;
# 213
inline lldiv_t div(long long __n, long long __d) 
# 214
{ lldiv_t __q; (__q.quot) = (__n / __d); (__q.rem) = (__n % __d); return __q; } 
# 216
using ::lldiv;
# 227 "/usr/include/c++/9/cstdlib" 3
using ::atoll;
# 228
using ::strtoll;
# 229
using ::strtoull;
# 231
using ::strtof;
# 232
using ::strtold;
# 235
}
# 237
namespace std { 
# 240
using __gnu_cxx::lldiv_t;
# 242
using __gnu_cxx::_Exit;
# 244
using __gnu_cxx::llabs;
# 245
using __gnu_cxx::div;
# 246
using __gnu_cxx::lldiv;
# 248
using __gnu_cxx::atoll;
# 249
using __gnu_cxx::strtof;
# 250
using __gnu_cxx::strtoll;
# 251
using __gnu_cxx::strtoull;
# 252
using __gnu_cxx::strtold;
# 253
}
# 257
}
# 38 "/usr/include/c++/9/stdlib.h" 3
using std::abort;
# 39
using std::atexit;
# 40
using std::exit;
# 43
using std::at_quick_exit;
# 46
using std::quick_exit;
# 54
using std::abs;
# 55
using std::atof;
# 56
using std::atoi;
# 57
using std::atol;
# 58
using std::bsearch;
# 59
using std::calloc;
# 60
using std::div;
# 61
using std::free;
# 62
using std::getenv;
# 63
using std::labs;
# 64
using std::ldiv;
# 65
using std::malloc;
# 67
using std::mblen;
# 68
using std::mbstowcs;
# 69
using std::mbtowc;
# 71
using std::qsort;
# 72
using std::rand;
# 73
using std::realloc;
# 74
using std::srand;
# 75
using std::strtod;
# 76
using std::strtol;
# 77
using std::strtoul;
# 78
using std::system;
# 80
using std::wcstombs;
# 81
using std::wctomb;
# 179 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
extern "C" {
# 186
__attribute__((unused)) extern cudaError_t __cudaDeviceSynchronizeDeprecationAvoidance(); 
# 235 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern cudaError_t __cudaCDP2DeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
# 236
__attribute__((unused)) extern cudaError_t __cudaCDP2DeviceGetLimit(size_t * pValue, cudaLimit limit); 
# 237
__attribute__((unused)) extern cudaError_t __cudaCDP2DeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 238
__attribute__((unused)) extern cudaError_t __cudaCDP2DeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
# 239
__attribute__((unused)) extern cudaError_t __cudaCDP2GetLastError(); 
# 240
__attribute__((unused)) extern cudaError_t __cudaCDP2PeekAtLastError(); 
# 241
__attribute__((unused)) extern const char *__cudaCDP2GetErrorString(cudaError_t error); 
# 242
__attribute__((unused)) extern const char *__cudaCDP2GetErrorName(cudaError_t error); 
# 243
__attribute__((unused)) extern cudaError_t __cudaCDP2GetDeviceCount(int * count); 
# 244
__attribute__((unused)) extern cudaError_t __cudaCDP2GetDevice(int * device); 
# 245
__attribute__((unused)) extern cudaError_t __cudaCDP2StreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
# 246
__attribute__((unused)) extern cudaError_t __cudaCDP2StreamDestroy(cudaStream_t stream); 
# 247
__attribute__((unused)) extern cudaError_t __cudaCDP2StreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
# 248
__attribute__((unused)) extern cudaError_t __cudaCDP2StreamWaitEvent_ptsz(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
# 249
__attribute__((unused)) extern cudaError_t __cudaCDP2EventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
# 250
__attribute__((unused)) extern cudaError_t __cudaCDP2EventRecord(cudaEvent_t event, cudaStream_t stream); 
# 251
__attribute__((unused)) extern cudaError_t __cudaCDP2EventRecord_ptsz(cudaEvent_t event, cudaStream_t stream); 
# 252
__attribute__((unused)) extern cudaError_t __cudaCDP2EventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned flags); 
# 253
__attribute__((unused)) extern cudaError_t __cudaCDP2EventRecordWithFlags_ptsz(cudaEvent_t event, cudaStream_t stream, unsigned flags); 
# 254
__attribute__((unused)) extern cudaError_t __cudaCDP2EventDestroy(cudaEvent_t event); 
# 255
__attribute__((unused)) extern cudaError_t __cudaCDP2FuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
# 256
__attribute__((unused)) extern cudaError_t __cudaCDP2Free(void * devPtr); 
# 257
__attribute__((unused)) extern cudaError_t __cudaCDP2Malloc(void ** devPtr, size_t size); 
# 258
__attribute__((unused)) extern cudaError_t __cudaCDP2MemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
# 259
__attribute__((unused)) extern cudaError_t __cudaCDP2MemcpyAsync_ptsz(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
# 260
__attribute__((unused)) extern cudaError_t __cudaCDP2Memcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
# 261
__attribute__((unused)) extern cudaError_t __cudaCDP2Memcpy2DAsync_ptsz(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
# 262
__attribute__((unused)) extern cudaError_t __cudaCDP2Memcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream); 
# 263
__attribute__((unused)) extern cudaError_t __cudaCDP2Memcpy3DAsync_ptsz(const cudaMemcpy3DParms * p, cudaStream_t stream); 
# 264
__attribute__((unused)) extern cudaError_t __cudaCDP2MemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream); 
# 265
__attribute__((unused)) extern cudaError_t __cudaCDP2MemsetAsync_ptsz(void * devPtr, int value, size_t count, cudaStream_t stream); 
# 266
__attribute__((unused)) extern cudaError_t __cudaCDP2Memset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
# 267
__attribute__((unused)) extern cudaError_t __cudaCDP2Memset2DAsync_ptsz(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
# 268
__attribute__((unused)) extern cudaError_t __cudaCDP2Memset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
# 269
__attribute__((unused)) extern cudaError_t __cudaCDP2Memset3DAsync_ptsz(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
# 270
__attribute__((unused)) extern cudaError_t __cudaCDP2RuntimeGetVersion(int * runtimeVersion); 
# 271
__attribute__((unused)) extern void *__cudaCDP2GetParameterBuffer(size_t alignment, size_t size); 
# 272
__attribute__((unused)) extern void *__cudaCDP2GetParameterBufferV2(void * func, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize); 
# 273
__attribute__((unused)) extern cudaError_t __cudaCDP2LaunchDevice_ptsz(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
# 274
__attribute__((unused)) extern cudaError_t __cudaCDP2LaunchDeviceV2_ptsz(void * parameterBuffer, cudaStream_t stream); 
# 275
__attribute__((unused)) extern cudaError_t __cudaCDP2LaunchDevice(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
# 276
__attribute__((unused)) extern cudaError_t __cudaCDP2LaunchDeviceV2(void * parameterBuffer, cudaStream_t stream); 
# 277
__attribute__((unused)) extern cudaError_t __cudaCDP2OccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize); 
# 278
__attribute__((unused)) extern cudaError_t __cudaCDP2OccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
# 281
extern cudaError_t cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream); 
# 300 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
__attribute__((unused)) static inline cudaGraphExec_t cudaGetCurrentGraphExec() 
# 301
{int volatile ___ = 1;
# 305
::exit(___);}
#if 0
# 301
{ 
# 302
unsigned long long current_graph_exec; 
# 303
__asm__("mov.u64 %0, %%current_graph_exec;" : "=l" (current_graph_exec) :); 
# 304
return (cudaGraphExec_t)current_graph_exec; 
# 305
} 
#endif
# 323 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
__attribute__((unused)) static inline void cudaTriggerProgrammaticLaunchCompletion() 
# 324
{int volatile ___ = 1;
# 326
::exit(___);}
#if 0
# 324
{ 
# 325
__asm__ volatile("griddepcontrol.launch_dependents;" : :); 
# 326
} 
#endif
# 339 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
__attribute__((unused)) static inline void cudaGridDependencySynchronize() 
# 340
{int volatile ___ = 1;
# 342
::exit(___);}
#if 0
# 340
{ 
# 341
__asm__ volatile("griddepcontrol.wait;" : : : "memory"); 
# 342
} 
#endif
# 346 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern unsigned long long cudaCGGetIntrinsicHandle(cudaCGScope scope); 
# 347
__attribute__((unused)) extern cudaError_t cudaCGSynchronize(unsigned long long handle, unsigned flags); 
# 348
__attribute__((unused)) extern cudaError_t cudaCGSynchronizeGrid(unsigned long long handle, unsigned flags); 
# 349
__attribute__((unused)) extern cudaError_t cudaCGGetSize(unsigned * numThreads, unsigned * numGrids, unsigned long long handle); 
# 350
__attribute__((unused)) extern cudaError_t cudaCGGetRank(unsigned * threadRank, unsigned * gridRank, unsigned long long handle); 
# 572 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
__attribute__((unused)) static inline void *cudaGetParameterBuffer(size_t alignment, size_t size) 
# 573
{int volatile ___ = 1;(void)alignment;(void)size;
# 575
::exit(___);}
#if 0
# 573
{ 
# 574
return __cudaCDP2GetParameterBuffer(alignment, size); 
# 575
} 
#endif
# 608 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
__attribute__((unused)) static inline void *cudaGetParameterBufferV2(void *func, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize) 
# 609
{int volatile ___ = 1;(void)func;(void)gridDimension;(void)blockDimension;(void)sharedMemSize;
# 611
::exit(___);}
#if 0
# 609
{ 
# 610
return __cudaCDP2GetParameterBufferV2(func, gridDimension, blockDimension, sharedMemSize); 
# 611
} 
#endif
# 618 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
__attribute__((unused)) static inline cudaError_t cudaLaunchDevice_ptsz(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream) 
# 619
{int volatile ___ = 1;(void)func;(void)parameterBuffer;(void)gridDimension;(void)blockDimension;(void)sharedMemSize;(void)stream;
# 621
::exit(___);}
#if 0
# 619
{ 
# 620
return __cudaCDP2LaunchDevice_ptsz(func, parameterBuffer, gridDimension, blockDimension, sharedMemSize, stream); 
# 621
} 
#endif
# 623 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
__attribute__((unused)) static inline cudaError_t cudaLaunchDeviceV2_ptsz(void *parameterBuffer, cudaStream_t stream) 
# 624
{int volatile ___ = 1;(void)parameterBuffer;(void)stream;
# 626
::exit(___);}
#if 0
# 624
{ 
# 625
return __cudaCDP2LaunchDeviceV2_ptsz(parameterBuffer, stream); 
# 626
} 
#endif
# 658 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
__attribute__((unused)) static inline cudaError_t cudaLaunchDevice(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream) 
# 659
{int volatile ___ = 1;(void)func;(void)parameterBuffer;(void)gridDimension;(void)blockDimension;(void)sharedMemSize;(void)stream;
# 661
::exit(___);}
#if 0
# 659
{ 
# 660
return __cudaCDP2LaunchDevice(func, parameterBuffer, gridDimension, blockDimension, sharedMemSize, stream); 
# 661
} 
#endif
# 663 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
__attribute__((unused)) static inline cudaError_t cudaLaunchDeviceV2(void *parameterBuffer, cudaStream_t stream) 
# 664
{int volatile ___ = 1;(void)parameterBuffer;(void)stream;
# 666
::exit(___);}
#if 0
# 664
{ 
# 665
return __cudaCDP2LaunchDeviceV2(parameterBuffer, stream); 
# 666
} 
#endif
# 720 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
}
# 722
template< class T> static inline cudaError_t cudaMalloc(T ** devPtr, size_t size); 
# 723
template< class T> static inline cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, T * entry); 
# 724
template< class T> static inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize); 
# 725
template< class T> static inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
# 272 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern "C" {
# 312 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceReset(); 
# 334 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSynchronize(); 
# 420 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetLimit(cudaLimit limit, size_t value); 
# 456 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetLimit(size_t * pValue, cudaLimit limit); 
# 479 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetTexture1DLinearMaxWidth(size_t * maxWidthInElements, const cudaChannelFormatDesc * fmtDesc, int device); 
# 513 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 550 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetStreamPriorityRange(int * leastPriority, int * greatestPriority); 
# 594 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig); 
# 625 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
# 669 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config); 
# 696 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetByPCIBusId(int * device, const char * pciBusId); 
# 726 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetPCIBusId(char * pciBusId, int len, int device); 
# 776 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t * handle, cudaEvent_t event); 
# 819 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcOpenEventHandle(cudaEvent_t * event, cudaIpcEventHandle_t handle); 
# 863 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t * handle, void * devPtr); 
# 929 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcOpenMemHandle(void ** devPtr, cudaIpcMemHandle_t handle, unsigned flags); 
# 967 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcCloseMemHandle(void * devPtr); 
# 999 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceFlushGPUDirectRDMAWrites(cudaFlushGPUDirectRDMAWritesTarget target, cudaFlushGPUDirectRDMAWritesScope scope); 
# 1042 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadExit(); 
# 1068 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadSynchronize(); 
# 1117 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadSetLimit(cudaLimit limit, size_t value); 
# 1150 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadGetLimit(size_t * pValue, cudaLimit limit); 
# 1186 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 1233 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadSetCacheConfig(cudaFuncCache cacheConfig); 
# 1298 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetLastError(); 
# 1349 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaPeekAtLastError(); 
# 1365 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern const char *cudaGetErrorName(cudaError_t error); 
# 1381 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern const char *cudaGetErrorString(cudaError_t error); 
# 1410 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDeviceCount(int * count); 
# 1715 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDeviceProperties_v2(cudaDeviceProp * prop, int device); 
# 1917 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
# 1935 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetDefaultMemPool(cudaMemPool_t * memPool, int device); 
# 1959 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetMemPool(int device, cudaMemPool_t memPool); 
# 1979 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetMemPool(cudaMemPool_t * memPool, int device); 
# 2041 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetNvSciSyncAttributes(void * nvSciSyncAttrList, int device, int flags); 
# 2081 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetP2PAttribute(int * value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice); 
# 2103 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaChooseDevice(int * device, const cudaDeviceProp * prop); 
# 2132 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaInitDevice(int device, unsigned deviceFlags, unsigned flags); 
# 2178 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaSetDevice(int device); 
# 2200 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDevice(int * device); 
# 2231 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaSetValidDevices(int * device_arr, int len); 
# 2297 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaSetDeviceFlags(unsigned flags); 
# 2342 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDeviceFlags(unsigned * flags); 
# 2382 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCreate(cudaStream_t * pStream); 
# 2414 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
# 2460 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCreateWithPriority(cudaStream_t * pStream, unsigned flags, int priority); 
# 2487 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int * priority); 
# 2512 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned * flags); 
# 2549 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetId(cudaStream_t hStream, unsigned long long * streamId); 
# 2564 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaCtxResetPersistingL2Cache(); 
# 2584 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src); 
# 2605 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetAttribute(cudaStream_t hStream, cudaLaunchAttributeID attr, cudaLaunchAttributeValue * value_out); 
# 2629 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamSetAttribute(cudaStream_t hStream, cudaLaunchAttributeID attr, const cudaLaunchAttributeValue * value); 
# 2663 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamDestroy(cudaStream_t stream); 
# 2694 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags = 0); 
# 2702
typedef void (*cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void * userData); 
# 2769 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void * userData, unsigned flags); 
# 2793 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamSynchronize(cudaStream_t stream); 
# 2818 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamQuery(cudaStream_t stream); 
# 2902 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void * devPtr, size_t length = 0, unsigned flags = 4); 
# 2941 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamBeginCapture(cudaStream_t stream, cudaStreamCaptureMode mode); 
# 2992 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaThreadExchangeStreamCaptureMode(cudaStreamCaptureMode * mode); 
# 3020 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t * pGraph); 
# 3058 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamIsCapturing(cudaStream_t stream, cudaStreamCaptureStatus * pCaptureStatus); 
# 3106 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetCaptureInfo_v2(cudaStream_t stream, cudaStreamCaptureStatus * captureStatus_out, unsigned long long * id_out = 0, cudaGraph_t * graph_out = 0, const cudaGraphNode_t ** dependencies_out = 0, size_t * numDependencies_out = 0); 
# 3138 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t * dependencies, size_t numDependencies, unsigned flags = 0); 
# 3175 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaEventCreate(cudaEvent_t * event); 
# 3212 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
# 3252 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0); 
# 3299 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream = 0, unsigned flags = 0); 
# 3331 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaEventQuery(cudaEvent_t event); 
# 3361 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaEventSynchronize(cudaEvent_t event); 
# 3390 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaEventDestroy(cudaEvent_t event); 
# 3434 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaEventElapsedTime(float * ms, cudaEvent_t start, cudaEvent_t end); 
# 3615 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaImportExternalMemory(cudaExternalMemory_t * extMem_out, const cudaExternalMemoryHandleDesc * memHandleDesc); 
# 3670 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaExternalMemoryGetMappedBuffer(void ** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc * bufferDesc); 
# 3730 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t * mipmap, cudaExternalMemory_t extMem, const cudaExternalMemoryMipmappedArrayDesc * mipmapDesc); 
# 3754 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroyExternalMemory(cudaExternalMemory_t extMem); 
# 3908 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaImportExternalSemaphore(cudaExternalSemaphore_t * extSem_out, const cudaExternalSemaphoreHandleDesc * semHandleDesc); 
# 3991 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaSignalExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t * extSemArray, const cudaExternalSemaphoreSignalParams * paramsArray, unsigned numExtSems, cudaStream_t stream = 0); 
# 4067 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaWaitExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t * extSemArray, const cudaExternalSemaphoreWaitParams * paramsArray, unsigned numExtSems, cudaStream_t stream = 0); 
# 4090 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem); 
# 4157 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaLaunchKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream); 
# 4219 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaLaunchKernelExC(const cudaLaunchConfig_t * config, const void * func, void ** args); 
# 4276 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaLaunchCooperativeKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream); 
# 4377 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaLaunchCooperativeKernelMultiDevice(cudaLaunchParams * launchParamsList, unsigned numDevices, unsigned flags = 0); 
# 4422 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncSetCacheConfig(const void * func, cudaFuncCache cacheConfig); 
# 4477 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncSetSharedMemConfig(const void * func, cudaSharedMemConfig config); 
# 4510 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
# 4547 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncSetAttribute(const void * func, cudaFuncAttribute attr, int value); 
# 4571 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaSetDoubleForDevice(double * d); 
# 4595 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaSetDoubleForHost(double * d); 
# 4661 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void * userData); 
# 4718 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize); 
# 4747 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaOccupancyAvailableDynamicSMemPerBlock(size_t * dynamicSmemSize, const void * func, int numBlocks, int blockSize); 
# 4792 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize, unsigned flags); 
# 4827 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaOccupancyMaxPotentialClusterSize(int * clusterSize, const void * func, const cudaLaunchConfig_t * launchConfig); 
# 4866 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaOccupancyMaxActiveClusters(int * numClusters, const void * func, const cudaLaunchConfig_t * launchConfig); 
# 4986 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocManaged(void ** devPtr, size_t size, unsigned flags = 1); 
# 5019 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMalloc(void ** devPtr, size_t size); 
# 5052 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocHost(void ** ptr, size_t size); 
# 5095 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocPitch(void ** devPtr, size_t * pitch, size_t width, size_t height); 
# 5147 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, size_t width, size_t height = 0, unsigned flags = 0); 
# 5185 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaFree(void * devPtr); 
# 5208 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeHost(void * ptr); 
# 5231 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeArray(cudaArray_t array); 
# 5254 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray); 
# 5320 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaHostAlloc(void ** pHost, size_t size, unsigned flags); 
# 5417 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaHostRegister(void * ptr, size_t size, unsigned flags); 
# 5440 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaHostUnregister(void * ptr); 
# 5485 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaHostGetDevicePointer(void ** pDevice, void * pHost, unsigned flags); 
# 5507 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaHostGetFlags(unsigned * pFlags, void * pHost); 
# 5546 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMalloc3D(cudaPitchedPtr * pitchedDevPtr, cudaExtent extent); 
# 5691 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMalloc3DArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned flags = 0); 
# 5836 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t * mipmappedArray, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned numLevels, unsigned flags = 0); 
# 5869 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t * levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned level); 
# 5974 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3D(const cudaMemcpy3DParms * p); 
# 6006 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms * p); 
# 6124 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream = 0); 
# 6151 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms * p, cudaStream_t stream = 0); 
# 6185 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemGetInfo(size_t * free, size_t * total); 
# 6211 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaArrayGetInfo(cudaChannelFormatDesc * desc, cudaExtent * extent, unsigned * flags, cudaArray_t array); 
# 6240 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaArrayGetPlane(cudaArray_t * pPlaneArray, cudaArray_t hArray, unsigned planeIdx); 
# 6263 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaArrayGetMemoryRequirements(cudaArrayMemoryRequirements * memoryRequirements, cudaArray_t array, int device); 
# 6287 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMipmappedArrayGetMemoryRequirements(cudaArrayMemoryRequirements * memoryRequirements, cudaMipmappedArray_t mipmap, int device); 
# 6315 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaArrayGetSparseProperties(cudaArraySparseProperties * sparseProperties, cudaArray_t array); 
# 6345 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMipmappedArrayGetSparseProperties(cudaArraySparseProperties * sparseProperties, cudaMipmappedArray_t mipmap); 
# 6390 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy(void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
# 6425 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyPeer(void * dst, int dstDevice, const void * src, int srcDevice, size_t count); 
# 6474 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2D(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
# 6524 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
# 6574 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DFromArray(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind); 
# 6621 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
# 6664 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyToSymbol(const void * symbol, const void * src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice); 
# 6707 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyFromSymbol(void * dst, const void * symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost); 
# 6764 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6799 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyPeerAsync(void * dst, int dstDevice, const void * src, int srcDevice, size_t count, cudaStream_t stream = 0); 
# 6862 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6920 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6977 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DFromArrayAsync(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 7028 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyToSymbolAsync(const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 7079 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyFromSymbolAsync(void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 7108 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset(void * devPtr, int value, size_t count); 
# 7142 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset2D(void * devPtr, size_t pitch, int value, size_t width, size_t height); 
# 7188 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent); 
# 7224 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream = 0); 
# 7265 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0); 
# 7318 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream = 0); 
# 7346 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSymbolAddress(void ** devPtr, const void * symbol); 
# 7373 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSymbolSize(size_t * size, const void * symbol); 
# 7443 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPrefetchAsync(const void * devPtr, size_t count, int dstDevice, cudaStream_t stream = 0); 
# 7559 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemAdvise(const void * devPtr, size_t count, cudaMemoryAdvise advice, int device); 
# 7618 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemRangeGetAttribute(void * data, size_t dataSize, cudaMemRangeAttribute attribute, const void * devPtr, size_t count); 
# 7657 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemRangeGetAttributes(void ** data, size_t * dataSizes, cudaMemRangeAttribute * attributes, size_t numAttributes, const void * devPtr, size_t count); 
# 7717 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind); 
# 7759 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyFromArray(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind); 
# 7802 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
# 7853 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 7903 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyFromArrayAsync(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 7972 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocAsync(void ** devPtr, size_t size, cudaStream_t hStream); 
# 7998 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeAsync(void * devPtr, cudaStream_t hStream); 
# 8023 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolTrimTo(cudaMemPool_t memPool, size_t minBytesToKeep); 
# 8067 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolSetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void * value); 
# 8115 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolGetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void * value); 
# 8130 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolSetAccess(cudaMemPool_t memPool, const cudaMemAccessDesc * descList, size_t count); 
# 8143 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolGetAccess(cudaMemAccessFlags * flags, cudaMemPool_t memPool, cudaMemLocation * location); 
# 8163 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolCreate(cudaMemPool_t * memPool, const cudaMemPoolProps * poolProps); 
# 8185 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolDestroy(cudaMemPool_t memPool); 
# 8221 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocFromPoolAsync(void ** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream); 
# 8246 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolExportToShareableHandle(void * shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned flags); 
# 8273 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolImportFromShareableHandle(cudaMemPool_t * memPool, void * shareableHandle, cudaMemAllocationHandleType handleType, unsigned flags); 
# 8296 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolExportPointer(cudaMemPoolPtrExportData * exportData, void * ptr); 
# 8325 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolImportPointer(void ** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData * exportData); 
# 8478 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaPointerGetAttributes(cudaPointerAttributes * attributes, const void * ptr); 
# 8519 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceCanAccessPeer(int * canAccessPeer, int device, int peerDevice); 
# 8561 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned flags); 
# 8583 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceDisablePeerAccess(int peerDevice); 
# 8647 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource); 
# 8682 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned flags); 
# 8721 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
# 8756 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
# 8788 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsResourceGetMappedPointer(void ** devPtr, size_t * size, cudaGraphicsResource_t resource); 
# 8826 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t * array, cudaGraphicsResource_t resource, unsigned arrayIndex, unsigned mipLevel); 
# 8855 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t * mipmappedArray, cudaGraphicsResource_t resource); 
# 8890 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetChannelDesc(cudaChannelFormatDesc * desc, cudaArray_const_t array); 
# 8920 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f); 
# 9144 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaCreateTextureObject(cudaTextureObject_t * pTexObject, const cudaResourceDesc * pResDesc, const cudaTextureDesc * pTexDesc, const cudaResourceViewDesc * pResViewDesc); 
# 9164 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject); 
# 9184 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureObjectResourceDesc(cudaResourceDesc * pResDesc, cudaTextureObject_t texObject); 
# 9204 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureObjectTextureDesc(cudaTextureDesc * pTexDesc, cudaTextureObject_t texObject); 
# 9225 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc * pResViewDesc, cudaTextureObject_t texObject); 
# 9270 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t * pSurfObject, const cudaResourceDesc * pResDesc); 
# 9290 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject); 
# 9309 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSurfaceObjectResourceDesc(cudaResourceDesc * pResDesc, cudaSurfaceObject_t surfObject); 
# 9343 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDriverGetVersion(int * driverVersion); 
# 9372 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaRuntimeGetVersion(int * runtimeVersion); 
# 9419 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphCreate(cudaGraph_t * pGraph, unsigned flags); 
# 9516 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddKernelNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaKernelNodeParams * pNodeParams); 
# 9549 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeGetParams(cudaGraphNode_t node, cudaKernelNodeParams * pNodeParams); 
# 9574 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const cudaKernelNodeParams * pNodeParams); 
# 9594 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t hSrc, cudaGraphNode_t hDst); 
# 9617 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeGetAttribute(cudaGraphNode_t hNode, cudaLaunchAttributeID attr, cudaLaunchAttributeValue * value_out); 
# 9641 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeSetAttribute(cudaGraphNode_t hNode, cudaLaunchAttributeID attr, const cudaLaunchAttributeValue * value); 
# 9691 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemcpyNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaMemcpy3DParms * pCopyParams); 
# 9750 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemcpyNodeToSymbol(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind); 
# 9819 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemcpyNodeFromSymbol(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind); 
# 9887 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemcpyNode1D(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
# 9919 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, cudaMemcpy3DParms * pNodeParams); 
# 9945 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const cudaMemcpy3DParms * pNodeParams); 
# 9984 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeSetParamsToSymbol(cudaGraphNode_t node, const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind); 
# 10030 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeSetParamsFromSymbol(cudaGraphNode_t node, void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind); 
# 10076 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeSetParams1D(cudaGraphNode_t node, void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
# 10123 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemsetNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaMemsetParams * pMemsetParams); 
# 10146 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, cudaMemsetParams * pNodeParams); 
# 10169 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const cudaMemsetParams * pNodeParams); 
# 10210 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddHostNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaHostNodeParams * pNodeParams); 
# 10233 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphHostNodeGetParams(cudaGraphNode_t node, cudaHostNodeParams * pNodeParams); 
# 10256 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphHostNodeSetParams(cudaGraphNode_t node, const cudaHostNodeParams * pNodeParams); 
# 10296 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddChildGraphNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaGraph_t childGraph); 
# 10323 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t * pGraph); 
# 10360 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddEmptyNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies); 
# 10403 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddEventRecordNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaEvent_t event); 
# 10430 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t * event_out); 
# 10457 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event); 
# 10503 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddEventWaitNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaEvent_t event); 
# 10530 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t * event_out); 
# 10557 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event); 
# 10606 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
# 10639 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams * params_out); 
# 10666 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
# 10715 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
# 10748 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreWaitNodeParams * params_out); 
# 10775 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
# 10852 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemAllocNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaMemAllocNodeParams * nodeParams); 
# 10879 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, cudaMemAllocNodeParams * params_out); 
# 10939 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemFreeNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, void * dptr); 
# 10963 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void * dptr_out); 
# 10991 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGraphMemTrim(int device); 
# 11028 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void * value); 
# 11062 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void * value); 
# 11090 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphClone(cudaGraph_t * pGraphClone, cudaGraph_t originalGraph); 
# 11118 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeFindInClone(cudaGraphNode_t * pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph); 
# 11149 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeGetType(cudaGraphNode_t node, cudaGraphNodeType * pType); 
# 11180 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t * nodes, size_t * numNodes); 
# 11211 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t * pRootNodes, size_t * pNumRootNodes); 
# 11245 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t * from, cudaGraphNode_t * to, size_t * numEdges); 
# 11276 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t * pDependencies, size_t * pNumDependencies); 
# 11308 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t * pDependentNodes, size_t * pNumDependentNodes); 
# 11339 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, size_t numDependencies); 
# 11370 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, size_t numDependencies); 
# 11400 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphDestroyNode(cudaGraphNode_t node); 
# 11462 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphInstantiate(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, unsigned long long flags = 0); 
# 11533 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphInstantiateWithFlags(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, unsigned long long flags = 0); 
# 11638 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphInstantiateWithParams(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, cudaGraphInstantiateParams * instantiateParams); 
# 11663 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecGetFlags(cudaGraphExec_t graphExec, unsigned long long * flags); 
# 11714 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams * pNodeParams); 
# 11764 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms * pNodeParams); 
# 11819 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemcpyNodeSetParamsToSymbol(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind); 
# 11882 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemcpyNodeSetParamsFromSymbol(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind); 
# 11943 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemcpyNodeSetParams1D(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
# 11997 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemsetParams * pNodeParams); 
# 12036 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams * pNodeParams); 
# 12082 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph); 
# 12126 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event); 
# 12170 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event); 
# 12217 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
# 12264 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
# 12304 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeSetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned isEnabled); 
# 12338 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeGetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned * isEnabled); 
# 12423 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphExecUpdateResultInfo * resultInfo); 
# 12448 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream); 
# 12479 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream); 
# 12502 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecDestroy(cudaGraphExec_t graphExec); 
# 12523 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphDestroy(cudaGraph_t graph); 
# 12542 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphDebugDotPrint(cudaGraph_t graph, const char * path, unsigned flags); 
# 12578 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaUserObjectCreate(cudaUserObject_t * object_out, void * ptr, cudaHostFn_t destroy, unsigned initialRefcount, unsigned flags); 
# 12602 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaUserObjectRetain(cudaUserObject_t object, unsigned count = 1); 
# 12630 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaUserObjectRelease(cudaUserObject_t object, unsigned count = 1); 
# 12658 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned count = 1, unsigned flags = 0); 
# 12683 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned count = 1); 
# 12761 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDriverEntryPoint(const char * symbol, void ** funcPtr, unsigned long long flags, cudaDriverEntryPointQueryResult * driverStatus = 0); 
# 12769 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetExportTable(const void ** ppExportTable, const cudaUUID_t * pExportTableId); 
# 12948 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetFuncBySymbol(cudaFunction_t * functionPtr, const void * symbolPtr); 
# 12964 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetKernel(cudaKernel_t * kernelPtr, const void * entryFuncAddr); 
# 13125 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
}
# 117 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/channel_descriptor.h"
template< class T> inline cudaChannelFormatDesc cudaCreateChannelDesc() 
# 118
{ 
# 119
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
# 120
} 
# 122
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf() 
# 123
{ 
# 124
int e = (((int)sizeof(unsigned short)) * 8); 
# 126
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 127
} 
# 129
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf1() 
# 130
{ 
# 131
int e = (((int)sizeof(unsigned short)) * 8); 
# 133
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 134
} 
# 136
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf2() 
# 137
{ 
# 138
int e = (((int)sizeof(unsigned short)) * 8); 
# 140
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
# 141
} 
# 143
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf4() 
# 144
{ 
# 145
int e = (((int)sizeof(unsigned short)) * 8); 
# 147
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
# 148
} 
# 150
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char> () 
# 151
{ 
# 152
int e = (((int)sizeof(char)) * 8); 
# 157
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 159
} 
# 161
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< signed char> () 
# 162
{ 
# 163
int e = (((int)sizeof(signed char)) * 8); 
# 165
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 166
} 
# 168
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned char> () 
# 169
{ 
# 170
int e = (((int)sizeof(unsigned char)) * 8); 
# 172
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 173
} 
# 175
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char1> () 
# 176
{ 
# 177
int e = (((int)sizeof(signed char)) * 8); 
# 179
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 180
} 
# 182
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar1> () 
# 183
{ 
# 184
int e = (((int)sizeof(unsigned char)) * 8); 
# 186
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 187
} 
# 189
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char2> () 
# 190
{ 
# 191
int e = (((int)sizeof(signed char)) * 8); 
# 193
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 194
} 
# 196
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar2> () 
# 197
{ 
# 198
int e = (((int)sizeof(unsigned char)) * 8); 
# 200
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 201
} 
# 203
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char4> () 
# 204
{ 
# 205
int e = (((int)sizeof(signed char)) * 8); 
# 207
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 208
} 
# 210
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar4> () 
# 211
{ 
# 212
int e = (((int)sizeof(unsigned char)) * 8); 
# 214
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 215
} 
# 217
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short> () 
# 218
{ 
# 219
int e = (((int)sizeof(short)) * 8); 
# 221
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 222
} 
# 224
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned short> () 
# 225
{ 
# 226
int e = (((int)sizeof(unsigned short)) * 8); 
# 228
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 229
} 
# 231
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short1> () 
# 232
{ 
# 233
int e = (((int)sizeof(short)) * 8); 
# 235
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 236
} 
# 238
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort1> () 
# 239
{ 
# 240
int e = (((int)sizeof(unsigned short)) * 8); 
# 242
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 243
} 
# 245
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short2> () 
# 246
{ 
# 247
int e = (((int)sizeof(short)) * 8); 
# 249
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 250
} 
# 252
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort2> () 
# 253
{ 
# 254
int e = (((int)sizeof(unsigned short)) * 8); 
# 256
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 257
} 
# 259
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short4> () 
# 260
{ 
# 261
int e = (((int)sizeof(short)) * 8); 
# 263
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 264
} 
# 266
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort4> () 
# 267
{ 
# 268
int e = (((int)sizeof(unsigned short)) * 8); 
# 270
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 271
} 
# 273
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int> () 
# 274
{ 
# 275
int e = (((int)sizeof(int)) * 8); 
# 277
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 278
} 
# 280
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned> () 
# 281
{ 
# 282
int e = (((int)sizeof(unsigned)) * 8); 
# 284
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 285
} 
# 287
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int1> () 
# 288
{ 
# 289
int e = (((int)sizeof(int)) * 8); 
# 291
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 292
} 
# 294
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint1> () 
# 295
{ 
# 296
int e = (((int)sizeof(unsigned)) * 8); 
# 298
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 299
} 
# 301
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int2> () 
# 302
{ 
# 303
int e = (((int)sizeof(int)) * 8); 
# 305
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 306
} 
# 308
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint2> () 
# 309
{ 
# 310
int e = (((int)sizeof(unsigned)) * 8); 
# 312
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 313
} 
# 315
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int4> () 
# 316
{ 
# 317
int e = (((int)sizeof(int)) * 8); 
# 319
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 320
} 
# 322
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint4> () 
# 323
{ 
# 324
int e = (((int)sizeof(unsigned)) * 8); 
# 326
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 327
} 
# 389 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float> () 
# 390
{ 
# 391
int e = (((int)sizeof(float)) * 8); 
# 393
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 394
} 
# 396
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float1> () 
# 397
{ 
# 398
int e = (((int)sizeof(float)) * 8); 
# 400
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 401
} 
# 403
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float2> () 
# 404
{ 
# 405
int e = (((int)sizeof(float)) * 8); 
# 407
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
# 408
} 
# 410
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float4> () 
# 411
{ 
# 412
int e = (((int)sizeof(float)) * 8); 
# 414
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
# 415
} 
# 417
static inline cudaChannelFormatDesc cudaCreateChannelDescNV12() 
# 418
{ 
# 419
int e = (((int)sizeof(char)) * 8); 
# 421
return cudaCreateChannelDesc(e, e, e, 0, cudaChannelFormatKindNV12); 
# 422
} 
# 424
template< cudaChannelFormatKind > inline cudaChannelFormatDesc cudaCreateChannelDesc() 
# 425
{ 
# 426
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
# 427
} 
# 430
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized8X1> () 
# 431
{ 
# 432
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindSignedNormalized8X1); 
# 433
} 
# 435
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized8X2> () 
# 436
{ 
# 437
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindSignedNormalized8X2); 
# 438
} 
# 440
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized8X4> () 
# 441
{ 
# 442
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindSignedNormalized8X4); 
# 443
} 
# 446
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized8X1> () 
# 447
{ 
# 448
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindUnsignedNormalized8X1); 
# 449
} 
# 451
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized8X2> () 
# 452
{ 
# 453
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindUnsignedNormalized8X2); 
# 454
} 
# 456
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized8X4> () 
# 457
{ 
# 458
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedNormalized8X4); 
# 459
} 
# 462
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized16X1> () 
# 463
{ 
# 464
return cudaCreateChannelDesc(16, 0, 0, 0, cudaChannelFormatKindSignedNormalized16X1); 
# 465
} 
# 467
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized16X2> () 
# 468
{ 
# 469
return cudaCreateChannelDesc(16, 16, 0, 0, cudaChannelFormatKindSignedNormalized16X2); 
# 470
} 
# 472
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized16X4> () 
# 473
{ 
# 474
return cudaCreateChannelDesc(16, 16, 16, 16, cudaChannelFormatKindSignedNormalized16X4); 
# 475
} 
# 478
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized16X1> () 
# 479
{ 
# 480
return cudaCreateChannelDesc(16, 0, 0, 0, cudaChannelFormatKindUnsignedNormalized16X1); 
# 481
} 
# 483
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized16X2> () 
# 484
{ 
# 485
return cudaCreateChannelDesc(16, 16, 0, 0, cudaChannelFormatKindUnsignedNormalized16X2); 
# 486
} 
# 488
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized16X4> () 
# 489
{ 
# 490
return cudaCreateChannelDesc(16, 16, 16, 16, cudaChannelFormatKindUnsignedNormalized16X4); 
# 491
} 
# 494
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindNV12> () 
# 495
{ 
# 496
return cudaCreateChannelDesc(8, 8, 8, 0, cudaChannelFormatKindNV12); 
# 497
} 
# 500
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed1> () 
# 501
{ 
# 502
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed1); 
# 503
} 
# 506
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed1SRGB> () 
# 507
{ 
# 508
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed1SRGB); 
# 509
} 
# 512
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed2> () 
# 513
{ 
# 514
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed2); 
# 515
} 
# 518
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed2SRGB> () 
# 519
{ 
# 520
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed2SRGB); 
# 521
} 
# 524
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed3> () 
# 525
{ 
# 526
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed3); 
# 527
} 
# 530
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed3SRGB> () 
# 531
{ 
# 532
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed3SRGB); 
# 533
} 
# 536
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed4> () 
# 537
{ 
# 538
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindUnsignedBlockCompressed4); 
# 539
} 
# 542
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedBlockCompressed4> () 
# 543
{ 
# 544
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindSignedBlockCompressed4); 
# 545
} 
# 548
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed5> () 
# 549
{ 
# 550
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindUnsignedBlockCompressed5); 
# 551
} 
# 554
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedBlockCompressed5> () 
# 555
{ 
# 556
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindSignedBlockCompressed5); 
# 557
} 
# 560
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed6H> () 
# 561
{ 
# 562
return cudaCreateChannelDesc(16, 16, 16, 0, cudaChannelFormatKindUnsignedBlockCompressed6H); 
# 563
} 
# 566
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedBlockCompressed6H> () 
# 567
{ 
# 568
return cudaCreateChannelDesc(16, 16, 16, 0, cudaChannelFormatKindSignedBlockCompressed6H); 
# 569
} 
# 572
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed7> () 
# 573
{ 
# 574
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed7); 
# 575
} 
# 578
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed7SRGB> () 
# 579
{ 
# 580
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed7SRGB); 
# 581
} 
# 79 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_functions.h"
static inline cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) 
# 80
{ 
# 81
cudaPitchedPtr s; 
# 83
(s.ptr) = d; 
# 84
(s.pitch) = p; 
# 85
(s.xsize) = xsz; 
# 86
(s.ysize) = ysz; 
# 88
return s; 
# 89
} 
# 106 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_functions.h"
static inline cudaPos make_cudaPos(size_t x, size_t y, size_t z) 
# 107
{ 
# 108
cudaPos p; 
# 110
(p.x) = x; 
# 111
(p.y) = y; 
# 112
(p.z) = z; 
# 114
return p; 
# 115
} 
# 132 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_functions.h"
static inline cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) 
# 133
{ 
# 134
cudaExtent e; 
# 136
(e.width) = w; 
# 137
(e.height) = h; 
# 138
(e.depth) = d; 
# 140
return e; 
# 141
} 
# 73 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_functions.h"
static inline char1 make_char1(signed char x); 
# 75
static inline uchar1 make_uchar1(unsigned char x); 
# 77
static inline char2 make_char2(signed char x, signed char y); 
# 79
static inline uchar2 make_uchar2(unsigned char x, unsigned char y); 
# 81
static inline char3 make_char3(signed char x, signed char y, signed char z); 
# 83
static inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z); 
# 85
static inline char4 make_char4(signed char x, signed char y, signed char z, signed char w); 
# 87
static inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w); 
# 89
static inline short1 make_short1(short x); 
# 91
static inline ushort1 make_ushort1(unsigned short x); 
# 93
static inline short2 make_short2(short x, short y); 
# 95
static inline ushort2 make_ushort2(unsigned short x, unsigned short y); 
# 97
static inline short3 make_short3(short x, short y, short z); 
# 99
static inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z); 
# 101
static inline short4 make_short4(short x, short y, short z, short w); 
# 103
static inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w); 
# 105
static inline int1 make_int1(int x); 
# 107
static inline uint1 make_uint1(unsigned x); 
# 109
static inline int2 make_int2(int x, int y); 
# 111
static inline uint2 make_uint2(unsigned x, unsigned y); 
# 113
static inline int3 make_int3(int x, int y, int z); 
# 115
static inline uint3 make_uint3(unsigned x, unsigned y, unsigned z); 
# 117
static inline int4 make_int4(int x, int y, int z, int w); 
# 119
static inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w); 
# 121
static inline long1 make_long1(long x); 
# 123
static inline ulong1 make_ulong1(unsigned long x); 
# 125
static inline long2 make_long2(long x, long y); 
# 127
static inline ulong2 make_ulong2(unsigned long x, unsigned long y); 
# 129
static inline long3 make_long3(long x, long y, long z); 
# 131
static inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z); 
# 133
static inline long4 make_long4(long x, long y, long z, long w); 
# 135
static inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w); 
# 137
static inline float1 make_float1(float x); 
# 139
static inline float2 make_float2(float x, float y); 
# 141
static inline float3 make_float3(float x, float y, float z); 
# 143
static inline float4 make_float4(float x, float y, float z, float w); 
# 145
static inline longlong1 make_longlong1(long long x); 
# 147
static inline ulonglong1 make_ulonglong1(unsigned long long x); 
# 149
static inline longlong2 make_longlong2(long long x, long long y); 
# 151
static inline ulonglong2 make_ulonglong2(unsigned long long x, unsigned long long y); 
# 153
static inline longlong3 make_longlong3(long long x, long long y, long long z); 
# 155
static inline ulonglong3 make_ulonglong3(unsigned long long x, unsigned long long y, unsigned long long z); 
# 157
static inline longlong4 make_longlong4(long long x, long long y, long long z, long long w); 
# 159
static inline ulonglong4 make_ulonglong4(unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w); 
# 161
static inline double1 make_double1(double x); 
# 163
static inline double2 make_double2(double x, double y); 
# 165
static inline double3 make_double3(double x, double y, double z); 
# 167
static inline double4 make_double4(double x, double y, double z, double w); 
# 73 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_functions.hpp"
static inline char1 make_char1(signed char x) 
# 74
{ 
# 75
char1 t; (t.x) = x; return t; 
# 76
} 
# 78
static inline uchar1 make_uchar1(unsigned char x) 
# 79
{ 
# 80
uchar1 t; (t.x) = x; return t; 
# 81
} 
# 83
static inline char2 make_char2(signed char x, signed char y) 
# 84
{ 
# 85
char2 t; (t.x) = x; (t.y) = y; return t; 
# 86
} 
# 88
static inline uchar2 make_uchar2(unsigned char x, unsigned char y) 
# 89
{ 
# 90
uchar2 t; (t.x) = x; (t.y) = y; return t; 
# 91
} 
# 93
static inline char3 make_char3(signed char x, signed char y, signed char z) 
# 94
{ 
# 95
char3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 96
} 
# 98
static inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z) 
# 99
{ 
# 100
uchar3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 101
} 
# 103
static inline char4 make_char4(signed char x, signed char y, signed char z, signed char w) 
# 104
{ 
# 105
char4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 106
} 
# 108
static inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w) 
# 109
{ 
# 110
uchar4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 111
} 
# 113
static inline short1 make_short1(short x) 
# 114
{ 
# 115
short1 t; (t.x) = x; return t; 
# 116
} 
# 118
static inline ushort1 make_ushort1(unsigned short x) 
# 119
{ 
# 120
ushort1 t; (t.x) = x; return t; 
# 121
} 
# 123
static inline short2 make_short2(short x, short y) 
# 124
{ 
# 125
short2 t; (t.x) = x; (t.y) = y; return t; 
# 126
} 
# 128
static inline ushort2 make_ushort2(unsigned short x, unsigned short y) 
# 129
{ 
# 130
ushort2 t; (t.x) = x; (t.y) = y; return t; 
# 131
} 
# 133
static inline short3 make_short3(short x, short y, short z) 
# 134
{ 
# 135
short3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 136
} 
# 138
static inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z) 
# 139
{ 
# 140
ushort3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 141
} 
# 143
static inline short4 make_short4(short x, short y, short z, short w) 
# 144
{ 
# 145
short4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 146
} 
# 148
static inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w) 
# 149
{ 
# 150
ushort4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 151
} 
# 153
static inline int1 make_int1(int x) 
# 154
{ 
# 155
int1 t; (t.x) = x; return t; 
# 156
} 
# 158
static inline uint1 make_uint1(unsigned x) 
# 159
{ 
# 160
uint1 t; (t.x) = x; return t; 
# 161
} 
# 163
static inline int2 make_int2(int x, int y) 
# 164
{ 
# 165
int2 t; (t.x) = x; (t.y) = y; return t; 
# 166
} 
# 168
static inline uint2 make_uint2(unsigned x, unsigned y) 
# 169
{ 
# 170
uint2 t; (t.x) = x; (t.y) = y; return t; 
# 171
} 
# 173
static inline int3 make_int3(int x, int y, int z) 
# 174
{ 
# 175
int3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 176
} 
# 178
static inline uint3 make_uint3(unsigned x, unsigned y, unsigned z) 
# 179
{ 
# 180
uint3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 181
} 
# 183
static inline int4 make_int4(int x, int y, int z, int w) 
# 184
{ 
# 185
int4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 186
} 
# 188
static inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w) 
# 189
{ 
# 190
uint4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 191
} 
# 193
static inline long1 make_long1(long x) 
# 194
{ 
# 195
long1 t; (t.x) = x; return t; 
# 196
} 
# 198
static inline ulong1 make_ulong1(unsigned long x) 
# 199
{ 
# 200
ulong1 t; (t.x) = x; return t; 
# 201
} 
# 203
static inline long2 make_long2(long x, long y) 
# 204
{ 
# 205
long2 t; (t.x) = x; (t.y) = y; return t; 
# 206
} 
# 208
static inline ulong2 make_ulong2(unsigned long x, unsigned long y) 
# 209
{ 
# 210
ulong2 t; (t.x) = x; (t.y) = y; return t; 
# 211
} 
# 213
static inline long3 make_long3(long x, long y, long z) 
# 214
{ 
# 215
long3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 216
} 
# 218
static inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z) 
# 219
{ 
# 220
ulong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 221
} 
# 223
static inline long4 make_long4(long x, long y, long z, long w) 
# 224
{ 
# 225
long4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 226
} 
# 228
static inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w) 
# 229
{ 
# 230
ulong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 231
} 
# 233
static inline float1 make_float1(float x) 
# 234
{ 
# 235
float1 t; (t.x) = x; return t; 
# 236
} 
# 238
static inline float2 make_float2(float x, float y) 
# 239
{ 
# 240
float2 t; (t.x) = x; (t.y) = y; return t; 
# 241
} 
# 243
static inline float3 make_float3(float x, float y, float z) 
# 244
{ 
# 245
float3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 246
} 
# 248
static inline float4 make_float4(float x, float y, float z, float w) 
# 249
{ 
# 250
float4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 251
} 
# 253
static inline longlong1 make_longlong1(long long x) 
# 254
{ 
# 255
longlong1 t; (t.x) = x; return t; 
# 256
} 
# 258
static inline ulonglong1 make_ulonglong1(unsigned long long x) 
# 259
{ 
# 260
ulonglong1 t; (t.x) = x; return t; 
# 261
} 
# 263
static inline longlong2 make_longlong2(long long x, long long y) 
# 264
{ 
# 265
longlong2 t; (t.x) = x; (t.y) = y; return t; 
# 266
} 
# 268
static inline ulonglong2 make_ulonglong2(unsigned long long x, unsigned long long y) 
# 269
{ 
# 270
ulonglong2 t; (t.x) = x; (t.y) = y; return t; 
# 271
} 
# 273
static inline longlong3 make_longlong3(long long x, long long y, long long z) 
# 274
{ 
# 275
longlong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 276
} 
# 278
static inline ulonglong3 make_ulonglong3(unsigned long long x, unsigned long long y, unsigned long long z) 
# 279
{ 
# 280
ulonglong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 281
} 
# 283
static inline longlong4 make_longlong4(long long x, long long y, long long z, long long w) 
# 284
{ 
# 285
longlong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 286
} 
# 288
static inline ulonglong4 make_ulonglong4(unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w) 
# 289
{ 
# 290
ulonglong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 291
} 
# 293
static inline double1 make_double1(double x) 
# 294
{ 
# 295
double1 t; (t.x) = x; return t; 
# 296
} 
# 298
static inline double2 make_double2(double x, double y) 
# 299
{ 
# 300
double2 t; (t.x) = x; (t.y) = y; return t; 
# 301
} 
# 303
static inline double3 make_double3(double x, double y, double z) 
# 304
{ 
# 305
double3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 306
} 
# 308
static inline double4 make_double4(double x, double y, double z, double w) 
# 309
{ 
# 310
double4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 311
} 
# 28 "/usr/include/string.h" 3
extern "C" {
# 43 "/usr/include/string.h" 3
extern void *memcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __n) throw()
# 44
 __attribute((__nonnull__(1, 2))); 
# 47
extern void *memmove(void * __dest, const void * __src, size_t __n) throw()
# 48
 __attribute((__nonnull__(1, 2))); 
# 54
extern void *memccpy(void *__restrict__ __dest, const void *__restrict__ __src, int __c, size_t __n) throw()
# 56
 __attribute((__nonnull__(1, 2))); 
# 61
extern void *memset(void * __s, int __c, size_t __n) throw() __attribute((__nonnull__(1))); 
# 64
extern int memcmp(const void * __s1, const void * __s2, size_t __n) throw()
# 65
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 69
extern "C++" {
# 71
extern void *memchr(void * __s, int __c, size_t __n) throw() __asm__("memchr")
# 72
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 73
extern const void *memchr(const void * __s, int __c, size_t __n) throw() __asm__("memchr")
# 74
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 89 "/usr/include/string.h" 3
}
# 99 "/usr/include/string.h" 3
extern "C++" void *rawmemchr(void * __s, int __c) throw() __asm__("rawmemchr")
# 100
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 101
extern "C++" const void *rawmemchr(const void * __s, int __c) throw() __asm__("rawmemchr")
# 102
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 110
extern "C++" void *memrchr(void * __s, int __c, size_t __n) throw() __asm__("memrchr")
# 111
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 112
extern "C++" const void *memrchr(const void * __s, int __c, size_t __n) throw() __asm__("memrchr")
# 113
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 122 "/usr/include/string.h" 3
extern char *strcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 123
 __attribute((__nonnull__(1, 2))); 
# 125
extern char *strncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 127
 __attribute((__nonnull__(1, 2))); 
# 130
extern char *strcat(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 131
 __attribute((__nonnull__(1, 2))); 
# 133
extern char *strncat(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 134
 __attribute((__nonnull__(1, 2))); 
# 137
extern int strcmp(const char * __s1, const char * __s2) throw()
# 138
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 140
extern int strncmp(const char * __s1, const char * __s2, size_t __n) throw()
# 141
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 144
extern int strcoll(const char * __s1, const char * __s2) throw()
# 145
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 147
extern size_t strxfrm(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 149
 __attribute((__nonnull__(2))); 
# 156
extern int strcoll_l(const char * __s1, const char * __s2, locale_t __l) throw()
# 157
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 3))); 
# 160
extern size_t strxfrm_l(char * __dest, const char * __src, size_t __n, locale_t __l) throw()
# 161
 __attribute((__nonnull__(2, 4))); 
# 167
extern char *strdup(const char * __s) throw()
# 168
 __attribute((__malloc__)) __attribute((__nonnull__(1))); 
# 175
extern char *strndup(const char * __string, size_t __n) throw()
# 176
 __attribute((__malloc__)) __attribute((__nonnull__(1))); 
# 204 "/usr/include/string.h" 3
extern "C++" {
# 206
extern char *strchr(char * __s, int __c) throw() __asm__("strchr")
# 207
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 208
extern const char *strchr(const char * __s, int __c) throw() __asm__("strchr")
# 209
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 224 "/usr/include/string.h" 3
}
# 231
extern "C++" {
# 233
extern char *strrchr(char * __s, int __c) throw() __asm__("strrchr")
# 234
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 235
extern const char *strrchr(const char * __s, int __c) throw() __asm__("strrchr")
# 236
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 251 "/usr/include/string.h" 3
}
# 261 "/usr/include/string.h" 3
extern "C++" char *strchrnul(char * __s, int __c) throw() __asm__("strchrnul")
# 262
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 263
extern "C++" const char *strchrnul(const char * __s, int __c) throw() __asm__("strchrnul")
# 264
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 273 "/usr/include/string.h" 3
extern size_t strcspn(const char * __s, const char * __reject) throw()
# 274
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 277
extern size_t strspn(const char * __s, const char * __accept) throw()
# 278
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 281
extern "C++" {
# 283
extern char *strpbrk(char * __s, const char * __accept) throw() __asm__("strpbrk")
# 284
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 285
extern const char *strpbrk(const char * __s, const char * __accept) throw() __asm__("strpbrk")
# 286
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 301 "/usr/include/string.h" 3
}
# 308
extern "C++" {
# 310
extern char *strstr(char * __haystack, const char * __needle) throw() __asm__("strstr")
# 311
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 312
extern const char *strstr(const char * __haystack, const char * __needle) throw() __asm__("strstr")
# 313
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 328 "/usr/include/string.h" 3
}
# 336
extern char *strtok(char *__restrict__ __s, const char *__restrict__ __delim) throw()
# 337
 __attribute((__nonnull__(2))); 
# 341
extern char *__strtok_r(char *__restrict__ __s, const char *__restrict__ __delim, char **__restrict__ __save_ptr) throw()
# 344
 __attribute((__nonnull__(2, 3))); 
# 346
extern char *strtok_r(char *__restrict__ __s, const char *__restrict__ __delim, char **__restrict__ __save_ptr) throw()
# 348
 __attribute((__nonnull__(2, 3))); 
# 354
extern "C++" char *strcasestr(char * __haystack, const char * __needle) throw() __asm__("strcasestr")
# 355
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 356
extern "C++" const char *strcasestr(const char * __haystack, const char * __needle) throw() __asm__("strcasestr")
# 358
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 369 "/usr/include/string.h" 3
extern void *memmem(const void * __haystack, size_t __haystacklen, const void * __needle, size_t __needlelen) throw()
# 371
 __attribute((__pure__)) __attribute((__nonnull__(1, 3))); 
# 375
extern void *__mempcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __n) throw()
# 377
 __attribute((__nonnull__(1, 2))); 
# 378
extern void *mempcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __n) throw()
# 380
 __attribute((__nonnull__(1, 2))); 
# 385
extern size_t strlen(const char * __s) throw()
# 386
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 391
extern size_t strnlen(const char * __string, size_t __maxlen) throw()
# 392
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 397
extern char *strerror(int __errnum) throw(); 
# 421 "/usr/include/string.h" 3
extern char *strerror_r(int __errnum, char * __buf, size_t __buflen) throw()
# 422
 __attribute((__nonnull__(2))); 
# 428
extern char *strerror_l(int __errnum, locale_t __l) throw(); 
# 30 "/usr/include/strings.h" 3
extern "C" {
# 34
extern int bcmp(const void * __s1, const void * __s2, size_t __n) throw()
# 35
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 38
extern void bcopy(const void * __src, void * __dest, size_t __n) throw()
# 39
 __attribute((__nonnull__(1, 2))); 
# 42
extern void bzero(void * __s, size_t __n) throw() __attribute((__nonnull__(1))); 
# 46
extern "C++" {
# 48
extern char *index(char * __s, int __c) throw() __asm__("index")
# 49
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 50
extern const char *index(const char * __s, int __c) throw() __asm__("index")
# 51
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 66 "/usr/include/strings.h" 3
}
# 74
extern "C++" {
# 76
extern char *rindex(char * __s, int __c) throw() __asm__("rindex")
# 77
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 78
extern const char *rindex(const char * __s, int __c) throw() __asm__("rindex")
# 79
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 94 "/usr/include/strings.h" 3
}
# 104 "/usr/include/strings.h" 3
extern int ffs(int __i) throw() __attribute((const)); 
# 110
extern int ffsl(long __l) throw() __attribute((const)); 
# 111
__extension__ extern int ffsll(long long __ll) throw()
# 112
 __attribute((const)); 
# 116
extern int strcasecmp(const char * __s1, const char * __s2) throw()
# 117
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 120
extern int strncasecmp(const char * __s1, const char * __s2, size_t __n) throw()
# 121
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 128
extern int strcasecmp_l(const char * __s1, const char * __s2, locale_t __loc) throw()
# 129
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 3))); 
# 133
extern int strncasecmp_l(const char * __s1, const char * __s2, size_t __n, locale_t __loc) throw()
# 135
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 4))); 
# 138
}
# 436 "/usr/include/string.h" 3
extern void explicit_bzero(void * __s, size_t __n) throw() __attribute((__nonnull__(1))); 
# 440
extern char *strsep(char **__restrict__ __stringp, const char *__restrict__ __delim) throw()
# 442
 __attribute((__nonnull__(1, 2))); 
# 447
extern char *strsignal(int __sig) throw(); 
# 450
extern char *__stpcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 451
 __attribute((__nonnull__(1, 2))); 
# 452
extern char *stpcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 453
 __attribute((__nonnull__(1, 2))); 
# 457
extern char *__stpncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 459
 __attribute((__nonnull__(1, 2))); 
# 460
extern char *stpncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) throw()
# 462
 __attribute((__nonnull__(1, 2))); 
# 467
extern int strverscmp(const char * __s1, const char * __s2) throw()
# 468
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 471
extern char *strfry(char * __string) throw() __attribute((__nonnull__(1))); 
# 474
extern void *memfrob(void * __s, size_t __n) throw() __attribute((__nonnull__(1))); 
# 482
extern "C++" char *basename(char * __filename) throw() __asm__("basename")
# 483
 __attribute((__nonnull__(1))); 
# 484
extern "C++" const char *basename(const char * __filename) throw() __asm__("basename")
# 485
 __attribute((__nonnull__(1))); 
# 499 "/usr/include/string.h" 3
}
# 26 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
struct timex { 
# 28
unsigned modes; 
# 29
__syscall_slong_t offset; 
# 30
__syscall_slong_t freq; 
# 31
__syscall_slong_t maxerror; 
# 32
__syscall_slong_t esterror; 
# 33
int status; 
# 34
__syscall_slong_t constant; 
# 35
__syscall_slong_t precision; 
# 36
__syscall_slong_t tolerance; 
# 37
timeval time; 
# 38
__syscall_slong_t tick; 
# 39
__syscall_slong_t ppsfreq; 
# 40
__syscall_slong_t jitter; 
# 41
int shift; 
# 42
__syscall_slong_t stabil; 
# 43
__syscall_slong_t jitcnt; 
# 44
__syscall_slong_t calcnt; 
# 45
__syscall_slong_t errcnt; 
# 46
__syscall_slong_t stbcnt; 
# 48
int tai; 
# 51
int:32; int:32; int:32; int:32; 
# 52
int:32; int:32; int:32; int:32; 
# 53
int:32; int:32; int:32; 
# 54
}; 
# 75 "/usr/include/x86_64-linux-gnu/bits/time.h" 3
extern "C" {
# 78
extern int clock_adjtime(__clockid_t __clock_id, timex * __utx) throw(); 
# 80
}
# 7 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 3
struct tm { 
# 9
int tm_sec; 
# 10
int tm_min; 
# 11
int tm_hour; 
# 12
int tm_mday; 
# 13
int tm_mon; 
# 14
int tm_year; 
# 15
int tm_wday; 
# 16
int tm_yday; 
# 17
int tm_isdst; 
# 20
long tm_gmtoff; 
# 21
const char *tm_zone; 
# 26
}; 
# 8 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 3
struct itimerspec { 
# 10
timespec it_interval; 
# 11
timespec it_value; 
# 12
}; 
# 49 "/usr/include/time.h" 3
struct sigevent; 
# 68 "/usr/include/time.h" 3
extern "C" {
# 72
extern clock_t clock() throw(); 
# 75
extern time_t time(time_t * __timer) throw(); 
# 78
extern double difftime(time_t __time1, time_t __time0) throw()
# 79
 __attribute((const)); 
# 82
extern time_t mktime(tm * __tp) throw(); 
# 88
extern size_t strftime(char *__restrict__ __s, size_t __maxsize, const char *__restrict__ __format, const tm *__restrict__ __tp) throw(); 
# 95
extern char *strptime(const char *__restrict__ __s, const char *__restrict__ __fmt, tm * __tp) throw(); 
# 104
extern size_t strftime_l(char *__restrict__ __s, size_t __maxsize, const char *__restrict__ __format, const tm *__restrict__ __tp, locale_t __loc) throw(); 
# 111
extern char *strptime_l(const char *__restrict__ __s, const char *__restrict__ __fmt, tm * __tp, locale_t __loc) throw(); 
# 119
extern tm *gmtime(const time_t * __timer) throw(); 
# 123
extern tm *localtime(const time_t * __timer) throw(); 
# 128
extern tm *gmtime_r(const time_t *__restrict__ __timer, tm *__restrict__ __tp) throw(); 
# 133
extern tm *localtime_r(const time_t *__restrict__ __timer, tm *__restrict__ __tp) throw(); 
# 139
extern char *asctime(const tm * __tp) throw(); 
# 142
extern char *ctime(const time_t * __timer) throw(); 
# 149
extern char *asctime_r(const tm *__restrict__ __tp, char *__restrict__ __buf) throw(); 
# 153
extern char *ctime_r(const time_t *__restrict__ __timer, char *__restrict__ __buf) throw(); 
# 159
extern char *__tzname[2]; 
# 160
extern int __daylight; 
# 161
extern long __timezone; 
# 166
extern char *tzname[2]; 
# 170
extern void tzset() throw(); 
# 174
extern int daylight; 
# 175
extern long timezone; 
# 190 "/usr/include/time.h" 3
extern time_t timegm(tm * __tp) throw(); 
# 193
extern time_t timelocal(tm * __tp) throw(); 
# 196
extern int dysize(int __year) throw() __attribute((const)); 
# 205 "/usr/include/time.h" 3
extern int nanosleep(const timespec * __requested_time, timespec * __remaining); 
# 210
extern int clock_getres(clockid_t __clock_id, timespec * __res) throw(); 
# 213
extern int clock_gettime(clockid_t __clock_id, timespec * __tp) throw(); 
# 216
extern int clock_settime(clockid_t __clock_id, const timespec * __tp) throw(); 
# 224
extern int clock_nanosleep(clockid_t __clock_id, int __flags, const timespec * __req, timespec * __rem); 
# 229
extern int clock_getcpuclockid(pid_t __pid, clockid_t * __clock_id) throw(); 
# 234
extern int timer_create(clockid_t __clock_id, sigevent *__restrict__ __evp, timer_t *__restrict__ __timerid) throw(); 
# 239
extern int timer_delete(timer_t __timerid) throw(); 
# 242
extern int timer_settime(timer_t __timerid, int __flags, const itimerspec *__restrict__ __value, itimerspec *__restrict__ __ovalue) throw(); 
# 247
extern int timer_gettime(timer_t __timerid, itimerspec * __value) throw(); 
# 251
extern int timer_getoverrun(timer_t __timerid) throw(); 
# 257
extern int timespec_get(timespec * __ts, int __base) throw()
# 258
 __attribute((__nonnull__(1))); 
# 274 "/usr/include/time.h" 3
extern int getdate_err; 
# 283 "/usr/include/time.h" 3
extern tm *getdate(const char * __string); 
# 297 "/usr/include/time.h" 3
extern int getdate_r(const char *__restrict__ __string, tm *__restrict__ __resbufp); 
# 301
}
# 88 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
extern "C" {
# 91
extern clock_t clock() throw(); 
# 96 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
extern void *memset(void *, int, size_t) throw(); 
# 97 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
extern void *memcpy(void *, const void *, size_t) throw(); 
# 99 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
}
# 121 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern "C" {
# 219 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int abs(int a) throw(); 
# 227 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long labs(long a) throw(); 
# 235 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long long llabs(long long a) throw(); 
# 285 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double fabs(double x) throw(); 
# 328 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float fabsf(float x) throw(); 
# 338 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern inline int min(const int a, const int b); 
# 345
extern inline unsigned umin(const unsigned a, const unsigned b); 
# 352
extern inline long long llmin(const long long a, const long long b); 
# 359
extern inline unsigned long long ullmin(const unsigned long long a, const unsigned long long b); 
# 380 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float fminf(float x, float y) throw(); 
# 400 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double fmin(double x, double y) throw(); 
# 413 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern inline int max(const int a, const int b); 
# 421
extern inline unsigned umax(const unsigned a, const unsigned b); 
# 428
extern inline long long llmax(const long long a, const long long b); 
# 435
extern inline unsigned long long ullmax(const unsigned long long a, const unsigned long long b); 
# 456 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float fmaxf(float x, float y) throw(); 
# 476 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double fmax(double, double) throw(); 
# 520 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double sin(double x) throw(); 
# 553 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double cos(double x) throw(); 
# 572 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern void sincos(double x, double * sptr, double * cptr) throw(); 
# 588 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern void sincosf(float x, float * sptr, float * cptr) throw(); 
# 633 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double tan(double x) throw(); 
# 702 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double sqrt(double x) throw(); 
# 774 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double rsqrt(double x); 
# 844 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float rsqrtf(float x); 
# 900 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double log2(double x) throw(); 
# 965 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double exp2(double x) throw(); 
# 1030 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float exp2f(float x) throw(); 
# 1097 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double exp10(double x) throw(); 
# 1160 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float exp10f(float x) throw(); 
# 1253 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double expm1(double x) throw(); 
# 1345 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float expm1f(float x) throw(); 
# 1401 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float log2f(float x) throw(); 
# 1455 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double log10(double x) throw(); 
# 1525 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double log(double x) throw(); 
# 1621 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double log1p(double x) throw(); 
# 1720 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float log1pf(float x) throw(); 
# 1784 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double floor(double x) throw(); 
# 1863 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double exp(double x) throw(); 
# 1904 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double cosh(double x) throw(); 
# 1954 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double sinh(double x) throw(); 
# 2004 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double tanh(double x) throw(); 
# 2059 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double acosh(double x) throw(); 
# 2117 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float acoshf(float x) throw(); 
# 2170 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double asinh(double x) throw(); 
# 2223 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float asinhf(float x) throw(); 
# 2277 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double atanh(double x) throw(); 
# 2331 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float atanhf(float x) throw(); 
# 2380 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double ldexp(double x, int exp) throw(); 
# 2426 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float ldexpf(float x, int exp) throw(); 
# 2478 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double logb(double x) throw(); 
# 2533 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float logbf(float x) throw(); 
# 2573 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int ilogb(double x) throw(); 
# 2613 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int ilogbf(float x) throw(); 
# 2689 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double scalbn(double x, int n) throw(); 
# 2765 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float scalbnf(float x, int n) throw(); 
# 2841 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double scalbln(double x, long n) throw(); 
# 2917 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float scalblnf(float x, long n) throw(); 
# 2994 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double frexp(double x, int * nptr) throw(); 
# 3068 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float frexpf(float x, int * nptr) throw(); 
# 3120 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double round(double x) throw(); 
# 3175 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float roundf(float x) throw(); 
# 3193 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long lround(double x) throw(); 
# 3211 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long lroundf(float x) throw(); 
# 3229 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long long llround(double x) throw(); 
# 3247 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long long llroundf(float x) throw(); 
# 3375 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float rintf(float x) throw(); 
# 3392 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long lrint(double x) throw(); 
# 3409 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long lrintf(float x) throw(); 
# 3426 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long long llrint(double x) throw(); 
# 3443 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long long llrintf(float x) throw(); 
# 3496 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double nearbyint(double x) throw(); 
# 3549 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float nearbyintf(float x) throw(); 
# 3611 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double ceil(double x) throw(); 
# 3661 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double trunc(double x) throw(); 
# 3714 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float truncf(float x) throw(); 
# 3740 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double fdim(double x, double y) throw(); 
# 3766 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float fdimf(float x, float y) throw(); 
# 4066 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double atan2(double y, double x) throw(); 
# 4137 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double atan(double x) throw(); 
# 4160 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double acos(double x) throw(); 
# 4211 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double asin(double x) throw(); 
# 4279 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double hypot(double x, double y) throw(); 
# 4402 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float hypotf(float x, float y) throw(); 
# 5188 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double cbrt(double x) throw(); 
# 5274 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float cbrtf(float x) throw(); 
# 5329 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double rcbrt(double x); 
# 5379 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float rcbrtf(float x); 
# 5439 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double sinpi(double x); 
# 5499 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float sinpif(float x); 
# 5551 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double cospi(double x); 
# 5603 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float cospif(float x); 
# 5633 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern void sincospi(double x, double * sptr, double * cptr); 
# 5663 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern void sincospif(float x, float * sptr, float * cptr); 
# 5996 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double pow(double x, double y) throw(); 
# 6052 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double modf(double x, double * iptr) throw(); 
# 6111 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double fmod(double x, double y) throw(); 
# 6207 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double remainder(double x, double y) throw(); 
# 6306 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float remainderf(float x, float y) throw(); 
# 6378 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double remquo(double x, double y, int * quo) throw(); 
# 6450 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float remquof(float x, float y, int * quo) throw(); 
# 6491 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double j0(double x) throw(); 
# 6533 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float j0f(float x) throw(); 
# 6602 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double j1(double x) throw(); 
# 6671 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float j1f(float x) throw(); 
# 6714 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double jn(int n, double x) throw(); 
# 6757 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float jnf(int n, float x) throw(); 
# 6818 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double y0(double x) throw(); 
# 6879 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float y0f(float x) throw(); 
# 6940 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double y1(double x) throw(); 
# 7001 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float y1f(float x) throw(); 
# 7064 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double yn(int n, double x) throw(); 
# 7127 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float ynf(int n, float x) throw(); 
# 7316 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double erf(double x) throw(); 
# 7398 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float erff(float x) throw(); 
# 7470 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double erfinv(double x); 
# 7535 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float erfinvf(float x); 
# 7574 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double erfc(double x) throw(); 
# 7612 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float erfcf(float x) throw(); 
# 7729 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double lgamma(double x) throw(); 
# 7791 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double erfcinv(double x); 
# 7846 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float erfcinvf(float x); 
# 7914 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double normcdfinv(double x); 
# 7982 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float normcdfinvf(float x); 
# 8025 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double normcdf(double x); 
# 8068 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float normcdff(float x); 
# 8132 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double erfcx(double x); 
# 8196 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float erfcxf(float x); 
# 8315 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float lgammaf(float x) throw(); 
# 8413 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double tgamma(double x) throw(); 
# 8511 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float tgammaf(float x) throw(); 
# 8524 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double copysign(double x, double y) throw(); 
# 8537 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float copysignf(float x, float y) throw(); 
# 8556 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double nextafter(double x, double y) throw(); 
# 8575 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float nextafterf(float x, float y) throw(); 
# 8591 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double nan(const char * tagp) throw(); 
# 8607 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float nanf(const char * tagp) throw(); 
# 8614 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __isinff(float) throw(); 
# 8615 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __isnanf(float) throw(); 
# 8625 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __finite(double) throw(); 
# 8626 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __finitef(float) throw(); 
# 8627 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __signbit(double) throw(); 
# 8628 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __isnan(double) throw(); 
# 8629 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __isinf(double) throw(); 
# 8632 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __signbitf(float) throw(); 
# 8791 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double fma(double x, double y, double z) throw(); 
# 8949 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float fmaf(float x, float y, float z) throw(); 
# 8960 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __signbitl(long double) throw(); 
# 8966 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __finitel(long double) throw(); 
# 8967 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __isinfl(long double) throw(); 
# 8968 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __isnanl(long double) throw(); 
# 9018 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float acosf(float x) throw(); 
# 9077 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float asinf(float x) throw(); 
# 9157 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float atanf(float x) throw(); 
# 9454 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float atan2f(float y, float x) throw(); 
# 9488 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float cosf(float x) throw(); 
# 9530 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float sinf(float x) throw(); 
# 9572 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float tanf(float x) throw(); 
# 9613 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float coshf(float x) throw(); 
# 9663 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float sinhf(float x) throw(); 
# 9713 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float tanhf(float x) throw(); 
# 9765 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float logf(float x) throw(); 
# 9845 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float expf(float x) throw(); 
# 9897 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float log10f(float x) throw(); 
# 9952 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float modff(float x, float * iptr) throw(); 
# 10282 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float powf(float x, float y) throw(); 
# 10351 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float sqrtf(float x) throw(); 
# 10410 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float ceilf(float x) throw(); 
# 10471 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float floorf(float x) throw(); 
# 10529 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float fmodf(float x, float y) throw(); 
# 10544 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
}
# 67 "/usr/include/c++/9/bits/cpp_type_traits.h" 3
extern "C++" {
# 69
namespace std __attribute((__visibility__("default"))) { 
# 73
struct __true_type { }; 
# 74
struct __false_type { }; 
# 76
template< bool > 
# 77
struct __truth_type { 
# 78
typedef __false_type __type; }; 
# 81
template<> struct __truth_type< true>  { 
# 82
typedef __true_type __type; }; 
# 86
template< class _Sp, class _Tp> 
# 87
struct __traitor { 
# 89
enum { __value = ((bool)_Sp::__value) || ((bool)_Tp::__value)}; 
# 90
typedef typename __truth_type< __value> ::__type __type; 
# 91
}; 
# 94
template< class , class > 
# 95
struct __are_same { 
# 97
enum { __value}; 
# 98
typedef __false_type __type; 
# 99
}; 
# 101
template< class _Tp> 
# 102
struct __are_same< _Tp, _Tp>  { 
# 104
enum { __value = 1}; 
# 105
typedef __true_type __type; 
# 106
}; 
# 109
template< class _Tp> 
# 110
struct __is_void { 
# 112
enum { __value}; 
# 113
typedef __false_type __type; 
# 114
}; 
# 117
template<> struct __is_void< void>  { 
# 119
enum { __value = 1}; 
# 120
typedef __true_type __type; 
# 121
}; 
# 126
template< class _Tp> 
# 127
struct __is_integer { 
# 129
enum { __value}; 
# 130
typedef __false_type __type; 
# 131
}; 
# 138
template<> struct __is_integer< bool>  { 
# 140
enum { __value = 1}; 
# 141
typedef __true_type __type; 
# 142
}; 
# 145
template<> struct __is_integer< char>  { 
# 147
enum { __value = 1}; 
# 148
typedef __true_type __type; 
# 149
}; 
# 152
template<> struct __is_integer< signed char>  { 
# 154
enum { __value = 1}; 
# 155
typedef __true_type __type; 
# 156
}; 
# 159
template<> struct __is_integer< unsigned char>  { 
# 161
enum { __value = 1}; 
# 162
typedef __true_type __type; 
# 163
}; 
# 167
template<> struct __is_integer< wchar_t>  { 
# 169
enum { __value = 1}; 
# 170
typedef __true_type __type; 
# 171
}; 
# 185 "/usr/include/c++/9/bits/cpp_type_traits.h" 3
template<> struct __is_integer< char16_t>  { 
# 187
enum { __value = 1}; 
# 188
typedef __true_type __type; 
# 189
}; 
# 192
template<> struct __is_integer< char32_t>  { 
# 194
enum { __value = 1}; 
# 195
typedef __true_type __type; 
# 196
}; 
# 200
template<> struct __is_integer< short>  { 
# 202
enum { __value = 1}; 
# 203
typedef __true_type __type; 
# 204
}; 
# 207
template<> struct __is_integer< unsigned short>  { 
# 209
enum { __value = 1}; 
# 210
typedef __true_type __type; 
# 211
}; 
# 214
template<> struct __is_integer< int>  { 
# 216
enum { __value = 1}; 
# 217
typedef __true_type __type; 
# 218
}; 
# 221
template<> struct __is_integer< unsigned>  { 
# 223
enum { __value = 1}; 
# 224
typedef __true_type __type; 
# 225
}; 
# 228
template<> struct __is_integer< long>  { 
# 230
enum { __value = 1}; 
# 231
typedef __true_type __type; 
# 232
}; 
# 235
template<> struct __is_integer< unsigned long>  { 
# 237
enum { __value = 1}; 
# 238
typedef __true_type __type; 
# 239
}; 
# 242
template<> struct __is_integer< long long>  { 
# 244
enum { __value = 1}; 
# 245
typedef __true_type __type; 
# 246
}; 
# 249
template<> struct __is_integer< unsigned long long>  { 
# 251
enum { __value = 1}; 
# 252
typedef __true_type __type; 
# 253
}; 
# 270 "/usr/include/c++/9/bits/cpp_type_traits.h" 3
template<> struct __is_integer< __int128>  { enum { __value = 1}; typedef __true_type __type; }; template<> struct __is_integer< unsigned __int128>  { enum { __value = 1}; typedef __true_type __type; }; 
# 287 "/usr/include/c++/9/bits/cpp_type_traits.h" 3
template< class _Tp> 
# 288
struct __is_floating { 
# 290
enum { __value}; 
# 291
typedef __false_type __type; 
# 292
}; 
# 296
template<> struct __is_floating< float>  { 
# 298
enum { __value = 1}; 
# 299
typedef __true_type __type; 
# 300
}; 
# 303
template<> struct __is_floating< double>  { 
# 305
enum { __value = 1}; 
# 306
typedef __true_type __type; 
# 307
}; 
# 310
template<> struct __is_floating< long double>  { 
# 312
enum { __value = 1}; 
# 313
typedef __true_type __type; 
# 314
}; 
# 319
template< class _Tp> 
# 320
struct __is_pointer { 
# 322
enum { __value}; 
# 323
typedef __false_type __type; 
# 324
}; 
# 326
template< class _Tp> 
# 327
struct __is_pointer< _Tp *>  { 
# 329
enum { __value = 1}; 
# 330
typedef __true_type __type; 
# 331
}; 
# 336
template< class _Tp> 
# 337
struct __is_arithmetic : public __traitor< __is_integer< _Tp> , __is_floating< _Tp> >  { 
# 339
}; 
# 344
template< class _Tp> 
# 345
struct __is_scalar : public __traitor< __is_arithmetic< _Tp> , __is_pointer< _Tp> >  { 
# 347
}; 
# 352
template< class _Tp> 
# 353
struct __is_char { 
# 355
enum { __value}; 
# 356
typedef __false_type __type; 
# 357
}; 
# 360
template<> struct __is_char< char>  { 
# 362
enum { __value = 1}; 
# 363
typedef __true_type __type; 
# 364
}; 
# 368
template<> struct __is_char< wchar_t>  { 
# 370
enum { __value = 1}; 
# 371
typedef __true_type __type; 
# 372
}; 
# 375
template< class _Tp> 
# 376
struct __is_byte { 
# 378
enum { __value}; 
# 379
typedef __false_type __type; 
# 380
}; 
# 383
template<> struct __is_byte< char>  { 
# 385
enum { __value = 1}; 
# 386
typedef __true_type __type; 
# 387
}; 
# 390
template<> struct __is_byte< signed char>  { 
# 392
enum { __value = 1}; 
# 393
typedef __true_type __type; 
# 394
}; 
# 397
template<> struct __is_byte< unsigned char>  { 
# 399
enum { __value = 1}; 
# 400
typedef __true_type __type; 
# 401
}; 
# 417 "/usr/include/c++/9/bits/cpp_type_traits.h" 3
template< class _Tp> 
# 418
struct __is_move_iterator { 
# 420
enum { __value}; 
# 421
typedef __false_type __type; 
# 422
}; 
# 426
template< class _Iterator> inline _Iterator 
# 428
__miter_base(_Iterator __it) 
# 429
{ return __it; } 
# 432
}
# 433
}
# 37 "/usr/include/c++/9/ext/type_traits.h" 3
extern "C++" {
# 39
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 44
template< bool , class > 
# 45
struct __enable_if { 
# 46
}; 
# 48
template< class _Tp> 
# 49
struct __enable_if< true, _Tp>  { 
# 50
typedef _Tp __type; }; 
# 54
template< bool _Cond, class _Iftrue, class _Iffalse> 
# 55
struct __conditional_type { 
# 56
typedef _Iftrue __type; }; 
# 58
template< class _Iftrue, class _Iffalse> 
# 59
struct __conditional_type< false, _Iftrue, _Iffalse>  { 
# 60
typedef _Iffalse __type; }; 
# 64
template< class _Tp> 
# 65
struct __add_unsigned { 
# 68
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp>  __if_type; 
# 71
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type; 
# 72
}; 
# 75
template<> struct __add_unsigned< char>  { 
# 76
typedef unsigned char __type; }; 
# 79
template<> struct __add_unsigned< signed char>  { 
# 80
typedef unsigned char __type; }; 
# 83
template<> struct __add_unsigned< short>  { 
# 84
typedef unsigned short __type; }; 
# 87
template<> struct __add_unsigned< int>  { 
# 88
typedef unsigned __type; }; 
# 91
template<> struct __add_unsigned< long>  { 
# 92
typedef unsigned long __type; }; 
# 95
template<> struct __add_unsigned< long long>  { 
# 96
typedef unsigned long long __type; }; 
# 100
template<> struct __add_unsigned< bool> ; 
# 103
template<> struct __add_unsigned< wchar_t> ; 
# 107
template< class _Tp> 
# 108
struct __remove_unsigned { 
# 111
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp>  __if_type; 
# 114
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type; 
# 115
}; 
# 118
template<> struct __remove_unsigned< char>  { 
# 119
typedef signed char __type; }; 
# 122
template<> struct __remove_unsigned< unsigned char>  { 
# 123
typedef signed char __type; }; 
# 126
template<> struct __remove_unsigned< unsigned short>  { 
# 127
typedef short __type; }; 
# 130
template<> struct __remove_unsigned< unsigned>  { 
# 131
typedef int __type; }; 
# 134
template<> struct __remove_unsigned< unsigned long>  { 
# 135
typedef long __type; }; 
# 138
template<> struct __remove_unsigned< unsigned long long>  { 
# 139
typedef long long __type; }; 
# 143
template<> struct __remove_unsigned< bool> ; 
# 146
template<> struct __remove_unsigned< wchar_t> ; 
# 150
template< class _Type> inline bool 
# 152
__is_null_pointer(_Type *__ptr) 
# 153
{ return __ptr == 0; } 
# 155
template< class _Type> inline bool 
# 157
__is_null_pointer(_Type) 
# 158
{ return false; } 
# 162
inline bool __is_null_pointer(std::nullptr_t) 
# 163
{ return true; } 
# 167
template< class _Tp, bool  = std::template __is_integer< _Tp> ::__value> 
# 168
struct __promote { 
# 169
typedef double __type; }; 
# 174
template< class _Tp> 
# 175
struct __promote< _Tp, false>  { 
# 176
}; 
# 179
template<> struct __promote< long double>  { 
# 180
typedef long double __type; }; 
# 183
template<> struct __promote< double>  { 
# 184
typedef double __type; }; 
# 187
template<> struct __promote< float>  { 
# 188
typedef float __type; }; 
# 190
template< class _Tp, class _Up, class 
# 191
_Tp2 = typename __promote< _Tp> ::__type, class 
# 192
_Up2 = typename __promote< _Up> ::__type> 
# 193
struct __promote_2 { 
# 195
typedef __typeof__(_Tp2() + _Up2()) __type; 
# 196
}; 
# 198
template< class _Tp, class _Up, class _Vp, class 
# 199
_Tp2 = typename __promote< _Tp> ::__type, class 
# 200
_Up2 = typename __promote< _Up> ::__type, class 
# 201
_Vp2 = typename __promote< _Vp> ::__type> 
# 202
struct __promote_3 { 
# 204
typedef __typeof__((_Tp2() + _Up2()) + _Vp2()) __type; 
# 205
}; 
# 207
template< class _Tp, class _Up, class _Vp, class _Wp, class 
# 208
_Tp2 = typename __promote< _Tp> ::__type, class 
# 209
_Up2 = typename __promote< _Up> ::__type, class 
# 210
_Vp2 = typename __promote< _Vp> ::__type, class 
# 211
_Wp2 = typename __promote< _Wp> ::__type> 
# 212
struct __promote_4 { 
# 214
typedef __typeof__(((_Tp2() + _Up2()) + _Vp2()) + _Wp2()) __type; 
# 215
}; 
# 218
}
# 219
}
# 34 "/usr/include/math.h" 3
extern "C" {
# 149 "/usr/include/math.h" 3
typedef float float_t; 
# 150
typedef double double_t; 
# 238 "/usr/include/math.h" 3
enum { 
# 239
FP_INT_UPWARD, 
# 242
FP_INT_DOWNWARD, 
# 245
FP_INT_TOWARDZERO, 
# 248
FP_INT_TONEARESTFROMZERO, 
# 251
FP_INT_TONEAREST
# 254
}; 
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3
extern int __fpclassify(double __value) throw()
# 22
 __attribute((const)); 
# 25
extern int __signbit(double __value) throw()
# 26
 __attribute((const)); 
# 30
extern int __isinf(double __value) throw() __attribute((const)); 
# 33
extern int __finite(double __value) throw() __attribute((const)); 
# 36
extern int __isnan(double __value) throw() __attribute((const)); 
# 39
extern int __iseqsig(double __x, double __y) throw(); 
# 42
extern int __issignaling(double __value) throw()
# 43
 __attribute((const)); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double acos(double __x) throw(); extern double __acos(double __x) throw(); 
# 55
extern double asin(double __x) throw(); extern double __asin(double __x) throw(); 
# 57
extern double atan(double __x) throw(); extern double __atan(double __x) throw(); 
# 59
extern double atan2(double __y, double __x) throw(); extern double __atan2(double __y, double __x) throw(); 
# 62
extern double cos(double __x) throw(); extern double __cos(double __x) throw(); 
# 64
extern double sin(double __x) throw(); extern double __sin(double __x) throw(); 
# 66
extern double tan(double __x) throw(); extern double __tan(double __x) throw(); 
# 71
extern double cosh(double __x) throw(); extern double __cosh(double __x) throw(); 
# 73
extern double sinh(double __x) throw(); extern double __sinh(double __x) throw(); 
# 75
extern double tanh(double __x) throw(); extern double __tanh(double __x) throw(); 
# 79
extern void sincos(double __x, double * __sinx, double * __cosx) throw(); extern void __sincos(double __x, double * __sinx, double * __cosx) throw(); 
# 85
extern double acosh(double __x) throw(); extern double __acosh(double __x) throw(); 
# 87
extern double asinh(double __x) throw(); extern double __asinh(double __x) throw(); 
# 89
extern double atanh(double __x) throw(); extern double __atanh(double __x) throw(); 
# 95
extern double exp(double __x) throw(); extern double __exp(double __x) throw(); 
# 98
extern double frexp(double __x, int * __exponent) throw(); extern double __frexp(double __x, int * __exponent) throw(); 
# 101
extern double ldexp(double __x, int __exponent) throw(); extern double __ldexp(double __x, int __exponent) throw(); 
# 104
extern double log(double __x) throw(); extern double __log(double __x) throw(); 
# 107
extern double log10(double __x) throw(); extern double __log10(double __x) throw(); 
# 110
extern double modf(double __x, double * __iptr) throw(); extern double __modf(double __x, double * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern double exp10(double __x) throw(); extern double __exp10(double __x) throw(); 
# 119
extern double expm1(double __x) throw(); extern double __expm1(double __x) throw(); 
# 122
extern double log1p(double __x) throw(); extern double __log1p(double __x) throw(); 
# 125
extern double logb(double __x) throw(); extern double __logb(double __x) throw(); 
# 130
extern double exp2(double __x) throw(); extern double __exp2(double __x) throw(); 
# 133
extern double log2(double __x) throw(); extern double __log2(double __x) throw(); 
# 140
extern double pow(double __x, double __y) throw(); extern double __pow(double __x, double __y) throw(); 
# 143
extern double sqrt(double __x) throw(); extern double __sqrt(double __x) throw(); 
# 147
extern double hypot(double __x, double __y) throw(); extern double __hypot(double __x, double __y) throw(); 
# 152
extern double cbrt(double __x) throw(); extern double __cbrt(double __x) throw(); 
# 159
extern double ceil(double __x) throw() __attribute((const)); extern double __ceil(double __x) throw() __attribute((const)); 
# 162
extern double fabs(double __x) throw() __attribute((const)); extern double __fabs(double __x) throw() __attribute((const)); 
# 165
extern double floor(double __x) throw() __attribute((const)); extern double __floor(double __x) throw() __attribute((const)); 
# 168
extern double fmod(double __x, double __y) throw(); extern double __fmod(double __x, double __y) throw(); 
# 182 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int finite(double __value) throw() __attribute((const)); 
# 185
extern double drem(double __x, double __y) throw(); extern double __drem(double __x, double __y) throw(); 
# 189
extern double significand(double __x) throw(); extern double __significand(double __x) throw(); 
# 196
extern double copysign(double __x, double __y) throw() __attribute((const)); extern double __copysign(double __x, double __y) throw() __attribute((const)); 
# 201
extern double nan(const char * __tagb) throw(); extern double __nan(const char * __tagb) throw(); 
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double j0(double) throw(); extern double __j0(double) throw(); 
# 218
extern double j1(double) throw(); extern double __j1(double) throw(); 
# 219
extern double jn(int, double) throw(); extern double __jn(int, double) throw(); 
# 220
extern double y0(double) throw(); extern double __y0(double) throw(); 
# 221
extern double y1(double) throw(); extern double __y1(double) throw(); 
# 222
extern double yn(int, double) throw(); extern double __yn(int, double) throw(); 
# 228
extern double erf(double) throw(); extern double __erf(double) throw(); 
# 229
extern double erfc(double) throw(); extern double __erfc(double) throw(); 
# 230
extern double lgamma(double) throw(); extern double __lgamma(double) throw(); 
# 235
extern double tgamma(double) throw(); extern double __tgamma(double) throw(); 
# 241
extern double gamma(double) throw(); extern double __gamma(double) throw(); 
# 249
extern double lgamma_r(double, int * __signgamp) throw(); extern double __lgamma_r(double, int * __signgamp) throw(); 
# 256
extern double rint(double __x) throw(); extern double __rint(double __x) throw(); 
# 259
extern double nextafter(double __x, double __y) throw(); extern double __nextafter(double __x, double __y) throw(); 
# 261
extern double nexttoward(double __x, long double __y) throw(); extern double __nexttoward(double __x, long double __y) throw(); 
# 266
extern double nextdown(double __x) throw(); extern double __nextdown(double __x) throw(); 
# 268
extern double nextup(double __x) throw(); extern double __nextup(double __x) throw(); 
# 272
extern double remainder(double __x, double __y) throw(); extern double __remainder(double __x, double __y) throw(); 
# 276
extern double scalbn(double __x, int __n) throw(); extern double __scalbn(double __x, int __n) throw(); 
# 280
extern int ilogb(double __x) throw(); extern int __ilogb(double __x) throw(); 
# 285
extern long llogb(double __x) throw(); extern long __llogb(double __x) throw(); 
# 290
extern double scalbln(double __x, long __n) throw(); extern double __scalbln(double __x, long __n) throw(); 
# 294
extern double nearbyint(double __x) throw(); extern double __nearbyint(double __x) throw(); 
# 298
extern double round(double __x) throw() __attribute((const)); extern double __round(double __x) throw() __attribute((const)); 
# 302
extern double trunc(double __x) throw() __attribute((const)); extern double __trunc(double __x) throw() __attribute((const)); 
# 307
extern double remquo(double __x, double __y, int * __quo) throw(); extern double __remquo(double __x, double __y, int * __quo) throw(); 
# 314
extern long lrint(double __x) throw(); extern long __lrint(double __x) throw(); 
# 316
__extension__ extern long long llrint(double __x) throw(); extern long long __llrint(double __x) throw(); 
# 320
extern long lround(double __x) throw(); extern long __lround(double __x) throw(); 
# 322
__extension__ extern long long llround(double __x) throw(); extern long long __llround(double __x) throw(); 
# 326
extern double fdim(double __x, double __y) throw(); extern double __fdim(double __x, double __y) throw(); 
# 329
extern double fmax(double __x, double __y) throw() __attribute((const)); extern double __fmax(double __x, double __y) throw() __attribute((const)); 
# 332
extern double fmin(double __x, double __y) throw() __attribute((const)); extern double __fmin(double __x, double __y) throw() __attribute((const)); 
# 335
extern double fma(double __x, double __y, double __z) throw(); extern double __fma(double __x, double __y, double __z) throw(); 
# 340
extern double roundeven(double __x) throw() __attribute((const)); extern double __roundeven(double __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfp(double __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfp(double __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfp(double __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfp(double __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpx(double __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpx(double __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpx(double __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpx(double __x, int __round, unsigned __width) throw(); 
# 365
extern double fmaxmag(double __x, double __y) throw() __attribute((const)); extern double __fmaxmag(double __x, double __y) throw() __attribute((const)); 
# 368
extern double fminmag(double __x, double __y) throw() __attribute((const)); extern double __fminmag(double __x, double __y) throw() __attribute((const)); 
# 371
extern int canonicalize(double * __cx, const double * __x) throw(); 
# 376
extern int totalorder(const double * __x, const double * __y) throw()
# 378
 __attribute((__pure__)); 
# 381
extern int totalordermag(const double * __x, const double * __y) throw()
# 383
 __attribute((__pure__)); 
# 386
extern double getpayload(const double * __x) throw(); extern double __getpayload(const double * __x) throw(); 
# 389
extern int setpayload(double * __x, double __payload) throw(); 
# 392
extern int setpayloadsig(double * __x, double __payload) throw(); 
# 400
extern double scalb(double __x, double __n) throw(); extern double __scalb(double __x, double __n) throw(); 
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3
extern int __fpclassifyf(float __value) throw()
# 22
 __attribute((const)); 
# 25
extern int __signbitf(float __value) throw()
# 26
 __attribute((const)); 
# 30
extern int __isinff(float __value) throw() __attribute((const)); 
# 33
extern int __finitef(float __value) throw() __attribute((const)); 
# 36
extern int __isnanf(float __value) throw() __attribute((const)); 
# 39
extern int __iseqsigf(float __x, float __y) throw(); 
# 42
extern int __issignalingf(float __value) throw()
# 43
 __attribute((const)); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float acosf(float __x) throw(); extern float __acosf(float __x) throw(); 
# 55
extern float asinf(float __x) throw(); extern float __asinf(float __x) throw(); 
# 57
extern float atanf(float __x) throw(); extern float __atanf(float __x) throw(); 
# 59
extern float atan2f(float __y, float __x) throw(); extern float __atan2f(float __y, float __x) throw(); 
# 62
extern float cosf(float __x) throw(); 
# 64
extern float sinf(float __x) throw(); 
# 66
extern float tanf(float __x) throw(); 
# 71
extern float coshf(float __x) throw(); extern float __coshf(float __x) throw(); 
# 73
extern float sinhf(float __x) throw(); extern float __sinhf(float __x) throw(); 
# 75
extern float tanhf(float __x) throw(); extern float __tanhf(float __x) throw(); 
# 79
extern void sincosf(float __x, float * __sinx, float * __cosx) throw(); 
# 85
extern float acoshf(float __x) throw(); extern float __acoshf(float __x) throw(); 
# 87
extern float asinhf(float __x) throw(); extern float __asinhf(float __x) throw(); 
# 89
extern float atanhf(float __x) throw(); extern float __atanhf(float __x) throw(); 
# 95
extern float expf(float __x) throw(); 
# 98
extern float frexpf(float __x, int * __exponent) throw(); extern float __frexpf(float __x, int * __exponent) throw(); 
# 101
extern float ldexpf(float __x, int __exponent) throw(); extern float __ldexpf(float __x, int __exponent) throw(); 
# 104
extern float logf(float __x) throw(); 
# 107
extern float log10f(float __x) throw(); 
# 110
extern float modff(float __x, float * __iptr) throw(); extern float __modff(float __x, float * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern float exp10f(float __x) throw(); 
# 119
extern float expm1f(float __x) throw(); extern float __expm1f(float __x) throw(); 
# 122
extern float log1pf(float __x) throw(); extern float __log1pf(float __x) throw(); 
# 125
extern float logbf(float __x) throw(); extern float __logbf(float __x) throw(); 
# 130
extern float exp2f(float __x) throw(); extern float __exp2f(float __x) throw(); 
# 133
extern float log2f(float __x) throw(); 
# 140
extern float powf(float __x, float __y) throw(); 
# 143
extern float sqrtf(float __x) throw(); extern float __sqrtf(float __x) throw(); 
# 147
extern float hypotf(float __x, float __y) throw(); extern float __hypotf(float __x, float __y) throw(); 
# 152
extern float cbrtf(float __x) throw(); extern float __cbrtf(float __x) throw(); 
# 159
extern float ceilf(float __x) throw() __attribute((const)); extern float __ceilf(float __x) throw() __attribute((const)); 
# 162
extern float fabsf(float __x) throw() __attribute((const)); extern float __fabsf(float __x) throw() __attribute((const)); 
# 165
extern float floorf(float __x) throw() __attribute((const)); extern float __floorf(float __x) throw() __attribute((const)); 
# 168
extern float fmodf(float __x, float __y) throw(); extern float __fmodf(float __x, float __y) throw(); 
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int isinff(float __value) throw() __attribute((const)); 
# 182
extern int finitef(float __value) throw() __attribute((const)); 
# 185
extern float dremf(float __x, float __y) throw(); extern float __dremf(float __x, float __y) throw(); 
# 189
extern float significandf(float __x) throw(); extern float __significandf(float __x) throw(); 
# 196
extern float copysignf(float __x, float __y) throw() __attribute((const)); extern float __copysignf(float __x, float __y) throw() __attribute((const)); 
# 201
extern float nanf(const char * __tagb) throw(); extern float __nanf(const char * __tagb) throw(); 
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int isnanf(float __value) throw() __attribute((const)); 
# 217
extern float j0f(float) throw(); extern float __j0f(float) throw(); 
# 218
extern float j1f(float) throw(); extern float __j1f(float) throw(); 
# 219
extern float jnf(int, float) throw(); extern float __jnf(int, float) throw(); 
# 220
extern float y0f(float) throw(); extern float __y0f(float) throw(); 
# 221
extern float y1f(float) throw(); extern float __y1f(float) throw(); 
# 222
extern float ynf(int, float) throw(); extern float __ynf(int, float) throw(); 
# 228
extern float erff(float) throw(); extern float __erff(float) throw(); 
# 229
extern float erfcf(float) throw(); extern float __erfcf(float) throw(); 
# 230
extern float lgammaf(float) throw(); extern float __lgammaf(float) throw(); 
# 235
extern float tgammaf(float) throw(); extern float __tgammaf(float) throw(); 
# 241
extern float gammaf(float) throw(); extern float __gammaf(float) throw(); 
# 249
extern float lgammaf_r(float, int * __signgamp) throw(); extern float __lgammaf_r(float, int * __signgamp) throw(); 
# 256
extern float rintf(float __x) throw(); extern float __rintf(float __x) throw(); 
# 259
extern float nextafterf(float __x, float __y) throw(); extern float __nextafterf(float __x, float __y) throw(); 
# 261
extern float nexttowardf(float __x, long double __y) throw(); extern float __nexttowardf(float __x, long double __y) throw(); 
# 266
extern float nextdownf(float __x) throw(); extern float __nextdownf(float __x) throw(); 
# 268
extern float nextupf(float __x) throw(); extern float __nextupf(float __x) throw(); 
# 272
extern float remainderf(float __x, float __y) throw(); extern float __remainderf(float __x, float __y) throw(); 
# 276
extern float scalbnf(float __x, int __n) throw(); extern float __scalbnf(float __x, int __n) throw(); 
# 280
extern int ilogbf(float __x) throw(); extern int __ilogbf(float __x) throw(); 
# 285
extern long llogbf(float __x) throw(); extern long __llogbf(float __x) throw(); 
# 290
extern float scalblnf(float __x, long __n) throw(); extern float __scalblnf(float __x, long __n) throw(); 
# 294
extern float nearbyintf(float __x) throw(); extern float __nearbyintf(float __x) throw(); 
# 298
extern float roundf(float __x) throw() __attribute((const)); extern float __roundf(float __x) throw() __attribute((const)); 
# 302
extern float truncf(float __x) throw() __attribute((const)); extern float __truncf(float __x) throw() __attribute((const)); 
# 307
extern float remquof(float __x, float __y, int * __quo) throw(); extern float __remquof(float __x, float __y, int * __quo) throw(); 
# 314
extern long lrintf(float __x) throw(); extern long __lrintf(float __x) throw(); 
# 316
__extension__ extern long long llrintf(float __x) throw(); extern long long __llrintf(float __x) throw(); 
# 320
extern long lroundf(float __x) throw(); extern long __lroundf(float __x) throw(); 
# 322
__extension__ extern long long llroundf(float __x) throw(); extern long long __llroundf(float __x) throw(); 
# 326
extern float fdimf(float __x, float __y) throw(); extern float __fdimf(float __x, float __y) throw(); 
# 329
extern float fmaxf(float __x, float __y) throw() __attribute((const)); extern float __fmaxf(float __x, float __y) throw() __attribute((const)); 
# 332
extern float fminf(float __x, float __y) throw() __attribute((const)); extern float __fminf(float __x, float __y) throw() __attribute((const)); 
# 335
extern float fmaf(float __x, float __y, float __z) throw(); extern float __fmaf(float __x, float __y, float __z) throw(); 
# 340
extern float roundevenf(float __x) throw() __attribute((const)); extern float __roundevenf(float __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfpf(float __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpf(float __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfpf(float __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpf(float __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpxf(float __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpxf(float __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpxf(float __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpxf(float __x, int __round, unsigned __width) throw(); 
# 365
extern float fmaxmagf(float __x, float __y) throw() __attribute((const)); extern float __fmaxmagf(float __x, float __y) throw() __attribute((const)); 
# 368
extern float fminmagf(float __x, float __y) throw() __attribute((const)); extern float __fminmagf(float __x, float __y) throw() __attribute((const)); 
# 371
extern int canonicalizef(float * __cx, const float * __x) throw(); 
# 376
extern int totalorderf(const float * __x, const float * __y) throw()
# 378
 __attribute((__pure__)); 
# 381
extern int totalordermagf(const float * __x, const float * __y) throw()
# 383
 __attribute((__pure__)); 
# 386
extern float getpayloadf(const float * __x) throw(); extern float __getpayloadf(const float * __x) throw(); 
# 389
extern int setpayloadf(float * __x, float __payload) throw(); 
# 392
extern int setpayloadsigf(float * __x, float __payload) throw(); 
# 400
extern float scalbf(float __x, float __n) throw(); extern float __scalbf(float __x, float __n) throw(); 
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3
extern int __fpclassifyl(long double __value) throw()
# 22
 __attribute((const)); 
# 25
extern int __signbitl(long double __value) throw()
# 26
 __attribute((const)); 
# 30
extern int __isinfl(long double __value) throw() __attribute((const)); 
# 33
extern int __finitel(long double __value) throw() __attribute((const)); 
# 36
extern int __isnanl(long double __value) throw() __attribute((const)); 
# 39
extern int __iseqsigl(long double __x, long double __y) throw(); 
# 42
extern int __issignalingl(long double __value) throw()
# 43
 __attribute((const)); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double acosl(long double __x) throw(); extern long double __acosl(long double __x) throw(); 
# 55
extern long double asinl(long double __x) throw(); extern long double __asinl(long double __x) throw(); 
# 57
extern long double atanl(long double __x) throw(); extern long double __atanl(long double __x) throw(); 
# 59
extern long double atan2l(long double __y, long double __x) throw(); extern long double __atan2l(long double __y, long double __x) throw(); 
# 62
extern long double cosl(long double __x) throw(); extern long double __cosl(long double __x) throw(); 
# 64
extern long double sinl(long double __x) throw(); extern long double __sinl(long double __x) throw(); 
# 66
extern long double tanl(long double __x) throw(); extern long double __tanl(long double __x) throw(); 
# 71
extern long double coshl(long double __x) throw(); extern long double __coshl(long double __x) throw(); 
# 73
extern long double sinhl(long double __x) throw(); extern long double __sinhl(long double __x) throw(); 
# 75
extern long double tanhl(long double __x) throw(); extern long double __tanhl(long double __x) throw(); 
# 79
extern void sincosl(long double __x, long double * __sinx, long double * __cosx) throw(); extern void __sincosl(long double __x, long double * __sinx, long double * __cosx) throw(); 
# 85
extern long double acoshl(long double __x) throw(); extern long double __acoshl(long double __x) throw(); 
# 87
extern long double asinhl(long double __x) throw(); extern long double __asinhl(long double __x) throw(); 
# 89
extern long double atanhl(long double __x) throw(); extern long double __atanhl(long double __x) throw(); 
# 95
extern long double expl(long double __x) throw(); extern long double __expl(long double __x) throw(); 
# 98
extern long double frexpl(long double __x, int * __exponent) throw(); extern long double __frexpl(long double __x, int * __exponent) throw(); 
# 101
extern long double ldexpl(long double __x, int __exponent) throw(); extern long double __ldexpl(long double __x, int __exponent) throw(); 
# 104
extern long double logl(long double __x) throw(); extern long double __logl(long double __x) throw(); 
# 107
extern long double log10l(long double __x) throw(); extern long double __log10l(long double __x) throw(); 
# 110
extern long double modfl(long double __x, long double * __iptr) throw(); extern long double __modfl(long double __x, long double * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern long double exp10l(long double __x) throw(); extern long double __exp10l(long double __x) throw(); 
# 119
extern long double expm1l(long double __x) throw(); extern long double __expm1l(long double __x) throw(); 
# 122
extern long double log1pl(long double __x) throw(); extern long double __log1pl(long double __x) throw(); 
# 125
extern long double logbl(long double __x) throw(); extern long double __logbl(long double __x) throw(); 
# 130
extern long double exp2l(long double __x) throw(); extern long double __exp2l(long double __x) throw(); 
# 133
extern long double log2l(long double __x) throw(); extern long double __log2l(long double __x) throw(); 
# 140
extern long double powl(long double __x, long double __y) throw(); extern long double __powl(long double __x, long double __y) throw(); 
# 143
extern long double sqrtl(long double __x) throw(); extern long double __sqrtl(long double __x) throw(); 
# 147
extern long double hypotl(long double __x, long double __y) throw(); extern long double __hypotl(long double __x, long double __y) throw(); 
# 152
extern long double cbrtl(long double __x) throw(); extern long double __cbrtl(long double __x) throw(); 
# 159
extern long double ceill(long double __x) throw() __attribute((const)); extern long double __ceill(long double __x) throw() __attribute((const)); 
# 162
extern long double fabsl(long double __x) throw() __attribute((const)); extern long double __fabsl(long double __x) throw() __attribute((const)); 
# 165
extern long double floorl(long double __x) throw() __attribute((const)); extern long double __floorl(long double __x) throw() __attribute((const)); 
# 168
extern long double fmodl(long double __x, long double __y) throw(); extern long double __fmodl(long double __x, long double __y) throw(); 
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int isinfl(long double __value) throw() __attribute((const)); 
# 182
extern int finitel(long double __value) throw() __attribute((const)); 
# 185
extern long double dreml(long double __x, long double __y) throw(); extern long double __dreml(long double __x, long double __y) throw(); 
# 189
extern long double significandl(long double __x) throw(); extern long double __significandl(long double __x) throw(); 
# 196
extern long double copysignl(long double __x, long double __y) throw() __attribute((const)); extern long double __copysignl(long double __x, long double __y) throw() __attribute((const)); 
# 201
extern long double nanl(const char * __tagb) throw(); extern long double __nanl(const char * __tagb) throw(); 
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int isnanl(long double __value) throw() __attribute((const)); 
# 217
extern long double j0l(long double) throw(); extern long double __j0l(long double) throw(); 
# 218
extern long double j1l(long double) throw(); extern long double __j1l(long double) throw(); 
# 219
extern long double jnl(int, long double) throw(); extern long double __jnl(int, long double) throw(); 
# 220
extern long double y0l(long double) throw(); extern long double __y0l(long double) throw(); 
# 221
extern long double y1l(long double) throw(); extern long double __y1l(long double) throw(); 
# 222
extern long double ynl(int, long double) throw(); extern long double __ynl(int, long double) throw(); 
# 228
extern long double erfl(long double) throw(); extern long double __erfl(long double) throw(); 
# 229
extern long double erfcl(long double) throw(); extern long double __erfcl(long double) throw(); 
# 230
extern long double lgammal(long double) throw(); extern long double __lgammal(long double) throw(); 
# 235
extern long double tgammal(long double) throw(); extern long double __tgammal(long double) throw(); 
# 241
extern long double gammal(long double) throw(); extern long double __gammal(long double) throw(); 
# 249
extern long double lgammal_r(long double, int * __signgamp) throw(); extern long double __lgammal_r(long double, int * __signgamp) throw(); 
# 256
extern long double rintl(long double __x) throw(); extern long double __rintl(long double __x) throw(); 
# 259
extern long double nextafterl(long double __x, long double __y) throw(); extern long double __nextafterl(long double __x, long double __y) throw(); 
# 261
extern long double nexttowardl(long double __x, long double __y) throw(); extern long double __nexttowardl(long double __x, long double __y) throw(); 
# 266
extern long double nextdownl(long double __x) throw(); extern long double __nextdownl(long double __x) throw(); 
# 268
extern long double nextupl(long double __x) throw(); extern long double __nextupl(long double __x) throw(); 
# 272
extern long double remainderl(long double __x, long double __y) throw(); extern long double __remainderl(long double __x, long double __y) throw(); 
# 276
extern long double scalbnl(long double __x, int __n) throw(); extern long double __scalbnl(long double __x, int __n) throw(); 
# 280
extern int ilogbl(long double __x) throw(); extern int __ilogbl(long double __x) throw(); 
# 285
extern long llogbl(long double __x) throw(); extern long __llogbl(long double __x) throw(); 
# 290
extern long double scalblnl(long double __x, long __n) throw(); extern long double __scalblnl(long double __x, long __n) throw(); 
# 294
extern long double nearbyintl(long double __x) throw(); extern long double __nearbyintl(long double __x) throw(); 
# 298
extern long double roundl(long double __x) throw() __attribute((const)); extern long double __roundl(long double __x) throw() __attribute((const)); 
# 302
extern long double truncl(long double __x) throw() __attribute((const)); extern long double __truncl(long double __x) throw() __attribute((const)); 
# 307
extern long double remquol(long double __x, long double __y, int * __quo) throw(); extern long double __remquol(long double __x, long double __y, int * __quo) throw(); 
# 314
extern long lrintl(long double __x) throw(); extern long __lrintl(long double __x) throw(); 
# 316
__extension__ extern long long llrintl(long double __x) throw(); extern long long __llrintl(long double __x) throw(); 
# 320
extern long lroundl(long double __x) throw(); extern long __lroundl(long double __x) throw(); 
# 322
__extension__ extern long long llroundl(long double __x) throw(); extern long long __llroundl(long double __x) throw(); 
# 326
extern long double fdiml(long double __x, long double __y) throw(); extern long double __fdiml(long double __x, long double __y) throw(); 
# 329
extern long double fmaxl(long double __x, long double __y) throw() __attribute((const)); extern long double __fmaxl(long double __x, long double __y) throw() __attribute((const)); 
# 332
extern long double fminl(long double __x, long double __y) throw() __attribute((const)); extern long double __fminl(long double __x, long double __y) throw() __attribute((const)); 
# 335
extern long double fmal(long double __x, long double __y, long double __z) throw(); extern long double __fmal(long double __x, long double __y, long double __z) throw(); 
# 340
extern long double roundevenl(long double __x) throw() __attribute((const)); extern long double __roundevenl(long double __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfpl(long double __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpl(long double __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfpl(long double __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpl(long double __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpxl(long double __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpxl(long double __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpxl(long double __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpxl(long double __x, int __round, unsigned __width) throw(); 
# 365
extern long double fmaxmagl(long double __x, long double __y) throw() __attribute((const)); extern long double __fmaxmagl(long double __x, long double __y) throw() __attribute((const)); 
# 368
extern long double fminmagl(long double __x, long double __y) throw() __attribute((const)); extern long double __fminmagl(long double __x, long double __y) throw() __attribute((const)); 
# 371
extern int canonicalizel(long double * __cx, const long double * __x) throw(); 
# 376
extern int totalorderl(const long double * __x, const long double * __y) throw()
# 378
 __attribute((__pure__)); 
# 381
extern int totalordermagl(const long double * __x, const long double * __y) throw()
# 383
 __attribute((__pure__)); 
# 386
extern long double getpayloadl(const long double * __x) throw(); extern long double __getpayloadl(const long double * __x) throw(); 
# 389
extern int setpayloadl(long double * __x, long double __payload) throw(); 
# 392
extern int setpayloadsigl(long double * __x, long double __payload) throw(); 
# 400
extern long double scalbl(long double __x, long double __n) throw(); extern long double __scalbl(long double __x, long double __n) throw(); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32 acosf32(_Float32 __x) throw(); extern _Float32 __acosf32(_Float32 __x) throw(); 
# 55
extern _Float32 asinf32(_Float32 __x) throw(); extern _Float32 __asinf32(_Float32 __x) throw(); 
# 57
extern _Float32 atanf32(_Float32 __x) throw(); extern _Float32 __atanf32(_Float32 __x) throw(); 
# 59
extern _Float32 atan2f32(_Float32 __y, _Float32 __x) throw(); extern _Float32 __atan2f32(_Float32 __y, _Float32 __x) throw(); 
# 62
extern _Float32 cosf32(_Float32 __x) throw(); extern _Float32 __cosf32(_Float32 __x) throw(); 
# 64
extern _Float32 sinf32(_Float32 __x) throw(); extern _Float32 __sinf32(_Float32 __x) throw(); 
# 66
extern _Float32 tanf32(_Float32 __x) throw(); extern _Float32 __tanf32(_Float32 __x) throw(); 
# 71
extern _Float32 coshf32(_Float32 __x) throw(); extern _Float32 __coshf32(_Float32 __x) throw(); 
# 73
extern _Float32 sinhf32(_Float32 __x) throw(); extern _Float32 __sinhf32(_Float32 __x) throw(); 
# 75
extern _Float32 tanhf32(_Float32 __x) throw(); extern _Float32 __tanhf32(_Float32 __x) throw(); 
# 79
extern void sincosf32(_Float32 __x, _Float32 * __sinx, _Float32 * __cosx) throw(); extern void __sincosf32(_Float32 __x, _Float32 * __sinx, _Float32 * __cosx) throw(); 
# 85
extern _Float32 acoshf32(_Float32 __x) throw(); extern _Float32 __acoshf32(_Float32 __x) throw(); 
# 87
extern _Float32 asinhf32(_Float32 __x) throw(); extern _Float32 __asinhf32(_Float32 __x) throw(); 
# 89
extern _Float32 atanhf32(_Float32 __x) throw(); extern _Float32 __atanhf32(_Float32 __x) throw(); 
# 95
extern _Float32 expf32(_Float32 __x) throw(); extern _Float32 __expf32(_Float32 __x) throw(); 
# 98
extern _Float32 frexpf32(_Float32 __x, int * __exponent) throw(); extern _Float32 __frexpf32(_Float32 __x, int * __exponent) throw(); 
# 101
extern _Float32 ldexpf32(_Float32 __x, int __exponent) throw(); extern _Float32 __ldexpf32(_Float32 __x, int __exponent) throw(); 
# 104
extern _Float32 logf32(_Float32 __x) throw(); extern _Float32 __logf32(_Float32 __x) throw(); 
# 107
extern _Float32 log10f32(_Float32 __x) throw(); extern _Float32 __log10f32(_Float32 __x) throw(); 
# 110
extern _Float32 modff32(_Float32 __x, _Float32 * __iptr) throw(); extern _Float32 __modff32(_Float32 __x, _Float32 * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern _Float32 exp10f32(_Float32 __x) throw(); extern _Float32 __exp10f32(_Float32 __x) throw(); 
# 119
extern _Float32 expm1f32(_Float32 __x) throw(); extern _Float32 __expm1f32(_Float32 __x) throw(); 
# 122
extern _Float32 log1pf32(_Float32 __x) throw(); extern _Float32 __log1pf32(_Float32 __x) throw(); 
# 125
extern _Float32 logbf32(_Float32 __x) throw(); extern _Float32 __logbf32(_Float32 __x) throw(); 
# 130
extern _Float32 exp2f32(_Float32 __x) throw(); extern _Float32 __exp2f32(_Float32 __x) throw(); 
# 133
extern _Float32 log2f32(_Float32 __x) throw(); extern _Float32 __log2f32(_Float32 __x) throw(); 
# 140
extern _Float32 powf32(_Float32 __x, _Float32 __y) throw(); extern _Float32 __powf32(_Float32 __x, _Float32 __y) throw(); 
# 143
extern _Float32 sqrtf32(_Float32 __x) throw(); extern _Float32 __sqrtf32(_Float32 __x) throw(); 
# 147
extern _Float32 hypotf32(_Float32 __x, _Float32 __y) throw(); extern _Float32 __hypotf32(_Float32 __x, _Float32 __y) throw(); 
# 152
extern _Float32 cbrtf32(_Float32 __x) throw(); extern _Float32 __cbrtf32(_Float32 __x) throw(); 
# 159
extern _Float32 ceilf32(_Float32 __x) throw() __attribute((const)); extern _Float32 __ceilf32(_Float32 __x) throw() __attribute((const)); 
# 162
extern _Float32 fabsf32(_Float32 __x) throw() __attribute((const)); extern _Float32 __fabsf32(_Float32 __x) throw() __attribute((const)); 
# 165
extern _Float32 floorf32(_Float32 __x) throw() __attribute((const)); extern _Float32 __floorf32(_Float32 __x) throw() __attribute((const)); 
# 168
extern _Float32 fmodf32(_Float32 __x, _Float32 __y) throw(); extern _Float32 __fmodf32(_Float32 __x, _Float32 __y) throw(); 
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32 copysignf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); extern _Float32 __copysignf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); 
# 201
extern _Float32 nanf32(const char * __tagb) throw(); extern _Float32 __nanf32(const char * __tagb) throw(); 
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32 j0f32(_Float32) throw(); extern _Float32 __j0f32(_Float32) throw(); 
# 218
extern _Float32 j1f32(_Float32) throw(); extern _Float32 __j1f32(_Float32) throw(); 
# 219
extern _Float32 jnf32(int, _Float32) throw(); extern _Float32 __jnf32(int, _Float32) throw(); 
# 220
extern _Float32 y0f32(_Float32) throw(); extern _Float32 __y0f32(_Float32) throw(); 
# 221
extern _Float32 y1f32(_Float32) throw(); extern _Float32 __y1f32(_Float32) throw(); 
# 222
extern _Float32 ynf32(int, _Float32) throw(); extern _Float32 __ynf32(int, _Float32) throw(); 
# 228
extern _Float32 erff32(_Float32) throw(); extern _Float32 __erff32(_Float32) throw(); 
# 229
extern _Float32 erfcf32(_Float32) throw(); extern _Float32 __erfcf32(_Float32) throw(); 
# 230
extern _Float32 lgammaf32(_Float32) throw(); extern _Float32 __lgammaf32(_Float32) throw(); 
# 235
extern _Float32 tgammaf32(_Float32) throw(); extern _Float32 __tgammaf32(_Float32) throw(); 
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32 lgammaf32_r(_Float32, int * __signgamp) throw(); extern _Float32 __lgammaf32_r(_Float32, int * __signgamp) throw(); 
# 256
extern _Float32 rintf32(_Float32 __x) throw(); extern _Float32 __rintf32(_Float32 __x) throw(); 
# 259
extern _Float32 nextafterf32(_Float32 __x, _Float32 __y) throw(); extern _Float32 __nextafterf32(_Float32 __x, _Float32 __y) throw(); 
# 266
extern _Float32 nextdownf32(_Float32 __x) throw(); extern _Float32 __nextdownf32(_Float32 __x) throw(); 
# 268
extern _Float32 nextupf32(_Float32 __x) throw(); extern _Float32 __nextupf32(_Float32 __x) throw(); 
# 272
extern _Float32 remainderf32(_Float32 __x, _Float32 __y) throw(); extern _Float32 __remainderf32(_Float32 __x, _Float32 __y) throw(); 
# 276
extern _Float32 scalbnf32(_Float32 __x, int __n) throw(); extern _Float32 __scalbnf32(_Float32 __x, int __n) throw(); 
# 280
extern int ilogbf32(_Float32 __x) throw(); extern int __ilogbf32(_Float32 __x) throw(); 
# 285
extern long llogbf32(_Float32 __x) throw(); extern long __llogbf32(_Float32 __x) throw(); 
# 290
extern _Float32 scalblnf32(_Float32 __x, long __n) throw(); extern _Float32 __scalblnf32(_Float32 __x, long __n) throw(); 
# 294
extern _Float32 nearbyintf32(_Float32 __x) throw(); extern _Float32 __nearbyintf32(_Float32 __x) throw(); 
# 298
extern _Float32 roundf32(_Float32 __x) throw() __attribute((const)); extern _Float32 __roundf32(_Float32 __x) throw() __attribute((const)); 
# 302
extern _Float32 truncf32(_Float32 __x) throw() __attribute((const)); extern _Float32 __truncf32(_Float32 __x) throw() __attribute((const)); 
# 307
extern _Float32 remquof32(_Float32 __x, _Float32 __y, int * __quo) throw(); extern _Float32 __remquof32(_Float32 __x, _Float32 __y, int * __quo) throw(); 
# 314
extern long lrintf32(_Float32 __x) throw(); extern long __lrintf32(_Float32 __x) throw(); 
# 316
__extension__ extern long long llrintf32(_Float32 __x) throw(); extern long long __llrintf32(_Float32 __x) throw(); 
# 320
extern long lroundf32(_Float32 __x) throw(); extern long __lroundf32(_Float32 __x) throw(); 
# 322
__extension__ extern long long llroundf32(_Float32 __x) throw(); extern long long __llroundf32(_Float32 __x) throw(); 
# 326
extern _Float32 fdimf32(_Float32 __x, _Float32 __y) throw(); extern _Float32 __fdimf32(_Float32 __x, _Float32 __y) throw(); 
# 329
extern _Float32 fmaxf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); extern _Float32 __fmaxf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); 
# 332
extern _Float32 fminf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); extern _Float32 __fminf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); 
# 335
extern _Float32 fmaf32(_Float32 __x, _Float32 __y, _Float32 __z) throw(); extern _Float32 __fmaf32(_Float32 __x, _Float32 __y, _Float32 __z) throw(); 
# 340
extern _Float32 roundevenf32(_Float32 __x) throw() __attribute((const)); extern _Float32 __roundevenf32(_Float32 __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfpf32(_Float32 __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpf32(_Float32 __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfpf32(_Float32 __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpf32(_Float32 __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpxf32(_Float32 __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpxf32(_Float32 __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpxf32(_Float32 __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpxf32(_Float32 __x, int __round, unsigned __width) throw(); 
# 365
extern _Float32 fmaxmagf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); extern _Float32 __fmaxmagf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); 
# 368
extern _Float32 fminmagf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); extern _Float32 __fminmagf32(_Float32 __x, _Float32 __y) throw() __attribute((const)); 
# 371
extern int canonicalizef32(_Float32 * __cx, const _Float32 * __x) throw(); 
# 376
extern int totalorderf32(const _Float32 * __x, const _Float32 * __y) throw()
# 378
 __attribute((__pure__)); 
# 381
extern int totalordermagf32(const _Float32 * __x, const _Float32 * __y) throw()
# 383
 __attribute((__pure__)); 
# 386
extern _Float32 getpayloadf32(const _Float32 * __x) throw(); extern _Float32 __getpayloadf32(const _Float32 * __x) throw(); 
# 389
extern int setpayloadf32(_Float32 * __x, _Float32 __payload) throw(); 
# 392
extern int setpayloadsigf32(_Float32 * __x, _Float32 __payload) throw(); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64 acosf64(_Float64 __x) throw(); extern _Float64 __acosf64(_Float64 __x) throw(); 
# 55
extern _Float64 asinf64(_Float64 __x) throw(); extern _Float64 __asinf64(_Float64 __x) throw(); 
# 57
extern _Float64 atanf64(_Float64 __x) throw(); extern _Float64 __atanf64(_Float64 __x) throw(); 
# 59
extern _Float64 atan2f64(_Float64 __y, _Float64 __x) throw(); extern _Float64 __atan2f64(_Float64 __y, _Float64 __x) throw(); 
# 62
extern _Float64 cosf64(_Float64 __x) throw(); extern _Float64 __cosf64(_Float64 __x) throw(); 
# 64
extern _Float64 sinf64(_Float64 __x) throw(); extern _Float64 __sinf64(_Float64 __x) throw(); 
# 66
extern _Float64 tanf64(_Float64 __x) throw(); extern _Float64 __tanf64(_Float64 __x) throw(); 
# 71
extern _Float64 coshf64(_Float64 __x) throw(); extern _Float64 __coshf64(_Float64 __x) throw(); 
# 73
extern _Float64 sinhf64(_Float64 __x) throw(); extern _Float64 __sinhf64(_Float64 __x) throw(); 
# 75
extern _Float64 tanhf64(_Float64 __x) throw(); extern _Float64 __tanhf64(_Float64 __x) throw(); 
# 79
extern void sincosf64(_Float64 __x, _Float64 * __sinx, _Float64 * __cosx) throw(); extern void __sincosf64(_Float64 __x, _Float64 * __sinx, _Float64 * __cosx) throw(); 
# 85
extern _Float64 acoshf64(_Float64 __x) throw(); extern _Float64 __acoshf64(_Float64 __x) throw(); 
# 87
extern _Float64 asinhf64(_Float64 __x) throw(); extern _Float64 __asinhf64(_Float64 __x) throw(); 
# 89
extern _Float64 atanhf64(_Float64 __x) throw(); extern _Float64 __atanhf64(_Float64 __x) throw(); 
# 95
extern _Float64 expf64(_Float64 __x) throw(); extern _Float64 __expf64(_Float64 __x) throw(); 
# 98
extern _Float64 frexpf64(_Float64 __x, int * __exponent) throw(); extern _Float64 __frexpf64(_Float64 __x, int * __exponent) throw(); 
# 101
extern _Float64 ldexpf64(_Float64 __x, int __exponent) throw(); extern _Float64 __ldexpf64(_Float64 __x, int __exponent) throw(); 
# 104
extern _Float64 logf64(_Float64 __x) throw(); extern _Float64 __logf64(_Float64 __x) throw(); 
# 107
extern _Float64 log10f64(_Float64 __x) throw(); extern _Float64 __log10f64(_Float64 __x) throw(); 
# 110
extern _Float64 modff64(_Float64 __x, _Float64 * __iptr) throw(); extern _Float64 __modff64(_Float64 __x, _Float64 * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern _Float64 exp10f64(_Float64 __x) throw(); extern _Float64 __exp10f64(_Float64 __x) throw(); 
# 119
extern _Float64 expm1f64(_Float64 __x) throw(); extern _Float64 __expm1f64(_Float64 __x) throw(); 
# 122
extern _Float64 log1pf64(_Float64 __x) throw(); extern _Float64 __log1pf64(_Float64 __x) throw(); 
# 125
extern _Float64 logbf64(_Float64 __x) throw(); extern _Float64 __logbf64(_Float64 __x) throw(); 
# 130
extern _Float64 exp2f64(_Float64 __x) throw(); extern _Float64 __exp2f64(_Float64 __x) throw(); 
# 133
extern _Float64 log2f64(_Float64 __x) throw(); extern _Float64 __log2f64(_Float64 __x) throw(); 
# 140
extern _Float64 powf64(_Float64 __x, _Float64 __y) throw(); extern _Float64 __powf64(_Float64 __x, _Float64 __y) throw(); 
# 143
extern _Float64 sqrtf64(_Float64 __x) throw(); extern _Float64 __sqrtf64(_Float64 __x) throw(); 
# 147
extern _Float64 hypotf64(_Float64 __x, _Float64 __y) throw(); extern _Float64 __hypotf64(_Float64 __x, _Float64 __y) throw(); 
# 152
extern _Float64 cbrtf64(_Float64 __x) throw(); extern _Float64 __cbrtf64(_Float64 __x) throw(); 
# 159
extern _Float64 ceilf64(_Float64 __x) throw() __attribute((const)); extern _Float64 __ceilf64(_Float64 __x) throw() __attribute((const)); 
# 162
extern _Float64 fabsf64(_Float64 __x) throw() __attribute((const)); extern _Float64 __fabsf64(_Float64 __x) throw() __attribute((const)); 
# 165
extern _Float64 floorf64(_Float64 __x) throw() __attribute((const)); extern _Float64 __floorf64(_Float64 __x) throw() __attribute((const)); 
# 168
extern _Float64 fmodf64(_Float64 __x, _Float64 __y) throw(); extern _Float64 __fmodf64(_Float64 __x, _Float64 __y) throw(); 
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64 copysignf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); extern _Float64 __copysignf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); 
# 201
extern _Float64 nanf64(const char * __tagb) throw(); extern _Float64 __nanf64(const char * __tagb) throw(); 
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64 j0f64(_Float64) throw(); extern _Float64 __j0f64(_Float64) throw(); 
# 218
extern _Float64 j1f64(_Float64) throw(); extern _Float64 __j1f64(_Float64) throw(); 
# 219
extern _Float64 jnf64(int, _Float64) throw(); extern _Float64 __jnf64(int, _Float64) throw(); 
# 220
extern _Float64 y0f64(_Float64) throw(); extern _Float64 __y0f64(_Float64) throw(); 
# 221
extern _Float64 y1f64(_Float64) throw(); extern _Float64 __y1f64(_Float64) throw(); 
# 222
extern _Float64 ynf64(int, _Float64) throw(); extern _Float64 __ynf64(int, _Float64) throw(); 
# 228
extern _Float64 erff64(_Float64) throw(); extern _Float64 __erff64(_Float64) throw(); 
# 229
extern _Float64 erfcf64(_Float64) throw(); extern _Float64 __erfcf64(_Float64) throw(); 
# 230
extern _Float64 lgammaf64(_Float64) throw(); extern _Float64 __lgammaf64(_Float64) throw(); 
# 235
extern _Float64 tgammaf64(_Float64) throw(); extern _Float64 __tgammaf64(_Float64) throw(); 
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64 lgammaf64_r(_Float64, int * __signgamp) throw(); extern _Float64 __lgammaf64_r(_Float64, int * __signgamp) throw(); 
# 256
extern _Float64 rintf64(_Float64 __x) throw(); extern _Float64 __rintf64(_Float64 __x) throw(); 
# 259
extern _Float64 nextafterf64(_Float64 __x, _Float64 __y) throw(); extern _Float64 __nextafterf64(_Float64 __x, _Float64 __y) throw(); 
# 266
extern _Float64 nextdownf64(_Float64 __x) throw(); extern _Float64 __nextdownf64(_Float64 __x) throw(); 
# 268
extern _Float64 nextupf64(_Float64 __x) throw(); extern _Float64 __nextupf64(_Float64 __x) throw(); 
# 272
extern _Float64 remainderf64(_Float64 __x, _Float64 __y) throw(); extern _Float64 __remainderf64(_Float64 __x, _Float64 __y) throw(); 
# 276
extern _Float64 scalbnf64(_Float64 __x, int __n) throw(); extern _Float64 __scalbnf64(_Float64 __x, int __n) throw(); 
# 280
extern int ilogbf64(_Float64 __x) throw(); extern int __ilogbf64(_Float64 __x) throw(); 
# 285
extern long llogbf64(_Float64 __x) throw(); extern long __llogbf64(_Float64 __x) throw(); 
# 290
extern _Float64 scalblnf64(_Float64 __x, long __n) throw(); extern _Float64 __scalblnf64(_Float64 __x, long __n) throw(); 
# 294
extern _Float64 nearbyintf64(_Float64 __x) throw(); extern _Float64 __nearbyintf64(_Float64 __x) throw(); 
# 298
extern _Float64 roundf64(_Float64 __x) throw() __attribute((const)); extern _Float64 __roundf64(_Float64 __x) throw() __attribute((const)); 
# 302
extern _Float64 truncf64(_Float64 __x) throw() __attribute((const)); extern _Float64 __truncf64(_Float64 __x) throw() __attribute((const)); 
# 307
extern _Float64 remquof64(_Float64 __x, _Float64 __y, int * __quo) throw(); extern _Float64 __remquof64(_Float64 __x, _Float64 __y, int * __quo) throw(); 
# 314
extern long lrintf64(_Float64 __x) throw(); extern long __lrintf64(_Float64 __x) throw(); 
# 316
__extension__ extern long long llrintf64(_Float64 __x) throw(); extern long long __llrintf64(_Float64 __x) throw(); 
# 320
extern long lroundf64(_Float64 __x) throw(); extern long __lroundf64(_Float64 __x) throw(); 
# 322
__extension__ extern long long llroundf64(_Float64 __x) throw(); extern long long __llroundf64(_Float64 __x) throw(); 
# 326
extern _Float64 fdimf64(_Float64 __x, _Float64 __y) throw(); extern _Float64 __fdimf64(_Float64 __x, _Float64 __y) throw(); 
# 329
extern _Float64 fmaxf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); extern _Float64 __fmaxf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); 
# 332
extern _Float64 fminf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); extern _Float64 __fminf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); 
# 335
extern _Float64 fmaf64(_Float64 __x, _Float64 __y, _Float64 __z) throw(); extern _Float64 __fmaf64(_Float64 __x, _Float64 __y, _Float64 __z) throw(); 
# 340
extern _Float64 roundevenf64(_Float64 __x) throw() __attribute((const)); extern _Float64 __roundevenf64(_Float64 __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfpf64(_Float64 __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpf64(_Float64 __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfpf64(_Float64 __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpf64(_Float64 __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpxf64(_Float64 __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpxf64(_Float64 __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpxf64(_Float64 __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpxf64(_Float64 __x, int __round, unsigned __width) throw(); 
# 365
extern _Float64 fmaxmagf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); extern _Float64 __fmaxmagf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); 
# 368
extern _Float64 fminmagf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); extern _Float64 __fminmagf64(_Float64 __x, _Float64 __y) throw() __attribute((const)); 
# 371
extern int canonicalizef64(_Float64 * __cx, const _Float64 * __x) throw(); 
# 376
extern int totalorderf64(const _Float64 * __x, const _Float64 * __y) throw()
# 378
 __attribute((__pure__)); 
# 381
extern int totalordermagf64(const _Float64 * __x, const _Float64 * __y) throw()
# 383
 __attribute((__pure__)); 
# 386
extern _Float64 getpayloadf64(const _Float64 * __x) throw(); extern _Float64 __getpayloadf64(const _Float64 * __x) throw(); 
# 389
extern int setpayloadf64(_Float64 * __x, _Float64 __payload) throw(); 
# 392
extern int setpayloadsigf64(_Float64 * __x, _Float64 __payload) throw(); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32x acosf32x(_Float32x __x) throw(); extern _Float32x __acosf32x(_Float32x __x) throw(); 
# 55
extern _Float32x asinf32x(_Float32x __x) throw(); extern _Float32x __asinf32x(_Float32x __x) throw(); 
# 57
extern _Float32x atanf32x(_Float32x __x) throw(); extern _Float32x __atanf32x(_Float32x __x) throw(); 
# 59
extern _Float32x atan2f32x(_Float32x __y, _Float32x __x) throw(); extern _Float32x __atan2f32x(_Float32x __y, _Float32x __x) throw(); 
# 62
extern _Float32x cosf32x(_Float32x __x) throw(); extern _Float32x __cosf32x(_Float32x __x) throw(); 
# 64
extern _Float32x sinf32x(_Float32x __x) throw(); extern _Float32x __sinf32x(_Float32x __x) throw(); 
# 66
extern _Float32x tanf32x(_Float32x __x) throw(); extern _Float32x __tanf32x(_Float32x __x) throw(); 
# 71
extern _Float32x coshf32x(_Float32x __x) throw(); extern _Float32x __coshf32x(_Float32x __x) throw(); 
# 73
extern _Float32x sinhf32x(_Float32x __x) throw(); extern _Float32x __sinhf32x(_Float32x __x) throw(); 
# 75
extern _Float32x tanhf32x(_Float32x __x) throw(); extern _Float32x __tanhf32x(_Float32x __x) throw(); 
# 79
extern void sincosf32x(_Float32x __x, _Float32x * __sinx, _Float32x * __cosx) throw(); extern void __sincosf32x(_Float32x __x, _Float32x * __sinx, _Float32x * __cosx) throw(); 
# 85
extern _Float32x acoshf32x(_Float32x __x) throw(); extern _Float32x __acoshf32x(_Float32x __x) throw(); 
# 87
extern _Float32x asinhf32x(_Float32x __x) throw(); extern _Float32x __asinhf32x(_Float32x __x) throw(); 
# 89
extern _Float32x atanhf32x(_Float32x __x) throw(); extern _Float32x __atanhf32x(_Float32x __x) throw(); 
# 95
extern _Float32x expf32x(_Float32x __x) throw(); extern _Float32x __expf32x(_Float32x __x) throw(); 
# 98
extern _Float32x frexpf32x(_Float32x __x, int * __exponent) throw(); extern _Float32x __frexpf32x(_Float32x __x, int * __exponent) throw(); 
# 101
extern _Float32x ldexpf32x(_Float32x __x, int __exponent) throw(); extern _Float32x __ldexpf32x(_Float32x __x, int __exponent) throw(); 
# 104
extern _Float32x logf32x(_Float32x __x) throw(); extern _Float32x __logf32x(_Float32x __x) throw(); 
# 107
extern _Float32x log10f32x(_Float32x __x) throw(); extern _Float32x __log10f32x(_Float32x __x) throw(); 
# 110
extern _Float32x modff32x(_Float32x __x, _Float32x * __iptr) throw(); extern _Float32x __modff32x(_Float32x __x, _Float32x * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern _Float32x exp10f32x(_Float32x __x) throw(); extern _Float32x __exp10f32x(_Float32x __x) throw(); 
# 119
extern _Float32x expm1f32x(_Float32x __x) throw(); extern _Float32x __expm1f32x(_Float32x __x) throw(); 
# 122
extern _Float32x log1pf32x(_Float32x __x) throw(); extern _Float32x __log1pf32x(_Float32x __x) throw(); 
# 125
extern _Float32x logbf32x(_Float32x __x) throw(); extern _Float32x __logbf32x(_Float32x __x) throw(); 
# 130
extern _Float32x exp2f32x(_Float32x __x) throw(); extern _Float32x __exp2f32x(_Float32x __x) throw(); 
# 133
extern _Float32x log2f32x(_Float32x __x) throw(); extern _Float32x __log2f32x(_Float32x __x) throw(); 
# 140
extern _Float32x powf32x(_Float32x __x, _Float32x __y) throw(); extern _Float32x __powf32x(_Float32x __x, _Float32x __y) throw(); 
# 143
extern _Float32x sqrtf32x(_Float32x __x) throw(); extern _Float32x __sqrtf32x(_Float32x __x) throw(); 
# 147
extern _Float32x hypotf32x(_Float32x __x, _Float32x __y) throw(); extern _Float32x __hypotf32x(_Float32x __x, _Float32x __y) throw(); 
# 152
extern _Float32x cbrtf32x(_Float32x __x) throw(); extern _Float32x __cbrtf32x(_Float32x __x) throw(); 
# 159
extern _Float32x ceilf32x(_Float32x __x) throw() __attribute((const)); extern _Float32x __ceilf32x(_Float32x __x) throw() __attribute((const)); 
# 162
extern _Float32x fabsf32x(_Float32x __x) throw() __attribute((const)); extern _Float32x __fabsf32x(_Float32x __x) throw() __attribute((const)); 
# 165
extern _Float32x floorf32x(_Float32x __x) throw() __attribute((const)); extern _Float32x __floorf32x(_Float32x __x) throw() __attribute((const)); 
# 168
extern _Float32x fmodf32x(_Float32x __x, _Float32x __y) throw(); extern _Float32x __fmodf32x(_Float32x __x, _Float32x __y) throw(); 
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32x copysignf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); extern _Float32x __copysignf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); 
# 201
extern _Float32x nanf32x(const char * __tagb) throw(); extern _Float32x __nanf32x(const char * __tagb) throw(); 
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32x j0f32x(_Float32x) throw(); extern _Float32x __j0f32x(_Float32x) throw(); 
# 218
extern _Float32x j1f32x(_Float32x) throw(); extern _Float32x __j1f32x(_Float32x) throw(); 
# 219
extern _Float32x jnf32x(int, _Float32x) throw(); extern _Float32x __jnf32x(int, _Float32x) throw(); 
# 220
extern _Float32x y0f32x(_Float32x) throw(); extern _Float32x __y0f32x(_Float32x) throw(); 
# 221
extern _Float32x y1f32x(_Float32x) throw(); extern _Float32x __y1f32x(_Float32x) throw(); 
# 222
extern _Float32x ynf32x(int, _Float32x) throw(); extern _Float32x __ynf32x(int, _Float32x) throw(); 
# 228
extern _Float32x erff32x(_Float32x) throw(); extern _Float32x __erff32x(_Float32x) throw(); 
# 229
extern _Float32x erfcf32x(_Float32x) throw(); extern _Float32x __erfcf32x(_Float32x) throw(); 
# 230
extern _Float32x lgammaf32x(_Float32x) throw(); extern _Float32x __lgammaf32x(_Float32x) throw(); 
# 235
extern _Float32x tgammaf32x(_Float32x) throw(); extern _Float32x __tgammaf32x(_Float32x) throw(); 
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32x lgammaf32x_r(_Float32x, int * __signgamp) throw(); extern _Float32x __lgammaf32x_r(_Float32x, int * __signgamp) throw(); 
# 256
extern _Float32x rintf32x(_Float32x __x) throw(); extern _Float32x __rintf32x(_Float32x __x) throw(); 
# 259
extern _Float32x nextafterf32x(_Float32x __x, _Float32x __y) throw(); extern _Float32x __nextafterf32x(_Float32x __x, _Float32x __y) throw(); 
# 266
extern _Float32x nextdownf32x(_Float32x __x) throw(); extern _Float32x __nextdownf32x(_Float32x __x) throw(); 
# 268
extern _Float32x nextupf32x(_Float32x __x) throw(); extern _Float32x __nextupf32x(_Float32x __x) throw(); 
# 272
extern _Float32x remainderf32x(_Float32x __x, _Float32x __y) throw(); extern _Float32x __remainderf32x(_Float32x __x, _Float32x __y) throw(); 
# 276
extern _Float32x scalbnf32x(_Float32x __x, int __n) throw(); extern _Float32x __scalbnf32x(_Float32x __x, int __n) throw(); 
# 280
extern int ilogbf32x(_Float32x __x) throw(); extern int __ilogbf32x(_Float32x __x) throw(); 
# 285
extern long llogbf32x(_Float32x __x) throw(); extern long __llogbf32x(_Float32x __x) throw(); 
# 290
extern _Float32x scalblnf32x(_Float32x __x, long __n) throw(); extern _Float32x __scalblnf32x(_Float32x __x, long __n) throw(); 
# 294
extern _Float32x nearbyintf32x(_Float32x __x) throw(); extern _Float32x __nearbyintf32x(_Float32x __x) throw(); 
# 298
extern _Float32x roundf32x(_Float32x __x) throw() __attribute((const)); extern _Float32x __roundf32x(_Float32x __x) throw() __attribute((const)); 
# 302
extern _Float32x truncf32x(_Float32x __x) throw() __attribute((const)); extern _Float32x __truncf32x(_Float32x __x) throw() __attribute((const)); 
# 307
extern _Float32x remquof32x(_Float32x __x, _Float32x __y, int * __quo) throw(); extern _Float32x __remquof32x(_Float32x __x, _Float32x __y, int * __quo) throw(); 
# 314
extern long lrintf32x(_Float32x __x) throw(); extern long __lrintf32x(_Float32x __x) throw(); 
# 316
__extension__ extern long long llrintf32x(_Float32x __x) throw(); extern long long __llrintf32x(_Float32x __x) throw(); 
# 320
extern long lroundf32x(_Float32x __x) throw(); extern long __lroundf32x(_Float32x __x) throw(); 
# 322
__extension__ extern long long llroundf32x(_Float32x __x) throw(); extern long long __llroundf32x(_Float32x __x) throw(); 
# 326
extern _Float32x fdimf32x(_Float32x __x, _Float32x __y) throw(); extern _Float32x __fdimf32x(_Float32x __x, _Float32x __y) throw(); 
# 329
extern _Float32x fmaxf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); extern _Float32x __fmaxf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); 
# 332
extern _Float32x fminf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); extern _Float32x __fminf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); 
# 335
extern _Float32x fmaf32x(_Float32x __x, _Float32x __y, _Float32x __z) throw(); extern _Float32x __fmaf32x(_Float32x __x, _Float32x __y, _Float32x __z) throw(); 
# 340
extern _Float32x roundevenf32x(_Float32x __x) throw() __attribute((const)); extern _Float32x __roundevenf32x(_Float32x __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfpf32x(_Float32x __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpf32x(_Float32x __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfpf32x(_Float32x __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpf32x(_Float32x __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpxf32x(_Float32x __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpxf32x(_Float32x __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpxf32x(_Float32x __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpxf32x(_Float32x __x, int __round, unsigned __width) throw(); 
# 365
extern _Float32x fmaxmagf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); extern _Float32x __fmaxmagf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); 
# 368
extern _Float32x fminmagf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); extern _Float32x __fminmagf32x(_Float32x __x, _Float32x __y) throw() __attribute((const)); 
# 371
extern int canonicalizef32x(_Float32x * __cx, const _Float32x * __x) throw(); 
# 376
extern int totalorderf32x(const _Float32x * __x, const _Float32x * __y) throw()
# 378
 __attribute((__pure__)); 
# 381
extern int totalordermagf32x(const _Float32x * __x, const _Float32x * __y) throw()
# 383
 __attribute((__pure__)); 
# 386
extern _Float32x getpayloadf32x(const _Float32x * __x) throw(); extern _Float32x __getpayloadf32x(const _Float32x * __x) throw(); 
# 389
extern int setpayloadf32x(_Float32x * __x, _Float32x __payload) throw(); 
# 392
extern int setpayloadsigf32x(_Float32x * __x, _Float32x __payload) throw(); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64x acosf64x(_Float64x __x) throw(); extern _Float64x __acosf64x(_Float64x __x) throw(); 
# 55
extern _Float64x asinf64x(_Float64x __x) throw(); extern _Float64x __asinf64x(_Float64x __x) throw(); 
# 57
extern _Float64x atanf64x(_Float64x __x) throw(); extern _Float64x __atanf64x(_Float64x __x) throw(); 
# 59
extern _Float64x atan2f64x(_Float64x __y, _Float64x __x) throw(); extern _Float64x __atan2f64x(_Float64x __y, _Float64x __x) throw(); 
# 62
extern _Float64x cosf64x(_Float64x __x) throw(); extern _Float64x __cosf64x(_Float64x __x) throw(); 
# 64
extern _Float64x sinf64x(_Float64x __x) throw(); extern _Float64x __sinf64x(_Float64x __x) throw(); 
# 66
extern _Float64x tanf64x(_Float64x __x) throw(); extern _Float64x __tanf64x(_Float64x __x) throw(); 
# 71
extern _Float64x coshf64x(_Float64x __x) throw(); extern _Float64x __coshf64x(_Float64x __x) throw(); 
# 73
extern _Float64x sinhf64x(_Float64x __x) throw(); extern _Float64x __sinhf64x(_Float64x __x) throw(); 
# 75
extern _Float64x tanhf64x(_Float64x __x) throw(); extern _Float64x __tanhf64x(_Float64x __x) throw(); 
# 79
extern void sincosf64x(_Float64x __x, _Float64x * __sinx, _Float64x * __cosx) throw(); extern void __sincosf64x(_Float64x __x, _Float64x * __sinx, _Float64x * __cosx) throw(); 
# 85
extern _Float64x acoshf64x(_Float64x __x) throw(); extern _Float64x __acoshf64x(_Float64x __x) throw(); 
# 87
extern _Float64x asinhf64x(_Float64x __x) throw(); extern _Float64x __asinhf64x(_Float64x __x) throw(); 
# 89
extern _Float64x atanhf64x(_Float64x __x) throw(); extern _Float64x __atanhf64x(_Float64x __x) throw(); 
# 95
extern _Float64x expf64x(_Float64x __x) throw(); extern _Float64x __expf64x(_Float64x __x) throw(); 
# 98
extern _Float64x frexpf64x(_Float64x __x, int * __exponent) throw(); extern _Float64x __frexpf64x(_Float64x __x, int * __exponent) throw(); 
# 101
extern _Float64x ldexpf64x(_Float64x __x, int __exponent) throw(); extern _Float64x __ldexpf64x(_Float64x __x, int __exponent) throw(); 
# 104
extern _Float64x logf64x(_Float64x __x) throw(); extern _Float64x __logf64x(_Float64x __x) throw(); 
# 107
extern _Float64x log10f64x(_Float64x __x) throw(); extern _Float64x __log10f64x(_Float64x __x) throw(); 
# 110
extern _Float64x modff64x(_Float64x __x, _Float64x * __iptr) throw(); extern _Float64x __modff64x(_Float64x __x, _Float64x * __iptr) throw() __attribute((__nonnull__(2))); 
# 114
extern _Float64x exp10f64x(_Float64x __x) throw(); extern _Float64x __exp10f64x(_Float64x __x) throw(); 
# 119
extern _Float64x expm1f64x(_Float64x __x) throw(); extern _Float64x __expm1f64x(_Float64x __x) throw(); 
# 122
extern _Float64x log1pf64x(_Float64x __x) throw(); extern _Float64x __log1pf64x(_Float64x __x) throw(); 
# 125
extern _Float64x logbf64x(_Float64x __x) throw(); extern _Float64x __logbf64x(_Float64x __x) throw(); 
# 130
extern _Float64x exp2f64x(_Float64x __x) throw(); extern _Float64x __exp2f64x(_Float64x __x) throw(); 
# 133
extern _Float64x log2f64x(_Float64x __x) throw(); extern _Float64x __log2f64x(_Float64x __x) throw(); 
# 140
extern _Float64x powf64x(_Float64x __x, _Float64x __y) throw(); extern _Float64x __powf64x(_Float64x __x, _Float64x __y) throw(); 
# 143
extern _Float64x sqrtf64x(_Float64x __x) throw(); extern _Float64x __sqrtf64x(_Float64x __x) throw(); 
# 147
extern _Float64x hypotf64x(_Float64x __x, _Float64x __y) throw(); extern _Float64x __hypotf64x(_Float64x __x, _Float64x __y) throw(); 
# 152
extern _Float64x cbrtf64x(_Float64x __x) throw(); extern _Float64x __cbrtf64x(_Float64x __x) throw(); 
# 159
extern _Float64x ceilf64x(_Float64x __x) throw() __attribute((const)); extern _Float64x __ceilf64x(_Float64x __x) throw() __attribute((const)); 
# 162
extern _Float64x fabsf64x(_Float64x __x) throw() __attribute((const)); extern _Float64x __fabsf64x(_Float64x __x) throw() __attribute((const)); 
# 165
extern _Float64x floorf64x(_Float64x __x) throw() __attribute((const)); extern _Float64x __floorf64x(_Float64x __x) throw() __attribute((const)); 
# 168
extern _Float64x fmodf64x(_Float64x __x, _Float64x __y) throw(); extern _Float64x __fmodf64x(_Float64x __x, _Float64x __y) throw(); 
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64x copysignf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); extern _Float64x __copysignf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); 
# 201
extern _Float64x nanf64x(const char * __tagb) throw(); extern _Float64x __nanf64x(const char * __tagb) throw(); 
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64x j0f64x(_Float64x) throw(); extern _Float64x __j0f64x(_Float64x) throw(); 
# 218
extern _Float64x j1f64x(_Float64x) throw(); extern _Float64x __j1f64x(_Float64x) throw(); 
# 219
extern _Float64x jnf64x(int, _Float64x) throw(); extern _Float64x __jnf64x(int, _Float64x) throw(); 
# 220
extern _Float64x y0f64x(_Float64x) throw(); extern _Float64x __y0f64x(_Float64x) throw(); 
# 221
extern _Float64x y1f64x(_Float64x) throw(); extern _Float64x __y1f64x(_Float64x) throw(); 
# 222
extern _Float64x ynf64x(int, _Float64x) throw(); extern _Float64x __ynf64x(int, _Float64x) throw(); 
# 228
extern _Float64x erff64x(_Float64x) throw(); extern _Float64x __erff64x(_Float64x) throw(); 
# 229
extern _Float64x erfcf64x(_Float64x) throw(); extern _Float64x __erfcf64x(_Float64x) throw(); 
# 230
extern _Float64x lgammaf64x(_Float64x) throw(); extern _Float64x __lgammaf64x(_Float64x) throw(); 
# 235
extern _Float64x tgammaf64x(_Float64x) throw(); extern _Float64x __tgammaf64x(_Float64x) throw(); 
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64x lgammaf64x_r(_Float64x, int * __signgamp) throw(); extern _Float64x __lgammaf64x_r(_Float64x, int * __signgamp) throw(); 
# 256
extern _Float64x rintf64x(_Float64x __x) throw(); extern _Float64x __rintf64x(_Float64x __x) throw(); 
# 259
extern _Float64x nextafterf64x(_Float64x __x, _Float64x __y) throw(); extern _Float64x __nextafterf64x(_Float64x __x, _Float64x __y) throw(); 
# 266
extern _Float64x nextdownf64x(_Float64x __x) throw(); extern _Float64x __nextdownf64x(_Float64x __x) throw(); 
# 268
extern _Float64x nextupf64x(_Float64x __x) throw(); extern _Float64x __nextupf64x(_Float64x __x) throw(); 
# 272
extern _Float64x remainderf64x(_Float64x __x, _Float64x __y) throw(); extern _Float64x __remainderf64x(_Float64x __x, _Float64x __y) throw(); 
# 276
extern _Float64x scalbnf64x(_Float64x __x, int __n) throw(); extern _Float64x __scalbnf64x(_Float64x __x, int __n) throw(); 
# 280
extern int ilogbf64x(_Float64x __x) throw(); extern int __ilogbf64x(_Float64x __x) throw(); 
# 285
extern long llogbf64x(_Float64x __x) throw(); extern long __llogbf64x(_Float64x __x) throw(); 
# 290
extern _Float64x scalblnf64x(_Float64x __x, long __n) throw(); extern _Float64x __scalblnf64x(_Float64x __x, long __n) throw(); 
# 294
extern _Float64x nearbyintf64x(_Float64x __x) throw(); extern _Float64x __nearbyintf64x(_Float64x __x) throw(); 
# 298
extern _Float64x roundf64x(_Float64x __x) throw() __attribute((const)); extern _Float64x __roundf64x(_Float64x __x) throw() __attribute((const)); 
# 302
extern _Float64x truncf64x(_Float64x __x) throw() __attribute((const)); extern _Float64x __truncf64x(_Float64x __x) throw() __attribute((const)); 
# 307
extern _Float64x remquof64x(_Float64x __x, _Float64x __y, int * __quo) throw(); extern _Float64x __remquof64x(_Float64x __x, _Float64x __y, int * __quo) throw(); 
# 314
extern long lrintf64x(_Float64x __x) throw(); extern long __lrintf64x(_Float64x __x) throw(); 
# 316
__extension__ extern long long llrintf64x(_Float64x __x) throw(); extern long long __llrintf64x(_Float64x __x) throw(); 
# 320
extern long lroundf64x(_Float64x __x) throw(); extern long __lroundf64x(_Float64x __x) throw(); 
# 322
__extension__ extern long long llroundf64x(_Float64x __x) throw(); extern long long __llroundf64x(_Float64x __x) throw(); 
# 326
extern _Float64x fdimf64x(_Float64x __x, _Float64x __y) throw(); extern _Float64x __fdimf64x(_Float64x __x, _Float64x __y) throw(); 
# 329
extern _Float64x fmaxf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); extern _Float64x __fmaxf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); 
# 332
extern _Float64x fminf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); extern _Float64x __fminf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); 
# 335
extern _Float64x fmaf64x(_Float64x __x, _Float64x __y, _Float64x __z) throw(); extern _Float64x __fmaf64x(_Float64x __x, _Float64x __y, _Float64x __z) throw(); 
# 340
extern _Float64x roundevenf64x(_Float64x __x) throw() __attribute((const)); extern _Float64x __roundevenf64x(_Float64x __x) throw() __attribute((const)); 
# 344
extern __intmax_t fromfpf64x(_Float64x __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpf64x(_Float64x __x, int __round, unsigned __width) throw(); 
# 349
extern __uintmax_t ufromfpf64x(_Float64x __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpf64x(_Float64x __x, int __round, unsigned __width) throw(); 
# 355
extern __intmax_t fromfpxf64x(_Float64x __x, int __round, unsigned __width) throw(); extern __intmax_t __fromfpxf64x(_Float64x __x, int __round, unsigned __width) throw(); 
# 361
extern __uintmax_t ufromfpxf64x(_Float64x __x, int __round, unsigned __width) throw(); extern __uintmax_t __ufromfpxf64x(_Float64x __x, int __round, unsigned __width) throw(); 
# 365
extern _Float64x fmaxmagf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); extern _Float64x __fmaxmagf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); 
# 368
extern _Float64x fminmagf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); extern _Float64x __fminmagf64x(_Float64x __x, _Float64x __y) throw() __attribute((const)); 
# 371
extern int canonicalizef64x(_Float64x * __cx, const _Float64x * __x) throw(); 
# 376
extern int totalorderf64x(const _Float64x * __x, const _Float64x * __y) throw()
# 378
 __attribute((__pure__)); 
# 381
extern int totalordermagf64x(const _Float64x * __x, const _Float64x * __y) throw()
# 383
 __attribute((__pure__)); 
# 386
extern _Float64x getpayloadf64x(const _Float64x * __x) throw(); extern _Float64x __getpayloadf64x(const _Float64x * __x) throw(); 
# 389
extern int setpayloadf64x(_Float64x * __x, _Float64x __payload) throw(); 
# 392
extern int setpayloadsigf64x(_Float64x * __x, _Float64x __payload) throw(); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern float fadd(double __x, double __y) throw(); 
# 27
extern float fdiv(double __x, double __y) throw(); 
# 30
extern float fmul(double __x, double __y) throw(); 
# 33
extern float fsub(double __x, double __y) throw(); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern float faddl(long double __x, long double __y) throw(); 
# 27
extern float fdivl(long double __x, long double __y) throw(); 
# 30
extern float fmull(long double __x, long double __y) throw(); 
# 33
extern float fsubl(long double __x, long double __y) throw(); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern double daddl(long double __x, long double __y) throw(); 
# 27
extern double ddivl(long double __x, long double __y) throw(); 
# 30
extern double dmull(long double __x, long double __y) throw(); 
# 33
extern double dsubl(long double __x, long double __y) throw(); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32 f32addf32x(_Float32x __x, _Float32x __y) throw(); 
# 27
extern _Float32 f32divf32x(_Float32x __x, _Float32x __y) throw(); 
# 30
extern _Float32 f32mulf32x(_Float32x __x, _Float32x __y) throw(); 
# 33
extern _Float32 f32subf32x(_Float32x __x, _Float32x __y) throw(); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32 f32addf64(_Float64 __x, _Float64 __y) throw(); 
# 27
extern _Float32 f32divf64(_Float64 __x, _Float64 __y) throw(); 
# 30
extern _Float32 f32mulf64(_Float64 __x, _Float64 __y) throw(); 
# 33
extern _Float32 f32subf64(_Float64 __x, _Float64 __y) throw(); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32 f32addf64x(_Float64x __x, _Float64x __y) throw(); 
# 27
extern _Float32 f32divf64x(_Float64x __x, _Float64x __y) throw(); 
# 30
extern _Float32 f32mulf64x(_Float64x __x, _Float64x __y) throw(); 
# 33
extern _Float32 f32subf64x(_Float64x __x, _Float64x __y) throw(); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32x f32xaddf64(_Float64 __x, _Float64 __y) throw(); 
# 27
extern _Float32x f32xdivf64(_Float64 __x, _Float64 __y) throw(); 
# 30
extern _Float32x f32xmulf64(_Float64 __x, _Float64 __y) throw(); 
# 33
extern _Float32x f32xsubf64(_Float64 __x, _Float64 __y) throw(); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32x f32xaddf64x(_Float64x __x, _Float64x __y) throw(); 
# 27
extern _Float32x f32xdivf64x(_Float64x __x, _Float64x __y) throw(); 
# 30
extern _Float32x f32xmulf64x(_Float64x __x, _Float64x __y) throw(); 
# 33
extern _Float32x f32xsubf64x(_Float64x __x, _Float64x __y) throw(); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float64 f64addf64x(_Float64x __x, _Float64x __y) throw(); 
# 27
extern _Float64 f64divf64x(_Float64x __x, _Float64x __y) throw(); 
# 30
extern _Float64 f64mulf64x(_Float64x __x, _Float64x __y) throw(); 
# 33
extern _Float64 f64subf64x(_Float64x __x, _Float64x __y) throw(); 
# 773 "/usr/include/math.h" 3
extern int signgam; 
# 854 "/usr/include/math.h" 3
enum { 
# 855
FP_NAN, 
# 858
FP_INFINITE, 
# 861
FP_ZERO, 
# 864
FP_SUBNORMAL, 
# 867
FP_NORMAL
# 870
}; 
# 23 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3
extern int __iscanonicall(long double __x) throw()
# 24
 __attribute((const)); 
# 46 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3
extern "C++" {
# 47
inline int iscanonical(float __val) { return (((void)((__typeof__(__val))__val)), 1); } 
# 48
inline int iscanonical(double __val) { return (((void)((__typeof__(__val))__val)), 1); } 
# 49
inline int iscanonical(long double __val) { return __iscanonicall(__val); } 
# 53
}
# 985 "/usr/include/math.h" 3
extern "C++" {
# 986
inline int issignaling(float __val) { return __issignalingf(__val); } 
# 987
inline int issignaling(double __val) { return __issignaling(__val); } 
# 989
inline int issignaling(long double __val) 
# 990
{ 
# 994
return __issignalingl(__val); 
# 996
} 
# 1002
}
# 1016 "/usr/include/math.h" 3
extern "C++" {
# 1047 "/usr/include/math.h" 3
template< class __T> inline bool 
# 1048
iszero(__T __val) 
# 1049
{ 
# 1050
return __val == 0; 
# 1051
} 
# 1053
}
# 1278 "/usr/include/math.h" 3
extern "C++" {
# 1279
template< class > struct __iseqsig_type; 
# 1281
template<> struct __iseqsig_type< float>  { 
# 1283
static int __call(float __x, float __y) throw() 
# 1284
{ 
# 1285
return __iseqsigf(__x, __y); 
# 1286
} 
# 1287
}; 
# 1289
template<> struct __iseqsig_type< double>  { 
# 1291
static int __call(double __x, double __y) throw() 
# 1292
{ 
# 1293
return __iseqsig(__x, __y); 
# 1294
} 
# 1295
}; 
# 1297
template<> struct __iseqsig_type< long double>  { 
# 1299
static int __call(long double __x, long double __y) throw() 
# 1300
{ 
# 1302
return __iseqsigl(__x, __y); 
# 1306
} 
# 1307
}; 
# 1321 "/usr/include/math.h" 3
template< class _T1, class _T2> inline int 
# 1323
iseqsig(_T1 __x, _T2 __y) throw() 
# 1324
{ 
# 1326
typedef __decltype(((__x + __y) + (0.0F))) _T3; 
# 1330
return __iseqsig_type< __decltype(((__x + __y) + (0.0F)))> ::__call(__x, __y); 
# 1331
} 
# 1333
}
# 1338
}
# 77 "/usr/include/c++/9/cmath" 3
extern "C++" {
# 79
namespace std __attribute((__visibility__("default"))) { 
# 83
using ::acos;
# 87
constexpr float acos(float __x) 
# 88
{ return __builtin_acosf(__x); } 
# 91
constexpr long double acos(long double __x) 
# 92
{ return __builtin_acosl(__x); } 
# 95
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 99
acos(_Tp __x) 
# 100
{ return __builtin_acos(__x); } 
# 102
using ::asin;
# 106
constexpr float asin(float __x) 
# 107
{ return __builtin_asinf(__x); } 
# 110
constexpr long double asin(long double __x) 
# 111
{ return __builtin_asinl(__x); } 
# 114
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 118
asin(_Tp __x) 
# 119
{ return __builtin_asin(__x); } 
# 121
using ::atan;
# 125
constexpr float atan(float __x) 
# 126
{ return __builtin_atanf(__x); } 
# 129
constexpr long double atan(long double __x) 
# 130
{ return __builtin_atanl(__x); } 
# 133
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 137
atan(_Tp __x) 
# 138
{ return __builtin_atan(__x); } 
# 140
using ::atan2;
# 144
constexpr float atan2(float __y, float __x) 
# 145
{ return __builtin_atan2f(__y, __x); } 
# 148
constexpr long double atan2(long double __y, long double __x) 
# 149
{ return __builtin_atan2l(__y, __x); } 
# 152
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 155
atan2(_Tp __y, _Up __x) 
# 156
{ 
# 157
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 158
return atan2((__type)__y, (__type)__x); 
# 159
} 
# 161
using ::ceil;
# 165
constexpr float ceil(float __x) 
# 166
{ return __builtin_ceilf(__x); } 
# 169
constexpr long double ceil(long double __x) 
# 170
{ return __builtin_ceill(__x); } 
# 173
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 177
ceil(_Tp __x) 
# 178
{ return __builtin_ceil(__x); } 
# 180
using ::cos;
# 184
constexpr float cos(float __x) 
# 185
{ return __builtin_cosf(__x); } 
# 188
constexpr long double cos(long double __x) 
# 189
{ return __builtin_cosl(__x); } 
# 192
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 196
cos(_Tp __x) 
# 197
{ return __builtin_cos(__x); } 
# 199
using ::cosh;
# 203
constexpr float cosh(float __x) 
# 204
{ return __builtin_coshf(__x); } 
# 207
constexpr long double cosh(long double __x) 
# 208
{ return __builtin_coshl(__x); } 
# 211
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 215
cosh(_Tp __x) 
# 216
{ return __builtin_cosh(__x); } 
# 218
using ::exp;
# 222
constexpr float exp(float __x) 
# 223
{ return __builtin_expf(__x); } 
# 226
constexpr long double exp(long double __x) 
# 227
{ return __builtin_expl(__x); } 
# 230
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 234
exp(_Tp __x) 
# 235
{ return __builtin_exp(__x); } 
# 237
using ::fabs;
# 241
constexpr float fabs(float __x) 
# 242
{ return __builtin_fabsf(__x); } 
# 245
constexpr long double fabs(long double __x) 
# 246
{ return __builtin_fabsl(__x); } 
# 249
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 253
fabs(_Tp __x) 
# 254
{ return __builtin_fabs(__x); } 
# 256
using ::floor;
# 260
constexpr float floor(float __x) 
# 261
{ return __builtin_floorf(__x); } 
# 264
constexpr long double floor(long double __x) 
# 265
{ return __builtin_floorl(__x); } 
# 268
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 272
floor(_Tp __x) 
# 273
{ return __builtin_floor(__x); } 
# 275
using ::fmod;
# 279
constexpr float fmod(float __x, float __y) 
# 280
{ return __builtin_fmodf(__x, __y); } 
# 283
constexpr long double fmod(long double __x, long double __y) 
# 284
{ return __builtin_fmodl(__x, __y); } 
# 287
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 290
fmod(_Tp __x, _Up __y) 
# 291
{ 
# 292
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 293
return fmod((__type)__x, (__type)__y); 
# 294
} 
# 296
using ::frexp;
# 300
inline float frexp(float __x, int *__exp) 
# 301
{ return __builtin_frexpf(__x, __exp); } 
# 304
inline long double frexp(long double __x, int *__exp) 
# 305
{ return __builtin_frexpl(__x, __exp); } 
# 308
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 312
frexp(_Tp __x, int *__exp) 
# 313
{ return __builtin_frexp(__x, __exp); } 
# 315
using ::ldexp;
# 319
constexpr float ldexp(float __x, int __exp) 
# 320
{ return __builtin_ldexpf(__x, __exp); } 
# 323
constexpr long double ldexp(long double __x, int __exp) 
# 324
{ return __builtin_ldexpl(__x, __exp); } 
# 327
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 331
ldexp(_Tp __x, int __exp) 
# 332
{ return __builtin_ldexp(__x, __exp); } 
# 334
using ::log;
# 338
constexpr float log(float __x) 
# 339
{ return __builtin_logf(__x); } 
# 342
constexpr long double log(long double __x) 
# 343
{ return __builtin_logl(__x); } 
# 346
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 350
log(_Tp __x) 
# 351
{ return __builtin_log(__x); } 
# 353
using ::log10;
# 357
constexpr float log10(float __x) 
# 358
{ return __builtin_log10f(__x); } 
# 361
constexpr long double log10(long double __x) 
# 362
{ return __builtin_log10l(__x); } 
# 365
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 369
log10(_Tp __x) 
# 370
{ return __builtin_log10(__x); } 
# 372
using ::modf;
# 376
inline float modf(float __x, float *__iptr) 
# 377
{ return __builtin_modff(__x, __iptr); } 
# 380
inline long double modf(long double __x, long double *__iptr) 
# 381
{ return __builtin_modfl(__x, __iptr); } 
# 384
using ::pow;
# 388
constexpr float pow(float __x, float __y) 
# 389
{ return __builtin_powf(__x, __y); } 
# 392
constexpr long double pow(long double __x, long double __y) 
# 393
{ return __builtin_powl(__x, __y); } 
# 412 "/usr/include/c++/9/cmath" 3
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 415
pow(_Tp __x, _Up __y) 
# 416
{ 
# 417
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 418
return pow((__type)__x, (__type)__y); 
# 419
} 
# 421
using ::sin;
# 425
constexpr float sin(float __x) 
# 426
{ return __builtin_sinf(__x); } 
# 429
constexpr long double sin(long double __x) 
# 430
{ return __builtin_sinl(__x); } 
# 433
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 437
sin(_Tp __x) 
# 438
{ return __builtin_sin(__x); } 
# 440
using ::sinh;
# 444
constexpr float sinh(float __x) 
# 445
{ return __builtin_sinhf(__x); } 
# 448
constexpr long double sinh(long double __x) 
# 449
{ return __builtin_sinhl(__x); } 
# 452
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 456
sinh(_Tp __x) 
# 457
{ return __builtin_sinh(__x); } 
# 459
using ::sqrt;
# 463
constexpr float sqrt(float __x) 
# 464
{ return __builtin_sqrtf(__x); } 
# 467
constexpr long double sqrt(long double __x) 
# 468
{ return __builtin_sqrtl(__x); } 
# 471
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 475
sqrt(_Tp __x) 
# 476
{ return __builtin_sqrt(__x); } 
# 478
using ::tan;
# 482
constexpr float tan(float __x) 
# 483
{ return __builtin_tanf(__x); } 
# 486
constexpr long double tan(long double __x) 
# 487
{ return __builtin_tanl(__x); } 
# 490
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 494
tan(_Tp __x) 
# 495
{ return __builtin_tan(__x); } 
# 497
using ::tanh;
# 501
constexpr float tanh(float __x) 
# 502
{ return __builtin_tanhf(__x); } 
# 505
constexpr long double tanh(long double __x) 
# 506
{ return __builtin_tanhl(__x); } 
# 509
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 513
tanh(_Tp __x) 
# 514
{ return __builtin_tanh(__x); } 
# 537 "/usr/include/c++/9/cmath" 3
constexpr int fpclassify(float __x) 
# 538
{ return __builtin_fpclassify(0, 1, 4, 3, 2, __x); 
# 539
} 
# 542
constexpr int fpclassify(double __x) 
# 543
{ return __builtin_fpclassify(0, 1, 4, 3, 2, __x); 
# 544
} 
# 547
constexpr int fpclassify(long double __x) 
# 548
{ return __builtin_fpclassify(0, 1, 4, 3, 2, __x); 
# 549
} 
# 553
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, int> ::__type 
# 556
fpclassify(_Tp __x) 
# 557
{ return (__x != 0) ? 4 : 2; } 
# 562
constexpr bool isfinite(float __x) 
# 563
{ return __builtin_isfinite(__x); } 
# 566
constexpr bool isfinite(double __x) 
# 567
{ return __builtin_isfinite(__x); } 
# 570
constexpr bool isfinite(long double __x) 
# 571
{ return __builtin_isfinite(__x); } 
# 575
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 578
isfinite(_Tp __x) 
# 579
{ return true; } 
# 584
constexpr bool isinf(float __x) 
# 585
{ return __builtin_isinf(__x); } 
# 592
constexpr bool isinf(double __x) 
# 593
{ return __builtin_isinf(__x); } 
# 597
constexpr bool isinf(long double __x) 
# 598
{ return __builtin_isinf(__x); } 
# 602
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 605
isinf(_Tp __x) 
# 606
{ return false; } 
# 611
constexpr bool isnan(float __x) 
# 612
{ return __builtin_isnan(__x); } 
# 619
constexpr bool isnan(double __x) 
# 620
{ return __builtin_isnan(__x); } 
# 624
constexpr bool isnan(long double __x) 
# 625
{ return __builtin_isnan(__x); } 
# 629
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 632
isnan(_Tp __x) 
# 633
{ return false; } 
# 638
constexpr bool isnormal(float __x) 
# 639
{ return __builtin_isnormal(__x); } 
# 642
constexpr bool isnormal(double __x) 
# 643
{ return __builtin_isnormal(__x); } 
# 646
constexpr bool isnormal(long double __x) 
# 647
{ return __builtin_isnormal(__x); } 
# 651
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 654
isnormal(_Tp __x) 
# 655
{ return (__x != 0) ? true : false; } 
# 661
constexpr bool signbit(float __x) 
# 662
{ return __builtin_signbit(__x); } 
# 665
constexpr bool signbit(double __x) 
# 666
{ return __builtin_signbit(__x); } 
# 669
constexpr bool signbit(long double __x) 
# 670
{ return __builtin_signbit(__x); } 
# 674
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 677
signbit(_Tp __x) 
# 678
{ return (__x < 0) ? true : false; } 
# 683
constexpr bool isgreater(float __x, float __y) 
# 684
{ return __builtin_isgreater(__x, __y); } 
# 687
constexpr bool isgreater(double __x, double __y) 
# 688
{ return __builtin_isgreater(__x, __y); } 
# 691
constexpr bool isgreater(long double __x, long double __y) 
# 692
{ return __builtin_isgreater(__x, __y); } 
# 696
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 700
isgreater(_Tp __x, _Up __y) 
# 701
{ 
# 702
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 703
return __builtin_isgreater((__type)__x, (__type)__y); 
# 704
} 
# 709
constexpr bool isgreaterequal(float __x, float __y) 
# 710
{ return __builtin_isgreaterequal(__x, __y); } 
# 713
constexpr bool isgreaterequal(double __x, double __y) 
# 714
{ return __builtin_isgreaterequal(__x, __y); } 
# 717
constexpr bool isgreaterequal(long double __x, long double __y) 
# 718
{ return __builtin_isgreaterequal(__x, __y); } 
# 722
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 726
isgreaterequal(_Tp __x, _Up __y) 
# 727
{ 
# 728
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 729
return __builtin_isgreaterequal((__type)__x, (__type)__y); 
# 730
} 
# 735
constexpr bool isless(float __x, float __y) 
# 736
{ return __builtin_isless(__x, __y); } 
# 739
constexpr bool isless(double __x, double __y) 
# 740
{ return __builtin_isless(__x, __y); } 
# 743
constexpr bool isless(long double __x, long double __y) 
# 744
{ return __builtin_isless(__x, __y); } 
# 748
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 752
isless(_Tp __x, _Up __y) 
# 753
{ 
# 754
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 755
return __builtin_isless((__type)__x, (__type)__y); 
# 756
} 
# 761
constexpr bool islessequal(float __x, float __y) 
# 762
{ return __builtin_islessequal(__x, __y); } 
# 765
constexpr bool islessequal(double __x, double __y) 
# 766
{ return __builtin_islessequal(__x, __y); } 
# 769
constexpr bool islessequal(long double __x, long double __y) 
# 770
{ return __builtin_islessequal(__x, __y); } 
# 774
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 778
islessequal(_Tp __x, _Up __y) 
# 779
{ 
# 780
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 781
return __builtin_islessequal((__type)__x, (__type)__y); 
# 782
} 
# 787
constexpr bool islessgreater(float __x, float __y) 
# 788
{ return __builtin_islessgreater(__x, __y); } 
# 791
constexpr bool islessgreater(double __x, double __y) 
# 792
{ return __builtin_islessgreater(__x, __y); } 
# 795
constexpr bool islessgreater(long double __x, long double __y) 
# 796
{ return __builtin_islessgreater(__x, __y); } 
# 800
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 804
islessgreater(_Tp __x, _Up __y) 
# 805
{ 
# 806
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 807
return __builtin_islessgreater((__type)__x, (__type)__y); 
# 808
} 
# 813
constexpr bool isunordered(float __x, float __y) 
# 814
{ return __builtin_isunordered(__x, __y); } 
# 817
constexpr bool isunordered(double __x, double __y) 
# 818
{ return __builtin_isunordered(__x, __y); } 
# 821
constexpr bool isunordered(long double __x, long double __y) 
# 822
{ return __builtin_isunordered(__x, __y); } 
# 826
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 830
isunordered(_Tp __x, _Up __y) 
# 831
{ 
# 832
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 833
return __builtin_isunordered((__type)__x, (__type)__y); 
# 834
} 
# 1065 "/usr/include/c++/9/cmath" 3
using ::double_t;
# 1066
using ::float_t;
# 1069
using ::acosh;
# 1070
using ::acoshf;
# 1071
using ::acoshl;
# 1073
using ::asinh;
# 1074
using ::asinhf;
# 1075
using ::asinhl;
# 1077
using ::atanh;
# 1078
using ::atanhf;
# 1079
using ::atanhl;
# 1081
using ::cbrt;
# 1082
using ::cbrtf;
# 1083
using ::cbrtl;
# 1085
using ::copysign;
# 1086
using ::copysignf;
# 1087
using ::copysignl;
# 1089
using ::erf;
# 1090
using ::erff;
# 1091
using ::erfl;
# 1093
using ::erfc;
# 1094
using ::erfcf;
# 1095
using ::erfcl;
# 1097
using ::exp2;
# 1098
using ::exp2f;
# 1099
using ::exp2l;
# 1101
using ::expm1;
# 1102
using ::expm1f;
# 1103
using ::expm1l;
# 1105
using ::fdim;
# 1106
using ::fdimf;
# 1107
using ::fdiml;
# 1109
using ::fma;
# 1110
using ::fmaf;
# 1111
using ::fmal;
# 1113
using ::fmax;
# 1114
using ::fmaxf;
# 1115
using ::fmaxl;
# 1117
using ::fmin;
# 1118
using ::fminf;
# 1119
using ::fminl;
# 1121
using ::hypot;
# 1122
using ::hypotf;
# 1123
using ::hypotl;
# 1125
using ::ilogb;
# 1126
using ::ilogbf;
# 1127
using ::ilogbl;
# 1129
using ::lgamma;
# 1130
using ::lgammaf;
# 1131
using ::lgammal;
# 1134
using ::llrint;
# 1135
using ::llrintf;
# 1136
using ::llrintl;
# 1138
using ::llround;
# 1139
using ::llroundf;
# 1140
using ::llroundl;
# 1143
using ::log1p;
# 1144
using ::log1pf;
# 1145
using ::log1pl;
# 1147
using ::log2;
# 1148
using ::log2f;
# 1149
using ::log2l;
# 1151
using ::logb;
# 1152
using ::logbf;
# 1153
using ::logbl;
# 1155
using ::lrint;
# 1156
using ::lrintf;
# 1157
using ::lrintl;
# 1159
using ::lround;
# 1160
using ::lroundf;
# 1161
using ::lroundl;
# 1163
using ::nan;
# 1164
using ::nanf;
# 1165
using ::nanl;
# 1167
using ::nearbyint;
# 1168
using ::nearbyintf;
# 1169
using ::nearbyintl;
# 1171
using ::nextafter;
# 1172
using ::nextafterf;
# 1173
using ::nextafterl;
# 1175
using ::nexttoward;
# 1176
using ::nexttowardf;
# 1177
using ::nexttowardl;
# 1179
using ::remainder;
# 1180
using ::remainderf;
# 1181
using ::remainderl;
# 1183
using ::remquo;
# 1184
using ::remquof;
# 1185
using ::remquol;
# 1187
using ::rint;
# 1188
using ::rintf;
# 1189
using ::rintl;
# 1191
using ::round;
# 1192
using ::roundf;
# 1193
using ::roundl;
# 1195
using ::scalbln;
# 1196
using ::scalblnf;
# 1197
using ::scalblnl;
# 1199
using ::scalbn;
# 1200
using ::scalbnf;
# 1201
using ::scalbnl;
# 1203
using ::tgamma;
# 1204
using ::tgammaf;
# 1205
using ::tgammal;
# 1207
using ::trunc;
# 1208
using ::truncf;
# 1209
using ::truncl;
# 1214
constexpr float acosh(float __x) 
# 1215
{ return __builtin_acoshf(__x); } 
# 1218
constexpr long double acosh(long double __x) 
# 1219
{ return __builtin_acoshl(__x); } 
# 1223
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1226
acosh(_Tp __x) 
# 1227
{ return __builtin_acosh(__x); } 
# 1232
constexpr float asinh(float __x) 
# 1233
{ return __builtin_asinhf(__x); } 
# 1236
constexpr long double asinh(long double __x) 
# 1237
{ return __builtin_asinhl(__x); } 
# 1241
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1244
asinh(_Tp __x) 
# 1245
{ return __builtin_asinh(__x); } 
# 1250
constexpr float atanh(float __x) 
# 1251
{ return __builtin_atanhf(__x); } 
# 1254
constexpr long double atanh(long double __x) 
# 1255
{ return __builtin_atanhl(__x); } 
# 1259
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1262
atanh(_Tp __x) 
# 1263
{ return __builtin_atanh(__x); } 
# 1268
constexpr float cbrt(float __x) 
# 1269
{ return __builtin_cbrtf(__x); } 
# 1272
constexpr long double cbrt(long double __x) 
# 1273
{ return __builtin_cbrtl(__x); } 
# 1277
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1280
cbrt(_Tp __x) 
# 1281
{ return __builtin_cbrt(__x); } 
# 1286
constexpr float copysign(float __x, float __y) 
# 1287
{ return __builtin_copysignf(__x, __y); } 
# 1290
constexpr long double copysign(long double __x, long double __y) 
# 1291
{ return __builtin_copysignl(__x, __y); } 
# 1295
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1297
copysign(_Tp __x, _Up __y) 
# 1298
{ 
# 1299
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1300
return copysign((__type)__x, (__type)__y); 
# 1301
} 
# 1306
constexpr float erf(float __x) 
# 1307
{ return __builtin_erff(__x); } 
# 1310
constexpr long double erf(long double __x) 
# 1311
{ return __builtin_erfl(__x); } 
# 1315
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1318
erf(_Tp __x) 
# 1319
{ return __builtin_erf(__x); } 
# 1324
constexpr float erfc(float __x) 
# 1325
{ return __builtin_erfcf(__x); } 
# 1328
constexpr long double erfc(long double __x) 
# 1329
{ return __builtin_erfcl(__x); } 
# 1333
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1336
erfc(_Tp __x) 
# 1337
{ return __builtin_erfc(__x); } 
# 1342
constexpr float exp2(float __x) 
# 1343
{ return __builtin_exp2f(__x); } 
# 1346
constexpr long double exp2(long double __x) 
# 1347
{ return __builtin_exp2l(__x); } 
# 1351
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1354
exp2(_Tp __x) 
# 1355
{ return __builtin_exp2(__x); } 
# 1360
constexpr float expm1(float __x) 
# 1361
{ return __builtin_expm1f(__x); } 
# 1364
constexpr long double expm1(long double __x) 
# 1365
{ return __builtin_expm1l(__x); } 
# 1369
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1372
expm1(_Tp __x) 
# 1373
{ return __builtin_expm1(__x); } 
# 1378
constexpr float fdim(float __x, float __y) 
# 1379
{ return __builtin_fdimf(__x, __y); } 
# 1382
constexpr long double fdim(long double __x, long double __y) 
# 1383
{ return __builtin_fdiml(__x, __y); } 
# 1387
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1389
fdim(_Tp __x, _Up __y) 
# 1390
{ 
# 1391
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1392
return fdim((__type)__x, (__type)__y); 
# 1393
} 
# 1398
constexpr float fma(float __x, float __y, float __z) 
# 1399
{ return __builtin_fmaf(__x, __y, __z); } 
# 1402
constexpr long double fma(long double __x, long double __y, long double __z) 
# 1403
{ return __builtin_fmal(__x, __y, __z); } 
# 1407
template< class _Tp, class _Up, class _Vp> constexpr typename __gnu_cxx::__promote_3< _Tp, _Up, _Vp> ::__type 
# 1409
fma(_Tp __x, _Up __y, _Vp __z) 
# 1410
{ 
# 1411
typedef typename __gnu_cxx::__promote_3< _Tp, _Up, _Vp> ::__type __type; 
# 1412
return fma((__type)__x, (__type)__y, (__type)__z); 
# 1413
} 
# 1418
constexpr float fmax(float __x, float __y) 
# 1419
{ return __builtin_fmaxf(__x, __y); } 
# 1422
constexpr long double fmax(long double __x, long double __y) 
# 1423
{ return __builtin_fmaxl(__x, __y); } 
# 1427
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1429
fmax(_Tp __x, _Up __y) 
# 1430
{ 
# 1431
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1432
return fmax((__type)__x, (__type)__y); 
# 1433
} 
# 1438
constexpr float fmin(float __x, float __y) 
# 1439
{ return __builtin_fminf(__x, __y); } 
# 1442
constexpr long double fmin(long double __x, long double __y) 
# 1443
{ return __builtin_fminl(__x, __y); } 
# 1447
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1449
fmin(_Tp __x, _Up __y) 
# 1450
{ 
# 1451
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1452
return fmin((__type)__x, (__type)__y); 
# 1453
} 
# 1458
constexpr float hypot(float __x, float __y) 
# 1459
{ return __builtin_hypotf(__x, __y); } 
# 1462
constexpr long double hypot(long double __x, long double __y) 
# 1463
{ return __builtin_hypotl(__x, __y); } 
# 1467
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1469
hypot(_Tp __x, _Up __y) 
# 1470
{ 
# 1471
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1472
return hypot((__type)__x, (__type)__y); 
# 1473
} 
# 1478
constexpr int ilogb(float __x) 
# 1479
{ return __builtin_ilogbf(__x); } 
# 1482
constexpr int ilogb(long double __x) 
# 1483
{ return __builtin_ilogbl(__x); } 
# 1487
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, int> ::__type 
# 1491
ilogb(_Tp __x) 
# 1492
{ return __builtin_ilogb(__x); } 
# 1497
constexpr float lgamma(float __x) 
# 1498
{ return __builtin_lgammaf(__x); } 
# 1501
constexpr long double lgamma(long double __x) 
# 1502
{ return __builtin_lgammal(__x); } 
# 1506
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1509
lgamma(_Tp __x) 
# 1510
{ return __builtin_lgamma(__x); } 
# 1515
constexpr long long llrint(float __x) 
# 1516
{ return __builtin_llrintf(__x); } 
# 1519
constexpr long long llrint(long double __x) 
# 1520
{ return __builtin_llrintl(__x); } 
# 1524
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long long> ::__type 
# 1527
llrint(_Tp __x) 
# 1528
{ return __builtin_llrint(__x); } 
# 1533
constexpr long long llround(float __x) 
# 1534
{ return __builtin_llroundf(__x); } 
# 1537
constexpr long long llround(long double __x) 
# 1538
{ return __builtin_llroundl(__x); } 
# 1542
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long long> ::__type 
# 1545
llround(_Tp __x) 
# 1546
{ return __builtin_llround(__x); } 
# 1551
constexpr float log1p(float __x) 
# 1552
{ return __builtin_log1pf(__x); } 
# 1555
constexpr long double log1p(long double __x) 
# 1556
{ return __builtin_log1pl(__x); } 
# 1560
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1563
log1p(_Tp __x) 
# 1564
{ return __builtin_log1p(__x); } 
# 1570
constexpr float log2(float __x) 
# 1571
{ return __builtin_log2f(__x); } 
# 1574
constexpr long double log2(long double __x) 
# 1575
{ return __builtin_log2l(__x); } 
# 1579
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1582
log2(_Tp __x) 
# 1583
{ return __builtin_log2(__x); } 
# 1588
constexpr float logb(float __x) 
# 1589
{ return __builtin_logbf(__x); } 
# 1592
constexpr long double logb(long double __x) 
# 1593
{ return __builtin_logbl(__x); } 
# 1597
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1600
logb(_Tp __x) 
# 1601
{ return __builtin_logb(__x); } 
# 1606
constexpr long lrint(float __x) 
# 1607
{ return __builtin_lrintf(__x); } 
# 1610
constexpr long lrint(long double __x) 
# 1611
{ return __builtin_lrintl(__x); } 
# 1615
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long> ::__type 
# 1618
lrint(_Tp __x) 
# 1619
{ return __builtin_lrint(__x); } 
# 1624
constexpr long lround(float __x) 
# 1625
{ return __builtin_lroundf(__x); } 
# 1628
constexpr long lround(long double __x) 
# 1629
{ return __builtin_lroundl(__x); } 
# 1633
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long> ::__type 
# 1636
lround(_Tp __x) 
# 1637
{ return __builtin_lround(__x); } 
# 1642
constexpr float nearbyint(float __x) 
# 1643
{ return __builtin_nearbyintf(__x); } 
# 1646
constexpr long double nearbyint(long double __x) 
# 1647
{ return __builtin_nearbyintl(__x); } 
# 1651
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1654
nearbyint(_Tp __x) 
# 1655
{ return __builtin_nearbyint(__x); } 
# 1660
constexpr float nextafter(float __x, float __y) 
# 1661
{ return __builtin_nextafterf(__x, __y); } 
# 1664
constexpr long double nextafter(long double __x, long double __y) 
# 1665
{ return __builtin_nextafterl(__x, __y); } 
# 1669
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1671
nextafter(_Tp __x, _Up __y) 
# 1672
{ 
# 1673
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1674
return nextafter((__type)__x, (__type)__y); 
# 1675
} 
# 1680
constexpr float nexttoward(float __x, long double __y) 
# 1681
{ return __builtin_nexttowardf(__x, __y); } 
# 1684
constexpr long double nexttoward(long double __x, long double __y) 
# 1685
{ return __builtin_nexttowardl(__x, __y); } 
# 1689
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1692
nexttoward(_Tp __x, long double __y) 
# 1693
{ return __builtin_nexttoward(__x, __y); } 
# 1698
constexpr float remainder(float __x, float __y) 
# 1699
{ return __builtin_remainderf(__x, __y); } 
# 1702
constexpr long double remainder(long double __x, long double __y) 
# 1703
{ return __builtin_remainderl(__x, __y); } 
# 1707
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1709
remainder(_Tp __x, _Up __y) 
# 1710
{ 
# 1711
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1712
return remainder((__type)__x, (__type)__y); 
# 1713
} 
# 1718
inline float remquo(float __x, float __y, int *__pquo) 
# 1719
{ return __builtin_remquof(__x, __y, __pquo); } 
# 1722
inline long double remquo(long double __x, long double __y, int *__pquo) 
# 1723
{ return __builtin_remquol(__x, __y, __pquo); } 
# 1727
template< class _Tp, class _Up> inline typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1729
remquo(_Tp __x, _Up __y, int *__pquo) 
# 1730
{ 
# 1731
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1732
return remquo((__type)__x, (__type)__y, __pquo); 
# 1733
} 
# 1738
constexpr float rint(float __x) 
# 1739
{ return __builtin_rintf(__x); } 
# 1742
constexpr long double rint(long double __x) 
# 1743
{ return __builtin_rintl(__x); } 
# 1747
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1750
rint(_Tp __x) 
# 1751
{ return __builtin_rint(__x); } 
# 1756
constexpr float round(float __x) 
# 1757
{ return __builtin_roundf(__x); } 
# 1760
constexpr long double round(long double __x) 
# 1761
{ return __builtin_roundl(__x); } 
# 1765
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1768
round(_Tp __x) 
# 1769
{ return __builtin_round(__x); } 
# 1774
constexpr float scalbln(float __x, long __ex) 
# 1775
{ return __builtin_scalblnf(__x, __ex); } 
# 1778
constexpr long double scalbln(long double __x, long __ex) 
# 1779
{ return __builtin_scalblnl(__x, __ex); } 
# 1783
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1786
scalbln(_Tp __x, long __ex) 
# 1787
{ return __builtin_scalbln(__x, __ex); } 
# 1792
constexpr float scalbn(float __x, int __ex) 
# 1793
{ return __builtin_scalbnf(__x, __ex); } 
# 1796
constexpr long double scalbn(long double __x, int __ex) 
# 1797
{ return __builtin_scalbnl(__x, __ex); } 
# 1801
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1804
scalbn(_Tp __x, int __ex) 
# 1805
{ return __builtin_scalbn(__x, __ex); } 
# 1810
constexpr float tgamma(float __x) 
# 1811
{ return __builtin_tgammaf(__x); } 
# 1814
constexpr long double tgamma(long double __x) 
# 1815
{ return __builtin_tgammal(__x); } 
# 1819
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1822
tgamma(_Tp __x) 
# 1823
{ return __builtin_tgamma(__x); } 
# 1828
constexpr float trunc(float __x) 
# 1829
{ return __builtin_truncf(__x); } 
# 1832
constexpr long double trunc(long double __x) 
# 1833
{ return __builtin_truncl(__x); } 
# 1837
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1840
trunc(_Tp __x) 
# 1841
{ return __builtin_trunc(__x); } 
# 1924 "/usr/include/c++/9/cmath" 3
}
# 1930
}
# 38 "/usr/include/c++/9/math.h" 3
using std::abs;
# 39
using std::acos;
# 40
using std::asin;
# 41
using std::atan;
# 42
using std::atan2;
# 43
using std::cos;
# 44
using std::sin;
# 45
using std::tan;
# 46
using std::cosh;
# 47
using std::sinh;
# 48
using std::tanh;
# 49
using std::exp;
# 50
using std::frexp;
# 51
using std::ldexp;
# 52
using std::log;
# 53
using std::log10;
# 54
using std::modf;
# 55
using std::pow;
# 56
using std::sqrt;
# 57
using std::ceil;
# 58
using std::fabs;
# 59
using std::floor;
# 60
using std::fmod;
# 63
using std::fpclassify;
# 64
using std::isfinite;
# 65
using std::isinf;
# 66
using std::isnan;
# 67
using std::isnormal;
# 68
using std::signbit;
# 69
using std::isgreater;
# 70
using std::isgreaterequal;
# 71
using std::isless;
# 72
using std::islessequal;
# 73
using std::islessgreater;
# 74
using std::isunordered;
# 78
using std::acosh;
# 79
using std::asinh;
# 80
using std::atanh;
# 81
using std::cbrt;
# 82
using std::copysign;
# 83
using std::erf;
# 84
using std::erfc;
# 85
using std::exp2;
# 86
using std::expm1;
# 87
using std::fdim;
# 88
using std::fma;
# 89
using std::fmax;
# 90
using std::fmin;
# 91
using std::hypot;
# 92
using std::ilogb;
# 93
using std::lgamma;
# 94
using std::llrint;
# 95
using std::llround;
# 96
using std::log1p;
# 97
using std::log2;
# 98
using std::logb;
# 99
using std::lrint;
# 100
using std::lround;
# 101
using std::nearbyint;
# 102
using std::nextafter;
# 103
using std::nexttoward;
# 104
using std::remainder;
# 105
using std::remquo;
# 106
using std::rint;
# 107
using std::round;
# 108
using std::scalbln;
# 109
using std::scalbn;
# 110
using std::tgamma;
# 111
using std::trunc;
# 10623 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
namespace std { 
# 10624
constexpr bool signbit(float x); 
# 10625
constexpr bool signbit(double x); 
# 10626
constexpr bool signbit(long double x); 
# 10627
constexpr bool isfinite(float x); 
# 10628
constexpr bool isfinite(double x); 
# 10629
constexpr bool isfinite(long double x); 
# 10630
constexpr bool isnan(float x); 
# 10635
constexpr bool isnan(double x); 
# 10637
constexpr bool isnan(long double x); 
# 10638
constexpr bool isinf(float x); 
# 10643
constexpr bool isinf(double x); 
# 10645
constexpr bool isinf(long double x); 
# 10646
}
# 10802 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
namespace std { 
# 10804
template< class T> extern T __pow_helper(T, int); 
# 10805
template< class T> extern T __cmath_power(T, unsigned); 
# 10806
}
# 10808
using std::abs;
# 10809
using std::fabs;
# 10810
using std::ceil;
# 10811
using std::floor;
# 10812
using std::sqrt;
# 10814
using std::pow;
# 10816
using std::log;
# 10817
using std::log10;
# 10818
using std::fmod;
# 10819
using std::modf;
# 10820
using std::exp;
# 10821
using std::frexp;
# 10822
using std::ldexp;
# 10823
using std::asin;
# 10824
using std::sin;
# 10825
using std::sinh;
# 10826
using std::acos;
# 10827
using std::cos;
# 10828
using std::cosh;
# 10829
using std::atan;
# 10830
using std::atan2;
# 10831
using std::tan;
# 10832
using std::tanh;
# 11203 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
namespace std { 
# 11212 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern inline long long abs(long long); 
# 11222 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern inline long abs(long); 
# 11223
extern constexpr float abs(float); 
# 11224
extern constexpr double abs(double); 
# 11225
extern constexpr float fabs(float); 
# 11226
extern constexpr float ceil(float); 
# 11227
extern constexpr float floor(float); 
# 11228
extern constexpr float sqrt(float); 
# 11229
extern constexpr float pow(float, float); 
# 11234
template< class _Tp, class _Up> extern constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type pow(_Tp, _Up); 
# 11244
extern constexpr float log(float); 
# 11245
extern constexpr float log10(float); 
# 11246
extern constexpr float fmod(float, float); 
# 11247
extern inline float modf(float, float *); 
# 11248
extern constexpr float exp(float); 
# 11249
extern inline float frexp(float, int *); 
# 11250
extern constexpr float ldexp(float, int); 
# 11251
extern constexpr float asin(float); 
# 11252
extern constexpr float sin(float); 
# 11253
extern constexpr float sinh(float); 
# 11254
extern constexpr float acos(float); 
# 11255
extern constexpr float cos(float); 
# 11256
extern constexpr float cosh(float); 
# 11257
extern constexpr float atan(float); 
# 11258
extern constexpr float atan2(float, float); 
# 11259
extern constexpr float tan(float); 
# 11260
extern constexpr float tanh(float); 
# 11343 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
}
# 11449 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
namespace std { 
# 11450
constexpr float logb(float a); 
# 11451
constexpr int ilogb(float a); 
# 11452
constexpr float scalbn(float a, int b); 
# 11453
constexpr float scalbln(float a, long b); 
# 11454
constexpr float exp2(float a); 
# 11455
constexpr float expm1(float a); 
# 11456
constexpr float log2(float a); 
# 11457
constexpr float log1p(float a); 
# 11458
constexpr float acosh(float a); 
# 11459
constexpr float asinh(float a); 
# 11460
constexpr float atanh(float a); 
# 11461
constexpr float hypot(float a, float b); 
# 11462
constexpr float cbrt(float a); 
# 11463
constexpr float erf(float a); 
# 11464
constexpr float erfc(float a); 
# 11465
constexpr float lgamma(float a); 
# 11466
constexpr float tgamma(float a); 
# 11467
constexpr float copysign(float a, float b); 
# 11468
constexpr float nextafter(float a, float b); 
# 11469
constexpr float remainder(float a, float b); 
# 11470
inline float remquo(float a, float b, int * quo); 
# 11471
constexpr float round(float a); 
# 11472
constexpr long lround(float a); 
# 11473
constexpr long long llround(float a); 
# 11474
constexpr float trunc(float a); 
# 11475
constexpr float rint(float a); 
# 11476
constexpr long lrint(float a); 
# 11477
constexpr long long llrint(float a); 
# 11478
constexpr float nearbyint(float a); 
# 11479
constexpr float fdim(float a, float b); 
# 11480
constexpr float fma(float a, float b, float c); 
# 11481
constexpr float fmax(float a, float b); 
# 11482
constexpr float fmin(float a, float b); 
# 11483
}
# 11588 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
static inline float exp10(const float a); 
# 11590
static inline float rsqrt(const float a); 
# 11592
static inline float rcbrt(const float a); 
# 11594
static inline float sinpi(const float a); 
# 11596
static inline float cospi(const float a); 
# 11598
static inline void sincospi(const float a, float *const sptr, float *const cptr); 
# 11600
static inline void sincos(const float a, float *const sptr, float *const cptr); 
# 11602
static inline float j0(const float a); 
# 11604
static inline float j1(const float a); 
# 11606
static inline float jn(const int n, const float a); 
# 11608
static inline float y0(const float a); 
# 11610
static inline float y1(const float a); 
# 11612
static inline float yn(const int n, const float a); 
# 11614
__attribute__((unused)) static inline float cyl_bessel_i0(const float a); 
# 11616
__attribute__((unused)) static inline float cyl_bessel_i1(const float a); 
# 11618
static inline float erfinv(const float a); 
# 11620
static inline float erfcinv(const float a); 
# 11622
static inline float normcdfinv(const float a); 
# 11624
static inline float normcdf(const float a); 
# 11626
static inline float erfcx(const float a); 
# 11628
static inline double copysign(const double a, const float b); 
# 11630
static inline double copysign(const float a, const double b); 
# 11638
static inline unsigned min(const unsigned a, const unsigned b); 
# 11646
static inline unsigned min(const int a, const unsigned b); 
# 11654
static inline unsigned min(const unsigned a, const int b); 
# 11662
static inline long min(const long a, const long b); 
# 11670
static inline unsigned long min(const unsigned long a, const unsigned long b); 
# 11678
static inline unsigned long min(const long a, const unsigned long b); 
# 11686
static inline unsigned long min(const unsigned long a, const long b); 
# 11694
static inline long long min(const long long a, const long long b); 
# 11702
static inline unsigned long long min(const unsigned long long a, const unsigned long long b); 
# 11710
static inline unsigned long long min(const long long a, const unsigned long long b); 
# 11718
static inline unsigned long long min(const unsigned long long a, const long long b); 
# 11729 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
static inline float min(const float a, const float b); 
# 11740 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
static inline double min(const double a, const double b); 
# 11750 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
static inline double min(const float a, const double b); 
# 11760 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
static inline double min(const double a, const float b); 
# 11768
static inline unsigned max(const unsigned a, const unsigned b); 
# 11776
static inline unsigned max(const int a, const unsigned b); 
# 11784
static inline unsigned max(const unsigned a, const int b); 
# 11792
static inline long max(const long a, const long b); 
# 11800
static inline unsigned long max(const unsigned long a, const unsigned long b); 
# 11808
static inline unsigned long max(const long a, const unsigned long b); 
# 11816
static inline unsigned long max(const unsigned long a, const long b); 
# 11824
static inline long long max(const long long a, const long long b); 
# 11832
static inline unsigned long long max(const unsigned long long a, const unsigned long long b); 
# 11840
static inline unsigned long long max(const long long a, const unsigned long long b); 
# 11848
static inline unsigned long long max(const unsigned long long a, const long long b); 
# 11859 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
static inline float max(const float a, const float b); 
# 11870 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
static inline double max(const double a, const double b); 
# 11880 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
static inline double max(const float a, const double b); 
# 11890 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
static inline double max(const double a, const float b); 
# 11901 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern "C" {
# 11902
__attribute__((unused)) inline void *__nv_aligned_device_malloc(size_t size, size_t align) 
# 11903
{int volatile ___ = 1;(void)size;(void)align;
# 11906
::exit(___);}
#if 0
# 11903
{ 
# 11904
__attribute__((unused)) void *__nv_aligned_device_malloc_impl(size_t, size_t); 
# 11905
return __nv_aligned_device_malloc_impl(size, align); 
# 11906
} 
#endif
# 11907 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
}
# 758 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.hpp"
static inline float exp10(const float a) 
# 759
{ 
# 760
return exp10f(a); 
# 761
} 
# 763
static inline float rsqrt(const float a) 
# 764
{ 
# 765
return rsqrtf(a); 
# 766
} 
# 768
static inline float rcbrt(const float a) 
# 769
{ 
# 770
return rcbrtf(a); 
# 771
} 
# 773
static inline float sinpi(const float a) 
# 774
{ 
# 775
return sinpif(a); 
# 776
} 
# 778
static inline float cospi(const float a) 
# 779
{ 
# 780
return cospif(a); 
# 781
} 
# 783
static inline void sincospi(const float a, float *const sptr, float *const cptr) 
# 784
{ 
# 785
sincospif(a, sptr, cptr); 
# 786
} 
# 788
static inline void sincos(const float a, float *const sptr, float *const cptr) 
# 789
{ 
# 790
sincosf(a, sptr, cptr); 
# 791
} 
# 793
static inline float j0(const float a) 
# 794
{ 
# 795
return j0f(a); 
# 796
} 
# 798
static inline float j1(const float a) 
# 799
{ 
# 800
return j1f(a); 
# 801
} 
# 803
static inline float jn(const int n, const float a) 
# 804
{ 
# 805
return jnf(n, a); 
# 806
} 
# 808
static inline float y0(const float a) 
# 809
{ 
# 810
return y0f(a); 
# 811
} 
# 813
static inline float y1(const float a) 
# 814
{ 
# 815
return y1f(a); 
# 816
} 
# 818
static inline float yn(const int n, const float a) 
# 819
{ 
# 820
return ynf(n, a); 
# 821
} 
# 823
__attribute__((unused)) static inline float cyl_bessel_i0(const float a) 
# 824
{int volatile ___ = 1;(void)a;
# 826
::exit(___);}
#if 0
# 824
{ 
# 825
return cyl_bessel_i0f(a); 
# 826
} 
#endif
# 828 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.hpp"
__attribute__((unused)) static inline float cyl_bessel_i1(const float a) 
# 829
{int volatile ___ = 1;(void)a;
# 831
::exit(___);}
#if 0
# 829
{ 
# 830
return cyl_bessel_i1f(a); 
# 831
} 
#endif
# 833 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.hpp"
static inline float erfinv(const float a) 
# 834
{ 
# 835
return erfinvf(a); 
# 836
} 
# 838
static inline float erfcinv(const float a) 
# 839
{ 
# 840
return erfcinvf(a); 
# 841
} 
# 843
static inline float normcdfinv(const float a) 
# 844
{ 
# 845
return normcdfinvf(a); 
# 846
} 
# 848
static inline float normcdf(const float a) 
# 849
{ 
# 850
return normcdff(a); 
# 851
} 
# 853
static inline float erfcx(const float a) 
# 854
{ 
# 855
return erfcxf(a); 
# 856
} 
# 858
static inline double copysign(const double a, const float b) 
# 859
{ 
# 860
return copysign(a, static_cast< double>(b)); 
# 861
} 
# 863
static inline double copysign(const float a, const double b) 
# 864
{ 
# 865
return copysign(static_cast< double>(a), b); 
# 866
} 
# 868
static inline unsigned min(const unsigned a, const unsigned b) 
# 869
{ 
# 870
return umin(a, b); 
# 871
} 
# 873
static inline unsigned min(const int a, const unsigned b) 
# 874
{ 
# 875
return umin(static_cast< unsigned>(a), b); 
# 876
} 
# 878
static inline unsigned min(const unsigned a, const int b) 
# 879
{ 
# 880
return umin(a, static_cast< unsigned>(b)); 
# 881
} 
# 883
static inline long min(const long a, const long b) 
# 884
{ 
# 885
long retval; 
# 891
if (sizeof(long) == sizeof(int)) { 
# 895
retval = (static_cast< long>(min(static_cast< int>(a), static_cast< int>(b)))); 
# 896
} else { 
# 897
retval = (static_cast< long>(llmin(static_cast< long long>(a), static_cast< long long>(b)))); 
# 898
}  
# 899
return retval; 
# 900
} 
# 902
static inline unsigned long min(const unsigned long a, const unsigned long b) 
# 903
{ 
# 904
unsigned long retval; 
# 908
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 912
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 913
} else { 
# 914
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 915
}  
# 916
return retval; 
# 917
} 
# 919
static inline unsigned long min(const long a, const unsigned long b) 
# 920
{ 
# 921
unsigned long retval; 
# 925
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 929
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 930
} else { 
# 931
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 932
}  
# 933
return retval; 
# 934
} 
# 936
static inline unsigned long min(const unsigned long a, const long b) 
# 937
{ 
# 938
unsigned long retval; 
# 942
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 946
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 947
} else { 
# 948
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 949
}  
# 950
return retval; 
# 951
} 
# 953
static inline long long min(const long long a, const long long b) 
# 954
{ 
# 955
return llmin(a, b); 
# 956
} 
# 958
static inline unsigned long long min(const unsigned long long a, const unsigned long long b) 
# 959
{ 
# 960
return ullmin(a, b); 
# 961
} 
# 963
static inline unsigned long long min(const long long a, const unsigned long long b) 
# 964
{ 
# 965
return ullmin(static_cast< unsigned long long>(a), b); 
# 966
} 
# 968
static inline unsigned long long min(const unsigned long long a, const long long b) 
# 969
{ 
# 970
return ullmin(a, static_cast< unsigned long long>(b)); 
# 971
} 
# 973
static inline float min(const float a, const float b) 
# 974
{ 
# 975
return fminf(a, b); 
# 976
} 
# 978
static inline double min(const double a, const double b) 
# 979
{ 
# 980
return fmin(a, b); 
# 981
} 
# 983
static inline double min(const float a, const double b) 
# 984
{ 
# 985
return fmin(static_cast< double>(a), b); 
# 986
} 
# 988
static inline double min(const double a, const float b) 
# 989
{ 
# 990
return fmin(a, static_cast< double>(b)); 
# 991
} 
# 993
static inline unsigned max(const unsigned a, const unsigned b) 
# 994
{ 
# 995
return umax(a, b); 
# 996
} 
# 998
static inline unsigned max(const int a, const unsigned b) 
# 999
{ 
# 1000
return umax(static_cast< unsigned>(a), b); 
# 1001
} 
# 1003
static inline unsigned max(const unsigned a, const int b) 
# 1004
{ 
# 1005
return umax(a, static_cast< unsigned>(b)); 
# 1006
} 
# 1008
static inline long max(const long a, const long b) 
# 1009
{ 
# 1010
long retval; 
# 1015
if (sizeof(long) == sizeof(int)) { 
# 1019
retval = (static_cast< long>(max(static_cast< int>(a), static_cast< int>(b)))); 
# 1020
} else { 
# 1021
retval = (static_cast< long>(llmax(static_cast< long long>(a), static_cast< long long>(b)))); 
# 1022
}  
# 1023
return retval; 
# 1024
} 
# 1026
static inline unsigned long max(const unsigned long a, const unsigned long b) 
# 1027
{ 
# 1028
unsigned long retval; 
# 1032
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 1036
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 1037
} else { 
# 1038
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 1039
}  
# 1040
return retval; 
# 1041
} 
# 1043
static inline unsigned long max(const long a, const unsigned long b) 
# 1044
{ 
# 1045
unsigned long retval; 
# 1049
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 1053
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 1054
} else { 
# 1055
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 1056
}  
# 1057
return retval; 
# 1058
} 
# 1060
static inline unsigned long max(const unsigned long a, const long b) 
# 1061
{ 
# 1062
unsigned long retval; 
# 1066
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 1070
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 1071
} else { 
# 1072
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 1073
}  
# 1074
return retval; 
# 1075
} 
# 1077
static inline long long max(const long long a, const long long b) 
# 1078
{ 
# 1079
return llmax(a, b); 
# 1080
} 
# 1082
static inline unsigned long long max(const unsigned long long a, const unsigned long long b) 
# 1083
{ 
# 1084
return ullmax(a, b); 
# 1085
} 
# 1087
static inline unsigned long long max(const long long a, const unsigned long long b) 
# 1088
{ 
# 1089
return ullmax(static_cast< unsigned long long>(a), b); 
# 1090
} 
# 1092
static inline unsigned long long max(const unsigned long long a, const long long b) 
# 1093
{ 
# 1094
return ullmax(a, static_cast< unsigned long long>(b)); 
# 1095
} 
# 1097
static inline float max(const float a, const float b) 
# 1098
{ 
# 1099
return fmaxf(a, b); 
# 1100
} 
# 1102
static inline double max(const double a, const double b) 
# 1103
{ 
# 1104
return fmax(a, b); 
# 1105
} 
# 1107
static inline double max(const float a, const double b) 
# 1108
{ 
# 1109
return fmax(static_cast< double>(a), b); 
# 1110
} 
# 1112
static inline double max(const double a, const float b) 
# 1113
{ 
# 1114
return fmax(a, static_cast< double>(b)); 
# 1115
} 
# 1126 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.hpp"
inline int min(const int a, const int b) 
# 1127
{ 
# 1128
return (a < b) ? a : b; 
# 1129
} 
# 1131
inline unsigned umin(const unsigned a, const unsigned b) 
# 1132
{ 
# 1133
return (a < b) ? a : b; 
# 1134
} 
# 1136
inline long long llmin(const long long a, const long long b) 
# 1137
{ 
# 1138
return (a < b) ? a : b; 
# 1139
} 
# 1141
inline unsigned long long ullmin(const unsigned long long a, const unsigned long long 
# 1142
b) 
# 1143
{ 
# 1144
return (a < b) ? a : b; 
# 1145
} 
# 1147
inline int max(const int a, const int b) 
# 1148
{ 
# 1149
return (a > b) ? a : b; 
# 1150
} 
# 1152
inline unsigned umax(const unsigned a, const unsigned b) 
# 1153
{ 
# 1154
return (a > b) ? a : b; 
# 1155
} 
# 1157
inline long long llmax(const long long a, const long long b) 
# 1158
{ 
# 1159
return (a > b) ? a : b; 
# 1160
} 
# 1162
inline unsigned long long ullmax(const unsigned long long a, const unsigned long long 
# 1163
b) 
# 1164
{ 
# 1165
return (a > b) ? a : b; 
# 1166
} 
# 91 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
extern "C" {
# 3211 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline int __vimax_s32_relu(const int a, const int b); 
# 3223 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vimax_s16x2_relu(const unsigned a, const unsigned b); 
# 3232 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline int __vimin_s32_relu(const int a, const int b); 
# 3244 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vimin_s16x2_relu(const unsigned a, const unsigned b); 
# 3253 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline int __vimax3_s32(const int a, const int b, const int c); 
# 3265 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vimax3_s16x2(const unsigned a, const unsigned b, const unsigned c); 
# 3274 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vimax3_u32(const unsigned a, const unsigned b, const unsigned c); 
# 3286 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vimax3_u16x2(const unsigned a, const unsigned b, const unsigned c); 
# 3295 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline int __vimin3_s32(const int a, const int b, const int c); 
# 3307 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vimin3_s16x2(const unsigned a, const unsigned b, const unsigned c); 
# 3316 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vimin3_u32(const unsigned a, const unsigned b, const unsigned c); 
# 3328 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vimin3_u16x2(const unsigned a, const unsigned b, const unsigned c); 
# 3337 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline int __vimax3_s32_relu(const int a, const int b, const int c); 
# 3349 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vimax3_s16x2_relu(const unsigned a, const unsigned b, const unsigned c); 
# 3358 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline int __vimin3_s32_relu(const int a, const int b, const int c); 
# 3370 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vimin3_s16x2_relu(const unsigned a, const unsigned b, const unsigned c); 
# 3379 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline int __viaddmax_s32(const int a, const int b, const int c); 
# 3391 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __viaddmax_s16x2(const unsigned a, const unsigned b, const unsigned c); 
# 3400 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __viaddmax_u32(const unsigned a, const unsigned b, const unsigned c); 
# 3412 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __viaddmax_u16x2(const unsigned a, const unsigned b, const unsigned c); 
# 3421 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline int __viaddmin_s32(const int a, const int b, const int c); 
# 3433 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __viaddmin_s16x2(const unsigned a, const unsigned b, const unsigned c); 
# 3442 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __viaddmin_u32(const unsigned a, const unsigned b, const unsigned c); 
# 3454 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __viaddmin_u16x2(const unsigned a, const unsigned b, const unsigned c); 
# 3464 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline int __viaddmax_s32_relu(const int a, const int b, const int c); 
# 3476 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __viaddmax_s16x2_relu(const unsigned a, const unsigned b, const unsigned c); 
# 3486 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline int __viaddmin_s32_relu(const int a, const int b, const int c); 
# 3498 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __viaddmin_s16x2_relu(const unsigned a, const unsigned b, const unsigned c); 
# 3507 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline int __vibmax_s32(const int a, const int b, bool *const pred); 
# 3516 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vibmax_u32(const unsigned a, const unsigned b, bool *const pred); 
# 3525 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline int __vibmin_s32(const int a, const int b, bool *const pred); 
# 3534 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vibmin_u32(const unsigned a, const unsigned b, bool *const pred); 
# 3548 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vibmax_s16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo); 
# 3562 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vibmax_u16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo); 
# 3576 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vibmin_s16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo); 
# 3590 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vibmin_u16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo); 
# 3597
}
# 102 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
static inline int __vimax_s32_relu(const int a, const int b) { 
# 109
int ans = max(a, b); 
# 111
return (ans > 0) ? ans : 0; 
# 113
} 
# 115
static inline unsigned __vimax_s16x2_relu(const unsigned a, const unsigned b) { 
# 123
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 124
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 126
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 127
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 130
short aS_lo = *((short *)(&aU_lo)); 
# 131
short aS_hi = *((short *)(&aU_hi)); 
# 133
short bS_lo = *((short *)(&bU_lo)); 
# 134
short bS_hi = *((short *)(&bU_hi)); 
# 137
short ansS_lo = (short)max(aS_lo, bS_lo); 
# 138
short ansS_hi = (short)max(aS_hi, bS_hi); 
# 141
if (ansS_lo < 0) { ansS_lo = (0); }  
# 142
if (ansS_hi < 0) { ansS_hi = (0); }  
# 145
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 146
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 149
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 151
return ans; 
# 153
} 
# 155
static inline int __vimin_s32_relu(const int a, const int b) { 
# 162
int ans = min(a, b); 
# 164
return (ans > 0) ? ans : 0; 
# 166
} 
# 168
static inline unsigned __vimin_s16x2_relu(const unsigned a, const unsigned b) { 
# 176
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 177
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 179
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 180
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 183
short aS_lo = *((short *)(&aU_lo)); 
# 184
short aS_hi = *((short *)(&aU_hi)); 
# 186
short bS_lo = *((short *)(&bU_lo)); 
# 187
short bS_hi = *((short *)(&bU_hi)); 
# 190
short ansS_lo = (short)min(aS_lo, bS_lo); 
# 191
short ansS_hi = (short)min(aS_hi, bS_hi); 
# 194
if (ansS_lo < 0) { ansS_lo = (0); }  
# 195
if (ansS_hi < 0) { ansS_hi = (0); }  
# 198
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 199
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 202
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 204
return ans; 
# 206
} 
# 208
static inline int __vimax3_s32(const int a, const int b, const int c) { 
# 218 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
return max(max(a, b), c); 
# 220
} 
# 222
static inline unsigned __vimax3_s16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 234 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 235
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 237
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 238
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 240
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 241
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 244
short aS_lo = *((short *)(&aU_lo)); 
# 245
short aS_hi = *((short *)(&aU_hi)); 
# 247
short bS_lo = *((short *)(&bU_lo)); 
# 248
short bS_hi = *((short *)(&bU_hi)); 
# 250
short cS_lo = *((short *)(&cU_lo)); 
# 251
short cS_hi = *((short *)(&cU_hi)); 
# 254
short ansS_lo = (short)max(max(aS_lo, bS_lo), cS_lo); 
# 255
short ansS_hi = (short)max(max(aS_hi, bS_hi), cS_hi); 
# 258
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 259
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 262
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 264
return ans; 
# 266
} 
# 268
static inline unsigned __vimax3_u32(const unsigned a, const unsigned b, const unsigned c) { 
# 278 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
return max(max(a, b), c); 
# 280
} 
# 282
static inline unsigned __vimax3_u16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 293 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 294
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 296
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 297
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 299
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 300
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 303
unsigned short ansU_lo = (unsigned short)max(max(aU_lo, bU_lo), cU_lo); 
# 304
unsigned short ansU_hi = (unsigned short)max(max(aU_hi, bU_hi), cU_hi); 
# 307
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 309
return ans; 
# 311
} 
# 313
static inline int __vimin3_s32(const int a, const int b, const int c) { 
# 323 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
return min(min(a, b), c); 
# 325
} 
# 327
static inline unsigned __vimin3_s16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 338 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 339
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 341
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 342
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 344
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 345
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 348
short aS_lo = *((short *)(&aU_lo)); 
# 349
short aS_hi = *((short *)(&aU_hi)); 
# 351
short bS_lo = *((short *)(&bU_lo)); 
# 352
short bS_hi = *((short *)(&bU_hi)); 
# 354
short cS_lo = *((short *)(&cU_lo)); 
# 355
short cS_hi = *((short *)(&cU_hi)); 
# 358
short ansS_lo = (short)min(min(aS_lo, bS_lo), cS_lo); 
# 359
short ansS_hi = (short)min(min(aS_hi, bS_hi), cS_hi); 
# 362
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 363
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 366
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 368
return ans; 
# 370
} 
# 372
static inline unsigned __vimin3_u32(const unsigned a, const unsigned b, const unsigned c) { 
# 382 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
return min(min(a, b), c); 
# 384
} 
# 386
static inline unsigned __vimin3_u16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 397 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 398
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 400
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 401
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 403
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 404
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 407
unsigned short ansU_lo = (unsigned short)min(min(aU_lo, bU_lo), cU_lo); 
# 408
unsigned short ansU_hi = (unsigned short)min(min(aU_hi, bU_hi), cU_hi); 
# 411
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 413
return ans; 
# 415
} 
# 417
static inline int __vimax3_s32_relu(const int a, const int b, const int c) { 
# 427 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
int ans = max(max(a, b), c); 
# 429
return (ans > 0) ? ans : 0; 
# 431
} 
# 433
static inline unsigned __vimax3_s16x2_relu(const unsigned a, const unsigned b, const unsigned c) { 
# 444 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 445
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 447
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 448
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 450
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 451
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 454
short aS_lo = *((short *)(&aU_lo)); 
# 455
short aS_hi = *((short *)(&aU_hi)); 
# 457
short bS_lo = *((short *)(&bU_lo)); 
# 458
short bS_hi = *((short *)(&bU_hi)); 
# 460
short cS_lo = *((short *)(&cU_lo)); 
# 461
short cS_hi = *((short *)(&cU_hi)); 
# 464
short ansS_lo = (short)max(max(aS_lo, bS_lo), cS_lo); 
# 465
short ansS_hi = (short)max(max(aS_hi, bS_hi), cS_hi); 
# 468
if (ansS_lo < 0) { ansS_lo = (0); }  
# 469
if (ansS_hi < 0) { ansS_hi = (0); }  
# 472
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 473
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 476
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 478
return ans; 
# 480
} 
# 482
static inline int __vimin3_s32_relu(const int a, const int b, const int c) { 
# 492 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
int ans = min(min(a, b), c); 
# 494
return (ans > 0) ? ans : 0; 
# 496
} 
# 498
static inline unsigned __vimin3_s16x2_relu(const unsigned a, const unsigned b, const unsigned c) { 
# 509 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 510
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 512
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 513
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 515
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 516
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 519
short aS_lo = *((short *)(&aU_lo)); 
# 520
short aS_hi = *((short *)(&aU_hi)); 
# 522
short bS_lo = *((short *)(&bU_lo)); 
# 523
short bS_hi = *((short *)(&bU_hi)); 
# 525
short cS_lo = *((short *)(&cU_lo)); 
# 526
short cS_hi = *((short *)(&cU_hi)); 
# 529
short ansS_lo = (short)min(min(aS_lo, bS_lo), cS_lo); 
# 530
short ansS_hi = (short)min(min(aS_hi, bS_hi), cS_hi); 
# 533
if (ansS_lo < 0) { ansS_lo = (0); }  
# 534
if (ansS_hi < 0) { ansS_hi = (0); }  
# 537
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 538
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 541
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 543
return ans; 
# 545
} 
# 547
static inline int __viaddmax_s32(const int a, const int b, const int c) { 
# 557 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
return max(a + b, c); 
# 559
} 
# 561
static inline unsigned __viaddmax_s16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 572 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 573
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 575
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 576
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 578
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 579
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 582
short aS_lo = *((short *)(&aU_lo)); 
# 583
short aS_hi = *((short *)(&aU_hi)); 
# 585
short bS_lo = *((short *)(&bU_lo)); 
# 586
short bS_hi = *((short *)(&bU_hi)); 
# 588
short cS_lo = *((short *)(&cU_lo)); 
# 589
short cS_hi = *((short *)(&cU_hi)); 
# 592
short ansS_lo = (short)max((short)(aS_lo + bS_lo), cS_lo); 
# 593
short ansS_hi = (short)max((short)(aS_hi + bS_hi), cS_hi); 
# 596
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 597
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 600
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 602
return ans; 
# 604
} 
# 606
static inline unsigned __viaddmax_u32(const unsigned a, const unsigned b, const unsigned c) { 
# 616 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
return max(a + b, c); 
# 618
} 
# 620
static inline unsigned __viaddmax_u16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 631 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 632
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 634
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 635
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 637
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 638
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 641
unsigned short ansU_lo = (unsigned short)max((unsigned short)(aU_lo + bU_lo), cU_lo); 
# 642
unsigned short ansU_hi = (unsigned short)max((unsigned short)(aU_hi + bU_hi), cU_hi); 
# 645
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 647
return ans; 
# 649
} 
# 651
static inline int __viaddmin_s32(const int a, const int b, const int c) { 
# 661 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
return min(a + b, c); 
# 663
} 
# 665
static inline unsigned __viaddmin_s16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 676 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 677
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 679
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 680
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 682
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 683
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 686
short aS_lo = *((short *)(&aU_lo)); 
# 687
short aS_hi = *((short *)(&aU_hi)); 
# 689
short bS_lo = *((short *)(&bU_lo)); 
# 690
short bS_hi = *((short *)(&bU_hi)); 
# 692
short cS_lo = *((short *)(&cU_lo)); 
# 693
short cS_hi = *((short *)(&cU_hi)); 
# 696
short ansS_lo = (short)min((short)(aS_lo + bS_lo), cS_lo); 
# 697
short ansS_hi = (short)min((short)(aS_hi + bS_hi), cS_hi); 
# 700
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 701
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 704
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 706
return ans; 
# 708
} 
# 710
static inline unsigned __viaddmin_u32(const unsigned a, const unsigned b, const unsigned c) { 
# 720 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
return min(a + b, c); 
# 722
} 
# 724
static inline unsigned __viaddmin_u16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 735 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 736
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 738
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 739
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 741
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 742
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 745
unsigned short ansU_lo = (unsigned short)min((unsigned short)(aU_lo + bU_lo), cU_lo); 
# 746
unsigned short ansU_hi = (unsigned short)min((unsigned short)(aU_hi + bU_hi), cU_hi); 
# 749
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 751
return ans; 
# 753
} 
# 755
static inline int __viaddmax_s32_relu(const int a, const int b, const int c) { 
# 765 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
int ans = max(a + b, c); 
# 767
return (ans > 0) ? ans : 0; 
# 769
} 
# 771
static inline unsigned __viaddmax_s16x2_relu(const unsigned a, const unsigned b, const unsigned c) { 
# 782 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 783
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 785
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 786
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 788
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 789
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 792
short aS_lo = *((short *)(&aU_lo)); 
# 793
short aS_hi = *((short *)(&aU_hi)); 
# 795
short bS_lo = *((short *)(&bU_lo)); 
# 796
short bS_hi = *((short *)(&bU_hi)); 
# 798
short cS_lo = *((short *)(&cU_lo)); 
# 799
short cS_hi = *((short *)(&cU_hi)); 
# 802
short ansS_lo = (short)max((short)(aS_lo + bS_lo), cS_lo); 
# 803
short ansS_hi = (short)max((short)(aS_hi + bS_hi), cS_hi); 
# 805
if (ansS_lo < 0) { ansS_lo = (0); }  
# 806
if (ansS_hi < 0) { ansS_hi = (0); }  
# 809
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 810
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 813
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 815
return ans; 
# 817
} 
# 819
static inline int __viaddmin_s32_relu(const int a, const int b, const int c) { 
# 829 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
int ans = min(a + b, c); 
# 831
return (ans > 0) ? ans : 0; 
# 833
} 
# 835
static inline unsigned __viaddmin_s16x2_relu(const unsigned a, const unsigned b, const unsigned c) { 
# 846 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 847
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 849
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 850
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 852
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 853
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 856
short aS_lo = *((short *)(&aU_lo)); 
# 857
short aS_hi = *((short *)(&aU_hi)); 
# 859
short bS_lo = *((short *)(&bU_lo)); 
# 860
short bS_hi = *((short *)(&bU_hi)); 
# 862
short cS_lo = *((short *)(&cU_lo)); 
# 863
short cS_hi = *((short *)(&cU_hi)); 
# 866
short ansS_lo = (short)min((short)(aS_lo + bS_lo), cS_lo); 
# 867
short ansS_hi = (short)min((short)(aS_hi + bS_hi), cS_hi); 
# 869
if (ansS_lo < 0) { ansS_lo = (0); }  
# 870
if (ansS_hi < 0) { ansS_hi = (0); }  
# 873
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 874
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 877
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 879
return ans; 
# 881
} 
# 885
static inline int __vibmax_s32(const int a, const int b, bool *const pred) { 
# 899 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
int ans = max(a, b); 
# 901
(*pred) = (a >= b); 
# 902
return ans; 
# 904
} 
# 906
static inline unsigned __vibmax_u32(const unsigned a, const unsigned b, bool *const pred) { 
# 920 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned ans = max(a, b); 
# 922
(*pred) = (a >= b); 
# 923
return ans; 
# 925
} 
# 928
static inline int __vibmin_s32(const int a, const int b, bool *const pred) { 
# 942 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
int ans = min(a, b); 
# 944
(*pred) = (a <= b); 
# 945
return ans; 
# 947
} 
# 950
static inline unsigned __vibmin_u32(const unsigned a, const unsigned b, bool *const pred) { 
# 964 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned ans = min(a, b); 
# 966
(*pred) = (a <= b); 
# 967
return ans; 
# 969
} 
# 971
static inline unsigned __vibmax_s16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo) { 
# 993 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 994
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 996
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 997
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 1000
short aS_lo = *((short *)(&aU_lo)); 
# 1001
short aS_hi = *((short *)(&aU_hi)); 
# 1003
short bS_lo = *((short *)(&bU_lo)); 
# 1004
short bS_hi = *((short *)(&bU_hi)); 
# 1007
short ansS_lo = (short)max(aS_lo, bS_lo); 
# 1008
short ansS_hi = (short)max(aS_hi, bS_hi); 
# 1010
(*pred_hi) = (aS_hi >= bS_hi); 
# 1011
(*pred_lo) = (aS_lo >= bS_lo); 
# 1014
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 1015
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 1018
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 1020
return ans; 
# 1022
} 
# 1024
static inline unsigned __vibmax_u16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo) { 
# 1046 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 1047
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 1049
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 1050
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 1053
unsigned short ansU_lo = (unsigned short)max(aU_lo, bU_lo); 
# 1054
unsigned short ansU_hi = (unsigned short)max(aU_hi, bU_hi); 
# 1056
(*pred_hi) = (aU_hi >= bU_hi); 
# 1057
(*pred_lo) = (aU_lo >= bU_lo); 
# 1060
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 1062
return ans; 
# 1064
} 
# 1066
static inline unsigned __vibmin_s16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo) { 
# 1088 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 1089
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 1091
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 1092
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 1095
short aS_lo = *((short *)(&aU_lo)); 
# 1096
short aS_hi = *((short *)(&aU_hi)); 
# 1098
short bS_lo = *((short *)(&bU_lo)); 
# 1099
short bS_hi = *((short *)(&bU_hi)); 
# 1102
short ansS_lo = (short)min(aS_lo, bS_lo); 
# 1103
short ansS_hi = (short)min(aS_hi, bS_hi); 
# 1105
(*pred_hi) = (aS_hi <= bS_hi); 
# 1106
(*pred_lo) = (aS_lo <= bS_lo); 
# 1109
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 1110
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 1113
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 1115
return ans; 
# 1117
} 
# 1119
static inline unsigned __vibmin_u16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo) { 
# 1141 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 1142
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 1144
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 1145
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 1148
unsigned short ansU_lo = (unsigned short)min(aU_lo, bU_lo); 
# 1149
unsigned short ansU_hi = (unsigned short)min(aU_hi, bU_hi); 
# 1151
(*pred_hi) = (aU_hi <= bU_hi); 
# 1152
(*pred_lo) = (aU_lo <= bU_lo); 
# 1155
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 1157
return ans; 
# 1159
} 
# 110 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 110
{ } 
#endif
# 112 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 112
{ } 
#endif
# 114 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicSub(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 114
{ } 
#endif
# 116 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicSub(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 116
{ } 
#endif
# 118 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 118
{ } 
#endif
# 120 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 120
{ } 
#endif
# 122 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 122
{ } 
#endif
# 124 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 124
{ } 
#endif
# 126 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 126
{ } 
#endif
# 128 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 128
{ } 
#endif
# 130 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 130
{ } 
#endif
# 132 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 132
{ } 
#endif
# 134 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 134
{ } 
#endif
# 136 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 136
{ } 
#endif
# 138 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 138
{ } 
#endif
# 140 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 140
{ } 
#endif
# 142 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 142
{ } 
#endif
# 144 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 144
{ } 
#endif
# 146 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 146
{ } 
#endif
# 148 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 148
{ } 
#endif
# 150 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS(unsigned *address, unsigned compare, unsigned val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 150
{ } 
#endif
# 177 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
extern "C" {
# 186
}
# 195 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 195
{ } 
#endif
# 197 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 197
{ } 
#endif
# 199 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS(unsigned long long *address, unsigned long long compare, unsigned long long val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 199
{ } 
#endif
# 201 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute((deprecated("__any() is deprecated in favor of __any_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppr" "ess this warning)."))) __attribute__((unused)) static inline bool any(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}
#if 0
# 201
{ } 
#endif
# 203 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute((deprecated("__all() is deprecated in favor of __all_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppr" "ess this warning)."))) __attribute__((unused)) static inline bool all(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}
#if 0
# 203
{ } 
#endif
# 87 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.h"
extern "C" {
# 1139 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.h"
}
# 1147
__attribute__((unused)) static inline double fma(double a, double b, double c, cudaRoundMode mode); 
# 1149
__attribute__((unused)) static inline double dmul(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1151
__attribute__((unused)) static inline double dadd(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1153
__attribute__((unused)) static inline double dsub(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1155
__attribute__((unused)) static inline int double2int(double a, cudaRoundMode mode = cudaRoundZero); 
# 1157
__attribute__((unused)) static inline unsigned double2uint(double a, cudaRoundMode mode = cudaRoundZero); 
# 1159
__attribute__((unused)) static inline long long double2ll(double a, cudaRoundMode mode = cudaRoundZero); 
# 1161
__attribute__((unused)) static inline unsigned long long double2ull(double a, cudaRoundMode mode = cudaRoundZero); 
# 1163
__attribute__((unused)) static inline double ll2double(long long a, cudaRoundMode mode = cudaRoundNearest); 
# 1165
__attribute__((unused)) static inline double ull2double(unsigned long long a, cudaRoundMode mode = cudaRoundNearest); 
# 1167
__attribute__((unused)) static inline double int2double(int a, cudaRoundMode mode = cudaRoundNearest); 
# 1169
__attribute__((unused)) static inline double uint2double(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
# 1171
__attribute__((unused)) static inline double float2double(float a, cudaRoundMode mode = cudaRoundNearest); 
# 93 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double fma(double a, double b, double c, cudaRoundMode mode) 
# 94
{int volatile ___ = 1;(void)a;(void)b;(void)c;(void)mode;
# 99
::exit(___);}
#if 0
# 94
{ 
# 95
return (mode == (cudaRoundZero)) ? __fma_rz(a, b, c) : ((mode == (cudaRoundPosInf)) ? __fma_ru(a, b, c) : ((mode == (cudaRoundMinInf)) ? __fma_rd(a, b, c) : __fma_rn(a, b, c))); 
# 99
} 
#endif
# 101 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double dmul(double a, double b, cudaRoundMode mode) 
# 102
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 107
::exit(___);}
#if 0
# 102
{ 
# 103
return (mode == (cudaRoundZero)) ? __dmul_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dmul_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dmul_rd(a, b) : __dmul_rn(a, b))); 
# 107
} 
#endif
# 109 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double dadd(double a, double b, cudaRoundMode mode) 
# 110
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 115
::exit(___);}
#if 0
# 110
{ 
# 111
return (mode == (cudaRoundZero)) ? __dadd_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dadd_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dadd_rd(a, b) : __dadd_rn(a, b))); 
# 115
} 
#endif
# 117 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double dsub(double a, double b, cudaRoundMode mode) 
# 118
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 123
::exit(___);}
#if 0
# 118
{ 
# 119
return (mode == (cudaRoundZero)) ? __dsub_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dsub_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dsub_rd(a, b) : __dsub_rn(a, b))); 
# 123
} 
#endif
# 125 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline int double2int(double a, cudaRoundMode mode) 
# 126
{int volatile ___ = 1;(void)a;(void)mode;
# 131
::exit(___);}
#if 0
# 126
{ 
# 127
return (mode == (cudaRoundNearest)) ? __double2int_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2int_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2int_rd(a) : __double2int_rz(a))); 
# 131
} 
#endif
# 133 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline unsigned double2uint(double a, cudaRoundMode mode) 
# 134
{int volatile ___ = 1;(void)a;(void)mode;
# 139
::exit(___);}
#if 0
# 134
{ 
# 135
return (mode == (cudaRoundNearest)) ? __double2uint_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2uint_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2uint_rd(a) : __double2uint_rz(a))); 
# 139
} 
#endif
# 141 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline long long double2ll(double a, cudaRoundMode mode) 
# 142
{int volatile ___ = 1;(void)a;(void)mode;
# 147
::exit(___);}
#if 0
# 142
{ 
# 143
return (mode == (cudaRoundNearest)) ? __double2ll_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ll_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ll_rd(a) : __double2ll_rz(a))); 
# 147
} 
#endif
# 149 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline unsigned long long double2ull(double a, cudaRoundMode mode) 
# 150
{int volatile ___ = 1;(void)a;(void)mode;
# 155
::exit(___);}
#if 0
# 150
{ 
# 151
return (mode == (cudaRoundNearest)) ? __double2ull_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ull_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ull_rd(a) : __double2ull_rz(a))); 
# 155
} 
#endif
# 157 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double ll2double(long long a, cudaRoundMode mode) 
# 158
{int volatile ___ = 1;(void)a;(void)mode;
# 163
::exit(___);}
#if 0
# 158
{ 
# 159
return (mode == (cudaRoundZero)) ? __ll2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ll2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ll2double_rd(a) : __ll2double_rn(a))); 
# 163
} 
#endif
# 165 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double ull2double(unsigned long long a, cudaRoundMode mode) 
# 166
{int volatile ___ = 1;(void)a;(void)mode;
# 171
::exit(___);}
#if 0
# 166
{ 
# 167
return (mode == (cudaRoundZero)) ? __ull2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ull2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ull2double_rd(a) : __ull2double_rn(a))); 
# 171
} 
#endif
# 173 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double int2double(int a, cudaRoundMode mode) 
# 174
{int volatile ___ = 1;(void)a;(void)mode;
# 176
::exit(___);}
#if 0
# 174
{ 
# 175
return (double)a; 
# 176
} 
#endif
# 178 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double uint2double(unsigned a, cudaRoundMode mode) 
# 179
{int volatile ___ = 1;(void)a;(void)mode;
# 181
::exit(___);}
#if 0
# 179
{ 
# 180
return (double)a; 
# 181
} 
#endif
# 183 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double float2double(float a, cudaRoundMode mode) 
# 184
{int volatile ___ = 1;(void)a;(void)mode;
# 186
::exit(___);}
#if 0
# 184
{ 
# 185
return (double)a; 
# 186
} 
#endif
# 103 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 103
{ } 
#endif
# 110 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 110
{ } 
#endif
# 112 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMax(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 112
{ } 
#endif
# 114 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicAnd(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 114
{ } 
#endif
# 116 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicOr(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 116
{ } 
#endif
# 118 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicXor(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 118
{ } 
#endif
# 120 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMin(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 120
{ } 
#endif
# 122 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMax(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 122
{ } 
#endif
# 124 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAnd(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 124
{ } 
#endif
# 126 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicOr(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 126
{ } 
#endif
# 128 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicXor(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 128
{ } 
#endif
# 307 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline double atomicAdd(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 307
{ } 
#endif
# 310 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 310
{ } 
#endif
# 313 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 313
{ } 
#endif
# 316 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 316
{ } 
#endif
# 319 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 319
{ } 
#endif
# 322 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 322
{ } 
#endif
# 325 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 325
{ } 
#endif
# 328 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 328
{ } 
#endif
# 331 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 331
{ } 
#endif
# 334 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline double atomicAdd_block(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 334
{ } 
#endif
# 337 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline double atomicAdd_system(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 337
{ } 
#endif
# 340 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicSub_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 340
{ } 
#endif
# 343 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicSub_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 343
{ } 
#endif
# 346 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicSub_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 346
{ } 
#endif
# 349 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicSub_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 349
{ } 
#endif
# 352 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 352
{ } 
#endif
# 355 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 355
{ } 
#endif
# 358 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 358
{ } 
#endif
# 361 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 361
{ } 
#endif
# 364 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 364
{ } 
#endif
# 367 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 367
{ } 
#endif
# 370 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 370
{ } 
#endif
# 373 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 373
{ } 
#endif
# 376 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 376
{ } 
#endif
# 379 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 379
{ } 
#endif
# 382 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 382
{ } 
#endif
# 385 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 385
{ } 
#endif
# 388 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 388
{ } 
#endif
# 391 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 391
{ } 
#endif
# 394 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMin_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 394
{ } 
#endif
# 397 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMin_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 397
{ } 
#endif
# 400 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 400
{ } 
#endif
# 403 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 403
{ } 
#endif
# 406 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMax_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 406
{ } 
#endif
# 409 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMax_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 409
{ } 
#endif
# 412 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 412
{ } 
#endif
# 415 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 415
{ } 
#endif
# 418 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMax_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 418
{ } 
#endif
# 421 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMax_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 421
{ } 
#endif
# 424 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 424
{ } 
#endif
# 427 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 427
{ } 
#endif
# 430 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 430
{ } 
#endif
# 433 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 433
{ } 
#endif
# 436 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS_block(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 436
{ } 
#endif
# 439 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS_system(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 439
{ } 
#endif
# 442 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS_block(unsigned *address, unsigned compare, unsigned 
# 443
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 443
{ } 
#endif
# 446 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS_system(unsigned *address, unsigned compare, unsigned 
# 447
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 447
{ } 
#endif
# 450 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS_block(unsigned long long *address, unsigned long long 
# 451
compare, unsigned long long 
# 452
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 452
{ } 
#endif
# 455 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS_system(unsigned long long *address, unsigned long long 
# 456
compare, unsigned long long 
# 457
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 457
{ } 
#endif
# 460 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 460
{ } 
#endif
# 463 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 463
{ } 
#endif
# 466 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicAnd_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 466
{ } 
#endif
# 469 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicAnd_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 469
{ } 
#endif
# 472 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 472
{ } 
#endif
# 475 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 475
{ } 
#endif
# 478 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAnd_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 478
{ } 
#endif
# 481 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAnd_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 481
{ } 
#endif
# 484 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 484
{ } 
#endif
# 487 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 487
{ } 
#endif
# 490 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicOr_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 490
{ } 
#endif
# 493 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicOr_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 493
{ } 
#endif
# 496 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 496
{ } 
#endif
# 499 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 499
{ } 
#endif
# 502 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicOr_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 502
{ } 
#endif
# 505 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicOr_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 505
{ } 
#endif
# 508 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 508
{ } 
#endif
# 511 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 511
{ } 
#endif
# 514 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicXor_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 514
{ } 
#endif
# 517 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicXor_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 517
{ } 
#endif
# 520 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 520
{ } 
#endif
# 523 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 523
{ } 
#endif
# 526 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicXor_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 526
{ } 
#endif
# 529 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicXor_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 529
{ } 
#endif
# 97 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern "C" {
# 1510 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
}
# 1522 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute((deprecated("__ballot() is deprecated in favor of __ballot_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to" " suppress this warning)."))) __attribute__((unused)) static inline unsigned ballot(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1522
{ } 
#endif
# 1524 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline int syncthreads_count(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1524
{ } 
#endif
# 1526 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline bool syncthreads_and(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1526
{ } 
#endif
# 1528 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline bool syncthreads_or(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1528
{ } 
#endif
# 1533 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isGlobal(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1533
{ } 
#endif
# 1534 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isShared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1534
{ } 
#endif
# 1535 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isConstant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1535
{ } 
#endif
# 1536 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isLocal(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1536
{ } 
#endif
# 1538 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isGridConstant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1538
{ } 
#endif
# 1540 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline size_t __cvta_generic_to_global(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1540
{ } 
#endif
# 1541 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline size_t __cvta_generic_to_shared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1541
{ } 
#endif
# 1542 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline size_t __cvta_generic_to_constant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1542
{ } 
#endif
# 1543 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline size_t __cvta_generic_to_local(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1543
{ } 
#endif
# 1545 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline size_t __cvta_generic_to_grid_constant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1545
{ } 
#endif
# 1548 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline void *__cvta_global_to_generic(size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1548
{ } 
#endif
# 1549 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline void *__cvta_shared_to_generic(size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1549
{ } 
#endif
# 1550 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline void *__cvta_constant_to_generic(size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1550
{ } 
#endif
# 1551 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline void *__cvta_local_to_generic(size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1551
{ } 
#endif
# 1553 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline void *__cvta_grid_constant_to_generic(size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1553
{ } 
#endif
# 108 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __fns(unsigned mask, unsigned base, int offset) {int volatile ___ = 1;(void)mask;(void)base;(void)offset;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline void __barrier_sync(unsigned id) {int volatile ___ = 1;(void)id;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline void __barrier_sync_count(unsigned id, unsigned cnt) {int volatile ___ = 1;(void)id;(void)cnt;::exit(___);}
#if 0
# 110
{ } 
#endif
# 111 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline void __syncwarp(unsigned mask = 4294967295U) {int volatile ___ = 1;(void)mask;::exit(___);}
#if 0
# 111
{ } 
#endif
# 112 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __all_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 112
{ } 
#endif
# 113 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __any_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 113
{ } 
#endif
# 114 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __uni_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 114
{ } 
#endif
# 115 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __ballot_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 115
{ } 
#endif
# 116 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __activemask() {int volatile ___ = 1;::exit(___);}
#if 0
# 116
{ } 
#endif
# 125 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline int __shfl(int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 125
{ } 
#endif
# 126 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline unsigned __shfl(unsigned var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 126
{ } 
#endif
# 127 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline int __shfl_up(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 127
{ } 
#endif
# 128 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline unsigned __shfl_up(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 128
{ } 
#endif
# 129 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline int __shfl_down(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 129
{ } 
#endif
# 130 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline unsigned __shfl_down(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 130
{ } 
#endif
# 131 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline int __shfl_xor(int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 131
{ } 
#endif
# 132 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline unsigned __shfl_xor(unsigned var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 132
{ } 
#endif
# 133 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline float __shfl(float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 133
{ } 
#endif
# 134 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline float __shfl_up(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 134
{ } 
#endif
# 135 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline float __shfl_down(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 135
{ } 
#endif
# 136 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline float __shfl_xor(float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 136
{ } 
#endif
# 139 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_sync(unsigned mask, int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 139
{ } 
#endif
# 140 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_sync(unsigned mask, unsigned var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 140
{ } 
#endif
# 141 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_up_sync(unsigned mask, int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 141
{ } 
#endif
# 142 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_up_sync(unsigned mask, unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 142
{ } 
#endif
# 143 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_down_sync(unsigned mask, int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 143
{ } 
#endif
# 144 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_down_sync(unsigned mask, unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 144
{ } 
#endif
# 145 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_xor_sync(unsigned mask, int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 145
{ } 
#endif
# 146 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_xor_sync(unsigned mask, unsigned var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 146
{ } 
#endif
# 147 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_sync(unsigned mask, float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 147
{ } 
#endif
# 148 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_up_sync(unsigned mask, float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 148
{ } 
#endif
# 149 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_down_sync(unsigned mask, float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 149
{ } 
#endif
# 150 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_xor_sync(unsigned mask, float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 150
{ } 
#endif
# 154 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl(unsigned long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 154
{ } 
#endif
# 155 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline long long __shfl(long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 155
{ } 
#endif
# 156 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline long long __shfl_up(long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 156
{ } 
#endif
# 157 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl_up(unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 157
{ } 
#endif
# 158 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline long long __shfl_down(long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 158
{ } 
#endif
# 159 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl_down(unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 159
{ } 
#endif
# 160 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline long long __shfl_xor(long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 160
{ } 
#endif
# 161 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl_xor(unsigned long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 161
{ } 
#endif
# 162 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline double __shfl(double var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 162
{ } 
#endif
# 163 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline double __shfl_up(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 163
{ } 
#endif
# 164 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline double __shfl_down(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 164
{ } 
#endif
# 165 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline double __shfl_xor(double var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 165
{ } 
#endif
# 168 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_sync(unsigned mask, long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 168
{ } 
#endif
# 169 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_sync(unsigned mask, unsigned long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 169
{ } 
#endif
# 170 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_up_sync(unsigned mask, long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 170
{ } 
#endif
# 171 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_up_sync(unsigned mask, unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 171
{ } 
#endif
# 172 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_down_sync(unsigned mask, long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 172
{ } 
#endif
# 173 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_down_sync(unsigned mask, unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 173
{ } 
#endif
# 174 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_xor_sync(unsigned mask, long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 174
{ } 
#endif
# 175 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_xor_sync(unsigned mask, unsigned long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 175
{ } 
#endif
# 176 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_sync(unsigned mask, double var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 176
{ } 
#endif
# 177 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_up_sync(unsigned mask, double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 177
{ } 
#endif
# 178 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_down_sync(unsigned mask, double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 178
{ } 
#endif
# 179 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_xor_sync(unsigned mask, double var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 179
{ } 
#endif
# 183 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline long __shfl(long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 183
{ } 
#endif
# 184 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline unsigned long __shfl(unsigned long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 184
{ } 
#endif
# 185 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline long __shfl_up(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 185
{ } 
#endif
# 186 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline unsigned long __shfl_up(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 186
{ } 
#endif
# 187 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline long __shfl_down(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 187
{ } 
#endif
# 188 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline unsigned long __shfl_down(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 188
{ } 
#endif
# 189 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline long __shfl_xor(long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 189
{ } 
#endif
# 190 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline unsigned long __shfl_xor(unsigned long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 190
{ } 
#endif
# 193 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_sync(unsigned mask, long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 193
{ } 
#endif
# 194 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_sync(unsigned mask, unsigned long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 194
{ } 
#endif
# 195 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_up_sync(unsigned mask, long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 195
{ } 
#endif
# 196 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_up_sync(unsigned mask, unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 196
{ } 
#endif
# 197 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_down_sync(unsigned mask, long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 197
{ } 
#endif
# 198 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_down_sync(unsigned mask, unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 198
{ } 
#endif
# 199 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_xor_sync(unsigned mask, long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 199
{ } 
#endif
# 200 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_xor_sync(unsigned mask, unsigned long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 200
{ } 
#endif
# 87 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 87
{ } 
#endif
# 88 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 88
{ } 
#endif
# 90 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 90
{ } 
#endif
# 91 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 91
{ } 
#endif
# 92 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 92
{ } 
#endif
# 93 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 93
{ } 
#endif
# 94 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldg(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 96
{ } 
#endif
# 97 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 99
{ } 
#endif
# 100 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 100
{ } 
#endif
# 101 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 101
{ } 
#endif
# 103 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 103
{ } 
#endif
# 104 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 104
{ } 
#endif
# 105 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 105
{ } 
#endif
# 106 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldg(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 107
{ } 
#endif
# 108 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 110
{ } 
#endif
# 111 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 111
{ } 
#endif
# 112 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 112
{ } 
#endif
# 113 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 113
{ } 
#endif
# 115 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 115
{ } 
#endif
# 116 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 116
{ } 
#endif
# 117 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 117
{ } 
#endif
# 118 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 118
{ } 
#endif
# 119 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 119
{ } 
#endif
# 123 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldcg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 123
{ } 
#endif
# 124 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldcg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 124
{ } 
#endif
# 126 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldcg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 126
{ } 
#endif
# 127 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldcg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 127
{ } 
#endif
# 128 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldcg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 128
{ } 
#endif
# 129 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldcg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 129
{ } 
#endif
# 130 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldcg(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 130
{ } 
#endif
# 131 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldcg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 131
{ } 
#endif
# 132 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldcg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 132
{ } 
#endif
# 133 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldcg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 133
{ } 
#endif
# 134 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldcg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 134
{ } 
#endif
# 135 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldcg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 135
{ } 
#endif
# 136 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldcg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 136
{ } 
#endif
# 137 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldcg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 137
{ } 
#endif
# 139 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldcg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 139
{ } 
#endif
# 140 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldcg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 140
{ } 
#endif
# 141 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldcg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 141
{ } 
#endif
# 142 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldcg(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 142
{ } 
#endif
# 143 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldcg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 143
{ } 
#endif
# 144 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldcg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 144
{ } 
#endif
# 145 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldcg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 145
{ } 
#endif
# 146 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldcg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 146
{ } 
#endif
# 147 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldcg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 147
{ } 
#endif
# 148 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldcg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 148
{ } 
#endif
# 149 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldcg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 149
{ } 
#endif
# 151 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldcg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 151
{ } 
#endif
# 152 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldcg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 152
{ } 
#endif
# 153 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldcg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 153
{ } 
#endif
# 154 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldcg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 154
{ } 
#endif
# 155 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldcg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 155
{ } 
#endif
# 159 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldca(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 159
{ } 
#endif
# 160 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldca(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 160
{ } 
#endif
# 162 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldca(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 162
{ } 
#endif
# 163 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldca(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 163
{ } 
#endif
# 164 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldca(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 164
{ } 
#endif
# 165 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldca(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 165
{ } 
#endif
# 166 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldca(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 166
{ } 
#endif
# 167 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldca(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 167
{ } 
#endif
# 168 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldca(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 168
{ } 
#endif
# 169 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldca(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 169
{ } 
#endif
# 170 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldca(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 170
{ } 
#endif
# 171 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldca(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 171
{ } 
#endif
# 172 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldca(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 172
{ } 
#endif
# 173 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldca(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 173
{ } 
#endif
# 175 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldca(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 175
{ } 
#endif
# 176 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldca(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 176
{ } 
#endif
# 177 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldca(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 177
{ } 
#endif
# 178 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldca(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 178
{ } 
#endif
# 179 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldca(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 179
{ } 
#endif
# 180 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldca(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 180
{ } 
#endif
# 181 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldca(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 181
{ } 
#endif
# 182 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldca(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 182
{ } 
#endif
# 183 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldca(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 183
{ } 
#endif
# 184 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldca(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 184
{ } 
#endif
# 185 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldca(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 185
{ } 
#endif
# 187 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldca(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 187
{ } 
#endif
# 188 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldca(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 188
{ } 
#endif
# 189 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldca(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 189
{ } 
#endif
# 190 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldca(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 190
{ } 
#endif
# 191 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldca(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 191
{ } 
#endif
# 195 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldcs(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 195
{ } 
#endif
# 196 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldcs(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 196
{ } 
#endif
# 198 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldcs(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 198
{ } 
#endif
# 199 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldcs(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 199
{ } 
#endif
# 200 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldcs(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 200
{ } 
#endif
# 201 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldcs(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 201
{ } 
#endif
# 202 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldcs(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 202
{ } 
#endif
# 203 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldcs(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 203
{ } 
#endif
# 204 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldcs(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 204
{ } 
#endif
# 205 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldcs(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 205
{ } 
#endif
# 206 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldcs(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 206
{ } 
#endif
# 207 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldcs(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 207
{ } 
#endif
# 208 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldcs(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 208
{ } 
#endif
# 209 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldcs(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 209
{ } 
#endif
# 211 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldcs(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 211
{ } 
#endif
# 212 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldcs(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 212
{ } 
#endif
# 213 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldcs(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 213
{ } 
#endif
# 214 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldcs(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 214
{ } 
#endif
# 215 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldcs(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 215
{ } 
#endif
# 216 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldcs(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 216
{ } 
#endif
# 217 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldcs(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 217
{ } 
#endif
# 218 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldcs(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 218
{ } 
#endif
# 219 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldcs(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 219
{ } 
#endif
# 220 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldcs(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 220
{ } 
#endif
# 221 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldcs(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 221
{ } 
#endif
# 223 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldcs(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 223
{ } 
#endif
# 224 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldcs(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 224
{ } 
#endif
# 225 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldcs(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 225
{ } 
#endif
# 226 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldcs(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 226
{ } 
#endif
# 227 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldcs(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 227
{ } 
#endif
# 231 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldlu(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 231
{ } 
#endif
# 232 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldlu(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 232
{ } 
#endif
# 234 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldlu(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 234
{ } 
#endif
# 235 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldlu(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 235
{ } 
#endif
# 236 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldlu(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 236
{ } 
#endif
# 237 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldlu(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 237
{ } 
#endif
# 238 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldlu(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 238
{ } 
#endif
# 239 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldlu(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 239
{ } 
#endif
# 240 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldlu(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 240
{ } 
#endif
# 241 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldlu(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 241
{ } 
#endif
# 242 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldlu(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 242
{ } 
#endif
# 243 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldlu(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 243
{ } 
#endif
# 244 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldlu(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 244
{ } 
#endif
# 245 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldlu(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 245
{ } 
#endif
# 247 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldlu(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 247
{ } 
#endif
# 248 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldlu(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 248
{ } 
#endif
# 249 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldlu(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 249
{ } 
#endif
# 250 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldlu(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 250
{ } 
#endif
# 251 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldlu(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 251
{ } 
#endif
# 252 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldlu(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 252
{ } 
#endif
# 253 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldlu(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 253
{ } 
#endif
# 254 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldlu(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 254
{ } 
#endif
# 255 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldlu(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 255
{ } 
#endif
# 256 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldlu(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 256
{ } 
#endif
# 257 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldlu(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 257
{ } 
#endif
# 259 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldlu(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 259
{ } 
#endif
# 260 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldlu(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 260
{ } 
#endif
# 261 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldlu(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 261
{ } 
#endif
# 262 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldlu(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 262
{ } 
#endif
# 263 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldlu(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 263
{ } 
#endif
# 267 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldcv(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 267
{ } 
#endif
# 268 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldcv(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 268
{ } 
#endif
# 270 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldcv(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 270
{ } 
#endif
# 271 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldcv(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 271
{ } 
#endif
# 272 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldcv(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 272
{ } 
#endif
# 273 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldcv(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 273
{ } 
#endif
# 274 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldcv(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 274
{ } 
#endif
# 275 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldcv(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 275
{ } 
#endif
# 276 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldcv(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 276
{ } 
#endif
# 277 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldcv(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 277
{ } 
#endif
# 278 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldcv(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 278
{ } 
#endif
# 279 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldcv(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 279
{ } 
#endif
# 280 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldcv(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 280
{ } 
#endif
# 281 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldcv(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 281
{ } 
#endif
# 283 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldcv(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 283
{ } 
#endif
# 284 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldcv(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 284
{ } 
#endif
# 285 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldcv(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 285
{ } 
#endif
# 286 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldcv(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 286
{ } 
#endif
# 287 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldcv(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 287
{ } 
#endif
# 288 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldcv(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 288
{ } 
#endif
# 289 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldcv(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 289
{ } 
#endif
# 290 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldcv(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 290
{ } 
#endif
# 291 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldcv(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 291
{ } 
#endif
# 292 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldcv(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 292
{ } 
#endif
# 293 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldcv(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 293
{ } 
#endif
# 295 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldcv(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 295
{ } 
#endif
# 296 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldcv(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 296
{ } 
#endif
# 297 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldcv(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 297
{ } 
#endif
# 298 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldcv(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 298
{ } 
#endif
# 299 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldcv(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 299
{ } 
#endif
# 303 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 303
{ } 
#endif
# 304 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 304
{ } 
#endif
# 306 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 306
{ } 
#endif
# 307 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 307
{ } 
#endif
# 308 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 308
{ } 
#endif
# 309 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 309
{ } 
#endif
# 310 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(long long *ptr, long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 310
{ } 
#endif
# 311 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 311
{ } 
#endif
# 312 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 312
{ } 
#endif
# 313 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 313
{ } 
#endif
# 314 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 314
{ } 
#endif
# 315 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 315
{ } 
#endif
# 316 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 316
{ } 
#endif
# 317 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 317
{ } 
#endif
# 319 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 319
{ } 
#endif
# 320 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 320
{ } 
#endif
# 321 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 321
{ } 
#endif
# 322 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned long long *ptr, unsigned long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 322
{ } 
#endif
# 323 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 323
{ } 
#endif
# 324 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 324
{ } 
#endif
# 325 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 325
{ } 
#endif
# 326 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 326
{ } 
#endif
# 327 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 327
{ } 
#endif
# 328 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 328
{ } 
#endif
# 329 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 329
{ } 
#endif
# 331 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 331
{ } 
#endif
# 332 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 332
{ } 
#endif
# 333 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 333
{ } 
#endif
# 334 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 334
{ } 
#endif
# 335 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 335
{ } 
#endif
# 339 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 339
{ } 
#endif
# 340 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 340
{ } 
#endif
# 342 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 342
{ } 
#endif
# 343 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 343
{ } 
#endif
# 344 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 344
{ } 
#endif
# 345 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 345
{ } 
#endif
# 346 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(long long *ptr, long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 346
{ } 
#endif
# 347 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 347
{ } 
#endif
# 348 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 348
{ } 
#endif
# 349 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 349
{ } 
#endif
# 350 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 350
{ } 
#endif
# 351 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 351
{ } 
#endif
# 352 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 352
{ } 
#endif
# 353 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 353
{ } 
#endif
# 355 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 355
{ } 
#endif
# 356 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 356
{ } 
#endif
# 357 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 357
{ } 
#endif
# 358 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned long long *ptr, unsigned long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 358
{ } 
#endif
# 359 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 359
{ } 
#endif
# 360 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 360
{ } 
#endif
# 361 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 361
{ } 
#endif
# 362 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 362
{ } 
#endif
# 363 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 363
{ } 
#endif
# 364 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 364
{ } 
#endif
# 365 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 365
{ } 
#endif
# 367 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 367
{ } 
#endif
# 368 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 368
{ } 
#endif
# 369 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 369
{ } 
#endif
# 370 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 370
{ } 
#endif
# 371 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 371
{ } 
#endif
# 375 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 375
{ } 
#endif
# 376 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 376
{ } 
#endif
# 378 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 378
{ } 
#endif
# 379 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 379
{ } 
#endif
# 380 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 380
{ } 
#endif
# 381 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 381
{ } 
#endif
# 382 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(long long *ptr, long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 382
{ } 
#endif
# 383 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 383
{ } 
#endif
# 384 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 384
{ } 
#endif
# 385 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 385
{ } 
#endif
# 386 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 386
{ } 
#endif
# 387 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 387
{ } 
#endif
# 388 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 388
{ } 
#endif
# 389 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 389
{ } 
#endif
# 391 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 391
{ } 
#endif
# 392 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 392
{ } 
#endif
# 393 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 393
{ } 
#endif
# 394 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned long long *ptr, unsigned long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 394
{ } 
#endif
# 395 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 395
{ } 
#endif
# 396 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 396
{ } 
#endif
# 397 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 397
{ } 
#endif
# 398 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 398
{ } 
#endif
# 399 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 399
{ } 
#endif
# 400 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 400
{ } 
#endif
# 401 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 401
{ } 
#endif
# 403 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 403
{ } 
#endif
# 404 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 404
{ } 
#endif
# 405 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 405
{ } 
#endif
# 406 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 406
{ } 
#endif
# 407 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 407
{ } 
#endif
# 411 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 411
{ } 
#endif
# 412 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 412
{ } 
#endif
# 414 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 414
{ } 
#endif
# 415 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 415
{ } 
#endif
# 416 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 416
{ } 
#endif
# 417 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 417
{ } 
#endif
# 418 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(long long *ptr, long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 418
{ } 
#endif
# 419 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 419
{ } 
#endif
# 420 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 420
{ } 
#endif
# 421 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 421
{ } 
#endif
# 422 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 422
{ } 
#endif
# 423 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 423
{ } 
#endif
# 424 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 424
{ } 
#endif
# 425 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 425
{ } 
#endif
# 427 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 427
{ } 
#endif
# 428 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 428
{ } 
#endif
# 429 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 429
{ } 
#endif
# 430 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned long long *ptr, unsigned long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 430
{ } 
#endif
# 431 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 431
{ } 
#endif
# 432 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 432
{ } 
#endif
# 433 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 433
{ } 
#endif
# 434 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 434
{ } 
#endif
# 435 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 435
{ } 
#endif
# 436 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 436
{ } 
#endif
# 437 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 437
{ } 
#endif
# 439 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 439
{ } 
#endif
# 440 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 440
{ } 
#endif
# 441 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 441
{ } 
#endif
# 442 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 442
{ } 
#endif
# 443 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 443
{ } 
#endif
# 460 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_l(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 460
{ } 
#endif
# 472 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_lc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 472
{ } 
#endif
# 485 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_r(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 485
{ } 
#endif
# 497 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_rc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 497
{ } 
#endif
# 89 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_lo(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 89
{ } 
#endif
# 90 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_lo(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 90
{ } 
#endif
# 92 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_lo(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 92
{ } 
#endif
# 93 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_lo(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 93
{ } 
#endif
# 95 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_hi(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_hi(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 96
{ } 
#endif
# 98 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_hi(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_hi(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 99
{ } 
#endif
# 106 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp4a(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp4a(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 107
{ } 
#endif
# 109 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp4a(char4 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp4a(uchar4 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 110
{ } 
#endif
# 93 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 93
{ } 
#endif
# 94 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, unsigned long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 96
{ } 
#endif
# 97 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, unsigned long long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, long long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, float value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 99
{ } 
#endif
# 100 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, double value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 100
{ } 
#endif
# 102 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, unsigned value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 102
{ } 
#endif
# 103 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, int value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 103
{ } 
#endif
# 104 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, unsigned long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 104
{ } 
#endif
# 105 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 105
{ } 
#endif
# 106 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, unsigned long long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, long long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 107
{ } 
#endif
# 108 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, float value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, double value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 109
{ } 
#endif
# 111 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline void __nanosleep(unsigned ns) {int volatile ___ = 1;(void)ns;::exit(___);}
#if 0
# 111
{ } 
#endif
# 113 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned short atomicCAS(unsigned short *address, unsigned short compare, unsigned short val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 113
{ } 
#endif
# 93 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_add_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 93
{ } 
#endif
# 94 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_min_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_max_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 95
{ } 
#endif
# 97 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline int __reduce_add_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline int __reduce_min_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline int __reduce_max_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 99
{ } 
#endif
# 101 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_and_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 101
{ } 
#endif
# 102 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_or_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 102
{ } 
#endif
# 103 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_xor_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 103
{ } 
#endif
# 106 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
extern "C" {
# 107
__attribute__((unused)) inline void *__nv_associate_access_property(const void *ptr, unsigned long long 
# 108
property) {int volatile ___ = 1;(void)ptr;(void)property;
# 112
::exit(___);}
#if 0
# 108
{ 
# 109
__attribute__((unused)) extern void *__nv_associate_access_property_impl(const void *, unsigned long long); 
# 111
return __nv_associate_access_property_impl(ptr, property); 
# 112
} 
#endif
# 114 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) inline void __nv_memcpy_async_shared_global_4(void *dst, const void *
# 115
src, unsigned 
# 116
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;
# 121
::exit(___);}
#if 0
# 116
{ 
# 117
__attribute__((unused)) extern void __nv_memcpy_async_shared_global_4_impl(void *, const void *, unsigned); 
# 120
__nv_memcpy_async_shared_global_4_impl(dst, src, src_size); 
# 121
} 
#endif
# 123 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) inline void __nv_memcpy_async_shared_global_8(void *dst, const void *
# 124
src, unsigned 
# 125
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;
# 130
::exit(___);}
#if 0
# 125
{ 
# 126
__attribute__((unused)) extern void __nv_memcpy_async_shared_global_8_impl(void *, const void *, unsigned); 
# 129
__nv_memcpy_async_shared_global_8_impl(dst, src, src_size); 
# 130
} 
#endif
# 132 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) inline void __nv_memcpy_async_shared_global_16(void *dst, const void *
# 133
src, unsigned 
# 134
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;
# 139
::exit(___);}
#if 0
# 134
{ 
# 135
__attribute__((unused)) extern void __nv_memcpy_async_shared_global_16_impl(void *, const void *, unsigned); 
# 138
__nv_memcpy_async_shared_global_16_impl(dst, src, src_size); 
# 139
} 
#endif
# 141 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
}
# 89 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline unsigned __isCtaShared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 89
{ } 
#endif
# 90 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline unsigned __isClusterShared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 90
{ } 
#endif
# 91 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline void *__cluster_map_shared_rank(const void *ptr, unsigned target_block_rank) {int volatile ___ = 1;(void)ptr;(void)target_block_rank;::exit(___);}
#if 0
# 91
{ } 
#endif
# 92 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline unsigned __cluster_query_shared_rank(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 92
{ } 
#endif
# 93 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline uint2 __cluster_map_shared_multicast(const void *ptr, unsigned cluster_cta_mask) {int volatile ___ = 1;(void)ptr;(void)cluster_cta_mask;::exit(___);}
#if 0
# 93
{ } 
#endif
# 94 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline unsigned __clusterDimIsSpecified() {int volatile ___ = 1;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline dim3 __clusterDim() {int volatile ___ = 1;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline dim3 __clusterRelativeBlockIdx() {int volatile ___ = 1;::exit(___);}
#if 0
# 96
{ } 
#endif
# 97 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline dim3 __clusterGridDimInClusters() {int volatile ___ = 1;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline dim3 __clusterIdx() {int volatile ___ = 1;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline unsigned __clusterRelativeBlockRank() {int volatile ___ = 1;::exit(___);}
#if 0
# 99
{ } 
#endif
# 100 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline unsigned __clusterSizeInBlocks() {int volatile ___ = 1;::exit(___);}
#if 0
# 100
{ } 
#endif
# 101 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline void __cluster_barrier_arrive() {int volatile ___ = 1;::exit(___);}
#if 0
# 101
{ } 
#endif
# 102 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline void __cluster_barrier_arrive_relaxed() {int volatile ___ = 1;::exit(___);}
#if 0
# 102
{ } 
#endif
# 103 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline void __cluster_barrier_wait() {int volatile ___ = 1;::exit(___);}
#if 0
# 103
{ } 
#endif
# 104 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline void __threadfence_cluster() {int volatile ___ = 1;::exit(___);}
#if 0
# 104
{ } 
#endif
# 106 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline float2 atomicAdd(float2 *address, float2 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline float2 atomicAdd_block(float2 *address, float2 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 107
{ } 
#endif
# 108 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline float2 atomicAdd_system(float2 *address, float2 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline float4 atomicAdd(float4 *address, float4 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline float4 atomicAdd_block(float4 *address, float4 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 110
{ } 
#endif
# 111 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline float4 atomicAdd_system(float4 *address, float4 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 111
{ } 
#endif
# 65 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> struct __nv_itex_trait { }; 
# 66
template<> struct __nv_itex_trait< char>  { typedef void type; }; 
# 67
template<> struct __nv_itex_trait< signed char>  { typedef void type; }; 
# 68
template<> struct __nv_itex_trait< char1>  { typedef void type; }; 
# 69
template<> struct __nv_itex_trait< char2>  { typedef void type; }; 
# 70
template<> struct __nv_itex_trait< char4>  { typedef void type; }; 
# 71
template<> struct __nv_itex_trait< unsigned char>  { typedef void type; }; 
# 72
template<> struct __nv_itex_trait< uchar1>  { typedef void type; }; 
# 73
template<> struct __nv_itex_trait< uchar2>  { typedef void type; }; 
# 74
template<> struct __nv_itex_trait< uchar4>  { typedef void type; }; 
# 75
template<> struct __nv_itex_trait< short>  { typedef void type; }; 
# 76
template<> struct __nv_itex_trait< short1>  { typedef void type; }; 
# 77
template<> struct __nv_itex_trait< short2>  { typedef void type; }; 
# 78
template<> struct __nv_itex_trait< short4>  { typedef void type; }; 
# 79
template<> struct __nv_itex_trait< unsigned short>  { typedef void type; }; 
# 80
template<> struct __nv_itex_trait< ushort1>  { typedef void type; }; 
# 81
template<> struct __nv_itex_trait< ushort2>  { typedef void type; }; 
# 82
template<> struct __nv_itex_trait< ushort4>  { typedef void type; }; 
# 83
template<> struct __nv_itex_trait< int>  { typedef void type; }; 
# 84
template<> struct __nv_itex_trait< int1>  { typedef void type; }; 
# 85
template<> struct __nv_itex_trait< int2>  { typedef void type; }; 
# 86
template<> struct __nv_itex_trait< int4>  { typedef void type; }; 
# 87
template<> struct __nv_itex_trait< unsigned>  { typedef void type; }; 
# 88
template<> struct __nv_itex_trait< uint1>  { typedef void type; }; 
# 89
template<> struct __nv_itex_trait< uint2>  { typedef void type; }; 
# 90
template<> struct __nv_itex_trait< uint4>  { typedef void type; }; 
# 101 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template<> struct __nv_itex_trait< float>  { typedef void type; }; 
# 102
template<> struct __nv_itex_trait< float1>  { typedef void type; }; 
# 103
template<> struct __nv_itex_trait< float2>  { typedef void type; }; 
# 104
template<> struct __nv_itex_trait< float4>  { typedef void type; }; 
# 108
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 109
tex1Dfetch(T *ptr, cudaTextureObject_t obj, int x) 
# 110
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;
# 112
::exit(___);}
#if 0
# 110
{ 
# 111
__nv_tex_surf_handler("__itex1Dfetch", ptr, obj, x); 
# 112
} 
#endif
# 114 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 115
tex1Dfetch(cudaTextureObject_t texObject, int x) 
# 116
{int volatile ___ = 1;(void)texObject;(void)x;
# 120
::exit(___);}
#if 0
# 116
{ 
# 117
T ret; 
# 118
tex1Dfetch(&ret, texObject, x); 
# 119
return ret; 
# 120
} 
#endif
# 122 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 123
tex1D(T *ptr, cudaTextureObject_t obj, float x) 
# 124
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;
# 126
::exit(___);}
#if 0
# 124
{ 
# 125
__nv_tex_surf_handler("__itex1D", ptr, obj, x); 
# 126
} 
#endif
# 129 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 130
tex1D(cudaTextureObject_t texObject, float x) 
# 131
{int volatile ___ = 1;(void)texObject;(void)x;
# 135
::exit(___);}
#if 0
# 131
{ 
# 132
T ret; 
# 133
tex1D(&ret, texObject, x); 
# 134
return ret; 
# 135
} 
#endif
# 138 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 139
tex2D(T *ptr, cudaTextureObject_t obj, float x, float y) 
# 140
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;
# 142
::exit(___);}
#if 0
# 140
{ 
# 141
__nv_tex_surf_handler("__itex2D", ptr, obj, x, y); 
# 142
} 
#endif
# 144 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 145
tex2D(cudaTextureObject_t texObject, float x, float y) 
# 146
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;
# 150
::exit(___);}
#if 0
# 146
{ 
# 147
T ret; 
# 148
tex2D(&ret, texObject, x, y); 
# 149
return ret; 
# 150
} 
#endif
# 153 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 154
tex2D(T *ptr, cudaTextureObject_t obj, float x, float y, bool *
# 155
isResident) 
# 156
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)isResident;
# 160
::exit(___);}
#if 0
# 156
{ 
# 157
unsigned char res; 
# 158
__nv_tex_surf_handler("__itex2D_sparse", ptr, obj, x, y, &res); 
# 159
(*isResident) = (res != 0); 
# 160
} 
#endif
# 162 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 163
tex2D(cudaTextureObject_t texObject, float x, float y, bool *isResident) 
# 164
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)isResident;
# 168
::exit(___);}
#if 0
# 164
{ 
# 165
T ret; 
# 166
tex2D(&ret, texObject, x, y, isResident); 
# 167
return ret; 
# 168
} 
#endif
# 173 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 174
tex3D(T *ptr, cudaTextureObject_t obj, float x, float y, float z) 
# 175
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;
# 177
::exit(___);}
#if 0
# 175
{ 
# 176
__nv_tex_surf_handler("__itex3D", ptr, obj, x, y, z); 
# 177
} 
#endif
# 179 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 180
tex3D(cudaTextureObject_t texObject, float x, float y, float z) 
# 181
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
# 185
::exit(___);}
#if 0
# 181
{ 
# 182
T ret; 
# 183
tex3D(&ret, texObject, x, y, z); 
# 184
return ret; 
# 185
} 
#endif
# 188 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 189
tex3D(T *ptr, cudaTextureObject_t obj, float x, float y, float z, bool *
# 190
isResident) 
# 191
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)isResident;
# 195
::exit(___);}
#if 0
# 191
{ 
# 192
unsigned char res; 
# 193
__nv_tex_surf_handler("__itex3D_sparse", ptr, obj, x, y, z, &res); 
# 194
(*isResident) = (res != 0); 
# 195
} 
#endif
# 197 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 198
tex3D(cudaTextureObject_t texObject, float x, float y, float z, bool *isResident) 
# 199
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)isResident;
# 203
::exit(___);}
#if 0
# 199
{ 
# 200
T ret; 
# 201
tex3D(&ret, texObject, x, y, z, isResident); 
# 202
return ret; 
# 203
} 
#endif
# 207 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 208
tex1DLayered(T *ptr, cudaTextureObject_t obj, float x, int layer) 
# 209
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;
# 211
::exit(___);}
#if 0
# 209
{ 
# 210
__nv_tex_surf_handler("__itex1DLayered", ptr, obj, x, layer); 
# 211
} 
#endif
# 213 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 214
tex1DLayered(cudaTextureObject_t texObject, float x, int layer) 
# 215
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;
# 219
::exit(___);}
#if 0
# 215
{ 
# 216
T ret; 
# 217
tex1DLayered(&ret, texObject, x, layer); 
# 218
return ret; 
# 219
} 
#endif
# 221 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 222
tex2DLayered(T *ptr, cudaTextureObject_t obj, float x, float y, int layer) 
# 223
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;
# 225
::exit(___);}
#if 0
# 223
{ 
# 224
__nv_tex_surf_handler("__itex2DLayered", ptr, obj, x, y, layer); 
# 225
} 
#endif
# 227 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 228
tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer) 
# 229
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;
# 233
::exit(___);}
#if 0
# 229
{ 
# 230
T ret; 
# 231
tex2DLayered(&ret, texObject, x, y, layer); 
# 232
return ret; 
# 233
} 
#endif
# 236 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 237
tex2DLayered(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, bool *isResident) 
# 238
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)isResident;
# 242
::exit(___);}
#if 0
# 238
{ 
# 239
unsigned char res; 
# 240
__nv_tex_surf_handler("__itex2DLayered_sparse", ptr, obj, x, y, layer, &res); 
# 241
(*isResident) = (res != 0); 
# 242
} 
#endif
# 244 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 245
tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer, bool *isResident) 
# 246
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)isResident;
# 250
::exit(___);}
#if 0
# 246
{ 
# 247
T ret; 
# 248
tex2DLayered(&ret, texObject, x, y, layer, isResident); 
# 249
return ret; 
# 250
} 
#endif
# 254 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 255
texCubemap(T *ptr, cudaTextureObject_t obj, float x, float y, float z) 
# 256
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;
# 258
::exit(___);}
#if 0
# 256
{ 
# 257
__nv_tex_surf_handler("__itexCubemap", ptr, obj, x, y, z); 
# 258
} 
#endif
# 261 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 262
texCubemap(cudaTextureObject_t texObject, float x, float y, float z) 
# 263
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
# 267
::exit(___);}
#if 0
# 263
{ 
# 264
T ret; 
# 265
texCubemap(&ret, texObject, x, y, z); 
# 266
return ret; 
# 267
} 
#endif
# 270 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 271
texCubemapLayered(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer) 
# 272
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;
# 274
::exit(___);}
#if 0
# 272
{ 
# 273
__nv_tex_surf_handler("__itexCubemapLayered", ptr, obj, x, y, z, layer); 
# 274
} 
#endif
# 276 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 277
texCubemapLayered(cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 278
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 282
::exit(___);}
#if 0
# 278
{ 
# 279
T ret; 
# 280
texCubemapLayered(&ret, texObject, x, y, z, layer); 
# 281
return ret; 
# 282
} 
#endif
# 284 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 285
tex2Dgather(T *ptr, cudaTextureObject_t obj, float x, float y, int comp = 0) 
# 286
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)comp;
# 288
::exit(___);}
#if 0
# 286
{ 
# 287
__nv_tex_surf_handler("__itex2Dgather", ptr, obj, x, y, comp); 
# 288
} 
#endif
# 290 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 291
tex2Dgather(cudaTextureObject_t to, float x, float y, int comp = 0) 
# 292
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)comp;
# 296
::exit(___);}
#if 0
# 292
{ 
# 293
T ret; 
# 294
tex2Dgather(&ret, to, x, y, comp); 
# 295
return ret; 
# 296
} 
#endif
# 299 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 300
tex2Dgather(T *ptr, cudaTextureObject_t obj, float x, float y, bool *isResident, int comp = 0) 
# 301
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)isResident;(void)comp;
# 305
::exit(___);}
#if 0
# 301
{ 
# 302
unsigned char res; 
# 303
__nv_tex_surf_handler("__itex2Dgather_sparse", ptr, obj, x, y, comp, &res); 
# 304
(*isResident) = (res != 0); 
# 305
} 
#endif
# 307 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 308
tex2Dgather(cudaTextureObject_t to, float x, float y, bool *isResident, int comp = 0) 
# 309
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)isResident;(void)comp;
# 313
::exit(___);}
#if 0
# 309
{ 
# 310
T ret; 
# 311
tex2Dgather(&ret, to, x, y, isResident, comp); 
# 312
return ret; 
# 313
} 
#endif
# 317 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 318
tex1DLod(T *ptr, cudaTextureObject_t obj, float x, float level) 
# 319
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)level;
# 321
::exit(___);}
#if 0
# 319
{ 
# 320
__nv_tex_surf_handler("__itex1DLod", ptr, obj, x, level); 
# 321
} 
#endif
# 323 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 324
tex1DLod(cudaTextureObject_t texObject, float x, float level) 
# 325
{int volatile ___ = 1;(void)texObject;(void)x;(void)level;
# 329
::exit(___);}
#if 0
# 325
{ 
# 326
T ret; 
# 327
tex1DLod(&ret, texObject, x, level); 
# 328
return ret; 
# 329
} 
#endif
# 332 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 333
tex2DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float level) 
# 334
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)level;
# 336
::exit(___);}
#if 0
# 334
{ 
# 335
__nv_tex_surf_handler("__itex2DLod", ptr, obj, x, y, level); 
# 336
} 
#endif
# 338 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 339
tex2DLod(cudaTextureObject_t texObject, float x, float y, float level) 
# 340
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;
# 344
::exit(___);}
#if 0
# 340
{ 
# 341
T ret; 
# 342
tex2DLod(&ret, texObject, x, y, level); 
# 343
return ret; 
# 344
} 
#endif
# 348 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 349
tex2DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float level, bool *isResident) 
# 350
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)level;(void)isResident;
# 354
::exit(___);}
#if 0
# 350
{ 
# 351
unsigned char res; 
# 352
__nv_tex_surf_handler("__itex2DLod_sparse", ptr, obj, x, y, level, &res); 
# 353
(*isResident) = (res != 0); 
# 354
} 
#endif
# 356 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 357
tex2DLod(cudaTextureObject_t texObject, float x, float y, float level, bool *isResident) 
# 358
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;(void)isResident;
# 362
::exit(___);}
#if 0
# 358
{ 
# 359
T ret; 
# 360
tex2DLod(&ret, texObject, x, y, level, isResident); 
# 361
return ret; 
# 362
} 
#endif
# 367 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 368
tex3DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level) 
# 369
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;
# 371
::exit(___);}
#if 0
# 369
{ 
# 370
__nv_tex_surf_handler("__itex3DLod", ptr, obj, x, y, z, level); 
# 371
} 
#endif
# 373 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 374
tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 375
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 379
::exit(___);}
#if 0
# 375
{ 
# 376
T ret; 
# 377
tex3DLod(&ret, texObject, x, y, z, level); 
# 378
return ret; 
# 379
} 
#endif
# 382 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 383
tex3DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level, bool *isResident) 
# 384
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;(void)isResident;
# 388
::exit(___);}
#if 0
# 384
{ 
# 385
unsigned char res; 
# 386
__nv_tex_surf_handler("__itex3DLod_sparse", ptr, obj, x, y, z, level, &res); 
# 387
(*isResident) = (res != 0); 
# 388
} 
#endif
# 390 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 391
tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level, bool *isResident) 
# 392
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;(void)isResident;
# 396
::exit(___);}
#if 0
# 392
{ 
# 393
T ret; 
# 394
tex3DLod(&ret, texObject, x, y, z, level, isResident); 
# 395
return ret; 
# 396
} 
#endif
# 401 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 402
tex1DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, int layer, float level) 
# 403
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)level;
# 405
::exit(___);}
#if 0
# 403
{ 
# 404
__nv_tex_surf_handler("__itex1DLayeredLod", ptr, obj, x, layer, level); 
# 405
} 
#endif
# 407 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 408
tex1DLayeredLod(cudaTextureObject_t texObject, float x, int layer, float level) 
# 409
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)level;
# 413
::exit(___);}
#if 0
# 409
{ 
# 410
T ret; 
# 411
tex1DLayeredLod(&ret, texObject, x, layer, level); 
# 412
return ret; 
# 413
} 
#endif
# 416 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 417
tex2DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float level) 
# 418
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)level;
# 420
::exit(___);}
#if 0
# 418
{ 
# 419
__nv_tex_surf_handler("__itex2DLayeredLod", ptr, obj, x, y, layer, level); 
# 420
} 
#endif
# 422 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 423
tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 424
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 428
::exit(___);}
#if 0
# 424
{ 
# 425
T ret; 
# 426
tex2DLayeredLod(&ret, texObject, x, y, layer, level); 
# 427
return ret; 
# 428
} 
#endif
# 431 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 432
tex2DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float level, bool *isResident) 
# 433
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)level;(void)isResident;
# 437
::exit(___);}
#if 0
# 433
{ 
# 434
unsigned char res; 
# 435
__nv_tex_surf_handler("__itex2DLayeredLod_sparse", ptr, obj, x, y, layer, level, &res); 
# 436
(*isResident) = (res != 0); 
# 437
} 
#endif
# 439 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 440
tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level, bool *isResident) 
# 441
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;(void)isResident;
# 445
::exit(___);}
#if 0
# 441
{ 
# 442
T ret; 
# 443
tex2DLayeredLod(&ret, texObject, x, y, layer, level, isResident); 
# 444
return ret; 
# 445
} 
#endif
# 448 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 449
texCubemapLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level) 
# 450
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;
# 452
::exit(___);}
#if 0
# 450
{ 
# 451
__nv_tex_surf_handler("__itexCubemapLod", ptr, obj, x, y, z, level); 
# 452
} 
#endif
# 454 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 455
texCubemapLod(cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 456
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 460
::exit(___);}
#if 0
# 456
{ 
# 457
T ret; 
# 458
texCubemapLod(&ret, texObject, x, y, z, level); 
# 459
return ret; 
# 460
} 
#endif
# 463 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 464
texCubemapGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 465
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 467
::exit(___);}
#if 0
# 465
{ 
# 466
__nv_tex_surf_handler("__itexCubemapGrad_v2", ptr, obj, x, y, z, &dPdx, &dPdy); 
# 467
} 
#endif
# 469 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 470
texCubemapGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 471
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 475
::exit(___);}
#if 0
# 471
{ 
# 472
T ret; 
# 473
texCubemapGrad(&ret, texObject, x, y, z, dPdx, dPdy); 
# 474
return ret; 
# 475
} 
#endif
# 477 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 478
texCubemapLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer, float level) 
# 479
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 481
::exit(___);}
#if 0
# 479
{ 
# 480
__nv_tex_surf_handler("__itexCubemapLayeredLod", ptr, obj, x, y, z, layer, level); 
# 481
} 
#endif
# 483 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 484
texCubemapLayeredLod(cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 485
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 489
::exit(___);}
#if 0
# 485
{ 
# 486
T ret; 
# 487
texCubemapLayeredLod(&ret, texObject, x, y, z, layer, level); 
# 488
return ret; 
# 489
} 
#endif
# 491 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 492
tex1DGrad(T *ptr, cudaTextureObject_t obj, float x, float dPdx, float dPdy) 
# 493
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)dPdx;(void)dPdy;
# 495
::exit(___);}
#if 0
# 493
{ 
# 494
__nv_tex_surf_handler("__itex1DGrad", ptr, obj, x, dPdx, dPdy); 
# 495
} 
#endif
# 497 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 498
tex1DGrad(cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 499
{int volatile ___ = 1;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 503
::exit(___);}
#if 0
# 499
{ 
# 500
T ret; 
# 501
tex1DGrad(&ret, texObject, x, dPdx, dPdy); 
# 502
return ret; 
# 503
} 
#endif
# 506 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 507
tex2DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float2 dPdx, float2 dPdy) 
# 508
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 510
::exit(___);}
#if 0
# 508
{ 
# 509
__nv_tex_surf_handler("__itex2DGrad_v2", ptr, obj, x, y, &dPdx, &dPdy); 
# 510
} 
#endif
# 512 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 513
tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 514
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 518
::exit(___);}
#if 0
# 514
{ 
# 515
T ret; 
# 516
tex2DGrad(&ret, texObject, x, y, dPdx, dPdy); 
# 517
return ret; 
# 518
} 
#endif
# 521 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 522
tex2DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float2 dPdx, float2 dPdy, bool *isResident) 
# 523
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)dPdx;(void)dPdy;(void)isResident;
# 527
::exit(___);}
#if 0
# 523
{ 
# 524
unsigned char res; 
# 525
__nv_tex_surf_handler("__itex2DGrad_sparse", ptr, obj, x, y, &dPdx, &dPdy, &res); 
# 526
(*isResident) = (res != 0); 
# 527
} 
#endif
# 529 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 530
tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy, bool *isResident) 
# 531
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;(void)isResident;
# 535
::exit(___);}
#if 0
# 531
{ 
# 532
T ret; 
# 533
tex2DGrad(&ret, texObject, x, y, dPdx, dPdy, isResident); 
# 534
return ret; 
# 535
} 
#endif
# 539 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 540
tex3DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 541
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 543
::exit(___);}
#if 0
# 541
{ 
# 542
__nv_tex_surf_handler("__itex3DGrad_v2", ptr, obj, x, y, z, &dPdx, &dPdy); 
# 543
} 
#endif
# 545 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 546
tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 547
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 551
::exit(___);}
#if 0
# 547
{ 
# 548
T ret; 
# 549
tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy); 
# 550
return ret; 
# 551
} 
#endif
# 554 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 555
tex3DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy, bool *isResident) 
# 556
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;(void)isResident;
# 560
::exit(___);}
#if 0
# 556
{ 
# 557
unsigned char res; 
# 558
__nv_tex_surf_handler("__itex3DGrad_sparse", ptr, obj, x, y, z, &dPdx, &dPdy, &res); 
# 559
(*isResident) = (res != 0); 
# 560
} 
#endif
# 562 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 563
tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy, bool *isResident) 
# 564
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;(void)isResident;
# 568
::exit(___);}
#if 0
# 564
{ 
# 565
T ret; 
# 566
tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy, isResident); 
# 567
return ret; 
# 568
} 
#endif
# 573 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 574
tex1DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, int layer, float dPdx, float dPdy) 
# 575
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 577
::exit(___);}
#if 0
# 575
{ 
# 576
__nv_tex_surf_handler("__itex1DLayeredGrad", ptr, obj, x, layer, dPdx, dPdy); 
# 577
} 
#endif
# 579 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 580
tex1DLayeredGrad(cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 581
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 585
::exit(___);}
#if 0
# 581
{ 
# 582
T ret; 
# 583
tex1DLayeredGrad(&ret, texObject, x, layer, dPdx, dPdy); 
# 584
return ret; 
# 585
} 
#endif
# 588 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 589
tex2DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 590
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 592
::exit(___);}
#if 0
# 590
{ 
# 591
__nv_tex_surf_handler("__itex2DLayeredGrad_v2", ptr, obj, x, y, layer, &dPdx, &dPdy); 
# 592
} 
#endif
# 594 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 595
tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 596
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 600
::exit(___);}
#if 0
# 596
{ 
# 597
T ret; 
# 598
tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy); 
# 599
return ret; 
# 600
} 
#endif
# 603 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 604
tex2DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float2 dPdx, float2 dPdy, bool *isResident) 
# 605
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;(void)isResident;
# 609
::exit(___);}
#if 0
# 605
{ 
# 606
unsigned char res; 
# 607
__nv_tex_surf_handler("__itex2DLayeredGrad_sparse", ptr, obj, x, y, layer, &dPdx, &dPdy, &res); 
# 608
(*isResident) = (res != 0); 
# 609
} 
#endif
# 611 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 612
tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy, bool *isResident) 
# 613
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;(void)isResident;
# 617
::exit(___);}
#if 0
# 613
{ 
# 614
T ret; 
# 615
tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy, isResident); 
# 616
return ret; 
# 617
} 
#endif
# 621 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 622
texCubemapLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
# 623
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;
# 625
::exit(___);}
#if 0
# 623
{ 
# 624
__nv_tex_surf_handler("__itexCubemapLayeredGrad_v2", ptr, obj, x, y, z, layer, &dPdx, &dPdy); 
# 625
} 
#endif
# 627 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 628
texCubemapLayeredGrad(cudaTextureObject_t texObject, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
# 629
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;
# 633
::exit(___);}
#if 0
# 629
{ 
# 630
T ret; 
# 631
texCubemapLayeredGrad(&ret, texObject, x, y, z, layer, dPdx, dPdy); 
# 632
return ret; 
# 633
} 
#endif
# 58 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> struct __nv_isurf_trait { }; 
# 59
template<> struct __nv_isurf_trait< char>  { typedef void type; }; 
# 60
template<> struct __nv_isurf_trait< signed char>  { typedef void type; }; 
# 61
template<> struct __nv_isurf_trait< char1>  { typedef void type; }; 
# 62
template<> struct __nv_isurf_trait< unsigned char>  { typedef void type; }; 
# 63
template<> struct __nv_isurf_trait< uchar1>  { typedef void type; }; 
# 64
template<> struct __nv_isurf_trait< short>  { typedef void type; }; 
# 65
template<> struct __nv_isurf_trait< short1>  { typedef void type; }; 
# 66
template<> struct __nv_isurf_trait< unsigned short>  { typedef void type; }; 
# 67
template<> struct __nv_isurf_trait< ushort1>  { typedef void type; }; 
# 68
template<> struct __nv_isurf_trait< int>  { typedef void type; }; 
# 69
template<> struct __nv_isurf_trait< int1>  { typedef void type; }; 
# 70
template<> struct __nv_isurf_trait< unsigned>  { typedef void type; }; 
# 71
template<> struct __nv_isurf_trait< uint1>  { typedef void type; }; 
# 72
template<> struct __nv_isurf_trait< long long>  { typedef void type; }; 
# 73
template<> struct __nv_isurf_trait< longlong1>  { typedef void type; }; 
# 74
template<> struct __nv_isurf_trait< unsigned long long>  { typedef void type; }; 
# 75
template<> struct __nv_isurf_trait< ulonglong1>  { typedef void type; }; 
# 76
template<> struct __nv_isurf_trait< float>  { typedef void type; }; 
# 77
template<> struct __nv_isurf_trait< float1>  { typedef void type; }; 
# 79
template<> struct __nv_isurf_trait< char2>  { typedef void type; }; 
# 80
template<> struct __nv_isurf_trait< uchar2>  { typedef void type; }; 
# 81
template<> struct __nv_isurf_trait< short2>  { typedef void type; }; 
# 82
template<> struct __nv_isurf_trait< ushort2>  { typedef void type; }; 
# 83
template<> struct __nv_isurf_trait< int2>  { typedef void type; }; 
# 84
template<> struct __nv_isurf_trait< uint2>  { typedef void type; }; 
# 85
template<> struct __nv_isurf_trait< longlong2>  { typedef void type; }; 
# 86
template<> struct __nv_isurf_trait< ulonglong2>  { typedef void type; }; 
# 87
template<> struct __nv_isurf_trait< float2>  { typedef void type; }; 
# 89
template<> struct __nv_isurf_trait< char4>  { typedef void type; }; 
# 90
template<> struct __nv_isurf_trait< uchar4>  { typedef void type; }; 
# 91
template<> struct __nv_isurf_trait< short4>  { typedef void type; }; 
# 92
template<> struct __nv_isurf_trait< ushort4>  { typedef void type; }; 
# 93
template<> struct __nv_isurf_trait< int4>  { typedef void type; }; 
# 94
template<> struct __nv_isurf_trait< uint4>  { typedef void type; }; 
# 95
template<> struct __nv_isurf_trait< float4>  { typedef void type; }; 
# 98
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 99
surf1Dread(T *ptr, cudaSurfaceObject_t obj, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 100
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)mode;
# 102
::exit(___);}
#if 0
# 100
{ 
# 101
__nv_tex_surf_handler("__isurf1Dread", ptr, obj, x, mode); 
# 102
} 
#endif
# 104 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 105
surf1Dread(cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 106
{int volatile ___ = 1;(void)surfObject;(void)x;(void)boundaryMode;
# 110
::exit(___);}
#if 0
# 106
{ 
# 107
T ret; 
# 108
surf1Dread(&ret, surfObject, x, boundaryMode); 
# 109
return ret; 
# 110
} 
#endif
# 112 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 113
surf2Dread(T *ptr, cudaSurfaceObject_t obj, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 114
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)mode;
# 116
::exit(___);}
#if 0
# 114
{ 
# 115
__nv_tex_surf_handler("__isurf2Dread", ptr, obj, x, y, mode); 
# 116
} 
#endif
# 118 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 119
surf2Dread(cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 120
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 124
::exit(___);}
#if 0
# 120
{ 
# 121
T ret; 
# 122
surf2Dread(&ret, surfObject, x, y, boundaryMode); 
# 123
return ret; 
# 124
} 
#endif
# 127 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 128
surf3Dread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 129
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)mode;
# 131
::exit(___);}
#if 0
# 129
{ 
# 130
__nv_tex_surf_handler("__isurf3Dread", ptr, obj, x, y, z, mode); 
# 131
} 
#endif
# 133 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 134
surf3Dread(cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 135
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 139
::exit(___);}
#if 0
# 135
{ 
# 136
T ret; 
# 137
surf3Dread(&ret, surfObject, x, y, z, boundaryMode); 
# 138
return ret; 
# 139
} 
#endif
# 141 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 142
surf1DLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 143
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)mode;
# 145
::exit(___);}
#if 0
# 143
{ 
# 144
__nv_tex_surf_handler("__isurf1DLayeredread", ptr, obj, x, layer, mode); 
# 145
} 
#endif
# 147 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 148
surf1DLayeredread(cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 149
{int volatile ___ = 1;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 153
::exit(___);}
#if 0
# 149
{ 
# 150
T ret; 
# 151
surf1DLayeredread(&ret, surfObject, x, layer, boundaryMode); 
# 152
return ret; 
# 153
} 
#endif
# 155 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 156
surf2DLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 157
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)mode;
# 159
::exit(___);}
#if 0
# 157
{ 
# 158
__nv_tex_surf_handler("__isurf2DLayeredread", ptr, obj, x, y, layer, mode); 
# 159
} 
#endif
# 161 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 162
surf2DLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 163
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 167
::exit(___);}
#if 0
# 163
{ 
# 164
T ret; 
# 165
surf2DLayeredread(&ret, surfObject, x, y, layer, boundaryMode); 
# 166
return ret; 
# 167
} 
#endif
# 169 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 170
surfCubemapread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 171
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)face;(void)mode;
# 173
::exit(___);}
#if 0
# 171
{ 
# 172
__nv_tex_surf_handler("__isurfCubemapread", ptr, obj, x, y, face, mode); 
# 173
} 
#endif
# 175 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 176
surfCubemapread(cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 177
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 181
::exit(___);}
#if 0
# 177
{ 
# 178
T ret; 
# 179
surfCubemapread(&ret, surfObject, x, y, face, boundaryMode); 
# 180
return ret; 
# 181
} 
#endif
# 183 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 184
surfCubemapLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int layerface, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 185
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layerface;(void)mode;
# 187
::exit(___);}
#if 0
# 185
{ 
# 186
__nv_tex_surf_handler("__isurfCubemapLayeredread", ptr, obj, x, y, layerface, mode); 
# 187
} 
#endif
# 189 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 190
surfCubemapLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 191
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layerface;(void)boundaryMode;
# 195
::exit(___);}
#if 0
# 191
{ 
# 192
T ret; 
# 193
surfCubemapLayeredread(&ret, surfObject, x, y, layerface, boundaryMode); 
# 194
return ret; 
# 195
} 
#endif
# 197 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 198
surf1Dwrite(T val, cudaSurfaceObject_t obj, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 199
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)mode;
# 201
::exit(___);}
#if 0
# 199
{ 
# 200
__nv_tex_surf_handler("__isurf1Dwrite_v2", &val, obj, x, mode); 
# 201
} 
#endif
# 203 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 204
surf2Dwrite(T val, cudaSurfaceObject_t obj, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 205
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)mode;
# 207
::exit(___);}
#if 0
# 205
{ 
# 206
__nv_tex_surf_handler("__isurf2Dwrite_v2", &val, obj, x, y, mode); 
# 207
} 
#endif
# 209 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 210
surf3Dwrite(T val, cudaSurfaceObject_t obj, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 211
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)z;(void)mode;
# 213
::exit(___);}
#if 0
# 211
{ 
# 212
__nv_tex_surf_handler("__isurf3Dwrite_v2", &val, obj, x, y, z, mode); 
# 213
} 
#endif
# 215 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 216
surf1DLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 217
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)layer;(void)mode;
# 219
::exit(___);}
#if 0
# 217
{ 
# 218
__nv_tex_surf_handler("__isurf1DLayeredwrite_v2", &val, obj, x, layer, mode); 
# 219
} 
#endif
# 221 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 222
surf2DLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 223
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)layer;(void)mode;
# 225
::exit(___);}
#if 0
# 223
{ 
# 224
__nv_tex_surf_handler("__isurf2DLayeredwrite_v2", &val, obj, x, y, layer, mode); 
# 225
} 
#endif
# 227 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 228
surfCubemapwrite(T val, cudaSurfaceObject_t obj, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 229
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)face;(void)mode;
# 231
::exit(___);}
#if 0
# 229
{ 
# 230
__nv_tex_surf_handler("__isurfCubemapwrite_v2", &val, obj, x, y, face, mode); 
# 231
} 
#endif
# 233 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 234
surfCubemapLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int y, int layerface, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 235
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)layerface;(void)mode;
# 237
::exit(___);}
#if 0
# 235
{ 
# 236
__nv_tex_surf_handler("__isurfCubemapLayeredwrite_v2", &val, obj, x, y, layerface, mode); 
# 237
} 
#endif
# 3634 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
extern "C" unsigned __cudaPushCallConfiguration(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, CUstream_st * stream = 0); 
# 68 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_launch_parameters.h"
extern "C" {
# 71
extern const uint3 __device_builtin_variable_threadIdx; 
# 72
extern const uint3 __device_builtin_variable_blockIdx; 
# 73
extern const dim3 __device_builtin_variable_blockDim; 
# 74
extern const dim3 __device_builtin_variable_gridDim; 
# 75
extern const int __device_builtin_variable_warpSize; 
# 80
}
# 67 "/usr/include/c++/9/bits/stl_relops.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 71
namespace rel_ops { 
# 85 "/usr/include/c++/9/bits/stl_relops.h" 3
template< class _Tp> inline bool 
# 87
operator!=(const _Tp &__x, const _Tp &__y) 
# 88
{ return !(__x == __y); } 
# 98 "/usr/include/c++/9/bits/stl_relops.h" 3
template< class _Tp> inline bool 
# 100
operator>(const _Tp &__x, const _Tp &__y) 
# 101
{ return __y < __x; } 
# 111 "/usr/include/c++/9/bits/stl_relops.h" 3
template< class _Tp> inline bool 
# 113
operator<=(const _Tp &__x, const _Tp &__y) 
# 114
{ return !(__y < __x); } 
# 124 "/usr/include/c++/9/bits/stl_relops.h" 3
template< class _Tp> inline bool 
# 126
operator>=(const _Tp &__x, const _Tp &__y) 
# 127
{ return !(__x < __y); } 
# 128
}
# 131
}
# 36 "/usr/include/c++/9/bits/move.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _Tp> constexpr _Tp *
# 47
__addressof(_Tp &__r) noexcept 
# 48
{ return __builtin_addressof(__r); } 
# 53
}
# 40 "/usr/include/c++/9/type_traits" 3
namespace std __attribute((__visibility__("default"))) { 
# 56 "/usr/include/c++/9/type_traits" 3
template< class _Tp, _Tp __v> 
# 57
struct integral_constant { 
# 59
static constexpr _Tp value = (__v); 
# 60
typedef _Tp value_type; 
# 61
typedef integral_constant type; 
# 62
constexpr operator value_type() const noexcept { return value; } 
# 67
constexpr value_type operator()() const noexcept { return value; } 
# 69
}; 
# 71
template< class _Tp, _Tp __v> constexpr _Tp integral_constant< _Tp, __v> ::value; 
# 75
typedef integral_constant< bool, true>  true_type; 
# 78
typedef integral_constant< bool, false>  false_type; 
# 80
template< bool __v> using __bool_constant = integral_constant< bool, __v> ; 
# 91 "/usr/include/c++/9/type_traits" 3
template< bool , class , class > struct conditional; 
# 94
template< class ...> struct __or_; 
# 98
template<> struct __or_< >  : public false_type { 
# 100
}; 
# 102
template< class _B1> 
# 103
struct __or_< _B1>  : public _B1 { 
# 105
}; 
# 107
template< class _B1, class _B2> 
# 108
struct __or_< _B1, _B2>  : public conditional< _B1::value, _B1, _B2> ::type { 
# 110
}; 
# 112
template< class _B1, class _B2, class _B3, class ..._Bn> 
# 113
struct __or_< _B1, _B2, _B3, _Bn...>  : public conditional< _B1::value, _B1, std::__or_< _B2, _B3, _Bn...> > ::type { 
# 115
}; 
# 117
template< class ...> struct __and_; 
# 121
template<> struct __and_< >  : public true_type { 
# 123
}; 
# 125
template< class _B1> 
# 126
struct __and_< _B1>  : public _B1 { 
# 128
}; 
# 130
template< class _B1, class _B2> 
# 131
struct __and_< _B1, _B2>  : public conditional< _B1::value, _B2, _B1> ::type { 
# 133
}; 
# 135
template< class _B1, class _B2, class _B3, class ..._Bn> 
# 136
struct __and_< _B1, _B2, _B3, _Bn...>  : public conditional< _B1::value, std::__and_< _B2, _B3, _Bn...> , _B1> ::type { 
# 138
}; 
# 140
template< class _Pp> 
# 141
struct __not_ : public __bool_constant< !((bool)_Pp::value)>  { 
# 143
}; 
# 185 "/usr/include/c++/9/type_traits" 3
template< class _Tp> 
# 186
struct __success_type { 
# 187
typedef _Tp type; }; 
# 189
struct __failure_type { 
# 190
}; 
# 194
template< class > struct remove_cv; 
# 197
template< class > 
# 198
struct __is_void_helper : public false_type { 
# 199
}; 
# 202
template<> struct __is_void_helper< void>  : public true_type { 
# 203
}; 
# 206
template< class _Tp> 
# 207
struct is_void : public __is_void_helper< typename remove_cv< _Tp> ::type> ::type { 
# 209
}; 
# 211
template< class > 
# 212
struct __is_integral_helper : public false_type { 
# 213
}; 
# 216
template<> struct __is_integral_helper< bool>  : public true_type { 
# 217
}; 
# 220
template<> struct __is_integral_helper< char>  : public true_type { 
# 221
}; 
# 224
template<> struct __is_integral_helper< signed char>  : public true_type { 
# 225
}; 
# 228
template<> struct __is_integral_helper< unsigned char>  : public true_type { 
# 229
}; 
# 233
template<> struct __is_integral_helper< wchar_t>  : public true_type { 
# 234
}; 
# 244 "/usr/include/c++/9/type_traits" 3
template<> struct __is_integral_helper< char16_t>  : public true_type { 
# 245
}; 
# 248
template<> struct __is_integral_helper< char32_t>  : public true_type { 
# 249
}; 
# 252
template<> struct __is_integral_helper< short>  : public true_type { 
# 253
}; 
# 256
template<> struct __is_integral_helper< unsigned short>  : public true_type { 
# 257
}; 
# 260
template<> struct __is_integral_helper< int>  : public true_type { 
# 261
}; 
# 264
template<> struct __is_integral_helper< unsigned>  : public true_type { 
# 265
}; 
# 268
template<> struct __is_integral_helper< long>  : public true_type { 
# 269
}; 
# 272
template<> struct __is_integral_helper< unsigned long>  : public true_type { 
# 273
}; 
# 276
template<> struct __is_integral_helper< long long>  : public true_type { 
# 277
}; 
# 280
template<> struct __is_integral_helper< unsigned long long>  : public true_type { 
# 281
}; 
# 287
template<> struct __is_integral_helper< __int128>  : public true_type { 
# 288
}; 
# 291
template<> struct __is_integral_helper< unsigned __int128>  : public true_type { 
# 292
}; 
# 323 "/usr/include/c++/9/type_traits" 3
template< class _Tp> 
# 324
struct is_integral : public __is_integral_helper< typename remove_cv< _Tp> ::type> ::type { 
# 326
}; 
# 328
template< class > 
# 329
struct __is_floating_point_helper : public false_type { 
# 330
}; 
# 333
template<> struct __is_floating_point_helper< float>  : public true_type { 
# 334
}; 
# 337
template<> struct __is_floating_point_helper< double>  : public true_type { 
# 338
}; 
# 341
template<> struct __is_floating_point_helper< long double>  : public true_type { 
# 342
}; 
# 351 "/usr/include/c++/9/type_traits" 3
template< class _Tp> 
# 352
struct is_floating_point : public __is_floating_point_helper< typename remove_cv< _Tp> ::type> ::type { 
# 354
}; 
# 357
template< class > 
# 358
struct is_array : public false_type { 
# 359
}; 
# 361
template< class _Tp, size_t _Size> 
# 362
struct is_array< _Tp [_Size]>  : public true_type { 
# 363
}; 
# 365
template< class _Tp> 
# 366
struct is_array< _Tp []>  : public true_type { 
# 367
}; 
# 369
template< class > 
# 370
struct __is_pointer_helper : public false_type { 
# 371
}; 
# 373
template< class _Tp> 
# 374
struct __is_pointer_helper< _Tp *>  : public true_type { 
# 375
}; 
# 378
template< class _Tp> 
# 379
struct is_pointer : public __is_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 381
}; 
# 384
template< class > 
# 385
struct is_lvalue_reference : public false_type { 
# 386
}; 
# 388
template< class _Tp> 
# 389
struct is_lvalue_reference< _Tp &>  : public true_type { 
# 390
}; 
# 393
template< class > 
# 394
struct is_rvalue_reference : public false_type { 
# 395
}; 
# 397
template< class _Tp> 
# 398
struct is_rvalue_reference< _Tp &&>  : public true_type { 
# 399
}; 
# 401
template< class > struct is_function; 
# 404
template< class > 
# 405
struct __is_member_object_pointer_helper : public false_type { 
# 406
}; 
# 408
template< class _Tp, class _Cp> 
# 409
struct __is_member_object_pointer_helper< _Tp (_Cp::*)>  : public __not_< is_function< _Tp> > ::type { 
# 410
}; 
# 413
template< class _Tp> 
# 414
struct is_member_object_pointer : public __is_member_object_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 417
}; 
# 419
template< class > 
# 420
struct __is_member_function_pointer_helper : public false_type { 
# 421
}; 
# 423
template< class _Tp, class _Cp> 
# 424
struct __is_member_function_pointer_helper< _Tp (_Cp::*)>  : public is_function< _Tp> ::type { 
# 425
}; 
# 428
template< class _Tp> 
# 429
struct is_member_function_pointer : public __is_member_function_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 432
}; 
# 435
template< class _Tp> 
# 436
struct is_enum : public integral_constant< bool, __is_enum(_Tp)>  { 
# 438
}; 
# 441
template< class _Tp> 
# 442
struct is_union : public integral_constant< bool, __is_union(_Tp)>  { 
# 444
}; 
# 447
template< class _Tp> 
# 448
struct is_class : public integral_constant< bool, __is_class(_Tp)>  { 
# 450
}; 
# 453
template< class > 
# 454
struct is_function : public false_type { 
# 455
}; 
# 457
template< class _Res, class ..._ArgTypes> 
# 458
struct is_function< _Res (_ArgTypes ...)>  : public true_type { 
# 459
}; 
# 461
template< class _Res, class ..._ArgTypes> 
# 462
struct is_function< _Res (_ArgTypes ...) &>  : public true_type { 
# 463
}; 
# 465
template< class _Res, class ..._ArgTypes> 
# 466
struct is_function< _Res (_ArgTypes ...) &&>  : public true_type { 
# 467
}; 
# 469
template< class _Res, class ..._ArgTypes> 
# 470
struct is_function< _Res (_ArgTypes ..., ...)>  : public true_type { 
# 471
}; 
# 473
template< class _Res, class ..._ArgTypes> 
# 474
struct is_function< _Res (_ArgTypes ..., ...) &>  : public true_type { 
# 475
}; 
# 477
template< class _Res, class ..._ArgTypes> 
# 478
struct is_function< _Res (_ArgTypes ..., ...) &&>  : public true_type { 
# 479
}; 
# 481
template< class _Res, class ..._ArgTypes> 
# 482
struct is_function< _Res (_ArgTypes ...) const>  : public true_type { 
# 483
}; 
# 485
template< class _Res, class ..._ArgTypes> 
# 486
struct is_function< _Res (_ArgTypes ...) const &>  : public true_type { 
# 487
}; 
# 489
template< class _Res, class ..._ArgTypes> 
# 490
struct is_function< _Res (_ArgTypes ...) const &&>  : public true_type { 
# 491
}; 
# 493
template< class _Res, class ..._ArgTypes> 
# 494
struct is_function< _Res (_ArgTypes ..., ...) const>  : public true_type { 
# 495
}; 
# 497
template< class _Res, class ..._ArgTypes> 
# 498
struct is_function< _Res (_ArgTypes ..., ...) const &>  : public true_type { 
# 499
}; 
# 501
template< class _Res, class ..._ArgTypes> 
# 502
struct is_function< _Res (_ArgTypes ..., ...) const &&>  : public true_type { 
# 503
}; 
# 505
template< class _Res, class ..._ArgTypes> 
# 506
struct is_function< _Res (_ArgTypes ...) volatile>  : public true_type { 
# 507
}; 
# 509
template< class _Res, class ..._ArgTypes> 
# 510
struct is_function< _Res (_ArgTypes ...) volatile &>  : public true_type { 
# 511
}; 
# 513
template< class _Res, class ..._ArgTypes> 
# 514
struct is_function< _Res (_ArgTypes ...) volatile &&>  : public true_type { 
# 515
}; 
# 517
template< class _Res, class ..._ArgTypes> 
# 518
struct is_function< _Res (_ArgTypes ..., ...) volatile>  : public true_type { 
# 519
}; 
# 521
template< class _Res, class ..._ArgTypes> 
# 522
struct is_function< _Res (_ArgTypes ..., ...) volatile &>  : public true_type { 
# 523
}; 
# 525
template< class _Res, class ..._ArgTypes> 
# 526
struct is_function< _Res (_ArgTypes ..., ...) volatile &&>  : public true_type { 
# 527
}; 
# 529
template< class _Res, class ..._ArgTypes> 
# 530
struct is_function< _Res (_ArgTypes ...) const volatile>  : public true_type { 
# 531
}; 
# 533
template< class _Res, class ..._ArgTypes> 
# 534
struct is_function< _Res (_ArgTypes ...) const volatile &>  : public true_type { 
# 535
}; 
# 537
template< class _Res, class ..._ArgTypes> 
# 538
struct is_function< _Res (_ArgTypes ...) const volatile &&>  : public true_type { 
# 539
}; 
# 541
template< class _Res, class ..._ArgTypes> 
# 542
struct is_function< _Res (_ArgTypes ..., ...) const volatile>  : public true_type { 
# 543
}; 
# 545
template< class _Res, class ..._ArgTypes> 
# 546
struct is_function< _Res (_ArgTypes ..., ...) const volatile &>  : public true_type { 
# 547
}; 
# 549
template< class _Res, class ..._ArgTypes> 
# 550
struct is_function< _Res (_ArgTypes ..., ...) const volatile &&>  : public true_type { 
# 551
}; 
# 555
template< class > 
# 556
struct __is_null_pointer_helper : public false_type { 
# 557
}; 
# 560
template<> struct __is_null_pointer_helper< __decltype((nullptr))>  : public true_type { 
# 561
}; 
# 564
template< class _Tp> 
# 565
struct is_null_pointer : public __is_null_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 567
}; 
# 570
template< class _Tp> 
# 571
struct __is_nullptr_t : public is_null_pointer< _Tp>  { 
# 573
}; 
# 578
template< class _Tp> 
# 579
struct is_reference : public __or_< is_lvalue_reference< _Tp> , is_rvalue_reference< _Tp> > ::type { 
# 582
}; 
# 585
template< class _Tp> 
# 586
struct is_arithmetic : public __or_< is_integral< _Tp> , is_floating_point< _Tp> > ::type { 
# 588
}; 
# 591
template< class _Tp> 
# 592
struct is_fundamental : public __or_< is_arithmetic< _Tp> , is_void< _Tp> , is_null_pointer< _Tp> > ::type { 
# 595
}; 
# 598
template< class _Tp> 
# 599
struct is_object : public __not_< __or_< is_function< _Tp> , is_reference< _Tp> , is_void< _Tp> > > ::type { 
# 602
}; 
# 604
template< class > struct is_member_pointer; 
# 608
template< class _Tp> 
# 609
struct is_scalar : public __or_< is_arithmetic< _Tp> , is_enum< _Tp> , is_pointer< _Tp> , is_member_pointer< _Tp> , is_null_pointer< _Tp> > ::type { 
# 612
}; 
# 615
template< class _Tp> 
# 616
struct is_compound : public __not_< is_fundamental< _Tp> > ::type { 
# 617
}; 
# 619
template< class _Tp> 
# 620
struct __is_member_pointer_helper : public false_type { 
# 621
}; 
# 623
template< class _Tp, class _Cp> 
# 624
struct __is_member_pointer_helper< _Tp (_Cp::*)>  : public true_type { 
# 625
}; 
# 628
template< class _Tp> 
# 629
struct is_member_pointer : public __is_member_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 631
}; 
# 635
template< class _Tp> 
# 636
struct __is_referenceable : public __or_< is_object< _Tp> , is_reference< _Tp> > ::type { 
# 638
}; 
# 640
template< class _Res, class ..._Args> 
# 641
struct __is_referenceable< _Res (_Args ...)>  : public true_type { 
# 643
}; 
# 645
template< class _Res, class ..._Args> 
# 646
struct __is_referenceable< _Res (_Args ..., ...)>  : public true_type { 
# 648
}; 
# 653
template< class > 
# 654
struct is_const : public false_type { 
# 655
}; 
# 657
template< class _Tp> 
# 658
struct is_const< const _Tp>  : public true_type { 
# 659
}; 
# 662
template< class > 
# 663
struct is_volatile : public false_type { 
# 664
}; 
# 666
template< class _Tp> 
# 667
struct is_volatile< volatile _Tp>  : public true_type { 
# 668
}; 
# 671
template< class _Tp> 
# 672
struct is_trivial : public integral_constant< bool, __is_trivial(_Tp)>  { 
# 674
}; 
# 677
template< class _Tp> 
# 678
struct is_trivially_copyable : public integral_constant< bool, __is_trivially_copyable(_Tp)>  { 
# 680
}; 
# 683
template< class _Tp> 
# 684
struct is_standard_layout : public integral_constant< bool, __is_standard_layout(_Tp)>  { 
# 686
}; 
# 690
template< class _Tp> 
# 691
struct is_pod : public integral_constant< bool, __is_pod(_Tp)>  { 
# 693
}; 
# 696
template< class _Tp> 
# 697
struct is_literal_type : public integral_constant< bool, __is_literal_type(_Tp)>  { 
# 699
}; 
# 702
template< class _Tp> 
# 703
struct is_empty : public integral_constant< bool, __is_empty(_Tp)>  { 
# 705
}; 
# 708
template< class _Tp> 
# 709
struct is_polymorphic : public integral_constant< bool, __is_polymorphic(_Tp)>  { 
# 711
}; 
# 716
template< class _Tp> 
# 717
struct is_final : public integral_constant< bool, __is_final(_Tp)>  { 
# 719
}; 
# 723
template< class _Tp> 
# 724
struct is_abstract : public integral_constant< bool, __is_abstract(_Tp)>  { 
# 726
}; 
# 728
template< class _Tp, bool 
# 729
 = is_arithmetic< _Tp> ::value> 
# 730
struct __is_signed_helper : public false_type { 
# 731
}; 
# 733
template< class _Tp> 
# 734
struct __is_signed_helper< _Tp, true>  : public integral_constant< bool, ((_Tp)(-1)) < ((_Tp)0)>  { 
# 736
}; 
# 739
template< class _Tp> 
# 740
struct is_signed : public __is_signed_helper< _Tp> ::type { 
# 742
}; 
# 745
template< class _Tp> 
# 746
struct is_unsigned : public __and_< is_arithmetic< _Tp> , __not_< is_signed< _Tp> > >  { 
# 748
}; 
# 758 "/usr/include/c++/9/type_traits" 3
template< class _Tp, class _Up = _Tp &&> _Up __declval(int); 
# 762
template< class _Tp> _Tp __declval(long); 
# 766
template< class _Tp> auto declval() noexcept->__decltype((__declval< _Tp> (0))); 
# 769
template< class , unsigned  = 0U> struct extent; 
# 772
template< class > struct remove_all_extents; 
# 775
template< class _Tp> 
# 776
struct __is_array_known_bounds : public integral_constant< bool, (extent< _Tp> ::value > 0)>  { 
# 778
}; 
# 780
template< class _Tp> 
# 781
struct __is_array_unknown_bounds : public __and_< is_array< _Tp> , __not_< extent< _Tp> > >  { 
# 783
}; 
# 790
struct __do_is_destructible_impl { 
# 792
template< class _Tp, class  = __decltype((declval< _Tp &> ().~_Tp()))> static true_type __test(int); 
# 795
template< class > static false_type __test(...); 
# 797
}; 
# 799
template< class _Tp> 
# 800
struct __is_destructible_impl : public __do_is_destructible_impl { 
# 803
typedef __decltype((__test< _Tp> (0))) type; 
# 804
}; 
# 806
template< class _Tp, bool 
# 807
 = __or_< is_void< _Tp> , __is_array_unknown_bounds< _Tp> , is_function< _Tp> > ::value, bool 
# 810
 = __or_< is_reference< _Tp> , is_scalar< _Tp> > ::value> struct __is_destructible_safe; 
# 813
template< class _Tp> 
# 814
struct __is_destructible_safe< _Tp, false, false>  : public __is_destructible_impl< typename remove_all_extents< _Tp> ::type> ::type { 
# 817
}; 
# 819
template< class _Tp> 
# 820
struct __is_destructible_safe< _Tp, true, false>  : public false_type { 
# 821
}; 
# 823
template< class _Tp> 
# 824
struct __is_destructible_safe< _Tp, false, true>  : public true_type { 
# 825
}; 
# 828
template< class _Tp> 
# 829
struct is_destructible : public __is_destructible_safe< _Tp> ::type { 
# 831
}; 
# 837
struct __do_is_nt_destructible_impl { 
# 839
template< class _Tp> static __bool_constant< noexcept(declval< _Tp &> ().~_Tp())>  __test(int); 
# 843
template< class > static false_type __test(...); 
# 845
}; 
# 847
template< class _Tp> 
# 848
struct __is_nt_destructible_impl : public __do_is_nt_destructible_impl { 
# 851
typedef __decltype((__test< _Tp> (0))) type; 
# 852
}; 
# 854
template< class _Tp, bool 
# 855
 = __or_< is_void< _Tp> , __is_array_unknown_bounds< _Tp> , is_function< _Tp> > ::value, bool 
# 858
 = __or_< is_reference< _Tp> , is_scalar< _Tp> > ::value> struct __is_nt_destructible_safe; 
# 861
template< class _Tp> 
# 862
struct __is_nt_destructible_safe< _Tp, false, false>  : public __is_nt_destructible_impl< typename remove_all_extents< _Tp> ::type> ::type { 
# 865
}; 
# 867
template< class _Tp> 
# 868
struct __is_nt_destructible_safe< _Tp, true, false>  : public false_type { 
# 869
}; 
# 871
template< class _Tp> 
# 872
struct __is_nt_destructible_safe< _Tp, false, true>  : public true_type { 
# 873
}; 
# 876
template< class _Tp> 
# 877
struct is_nothrow_destructible : public __is_nt_destructible_safe< _Tp> ::type { 
# 879
}; 
# 882
template< class _Tp, class ..._Args> 
# 883
struct is_constructible : public __bool_constant< __is_constructible(_Tp, _Args...)>  { 
# 885
}; 
# 888
template< class _Tp> 
# 889
struct is_default_constructible : public is_constructible< _Tp> ::type { 
# 891
}; 
# 893
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_copy_constructible_impl; 
# 896
template< class _Tp> 
# 897
struct __is_copy_constructible_impl< _Tp, false>  : public false_type { 
# 898
}; 
# 900
template< class _Tp> 
# 901
struct __is_copy_constructible_impl< _Tp, true>  : public is_constructible< _Tp, const _Tp &>  { 
# 903
}; 
# 906
template< class _Tp> 
# 907
struct is_copy_constructible : public __is_copy_constructible_impl< _Tp>  { 
# 909
}; 
# 911
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_move_constructible_impl; 
# 914
template< class _Tp> 
# 915
struct __is_move_constructible_impl< _Tp, false>  : public false_type { 
# 916
}; 
# 918
template< class _Tp> 
# 919
struct __is_move_constructible_impl< _Tp, true>  : public is_constructible< _Tp, _Tp &&>  { 
# 921
}; 
# 924
template< class _Tp> 
# 925
struct is_move_constructible : public __is_move_constructible_impl< _Tp>  { 
# 927
}; 
# 929
template< bool , class _Tp, class ..._Args> 
# 930
struct __is_nt_constructible_impl : public false_type { 
# 932
}; 
# 934
template< class _Tp, class ..._Args> 
# 935
struct __is_nt_constructible_impl< true, _Tp, _Args...>  : public __bool_constant< noexcept((_Tp(std::declval< _Args> ()...)))>  { 
# 937
}; 
# 939
template< class _Tp, class _Arg> 
# 940
struct __is_nt_constructible_impl< true, _Tp, _Arg>  : public __bool_constant< noexcept((static_cast< _Tp>(std::declval< _Arg> ())))>  { 
# 942
}; 
# 944
template< class _Tp> 
# 945
struct __is_nt_constructible_impl< true, _Tp>  : public __bool_constant< noexcept((_Tp()))>  { 
# 947
}; 
# 949
template< class _Tp, size_t _Num> 
# 950
struct __is_nt_constructible_impl< true, _Tp [_Num]>  : public __bool_constant< noexcept((typename remove_all_extents< _Tp> ::type()))>  { 
# 952
}; 
# 954
template< class _Tp, class ..._Args> using __is_nothrow_constructible_impl = __is_nt_constructible_impl< __is_constructible(_Tp, _Args...), _Tp, _Args...> ; 
# 960
template< class _Tp, class ..._Args> 
# 961
struct is_nothrow_constructible : public __is_nothrow_constructible_impl< _Tp, _Args...> ::type { 
# 963
}; 
# 966
template< class _Tp> 
# 967
struct is_nothrow_default_constructible : public __is_nothrow_constructible_impl< _Tp> ::type { 
# 969
}; 
# 972
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nothrow_copy_constructible_impl; 
# 975
template< class _Tp> 
# 976
struct __is_nothrow_copy_constructible_impl< _Tp, false>  : public false_type { 
# 977
}; 
# 979
template< class _Tp> 
# 980
struct __is_nothrow_copy_constructible_impl< _Tp, true>  : public is_nothrow_constructible< _Tp, const _Tp &>  { 
# 982
}; 
# 985
template< class _Tp> 
# 986
struct is_nothrow_copy_constructible : public __is_nothrow_copy_constructible_impl< _Tp>  { 
# 988
}; 
# 990
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nothrow_move_constructible_impl; 
# 993
template< class _Tp> 
# 994
struct __is_nothrow_move_constructible_impl< _Tp, false>  : public false_type { 
# 995
}; 
# 997
template< class _Tp> 
# 998
struct __is_nothrow_move_constructible_impl< _Tp, true>  : public is_nothrow_constructible< _Tp, _Tp &&>  { 
# 1000
}; 
# 1003
template< class _Tp> 
# 1004
struct is_nothrow_move_constructible : public __is_nothrow_move_constructible_impl< _Tp>  { 
# 1006
}; 
# 1009
template< class _Tp, class _Up> 
# 1010
struct is_assignable : public __bool_constant< __is_assignable(_Tp, _Up)>  { 
# 1012
}; 
# 1014
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_copy_assignable_impl; 
# 1017
template< class _Tp> 
# 1018
struct __is_copy_assignable_impl< _Tp, false>  : public false_type { 
# 1019
}; 
# 1021
template< class _Tp> 
# 1022
struct __is_copy_assignable_impl< _Tp, true>  : public is_assignable< _Tp &, const _Tp &>  { 
# 1024
}; 
# 1027
template< class _Tp> 
# 1028
struct is_copy_assignable : public __is_copy_assignable_impl< _Tp>  { 
# 1030
}; 
# 1032
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_move_assignable_impl; 
# 1035
template< class _Tp> 
# 1036
struct __is_move_assignable_impl< _Tp, false>  : public false_type { 
# 1037
}; 
# 1039
template< class _Tp> 
# 1040
struct __is_move_assignable_impl< _Tp, true>  : public is_assignable< _Tp &, _Tp &&>  { 
# 1042
}; 
# 1045
template< class _Tp> 
# 1046
struct is_move_assignable : public __is_move_assignable_impl< _Tp>  { 
# 1048
}; 
# 1050
template< class _Tp, class _Up> 
# 1051
struct __is_nt_assignable_impl : public integral_constant< bool, noexcept((declval< _Tp> () = declval< _Up> ()))>  { 
# 1053
}; 
# 1056
template< class _Tp, class _Up> 
# 1057
struct is_nothrow_assignable : public __and_< is_assignable< _Tp, _Up> , __is_nt_assignable_impl< _Tp, _Up> >  { 
# 1060
}; 
# 1062
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nt_copy_assignable_impl; 
# 1065
template< class _Tp> 
# 1066
struct __is_nt_copy_assignable_impl< _Tp, false>  : public false_type { 
# 1067
}; 
# 1069
template< class _Tp> 
# 1070
struct __is_nt_copy_assignable_impl< _Tp, true>  : public is_nothrow_assignable< _Tp &, const _Tp &>  { 
# 1072
}; 
# 1075
template< class _Tp> 
# 1076
struct is_nothrow_copy_assignable : public __is_nt_copy_assignable_impl< _Tp>  { 
# 1078
}; 
# 1080
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nt_move_assignable_impl; 
# 1083
template< class _Tp> 
# 1084
struct __is_nt_move_assignable_impl< _Tp, false>  : public false_type { 
# 1085
}; 
# 1087
template< class _Tp> 
# 1088
struct __is_nt_move_assignable_impl< _Tp, true>  : public is_nothrow_assignable< _Tp &, _Tp &&>  { 
# 1090
}; 
# 1093
template< class _Tp> 
# 1094
struct is_nothrow_move_assignable : public __is_nt_move_assignable_impl< _Tp>  { 
# 1096
}; 
# 1099
template< class _Tp, class ..._Args> 
# 1100
struct is_trivially_constructible : public __bool_constant< __is_trivially_constructible(_Tp, _Args...)>  { 
# 1102
}; 
# 1105
template< class _Tp> 
# 1106
struct is_trivially_default_constructible : public is_trivially_constructible< _Tp> ::type { 
# 1108
}; 
# 1110
struct __do_is_implicitly_default_constructible_impl { 
# 1112
template< class _Tp> static void __helper(const _Tp &); 
# 1115
template< class _Tp> static true_type __test(const _Tp &, __decltype((__helper< const _Tp &> ({}))) * = 0); 
# 1119
static false_type __test(...); 
# 1120
}; 
# 1122
template< class _Tp> 
# 1123
struct __is_implicitly_default_constructible_impl : public __do_is_implicitly_default_constructible_impl { 
# 1126
typedef __decltype((__test(declval< _Tp> ()))) type; 
# 1127
}; 
# 1129
template< class _Tp> 
# 1130
struct __is_implicitly_default_constructible_safe : public __is_implicitly_default_constructible_impl< _Tp> ::type { 
# 1132
}; 
# 1134
template< class _Tp> 
# 1135
struct __is_implicitly_default_constructible : public __and_< is_default_constructible< _Tp> , __is_implicitly_default_constructible_safe< _Tp> >  { 
# 1138
}; 
# 1142
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_trivially_copy_constructible_impl; 
# 1145
template< class _Tp> 
# 1146
struct __is_trivially_copy_constructible_impl< _Tp, false>  : public false_type { 
# 1147
}; 
# 1149
template< class _Tp> 
# 1150
struct __is_trivially_copy_constructible_impl< _Tp, true>  : public __and_< is_copy_constructible< _Tp> , integral_constant< bool, __is_trivially_constructible(_Tp, const _Tp &)> >  { 
# 1154
}; 
# 1156
template< class _Tp> 
# 1157
struct is_trivially_copy_constructible : public __is_trivially_copy_constructible_impl< _Tp>  { 
# 1159
}; 
# 1163
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_trivially_move_constructible_impl; 
# 1166
template< class _Tp> 
# 1167
struct __is_trivially_move_constructible_impl< _Tp, false>  : public false_type { 
# 1168
}; 
# 1170
template< class _Tp> 
# 1171
struct __is_trivially_move_constructible_impl< _Tp, true>  : public __and_< is_move_constructible< _Tp> , integral_constant< bool, __is_trivially_constructible(_Tp, _Tp &&)> >  { 
# 1175
}; 
# 1177
template< class _Tp> 
# 1178
struct is_trivially_move_constructible : public __is_trivially_move_constructible_impl< _Tp>  { 
# 1180
}; 
# 1183
template< class _Tp, class _Up> 
# 1184
struct is_trivially_assignable : public __bool_constant< __is_trivially_assignable(_Tp, _Up)>  { 
# 1186
}; 
# 1190
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_trivially_copy_assignable_impl; 
# 1193
template< class _Tp> 
# 1194
struct __is_trivially_copy_assignable_impl< _Tp, false>  : public false_type { 
# 1195
}; 
# 1197
template< class _Tp> 
# 1198
struct __is_trivially_copy_assignable_impl< _Tp, true>  : public __bool_constant< __is_trivially_assignable(_Tp &, const _Tp &)>  { 
# 1200
}; 
# 1202
template< class _Tp> 
# 1203
struct is_trivially_copy_assignable : public __is_trivially_copy_assignable_impl< _Tp>  { 
# 1205
}; 
# 1209
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_trivially_move_assignable_impl; 
# 1212
template< class _Tp> 
# 1213
struct __is_trivially_move_assignable_impl< _Tp, false>  : public false_type { 
# 1214
}; 
# 1216
template< class _Tp> 
# 1217
struct __is_trivially_move_assignable_impl< _Tp, true>  : public __bool_constant< __is_trivially_assignable(_Tp &, _Tp &&)>  { 
# 1219
}; 
# 1221
template< class _Tp> 
# 1222
struct is_trivially_move_assignable : public __is_trivially_move_assignable_impl< _Tp>  { 
# 1224
}; 
# 1227
template< class _Tp> 
# 1228
struct is_trivially_destructible : public __and_< is_destructible< _Tp> , __bool_constant< __has_trivial_destructor(_Tp)> >  { 
# 1231
}; 
# 1235
template< class _Tp> 
# 1236
struct has_virtual_destructor : public integral_constant< bool, __has_virtual_destructor(_Tp)>  { 
# 1238
}; 
# 1244
template< class _Tp> 
# 1245
struct alignment_of : public integral_constant< unsigned long, __alignof__(_Tp)>  { 
# 1246
}; 
# 1249
template< class > 
# 1250
struct rank : public integral_constant< unsigned long, 0UL>  { 
# 1251
}; 
# 1253
template< class _Tp, size_t _Size> 
# 1254
struct rank< _Tp [_Size]>  : public integral_constant< unsigned long, 1 + std::rank< _Tp> ::value>  { 
# 1255
}; 
# 1257
template< class _Tp> 
# 1258
struct rank< _Tp []>  : public integral_constant< unsigned long, 1 + std::rank< _Tp> ::value>  { 
# 1259
}; 
# 1262
template< class , unsigned _Uint> 
# 1263
struct extent : public integral_constant< unsigned long, 0UL>  { 
# 1264
}; 
# 1266
template< class _Tp, unsigned _Uint, size_t _Size> 
# 1267
struct extent< _Tp [_Size], _Uint>  : public integral_constant< unsigned long, (_Uint == (0)) ? _Size : std::extent< _Tp, _Uint - (1)> ::value>  { 
# 1271
}; 
# 1273
template< class _Tp, unsigned _Uint> 
# 1274
struct extent< _Tp [], _Uint>  : public integral_constant< unsigned long, (_Uint == (0)) ? 0 : std::extent< _Tp, _Uint - (1)> ::value>  { 
# 1278
}; 
# 1284
template< class , class > 
# 1285
struct is_same : public false_type { 
# 1286
}; 
# 1288
template< class _Tp> 
# 1289
struct is_same< _Tp, _Tp>  : public true_type { 
# 1290
}; 
# 1293
template< class _Base, class _Derived> 
# 1294
struct is_base_of : public integral_constant< bool, __is_base_of(_Base, _Derived)>  { 
# 1296
}; 
# 1298
template< class _From, class _To, bool 
# 1299
 = __or_< is_void< _From> , is_function< _To> , is_array< _To> > ::value> 
# 1301
struct __is_convertible_helper { 
# 1303
typedef typename is_void< _To> ::type type; 
# 1304
}; 
# 1306
template< class _From, class _To> 
# 1307
class __is_convertible_helper< _From, _To, false>  { 
# 1309
template< class _To1> static void __test_aux(_To1) noexcept; 
# 1312
template< class _From1, class _To1, class 
# 1313
 = __decltype((__test_aux< _To1> (std::declval< _From1> ())))> static true_type 
# 1312
__test(int); 
# 1317
template< class , class > static false_type __test(...); 
# 1322
public: typedef __decltype((__test< _From, _To> (0))) type; 
# 1323
}; 
# 1327
template< class _From, class _To> 
# 1328
struct is_convertible : public __is_convertible_helper< _From, _To> ::type { 
# 1330
}; 
# 1374 "/usr/include/c++/9/type_traits" 3
template< class _Tp> 
# 1375
struct remove_const { 
# 1376
typedef _Tp type; }; 
# 1378
template< class _Tp> 
# 1379
struct remove_const< const _Tp>  { 
# 1380
typedef _Tp type; }; 
# 1383
template< class _Tp> 
# 1384
struct remove_volatile { 
# 1385
typedef _Tp type; }; 
# 1387
template< class _Tp> 
# 1388
struct remove_volatile< volatile _Tp>  { 
# 1389
typedef _Tp type; }; 
# 1392
template< class _Tp> 
# 1393
struct remove_cv { 
# 1396
typedef typename remove_const< typename remove_volatile< _Tp> ::type> ::type type; 
# 1397
}; 
# 1400
template< class _Tp> 
# 1401
struct add_const { 
# 1402
typedef const _Tp type; }; 
# 1405
template< class _Tp> 
# 1406
struct add_volatile { 
# 1407
typedef volatile _Tp type; }; 
# 1410
template< class _Tp> 
# 1411
struct add_cv { 
# 1414
typedef typename add_const< typename add_volatile< _Tp> ::type> ::type type; 
# 1415
}; 
# 1422
template< class _Tp> using remove_const_t = typename remove_const< _Tp> ::type; 
# 1426
template< class _Tp> using remove_volatile_t = typename remove_volatile< _Tp> ::type; 
# 1430
template< class _Tp> using remove_cv_t = typename remove_cv< _Tp> ::type; 
# 1434
template< class _Tp> using add_const_t = typename add_const< _Tp> ::type; 
# 1438
template< class _Tp> using add_volatile_t = typename add_volatile< _Tp> ::type; 
# 1442
template< class _Tp> using add_cv_t = typename add_cv< _Tp> ::type; 
# 1449
template< class _Tp> 
# 1450
struct remove_reference { 
# 1451
typedef _Tp type; }; 
# 1453
template< class _Tp> 
# 1454
struct remove_reference< _Tp &>  { 
# 1455
typedef _Tp type; }; 
# 1457
template< class _Tp> 
# 1458
struct remove_reference< _Tp &&>  { 
# 1459
typedef _Tp type; }; 
# 1461
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> 
# 1462
struct __add_lvalue_reference_helper { 
# 1463
typedef _Tp type; }; 
# 1465
template< class _Tp> 
# 1466
struct __add_lvalue_reference_helper< _Tp, true>  { 
# 1467
typedef _Tp &type; }; 
# 1470
template< class _Tp> 
# 1471
struct add_lvalue_reference : public __add_lvalue_reference_helper< _Tp>  { 
# 1473
}; 
# 1475
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> 
# 1476
struct __add_rvalue_reference_helper { 
# 1477
typedef _Tp type; }; 
# 1479
template< class _Tp> 
# 1480
struct __add_rvalue_reference_helper< _Tp, true>  { 
# 1481
typedef _Tp &&type; }; 
# 1484
template< class _Tp> 
# 1485
struct add_rvalue_reference : public __add_rvalue_reference_helper< _Tp>  { 
# 1487
}; 
# 1491
template< class _Tp> using remove_reference_t = typename remove_reference< _Tp> ::type; 
# 1495
template< class _Tp> using add_lvalue_reference_t = typename add_lvalue_reference< _Tp> ::type; 
# 1499
template< class _Tp> using add_rvalue_reference_t = typename add_rvalue_reference< _Tp> ::type; 
# 1506
template< class _Unqualified, bool _IsConst, bool _IsVol> struct __cv_selector; 
# 1509
template< class _Unqualified> 
# 1510
struct __cv_selector< _Unqualified, false, false>  { 
# 1511
typedef _Unqualified __type; }; 
# 1513
template< class _Unqualified> 
# 1514
struct __cv_selector< _Unqualified, false, true>  { 
# 1515
typedef volatile _Unqualified __type; }; 
# 1517
template< class _Unqualified> 
# 1518
struct __cv_selector< _Unqualified, true, false>  { 
# 1519
typedef const _Unqualified __type; }; 
# 1521
template< class _Unqualified> 
# 1522
struct __cv_selector< _Unqualified, true, true>  { 
# 1523
typedef const volatile _Unqualified __type; }; 
# 1525
template< class _Qualified, class _Unqualified, bool 
# 1526
_IsConst = is_const< _Qualified> ::value, bool 
# 1527
_IsVol = is_volatile< _Qualified> ::value> 
# 1528
class __match_cv_qualifiers { 
# 1530
typedef __cv_selector< _Unqualified, _IsConst, _IsVol>  __match; 
# 1533
public: typedef typename __cv_selector< _Unqualified, _IsConst, _IsVol> ::__type __type; 
# 1534
}; 
# 1537
template< class _Tp> 
# 1538
struct __make_unsigned { 
# 1539
typedef _Tp __type; }; 
# 1542
template<> struct __make_unsigned< char>  { 
# 1543
typedef unsigned char __type; }; 
# 1546
template<> struct __make_unsigned< signed char>  { 
# 1547
typedef unsigned char __type; }; 
# 1550
template<> struct __make_unsigned< short>  { 
# 1551
typedef unsigned short __type; }; 
# 1554
template<> struct __make_unsigned< int>  { 
# 1555
typedef unsigned __type; }; 
# 1558
template<> struct __make_unsigned< long>  { 
# 1559
typedef unsigned long __type; }; 
# 1562
template<> struct __make_unsigned< long long>  { 
# 1563
typedef unsigned long long __type; }; 
# 1567
template<> struct __make_unsigned< __int128>  { 
# 1568
typedef unsigned __int128 __type; }; 
# 1587 "/usr/include/c++/9/type_traits" 3
template< class _Tp, bool 
# 1588
_IsInt = is_integral< _Tp> ::value, bool 
# 1589
_IsEnum = is_enum< _Tp> ::value> class __make_unsigned_selector; 
# 1592
template< class _Tp> 
# 1593
class __make_unsigned_selector< _Tp, true, false>  { 
# 1595
using __unsigned_type = typename __make_unsigned< typename remove_cv< _Tp> ::type> ::__type; 
# 1599
public: using __type = typename __match_cv_qualifiers< _Tp, __unsigned_type> ::__type; 
# 1601
}; 
# 1603
class __make_unsigned_selector_base { 
# 1606
protected: template< class ...> struct _List { }; 
# 1608
template< class _Tp, class ..._Up> 
# 1609
struct _List< _Tp, _Up...>  : public __make_unsigned_selector_base::_List< _Up...>  { 
# 1610
static constexpr std::size_t __size = sizeof(_Tp); }; 
# 1612
template< size_t _Sz, class _Tp, bool  = _Sz <= _Tp::__size> struct __select; 
# 1615
template< size_t _Sz, class _Uint, class ..._UInts> 
# 1616
struct __select< _Sz, _List< _Uint, _UInts...> , true>  { 
# 1617
using __type = _Uint; }; 
# 1619
template< size_t _Sz, class _Uint, class ..._UInts> 
# 1620
struct __select< _Sz, _List< _Uint, _UInts...> , false>  : public __make_unsigned_selector_base::__select< _Sz, _List< _UInts...> >  { 
# 1622
}; 
# 1623
}; 
# 1626
template< class _Tp> 
# 1627
class __make_unsigned_selector< _Tp, false, true>  : private __make_unsigned_selector_base { 
# 1631
using _UInts = _List< unsigned char, unsigned short, unsigned, unsigned long, unsigned long long> ; 
# 1634
using __unsigned_type = typename __select< sizeof(_Tp), _List< unsigned char, unsigned short, unsigned, unsigned long, unsigned long long> > ::__type; 
# 1637
public: using __type = typename __match_cv_qualifiers< _Tp, __unsigned_type> ::__type; 
# 1639
}; 
# 1647
template<> struct __make_unsigned< wchar_t>  { 
# 1649
using __type = __make_unsigned_selector< wchar_t, false, true> ::__type; 
# 1651
}; 
# 1664 "/usr/include/c++/9/type_traits" 3
template<> struct __make_unsigned< char16_t>  { 
# 1666
using __type = __make_unsigned_selector< char16_t, false, true> ::__type; 
# 1668
}; 
# 1671
template<> struct __make_unsigned< char32_t>  { 
# 1673
using __type = __make_unsigned_selector< char32_t, false, true> ::__type; 
# 1675
}; 
# 1681
template< class _Tp> 
# 1682
struct make_unsigned { 
# 1683
typedef typename __make_unsigned_selector< _Tp> ::__type type; }; 
# 1687
template<> struct make_unsigned< bool> ; 
# 1691
template< class _Tp> 
# 1692
struct __make_signed { 
# 1693
typedef _Tp __type; }; 
# 1696
template<> struct __make_signed< char>  { 
# 1697
typedef signed char __type; }; 
# 1700
template<> struct __make_signed< unsigned char>  { 
# 1701
typedef signed char __type; }; 
# 1704
template<> struct __make_signed< unsigned short>  { 
# 1705
typedef signed short __type; }; 
# 1708
template<> struct __make_signed< unsigned>  { 
# 1709
typedef signed int __type; }; 
# 1712
template<> struct __make_signed< unsigned long>  { 
# 1713
typedef signed long __type; }; 
# 1716
template<> struct __make_signed< unsigned long long>  { 
# 1717
typedef signed long long __type; }; 
# 1721
template<> struct __make_signed< unsigned __int128>  { 
# 1722
typedef __int128 __type; }; 
# 1741 "/usr/include/c++/9/type_traits" 3
template< class _Tp, bool 
# 1742
_IsInt = is_integral< _Tp> ::value, bool 
# 1743
_IsEnum = is_enum< _Tp> ::value> class __make_signed_selector; 
# 1746
template< class _Tp> 
# 1747
class __make_signed_selector< _Tp, true, false>  { 
# 1749
using __signed_type = typename __make_signed< typename remove_cv< _Tp> ::type> ::__type; 
# 1753
public: using __type = typename __match_cv_qualifiers< _Tp, __signed_type> ::__type; 
# 1755
}; 
# 1758
template< class _Tp> 
# 1759
class __make_signed_selector< _Tp, false, true>  { 
# 1761
typedef typename __make_unsigned_selector< _Tp> ::__type __unsigned_type; 
# 1764
public: typedef typename std::__make_signed_selector< __unsigned_type> ::__type __type; 
# 1765
}; 
# 1773
template<> struct __make_signed< wchar_t>  { 
# 1775
using __type = __make_signed_selector< wchar_t, false, true> ::__type; 
# 1777
}; 
# 1790 "/usr/include/c++/9/type_traits" 3
template<> struct __make_signed< char16_t>  { 
# 1792
using __type = __make_signed_selector< char16_t, false, true> ::__type; 
# 1794
}; 
# 1797
template<> struct __make_signed< char32_t>  { 
# 1799
using __type = __make_signed_selector< char32_t, false, true> ::__type; 
# 1801
}; 
# 1807
template< class _Tp> 
# 1808
struct make_signed { 
# 1809
typedef typename __make_signed_selector< _Tp> ::__type type; }; 
# 1813
template<> struct make_signed< bool> ; 
# 1817
template< class _Tp> using make_signed_t = typename make_signed< _Tp> ::type; 
# 1821
template< class _Tp> using make_unsigned_t = typename make_unsigned< _Tp> ::type; 
# 1828
template< class _Tp> 
# 1829
struct remove_extent { 
# 1830
typedef _Tp type; }; 
# 1832
template< class _Tp, size_t _Size> 
# 1833
struct remove_extent< _Tp [_Size]>  { 
# 1834
typedef _Tp type; }; 
# 1836
template< class _Tp> 
# 1837
struct remove_extent< _Tp []>  { 
# 1838
typedef _Tp type; }; 
# 1841
template< class _Tp> 
# 1842
struct remove_all_extents { 
# 1843
typedef _Tp type; }; 
# 1845
template< class _Tp, size_t _Size> 
# 1846
struct remove_all_extents< _Tp [_Size]>  { 
# 1847
typedef typename std::remove_all_extents< _Tp> ::type type; }; 
# 1849
template< class _Tp> 
# 1850
struct remove_all_extents< _Tp []>  { 
# 1851
typedef typename std::remove_all_extents< _Tp> ::type type; }; 
# 1855
template< class _Tp> using remove_extent_t = typename remove_extent< _Tp> ::type; 
# 1859
template< class _Tp> using remove_all_extents_t = typename remove_all_extents< _Tp> ::type; 
# 1865
template< class _Tp, class > 
# 1866
struct __remove_pointer_helper { 
# 1867
typedef _Tp type; }; 
# 1869
template< class _Tp, class _Up> 
# 1870
struct __remove_pointer_helper< _Tp, _Up *>  { 
# 1871
typedef _Up type; }; 
# 1874
template< class _Tp> 
# 1875
struct remove_pointer : public __remove_pointer_helper< _Tp, typename remove_cv< _Tp> ::type>  { 
# 1877
}; 
# 1880
template< class _Tp, bool  = __or_< __is_referenceable< _Tp> , is_void< _Tp> > ::value> 
# 1882
struct __add_pointer_helper { 
# 1883
typedef _Tp type; }; 
# 1885
template< class _Tp> 
# 1886
struct __add_pointer_helper< _Tp, true>  { 
# 1887
typedef typename remove_reference< _Tp> ::type *type; }; 
# 1889
template< class _Tp> 
# 1890
struct add_pointer : public __add_pointer_helper< _Tp>  { 
# 1892
}; 
# 1896
template< class _Tp> using remove_pointer_t = typename remove_pointer< _Tp> ::type; 
# 1900
template< class _Tp> using add_pointer_t = typename add_pointer< _Tp> ::type; 
# 1904
template< size_t _Len> 
# 1905
struct __aligned_storage_msa { 
# 1907
union __type { 
# 1909
unsigned char __data[_Len]; 
# 1910
struct __attribute((__aligned__)) { } __align; 
# 1911
}; 
# 1912
}; 
# 1924 "/usr/include/c++/9/type_traits" 3
template< size_t _Len, size_t _Align = __alignof__(typename __aligned_storage_msa< _Len> ::__type)> 
# 1926
struct aligned_storage { 
# 1928
union type { 
# 1930
unsigned char __data[_Len]; 
# 1931
struct __attribute((__aligned__(_Align))) { } __align; 
# 1932
}; 
# 1933
}; 
# 1935
template< class ..._Types> 
# 1936
struct __strictest_alignment { 
# 1938
static const size_t _S_alignment = (0); 
# 1939
static const size_t _S_size = (0); 
# 1940
}; 
# 1942
template< class _Tp, class ..._Types> 
# 1943
struct __strictest_alignment< _Tp, _Types...>  { 
# 1945
static const size_t _S_alignment = ((__alignof__(_Tp) > __strictest_alignment< _Types...> ::_S_alignment) ? __alignof__(_Tp) : __strictest_alignment< _Types...> ::_S_alignment); 
# 1948
static const size_t _S_size = ((sizeof(_Tp) > __strictest_alignment< _Types...> ::_S_size) ? sizeof(_Tp) : __strictest_alignment< _Types...> ::_S_size); 
# 1951
}; 
# 1963 "/usr/include/c++/9/type_traits" 3
template< size_t _Len, class ..._Types> 
# 1964
struct aligned_union { 
# 1967
static_assert((sizeof...(_Types) != (0)), "At least one type is required");
# 1969
private: using __strictest = __strictest_alignment< _Types...> ; 
# 1970
static const size_t _S_len = ((_Len > __strictest::_S_size) ? _Len : __strictest::_S_size); 
# 1974
public: static const size_t alignment_value = (__strictest::_S_alignment); 
# 1976
typedef typename aligned_storage< _S_len, alignment_value> ::type type; 
# 1977
}; 
# 1979
template< size_t _Len, class ..._Types> const size_t aligned_union< _Len, _Types...> ::alignment_value; 
# 1984
template< class _Up, bool 
# 1985
_IsArray = is_array< _Up> ::value, bool 
# 1986
_IsFunction = is_function< _Up> ::value> struct __decay_selector; 
# 1990
template< class _Up> 
# 1991
struct __decay_selector< _Up, false, false>  { 
# 1992
typedef typename remove_cv< _Up> ::type __type; }; 
# 1994
template< class _Up> 
# 1995
struct __decay_selector< _Up, true, false>  { 
# 1996
typedef typename remove_extent< _Up> ::type *__type; }; 
# 1998
template< class _Up> 
# 1999
struct __decay_selector< _Up, false, true>  { 
# 2000
typedef typename add_pointer< _Up> ::type __type; }; 
# 2003
template< class _Tp> 
# 2004
class decay { 
# 2006
typedef typename remove_reference< _Tp> ::type __remove_type; 
# 2009
public: typedef typename __decay_selector< __remove_type> ::__type type; 
# 2010
}; 
# 2012
template< class _Tp> class reference_wrapper; 
# 2016
template< class _Tp> 
# 2017
struct __strip_reference_wrapper { 
# 2019
typedef _Tp __type; 
# 2020
}; 
# 2022
template< class _Tp> 
# 2023
struct __strip_reference_wrapper< reference_wrapper< _Tp> >  { 
# 2025
typedef _Tp &__type; 
# 2026
}; 
# 2028
template< class _Tp> 
# 2029
struct __decay_and_strip { 
# 2032
typedef typename __strip_reference_wrapper< typename decay< _Tp> ::type> ::__type __type; 
# 2033
}; 
# 2038
template< bool , class _Tp = void> 
# 2039
struct enable_if { 
# 2040
}; 
# 2043
template< class _Tp> 
# 2044
struct enable_if< true, _Tp>  { 
# 2045
typedef _Tp type; }; 
# 2047
template< class ..._Cond> using _Require = typename enable_if< __and_< _Cond...> ::value> ::type; 
# 2052
template< bool _Cond, class _Iftrue, class _Iffalse> 
# 2053
struct conditional { 
# 2054
typedef _Iftrue type; }; 
# 2057
template< class _Iftrue, class _Iffalse> 
# 2058
struct conditional< false, _Iftrue, _Iffalse>  { 
# 2059
typedef _Iffalse type; }; 
# 2062
template< class ..._Tp> struct common_type; 
# 2067
struct __do_common_type_impl { 
# 2069
template< class _Tp, class _Up> static __success_type< typename decay< __decltype((true ? std::declval< _Tp> () : std::declval< _Up> ()))> ::type>  _S_test(int); 
# 2074
template< class , class > static __failure_type _S_test(...); 
# 2076
}; 
# 2078
template< class _Tp, class _Up> 
# 2079
struct __common_type_impl : private __do_common_type_impl { 
# 2082
typedef __decltype((_S_test< _Tp, _Up> (0))) type; 
# 2083
}; 
# 2085
struct __do_member_type_wrapper { 
# 2087
template< class _Tp> static __success_type< typename _Tp::type>  _S_test(int); 
# 2090
template< class > static __failure_type _S_test(...); 
# 2092
}; 
# 2094
template< class _Tp> 
# 2095
struct __member_type_wrapper : private __do_member_type_wrapper { 
# 2098
typedef __decltype((_S_test< _Tp> (0))) type; 
# 2099
}; 
# 2101
template< class _CTp, class ..._Args> 
# 2102
struct __expanded_common_type_wrapper { 
# 2104
typedef common_type< typename _CTp::type, _Args...>  type; 
# 2105
}; 
# 2107
template< class ..._Args> 
# 2108
struct __expanded_common_type_wrapper< __failure_type, _Args...>  { 
# 2109
typedef __failure_type type; }; 
# 2112
template<> struct common_type< >  { 
# 2113
}; 
# 2115
template< class _Tp> 
# 2116
struct common_type< _Tp>  : public std::common_type< _Tp, _Tp>  { 
# 2118
}; 
# 2120
template< class _Tp, class _Up> 
# 2121
struct common_type< _Tp, _Up>  : public __common_type_impl< _Tp, _Up> ::type { 
# 2123
}; 
# 2125
template< class _Tp, class _Up, class ..._Vp> 
# 2126
struct common_type< _Tp, _Up, _Vp...>  : public __expanded_common_type_wrapper< typename __member_type_wrapper< std::common_type< _Tp, _Up> > ::type, _Vp...> ::type { 
# 2129
}; 
# 2131
template< class _Tp, bool  = is_enum< _Tp> ::value> 
# 2132
struct __underlying_type_impl { 
# 2134
using type = __underlying_type(_Tp); 
# 2135
}; 
# 2137
template< class _Tp> 
# 2138
struct __underlying_type_impl< _Tp, false>  { 
# 2139
}; 
# 2142
template< class _Tp> 
# 2143
struct underlying_type : public __underlying_type_impl< _Tp>  { 
# 2145
}; 
# 2147
template< class _Tp> 
# 2148
struct __declval_protector { 
# 2150
static const bool __stop = false; 
# 2151
}; 
# 2153
template< class _Tp> auto 
# 2154
declval() noexcept->__decltype((__declval< _Tp> (0))) 
# 2155
{ 
# 2156
static_assert((__declval_protector< _Tp> ::__stop), "declval() must not be used!");
# 2158
return __declval< _Tp> (0); 
# 2159
} 
# 2162
template< class _Tp> using __remove_cvref_t = typename remove_cv< typename remove_reference< _Tp> ::type> ::type; 
# 2167
template< class _Signature> class result_of; 
# 2174
struct __invoke_memfun_ref { }; 
# 2175
struct __invoke_memfun_deref { }; 
# 2176
struct __invoke_memobj_ref { }; 
# 2177
struct __invoke_memobj_deref { }; 
# 2178
struct __invoke_other { }; 
# 2181
template< class _Tp, class _Tag> 
# 2182
struct __result_of_success : public __success_type< _Tp>  { 
# 2183
using __invoke_type = _Tag; }; 
# 2186
struct __result_of_memfun_ref_impl { 
# 2188
template< class _Fp, class _Tp1, class ..._Args> static __result_of_success< __decltype(((std::declval< _Tp1> ().*std::declval< _Fp> ())(std::declval< _Args> ()...))), __invoke_memfun_ref>  _S_test(int); 
# 2193
template< class ...> static __failure_type _S_test(...); 
# 2195
}; 
# 2197
template< class _MemPtr, class _Arg, class ..._Args> 
# 2198
struct __result_of_memfun_ref : private __result_of_memfun_ref_impl { 
# 2201
typedef __decltype((_S_test< _MemPtr, _Arg, _Args...> (0))) type; 
# 2202
}; 
# 2205
struct __result_of_memfun_deref_impl { 
# 2207
template< class _Fp, class _Tp1, class ..._Args> static __result_of_success< __decltype((((*std::declval< _Tp1> ()).*std::declval< _Fp> ())(std::declval< _Args> ()...))), __invoke_memfun_deref>  _S_test(int); 
# 2212
template< class ...> static __failure_type _S_test(...); 
# 2214
}; 
# 2216
template< class _MemPtr, class _Arg, class ..._Args> 
# 2217
struct __result_of_memfun_deref : private __result_of_memfun_deref_impl { 
# 2220
typedef __decltype((_S_test< _MemPtr, _Arg, _Args...> (0))) type; 
# 2221
}; 
# 2224
struct __result_of_memobj_ref_impl { 
# 2226
template< class _Fp, class _Tp1> static __result_of_success< __decltype((std::declval< _Tp1> ().*std::declval< _Fp> ())), __invoke_memobj_ref>  _S_test(int); 
# 2231
template< class , class > static __failure_type _S_test(...); 
# 2233
}; 
# 2235
template< class _MemPtr, class _Arg> 
# 2236
struct __result_of_memobj_ref : private __result_of_memobj_ref_impl { 
# 2239
typedef __decltype((_S_test< _MemPtr, _Arg> (0))) type; 
# 2240
}; 
# 2243
struct __result_of_memobj_deref_impl { 
# 2245
template< class _Fp, class _Tp1> static __result_of_success< __decltype(((*std::declval< _Tp1> ()).*std::declval< _Fp> ())), __invoke_memobj_deref>  _S_test(int); 
# 2250
template< class , class > static __failure_type _S_test(...); 
# 2252
}; 
# 2254
template< class _MemPtr, class _Arg> 
# 2255
struct __result_of_memobj_deref : private __result_of_memobj_deref_impl { 
# 2258
typedef __decltype((_S_test< _MemPtr, _Arg> (0))) type; 
# 2259
}; 
# 2261
template< class _MemPtr, class _Arg> struct __result_of_memobj; 
# 2264
template< class _Res, class _Class, class _Arg> 
# 2265
struct __result_of_memobj< _Res (_Class::*), _Arg>  { 
# 2267
typedef __remove_cvref_t< _Arg>  _Argval; 
# 2268
typedef _Res (_Class::*_MemPtr); 
# 2273
typedef typename conditional< __or_< is_same< _Argval, _Class> , is_base_of< _Class, _Argval> > ::value, __result_of_memobj_ref< _MemPtr, _Arg> , __result_of_memobj_deref< _MemPtr, _Arg> > ::type::type type; 
# 2274
}; 
# 2276
template< class _MemPtr, class _Arg, class ..._Args> struct __result_of_memfun; 
# 2279
template< class _Res, class _Class, class _Arg, class ..._Args> 
# 2280
struct __result_of_memfun< _Res (_Class::*), _Arg, _Args...>  { 
# 2282
typedef typename remove_reference< _Arg> ::type _Argval; 
# 2283
typedef _Res (_Class::*_MemPtr); 
# 2287
typedef typename conditional< is_base_of< _Class, _Argval> ::value, __result_of_memfun_ref< _MemPtr, _Arg, _Args...> , __result_of_memfun_deref< _MemPtr, _Arg, _Args...> > ::type::type type; 
# 2288
}; 
# 2295
template< class _Tp, class _Up = __remove_cvref_t< _Tp> > 
# 2296
struct __inv_unwrap { 
# 2298
using type = _Tp; 
# 2299
}; 
# 2301
template< class _Tp, class _Up> 
# 2302
struct __inv_unwrap< _Tp, reference_wrapper< _Up> >  { 
# 2304
using type = _Up &; 
# 2305
}; 
# 2307
template< bool , bool , class _Functor, class ..._ArgTypes> 
# 2308
struct __result_of_impl { 
# 2310
typedef __failure_type type; 
# 2311
}; 
# 2313
template< class _MemPtr, class _Arg> 
# 2314
struct __result_of_impl< true, false, _MemPtr, _Arg>  : public __result_of_memobj< typename decay< _MemPtr> ::type, typename __inv_unwrap< _Arg> ::type>  { 
# 2317
}; 
# 2319
template< class _MemPtr, class _Arg, class ..._Args> 
# 2320
struct __result_of_impl< false, true, _MemPtr, _Arg, _Args...>  : public __result_of_memfun< typename decay< _MemPtr> ::type, typename __inv_unwrap< _Arg> ::type, _Args...>  { 
# 2323
}; 
# 2326
struct __result_of_other_impl { 
# 2328
template< class _Fn, class ..._Args> static __result_of_success< __decltype((std::declval< _Fn> ()(std::declval< _Args> ()...))), __invoke_other>  _S_test(int); 
# 2333
template< class ...> static __failure_type _S_test(...); 
# 2335
}; 
# 2337
template< class _Functor, class ..._ArgTypes> 
# 2338
struct __result_of_impl< false, false, _Functor, _ArgTypes...>  : private __result_of_other_impl { 
# 2341
typedef __decltype((_S_test< _Functor, _ArgTypes...> (0))) type; 
# 2342
}; 
# 2345
template< class _Functor, class ..._ArgTypes> 
# 2346
struct __invoke_result : public __result_of_impl< is_member_object_pointer< typename remove_reference< _Functor> ::type> ::value, is_member_function_pointer< typename remove_reference< _Functor> ::type> ::value, _Functor, _ArgTypes...> ::type { 
# 2356
}; 
# 2358
template< class _Functor, class ..._ArgTypes> 
# 2359
struct result_of< _Functor (_ArgTypes ...)>  : public __invoke_result< _Functor, _ArgTypes...>  { 
# 2361
}; 
# 2365
template< size_t _Len, size_t _Align = __alignof__(typename __aligned_storage_msa< _Len> ::__type)> using aligned_storage_t = typename aligned_storage< _Len, _Align> ::type; 
# 2369
template< size_t _Len, class ..._Types> using aligned_union_t = typename aligned_union< _Len, _Types...> ::type; 
# 2373
template< class _Tp> using decay_t = typename decay< _Tp> ::type; 
# 2377
template< bool _Cond, class _Tp = void> using enable_if_t = typename enable_if< _Cond, _Tp> ::type; 
# 2381
template< bool _Cond, class _Iftrue, class _Iffalse> using conditional_t = typename conditional< _Cond, _Iftrue, _Iffalse> ::type; 
# 2385
template< class ..._Tp> using common_type_t = typename common_type< _Tp...> ::type; 
# 2389
template< class _Tp> using underlying_type_t = typename underlying_type< _Tp> ::type; 
# 2393
template< class _Tp> using result_of_t = typename result_of< _Tp> ::type; 
# 2398
template< bool _Cond, class _Tp = void> using __enable_if_t = typename enable_if< _Cond, _Tp> ::type; 
# 2402
template< class ...> using __void_t = void; 
# 2407
template< class ...> using void_t = void; 
# 2411
template< class _Default, class _AlwaysVoid, 
# 2412
template< class ...>  class _Op, class ..._Args> 
# 2413
struct __detector { 
# 2415
using value_t = false_type; 
# 2416
using type = _Default; 
# 2417
}; 
# 2420
template< class _Default, template< class ...>  class _Op, class ...
# 2421
_Args> 
# 2422
struct __detector< _Default, __void_t< _Op< _Args...> > , _Op, _Args...>  { 
# 2424
using value_t = true_type; 
# 2425
using type = _Op< _Args...> ; 
# 2426
}; 
# 2429
template< class _Default, template< class ...>  class _Op, class ...
# 2430
_Args> using __detected_or = __detector< _Default, void, _Op, _Args...> ; 
# 2434
template< class _Default, template< class ...>  class _Op, class ...
# 2435
_Args> using __detected_or_t = typename __detected_or< _Default, _Op, _Args...> ::type; 
# 2455 "/usr/include/c++/9/type_traits" 3
template< class _Tp> struct __is_swappable; 
# 2458
template< class _Tp> struct __is_nothrow_swappable; 
# 2461
template< class ..._Elements> class tuple; 
# 2464
template< class > 
# 2465
struct __is_tuple_like_impl : public false_type { 
# 2466
}; 
# 2468
template< class ..._Tps> 
# 2469
struct __is_tuple_like_impl< tuple< _Tps...> >  : public true_type { 
# 2470
}; 
# 2473
template< class _Tp> 
# 2474
struct __is_tuple_like : public __is_tuple_like_impl< __remove_cvref_t< _Tp> > ::type { 
# 2476
}; 
# 2478
template< class _Tp> inline typename enable_if< __and_< __not_< __is_tuple_like< _Tp> > , is_move_constructible< _Tp> , is_move_assignable< _Tp> > ::value> ::type swap(_Tp &, _Tp &) noexcept(__and_< is_nothrow_move_constructible< _Tp> , is_nothrow_move_assignable< _Tp> > ::value); 
# 2487
template< class _Tp, size_t _Nm> inline typename enable_if< __is_swappable< _Tp> ::value> ::type swap(_Tp (& __a)[_Nm], _Tp (& __b)[_Nm]) noexcept(__is_nothrow_swappable< _Tp> ::value); 
# 2493
namespace __swappable_details { 
# 2494
using std::swap;
# 2496
struct __do_is_swappable_impl { 
# 2498
template< class _Tp, class 
# 2499
 = __decltype((swap(std::declval< _Tp &> (), std::declval< _Tp &> ())))> static true_type 
# 2498
__test(int); 
# 2502
template< class > static false_type __test(...); 
# 2504
}; 
# 2506
struct __do_is_nothrow_swappable_impl { 
# 2508
template< class _Tp> static __bool_constant< noexcept(swap(std::declval< _Tp &> (), std::declval< _Tp &> ()))>  __test(int); 
# 2513
template< class > static false_type __test(...); 
# 2515
}; 
# 2517
}
# 2519
template< class _Tp> 
# 2520
struct __is_swappable_impl : public __swappable_details::__do_is_swappable_impl { 
# 2523
typedef __decltype((__test< _Tp> (0))) type; 
# 2524
}; 
# 2526
template< class _Tp> 
# 2527
struct __is_nothrow_swappable_impl : public __swappable_details::__do_is_nothrow_swappable_impl { 
# 2530
typedef __decltype((__test< _Tp> (0))) type; 
# 2531
}; 
# 2533
template< class _Tp> 
# 2534
struct __is_swappable : public __is_swappable_impl< _Tp> ::type { 
# 2536
}; 
# 2538
template< class _Tp> 
# 2539
struct __is_nothrow_swappable : public __is_nothrow_swappable_impl< _Tp> ::type { 
# 2541
}; 
# 2548
template< class _Tp> 
# 2549
struct is_swappable : public __is_swappable_impl< _Tp> ::type { 
# 2551
}; 
# 2554
template< class _Tp> 
# 2555
struct is_nothrow_swappable : public __is_nothrow_swappable_impl< _Tp> ::type { 
# 2557
}; 
# 2561
template< class _Tp> constexpr bool 
# 2562
is_swappable_v = (is_swappable< _Tp> ::value); 
# 2566
template< class _Tp> constexpr bool 
# 2567
is_nothrow_swappable_v = (is_nothrow_swappable< _Tp> ::value); 
# 2571
namespace __swappable_with_details { 
# 2572
using std::swap;
# 2574
struct __do_is_swappable_with_impl { 
# 2576
template< class _Tp, class _Up, class 
# 2577
 = __decltype((swap(std::declval< _Tp> (), std::declval< _Up> ()))), class 
# 2579
 = __decltype((swap(std::declval< _Up> (), std::declval< _Tp> ())))> static true_type 
# 2576
__test(int); 
# 2582
template< class , class > static false_type __test(...); 
# 2584
}; 
# 2586
struct __do_is_nothrow_swappable_with_impl { 
# 2588
template< class _Tp, class _Up> static __bool_constant< noexcept(swap(std::declval< _Tp> (), std::declval< _Up> ())) && noexcept(swap(std::declval< _Up> (), std::declval< _Tp> ()))>  __test(int); 
# 2595
template< class , class > static false_type __test(...); 
# 2597
}; 
# 2599
}
# 2601
template< class _Tp, class _Up> 
# 2602
struct __is_swappable_with_impl : public __swappable_with_details::__do_is_swappable_with_impl { 
# 2605
typedef __decltype((__test< _Tp, _Up> (0))) type; 
# 2606
}; 
# 2609
template< class _Tp> 
# 2610
struct __is_swappable_with_impl< _Tp &, _Tp &>  : public __swappable_details::__do_is_swappable_impl { 
# 2613
typedef __decltype((__test< _Tp &> (0))) type; 
# 2614
}; 
# 2616
template< class _Tp, class _Up> 
# 2617
struct __is_nothrow_swappable_with_impl : public __swappable_with_details::__do_is_nothrow_swappable_with_impl { 
# 2620
typedef __decltype((__test< _Tp, _Up> (0))) type; 
# 2621
}; 
# 2624
template< class _Tp> 
# 2625
struct __is_nothrow_swappable_with_impl< _Tp &, _Tp &>  : public __swappable_details::__do_is_nothrow_swappable_impl { 
# 2628
typedef __decltype((__test< _Tp &> (0))) type; 
# 2629
}; 
# 2632
template< class _Tp, class _Up> 
# 2633
struct is_swappable_with : public __is_swappable_with_impl< _Tp, _Up> ::type { 
# 2635
}; 
# 2638
template< class _Tp, class _Up> 
# 2639
struct is_nothrow_swappable_with : public __is_nothrow_swappable_with_impl< _Tp, _Up> ::type { 
# 2641
}; 
# 2645
template< class _Tp, class _Up> constexpr bool 
# 2646
is_swappable_with_v = (is_swappable_with< _Tp, _Up> ::value); 
# 2650
template< class _Tp, class _Up> constexpr bool 
# 2651
is_nothrow_swappable_with_v = (is_nothrow_swappable_with< _Tp, _Up> ::value); 
# 2660
template< class _Result, class _Ret, bool 
# 2661
 = is_void< _Ret> ::value, class  = void> 
# 2662
struct __is_invocable_impl : public false_type { }; 
# 2665
template< class _Result, class _Ret> 
# 2666
struct __is_invocable_impl< _Result, _Ret, true, __void_t< typename _Result::type> >  : public true_type { 
# 2670
}; 
# 2672
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
# 2675
template< class _Result, class _Ret> 
# 2676
struct __is_invocable_impl< _Result, _Ret, false, __void_t< typename _Result::type> >  { 
# 2683
private: static typename _Result::type _S_get(); 
# 2685
template< class _Tp> static void _S_conv(_Tp); 
# 2689
template< class _Tp, class  = __decltype((_S_conv< _Tp> ((_S_get)())))> static true_type _S_test(int); 
# 2693
template< class _Tp> static false_type _S_test(...); 
# 2698
public: using type = __decltype((_S_test< _Ret> (1))); 
# 2699
}; 
#pragma GCC diagnostic pop
# 2702
template< class _Fn, class ..._ArgTypes> 
# 2703
struct __is_invocable : public __is_invocable_impl< __invoke_result< _Fn, _ArgTypes...> , void> ::type { 
# 2705
}; 
# 2707
template< class _Fn, class _Tp, class ..._Args> constexpr bool 
# 2708
__call_is_nt(__invoke_memfun_ref) 
# 2709
{ 
# 2710
using _Up = typename __inv_unwrap< _Tp> ::type; 
# 2711
return noexcept((std::declval< typename __inv_unwrap< _Tp> ::type> ().*std::declval< _Fn> ())(std::declval< _Args> ()...)); 
# 2713
} 
# 2715
template< class _Fn, class _Tp, class ..._Args> constexpr bool 
# 2716
__call_is_nt(__invoke_memfun_deref) 
# 2717
{ 
# 2718
return noexcept(((*std::declval< _Tp> ()).*std::declval< _Fn> ())(std::declval< _Args> ()...)); 
# 2720
} 
# 2722
template< class _Fn, class _Tp> constexpr bool 
# 2723
__call_is_nt(__invoke_memobj_ref) 
# 2724
{ 
# 2725
using _Up = typename __inv_unwrap< _Tp> ::type; 
# 2726
return noexcept((std::declval< typename __inv_unwrap< _Tp> ::type> ().*std::declval< _Fn> ())); 
# 2727
} 
# 2729
template< class _Fn, class _Tp> constexpr bool 
# 2730
__call_is_nt(__invoke_memobj_deref) 
# 2731
{ 
# 2732
return noexcept(((*std::declval< _Tp> ()).*std::declval< _Fn> ())); 
# 2733
} 
# 2735
template< class _Fn, class ..._Args> constexpr bool 
# 2736
__call_is_nt(__invoke_other) 
# 2737
{ 
# 2738
return noexcept(std::declval< _Fn> ()(std::declval< _Args> ()...)); 
# 2739
} 
# 2741
template< class _Result, class _Fn, class ..._Args> 
# 2742
struct __call_is_nothrow : public __bool_constant< std::__call_is_nt< _Fn, _Args...> (typename _Result::__invoke_type{})>  { 
# 2746
}; 
# 2748
template< class _Fn, class ..._Args> using __call_is_nothrow_ = __call_is_nothrow< __invoke_result< _Fn, _Args...> , _Fn, _Args...> ; 
# 2753
template< class _Fn, class ..._Args> 
# 2754
struct __is_nothrow_invocable : public __and_< __is_invocable< _Fn, _Args...> , __call_is_nothrow_< _Fn, _Args...> > ::type { 
# 2757
}; 
# 2759
struct __nonesuch { 
# 2760
__nonesuch() = delete;
# 2761
~__nonesuch() = delete;
# 2762
__nonesuch(const __nonesuch &) = delete;
# 2763
void operator=(const __nonesuch &) = delete;
# 2764
}; 
# 3097 "/usr/include/c++/9/type_traits" 3
}
# 57 "/usr/include/c++/9/bits/move.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 72 "/usr/include/c++/9/bits/move.h" 3
template< class _Tp> constexpr _Tp &&
# 74
forward(typename remove_reference< _Tp> ::type &__t) noexcept 
# 75
{ return static_cast< _Tp &&>(__t); } 
# 83
template< class _Tp> constexpr _Tp &&
# 85
forward(typename remove_reference< _Tp> ::type &&__t) noexcept 
# 86
{ 
# 87
static_assert((!std::template is_lvalue_reference< _Tp> ::value), "template argument substituting _Tp is an lvalue reference type");
# 89
return static_cast< _Tp &&>(__t); 
# 90
} 
# 97
template< class _Tp> constexpr typename remove_reference< _Tp> ::type &&
# 99
move(_Tp &&__t) noexcept 
# 100
{ return static_cast< typename remove_reference< _Tp> ::type &&>(__t); } 
# 103
template< class _Tp> 
# 104
struct __move_if_noexcept_cond : public __and_< __not_< is_nothrow_move_constructible< _Tp> > , is_copy_constructible< _Tp> > ::type { 
# 106
}; 
# 116 "/usr/include/c++/9/bits/move.h" 3
template< class _Tp> constexpr typename conditional< __move_if_noexcept_cond< _Tp> ::value, const _Tp &, _Tp &&> ::type 
# 119
move_if_noexcept(_Tp &__x) noexcept 
# 120
{ return std::move(__x); } 
# 136 "/usr/include/c++/9/bits/move.h" 3
template< class _Tp> inline _Tp *
# 138
addressof(_Tp &__r) noexcept 
# 139
{ return std::__addressof(__r); } 
# 143
template < typename _Tp >
    const _Tp * addressof ( const _Tp && ) = delete;
# 147
template< class _Tp, class _Up = _Tp> inline _Tp 
# 149
__exchange(_Tp &__obj, _Up &&__new_val) 
# 150
{ 
# 151
_Tp __old_val = std::move(__obj); 
# 152
__obj = std::forward< _Up> (__new_val); 
# 153
return __old_val; 
# 154
} 
# 176 "/usr/include/c++/9/bits/move.h" 3
template< class _Tp> inline typename enable_if< __and_< __not_< __is_tuple_like< _Tp> > , is_move_constructible< _Tp> , is_move_assignable< _Tp> > ::value> ::type 
# 182
swap(_Tp &__a, _Tp &__b) noexcept(__and_< is_nothrow_move_constructible< _Tp> , is_nothrow_move_assignable< _Tp> > ::value) 
# 189
{ 
# 193
_Tp __tmp = std::move(__a); 
# 194
__a = std::move(__b); 
# 195
__b = std::move(__tmp); 
# 196
} 
# 201
template< class _Tp, size_t _Nm> inline typename enable_if< __is_swappable< _Tp> ::value> ::type 
# 205
swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm]) noexcept(__is_nothrow_swappable< _Tp> ::value) 
# 211
{ 
# 212
for (size_t __n = (0); __n < _Nm; ++__n) { 
# 213
swap(__a[__n], __b[__n]); }  
# 214
} 
# 218
}
# 65 "/usr/include/c++/9/bits/stl_pair.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 76 "/usr/include/c++/9/bits/stl_pair.h" 3
struct piecewise_construct_t { explicit piecewise_construct_t() = default;}; 
# 79
constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t(); 
# 83
template< class ...> class tuple; 
# 86
template< size_t ...> struct _Index_tuple; 
# 94
template< bool , class _T1, class _T2> 
# 95
struct _PCC { 
# 97
template< class _U1, class _U2> static constexpr bool 
# 98
_ConstructiblePair() 
# 99
{ 
# 100
return __and_< is_constructible< _T1, const _U1 &> , is_constructible< _T2, const _U2 &> > ::value; 
# 102
} 
# 104
template< class _U1, class _U2> static constexpr bool 
# 105
_ImplicitlyConvertiblePair() 
# 106
{ 
# 107
return __and_< is_convertible< const _U1 &, _T1> , is_convertible< const _U2 &, _T2> > ::value; 
# 109
} 
# 111
template< class _U1, class _U2> static constexpr bool 
# 112
_MoveConstructiblePair() 
# 113
{ 
# 114
return __and_< is_constructible< _T1, _U1 &&> , is_constructible< _T2, _U2 &&> > ::value; 
# 116
} 
# 118
template< class _U1, class _U2> static constexpr bool 
# 119
_ImplicitlyMoveConvertiblePair() 
# 120
{ 
# 121
return __and_< is_convertible< _U1 &&, _T1> , is_convertible< _U2 &&, _T2> > ::value; 
# 123
} 
# 125
template< bool __implicit, class _U1, class _U2> static constexpr bool 
# 126
_CopyMovePair() 
# 127
{ 
# 128
using __do_converts = __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > ; 
# 130
using __converts = typename conditional< __implicit, __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > , __not_< __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > > > ::type; 
# 133
return __and_< is_constructible< _T1, const _U1 &> , is_constructible< _T2, _U2 &&> , typename conditional< __implicit, __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > , __not_< __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > > > ::type> ::value; 
# 137
} 
# 139
template< bool __implicit, class _U1, class _U2> static constexpr bool 
# 140
_MoveCopyPair() 
# 141
{ 
# 142
using __do_converts = __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > ; 
# 144
using __converts = typename conditional< __implicit, __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > , __not_< __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > > > ::type; 
# 147
return __and_< is_constructible< _T1, _U1 &&> , is_constructible< _T2, const _U2 &&> , typename conditional< __implicit, __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > , __not_< __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > > > ::type> ::value; 
# 151
} 
# 152
}; 
# 154
template< class _T1, class _T2> 
# 155
struct _PCC< false, _T1, _T2>  { 
# 157
template< class _U1, class _U2> static constexpr bool 
# 158
_ConstructiblePair() 
# 159
{ 
# 160
return false; 
# 161
} 
# 163
template< class _U1, class _U2> static constexpr bool 
# 164
_ImplicitlyConvertiblePair() 
# 165
{ 
# 166
return false; 
# 167
} 
# 169
template< class _U1, class _U2> static constexpr bool 
# 170
_MoveConstructiblePair() 
# 171
{ 
# 172
return false; 
# 173
} 
# 175
template< class _U1, class _U2> static constexpr bool 
# 176
_ImplicitlyMoveConvertiblePair() 
# 177
{ 
# 178
return false; 
# 179
} 
# 180
}; 
# 185
struct __nonesuch_no_braces : public __nonesuch { 
# 186
explicit __nonesuch_no_braces(const __nonesuch &) = delete;
# 187
}; 
# 190
template< class _U1, class _U2> class __pair_base { 
# 193
template< class _T1, class _T2> friend struct pair; 
# 194
__pair_base() = default;
# 195
~__pair_base() = default;
# 196
__pair_base(const __pair_base &) = default;
# 197
__pair_base &operator=(const __pair_base &) = delete;
# 199
}; 
# 207
template< class _T1, class _T2> 
# 208
struct pair : private __pair_base< _T1, _T2>  { 
# 211
typedef _T1 first_type; 
# 212
typedef _T2 second_type; 
# 214
_T1 first; 
# 215
_T2 second; 
# 222
template< class _U1 = _T1, class 
# 223
_U2 = _T2, typename enable_if< __and_< __is_implicitly_default_constructible< _U1> , __is_implicitly_default_constructible< _U2> > ::value, bool> ::type 
# 227
 = true> constexpr 
# 229
pair() : first(), second() 
# 230
{ } 
# 233
template< class _U1 = _T1, class 
# 234
_U2 = _T2, typename enable_if< __and_< is_default_constructible< _U1> , is_default_constructible< _U2> , __not_< __and_< __is_implicitly_default_constructible< _U1> , __is_implicitly_default_constructible< _U2> > > > ::value, bool> ::type 
# 241
 = false> constexpr explicit 
# 242
pair() : first(), second() 
# 243
{ } 
# 252 "/usr/include/c++/9/bits/stl_pair.h" 3
using _PCCP = _PCC< true, _T1, _T2> ; 
# 254
template< class _U1 = _T1, class _U2 = _T2, typename enable_if< _PCC< true, _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && _PCC< true, _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> (), bool> ::type 
# 259
 = true> constexpr 
# 260
pair(const _T1 &__a, const _T2 &__b) : first(__a), second(__b) 
# 261
{ } 
# 263
template< class _U1 = _T1, class _U2 = _T2, typename enable_if< _PCC< true, _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && (!_PCC< true, _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> ()), bool> ::type 
# 268
 = false> constexpr explicit 
# 269
pair(const _T1 &__a, const _T2 &__b) : first(__a), second(__b) 
# 270
{ } 
# 280 "/usr/include/c++/9/bits/stl_pair.h" 3
template< class _U1, class _U2> using _PCCFP = _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ; 
# 285
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> (), bool> ::type 
# 290
 = true> constexpr 
# 291
pair(const std::pair< _U1, _U2>  &__p) : first((__p.first)), second((__p.second)) 
# 292
{ } 
# 294
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && (!_PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> ()), bool> ::type 
# 299
 = false> constexpr explicit 
# 300
pair(const std::pair< _U1, _U2>  &__p) : first((__p.first)), second((__p.second)) 
# 301
{ } 
# 303
constexpr pair(const pair &) = default;
# 304
constexpr pair(pair &&) = default;
# 307
template< class _U1, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveCopyPair< true, _U1, _T2> (), bool> ::type 
# 310
 = true> constexpr 
# 311
pair(_U1 &&__x, const _T2 &__y) : first(std::forward< _U1> (__x)), second(__y) 
# 312
{ } 
# 314
template< class _U1, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveCopyPair< false, _U1, _T2> (), bool> ::type 
# 317
 = false> constexpr explicit 
# 318
pair(_U1 &&__x, const _T2 &__y) : first(std::forward< _U1> (__x)), second(__y) 
# 319
{ } 
# 321
template< class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _CopyMovePair< true, _T1, _U2> (), bool> ::type 
# 324
 = true> constexpr 
# 325
pair(const _T1 &__x, _U2 &&__y) : first(__x), second(std::forward< _U2> (__y)) 
# 326
{ } 
# 328
template< class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _CopyMovePair< false, _T1, _U2> (), bool> ::type 
# 331
 = false> explicit 
# 332
pair(const _T1 &__x, _U2 &&__y) : first(__x), second(std::forward< _U2> (__y)) 
# 333
{ } 
# 335
template< class _U1, class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && _PCC< true, _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> (), bool> ::type 
# 340
 = true> constexpr 
# 341
pair(_U1 &&__x, _U2 &&__y) : first(std::forward< _U1> (__x)), second(std::forward< _U2> (__y)) 
# 342
{ } 
# 344
template< class _U1, class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && (!_PCC< true, _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> ()), bool> ::type 
# 349
 = false> constexpr explicit 
# 350
pair(_U1 &&__x, _U2 &&__y) : first(std::forward< _U1> (__x)), second(std::forward< _U2> (__y)) 
# 351
{ } 
# 354
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> (), bool> ::type 
# 359
 = true> constexpr 
# 360
pair(std::pair< _U1, _U2>  &&__p) : first(std::forward< _U1> ((__p.first))), second(std::forward< _U2> ((__p.second))) 
# 362
{ } 
# 364
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && (!_PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> ()), bool> ::type 
# 369
 = false> constexpr explicit 
# 370
pair(std::pair< _U1, _U2>  &&__p) : first(std::forward< _U1> ((__p.first))), second(std::forward< _U2> ((__p.second))) 
# 372
{ } 
# 374
template< class ..._Args1, class ..._Args2> pair(std::piecewise_construct_t, tuple< _Args1...> , tuple< _Args2...> ); 
# 378
pair &operator=(typename conditional< __and_< is_copy_assignable< _T1> , is_copy_assignable< _T2> > ::value, const pair &, const std::__nonesuch_no_braces &> ::type 
# 381
__p) 
# 382
{ 
# 383
(first) = (__p.first); 
# 384
(second) = (__p.second); 
# 385
return *this; 
# 386
} 
# 389
pair &operator=(typename conditional< __and_< is_move_assignable< _T1> , is_move_assignable< _T2> > ::value, pair &&, std::__nonesuch_no_braces &&> ::type 
# 392
__p) noexcept(__and_< is_nothrow_move_assignable< _T1> , is_nothrow_move_assignable< _T2> > ::value) 
# 395
{ 
# 396
(first) = std::forward< first_type> ((__p.first)); 
# 397
(second) = std::forward< second_type> ((__p.second)); 
# 398
return *this; 
# 399
} 
# 401
template< class _U1, class _U2> typename enable_if< __and_< is_assignable< _T1 &, const _U1 &> , is_assignable< _T2 &, const _U2 &> > ::value, pair &> ::type 
# 405
operator=(const std::pair< _U1, _U2>  &__p) 
# 406
{ 
# 407
(first) = (__p.first); 
# 408
(second) = (__p.second); 
# 409
return *this; 
# 410
} 
# 412
template< class _U1, class _U2> typename enable_if< __and_< is_assignable< _T1 &, _U1 &&> , is_assignable< _T2 &, _U2 &&> > ::value, pair &> ::type 
# 416
operator=(std::pair< _U1, _U2>  &&__p) 
# 417
{ 
# 418
(first) = std::forward< _U1> ((__p.first)); 
# 419
(second) = std::forward< _U2> ((__p.second)); 
# 420
return *this; 
# 421
} 
# 424
void swap(pair &__p) noexcept(__and_< __is_nothrow_swappable< _T1> , __is_nothrow_swappable< _T2> > ::value) 
# 427
{ 
# 428
using std::swap;
# 429
swap(first, __p.first); 
# 430
swap(second, __p.second); 
# 431
} 
# 434
private: template< class ..._Args1, std::size_t ..._Indexes1, class ...
# 435
_Args2, std::size_t ..._Indexes2> 
# 434
pair(tuple< _Args1...>  &, tuple< _Args2...>  &, _Index_tuple< _Indexes1...> , _Index_tuple< _Indexes2...> ); 
# 439
}; 
# 446
template< class _T1, class _T2> constexpr bool 
# 448
operator==(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 449
{ return ((__x.first) == (__y.first)) && ((__x.second) == (__y.second)); } 
# 452
template< class _T1, class _T2> constexpr bool 
# 454
operator<(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 455
{ return ((__x.first) < (__y.first)) || ((!((__y.first) < (__x.first))) && ((__x.second) < (__y.second))); 
# 456
} 
# 459
template< class _T1, class _T2> constexpr bool 
# 461
operator!=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 462
{ return !(__x == __y); } 
# 465
template< class _T1, class _T2> constexpr bool 
# 467
operator>(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 468
{ return __y < __x; } 
# 471
template< class _T1, class _T2> constexpr bool 
# 473
operator<=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 474
{ return !(__y < __x); } 
# 477
template< class _T1, class _T2> constexpr bool 
# 479
operator>=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 480
{ return !(__x < __y); } 
# 486
template< class _T1, class _T2> inline typename enable_if< __and_< __is_swappable< _T1> , __is_swappable< _T2> > ::value> ::type 
# 495
swap(pair< _T1, _T2>  &__x, pair< _T1, _T2>  &__y) noexcept(noexcept(__x.swap(__y))) 
# 497
{ __x.swap(__y); } 
# 500
template < typename _T1, typename _T2 >
    typename enable_if < ! __and_ < __is_swappable < _T1 >,
          __is_swappable < _T2 > > :: value > :: type
    swap ( pair < _T1, _T2 > &, pair < _T1, _T2 > & ) = delete;
# 521 "/usr/include/c++/9/bits/stl_pair.h" 3
template< class _T1, class _T2> constexpr pair< typename __decay_and_strip< _T1> ::__type, typename __decay_and_strip< _T2> ::__type>  
# 524
make_pair(_T1 &&__x, _T2 &&__y) 
# 525
{ 
# 526
typedef typename __decay_and_strip< _T1> ::__type __ds_type1; 
# 527
typedef typename __decay_and_strip< _T2> ::__type __ds_type2; 
# 528
typedef pair< typename __decay_and_strip< _T1> ::__type, typename __decay_and_strip< _T2> ::__type>  __pair_type; 
# 529
return __pair_type(std::forward< _T1> (__x), std::forward< _T2> (__y)); 
# 530
} 
# 541 "/usr/include/c++/9/bits/stl_pair.h" 3
}
# 39 "/usr/include/c++/9/initializer_list" 3
#pragma GCC visibility push ( default )
# 43
namespace std { 
# 46
template< class _E> 
# 47
class initializer_list { 
# 50
public: typedef _E value_type; 
# 51
typedef const _E &reference; 
# 52
typedef const _E &const_reference; 
# 53
typedef size_t size_type; 
# 54
typedef const _E *iterator; 
# 55
typedef const _E *const_iterator; 
# 58
private: iterator _M_array; 
# 59
size_type _M_len; 
# 62
constexpr initializer_list(const_iterator __a, size_type __l) : _M_array(__a), _M_len(__l) 
# 63
{ } 
# 66
public: constexpr initializer_list() noexcept : _M_array((0)), _M_len((0)) 
# 67
{ } 
# 71
constexpr size_type size() const noexcept { return _M_len; } 
# 75
constexpr const_iterator begin() const noexcept { return _M_array; } 
# 79
constexpr const_iterator end() const noexcept { return begin() + size(); } 
# 80
}; 
# 87
template< class _Tp> constexpr const _Tp *
# 89
begin(initializer_list< _Tp>  __ils) noexcept 
# 90
{ return __ils.begin(); } 
# 97
template< class _Tp> constexpr const _Tp *
# 99
end(initializer_list< _Tp>  __ils) noexcept 
# 100
{ return __ils.end(); } 
# 101
}
# 103
#pragma GCC visibility pop
# 78 "/usr/include/c++/9/utility" 3
namespace std __attribute((__visibility__("default"))) { 
# 83
template< class _Tp> struct tuple_size; 
# 90
template< class _Tp, class 
# 91
_Up = typename remove_cv< _Tp> ::type, class 
# 92
 = typename enable_if< is_same< _Tp, _Up> ::value> ::type, size_t 
# 93
 = tuple_size< _Tp> ::value> using __enable_if_has_tuple_size = _Tp; 
# 96
template< class _Tp> 
# 97
struct tuple_size< const __enable_if_has_tuple_size< _Tp> >  : public std::tuple_size< _Tp>  { 
# 98
}; 
# 100
template< class _Tp> 
# 101
struct tuple_size< volatile __enable_if_has_tuple_size< _Tp> >  : public std::tuple_size< _Tp>  { 
# 102
}; 
# 104
template< class _Tp> 
# 105
struct tuple_size< const volatile __enable_if_has_tuple_size< _Tp> >  : public std::tuple_size< _Tp>  { 
# 106
}; 
# 109
template< size_t __i, class _Tp> struct tuple_element; 
# 113
template< size_t __i, class _Tp> using __tuple_element_t = typename tuple_element< __i, _Tp> ::type; 
# 116
template< size_t __i, class _Tp> 
# 117
struct tuple_element< __i, const _Tp>  { 
# 119
typedef typename add_const< __tuple_element_t< __i, _Tp> > ::type type; 
# 120
}; 
# 122
template< size_t __i, class _Tp> 
# 123
struct tuple_element< __i, volatile _Tp>  { 
# 125
typedef typename add_volatile< __tuple_element_t< __i, _Tp> > ::type type; 
# 126
}; 
# 128
template< size_t __i, class _Tp> 
# 129
struct tuple_element< __i, const volatile _Tp>  { 
# 131
typedef typename add_cv< __tuple_element_t< __i, _Tp> > ::type type; 
# 132
}; 
# 140
template< size_t __i, class _Tp> using tuple_element_t = typename tuple_element< __i, _Tp> ::type; 
# 147
template< class _T1, class _T2> 
# 148
struct __is_tuple_like_impl< pair< _T1, _T2> >  : public true_type { 
# 149
}; 
# 152
template< class _Tp1, class _Tp2> 
# 153
struct tuple_size< pair< _Tp1, _Tp2> >  : public integral_constant< unsigned long, 2UL>  { 
# 154
}; 
# 157
template< class _Tp1, class _Tp2> 
# 158
struct tuple_element< 0, pair< _Tp1, _Tp2> >  { 
# 159
typedef _Tp1 type; }; 
# 162
template< class _Tp1, class _Tp2> 
# 163
struct tuple_element< 1, pair< _Tp1, _Tp2> >  { 
# 164
typedef _Tp2 type; }; 
# 166
template< size_t _Int> struct __pair_get; 
# 170
template<> struct __pair_get< 0UL>  { 
# 172
template< class _Tp1, class _Tp2> static constexpr _Tp1 &
# 174
__get(pair< _Tp1, _Tp2>  &__pair) noexcept 
# 175
{ return __pair.first; } 
# 177
template< class _Tp1, class _Tp2> static constexpr _Tp1 &&
# 179
__move_get(pair< _Tp1, _Tp2>  &&__pair) noexcept 
# 180
{ return std::forward< _Tp1> ((__pair.first)); } 
# 182
template< class _Tp1, class _Tp2> static constexpr const _Tp1 &
# 184
__const_get(const pair< _Tp1, _Tp2>  &__pair) noexcept 
# 185
{ return __pair.first; } 
# 187
template< class _Tp1, class _Tp2> static constexpr const _Tp1 &&
# 189
__const_move_get(const pair< _Tp1, _Tp2>  &&__pair) noexcept 
# 190
{ return std::forward< const _Tp1> ((__pair.first)); } 
# 191
}; 
# 194
template<> struct __pair_get< 1UL>  { 
# 196
template< class _Tp1, class _Tp2> static constexpr _Tp2 &
# 198
__get(pair< _Tp1, _Tp2>  &__pair) noexcept 
# 199
{ return __pair.second; } 
# 201
template< class _Tp1, class _Tp2> static constexpr _Tp2 &&
# 203
__move_get(pair< _Tp1, _Tp2>  &&__pair) noexcept 
# 204
{ return std::forward< _Tp2> ((__pair.second)); } 
# 206
template< class _Tp1, class _Tp2> static constexpr const _Tp2 &
# 208
__const_get(const pair< _Tp1, _Tp2>  &__pair) noexcept 
# 209
{ return __pair.second; } 
# 211
template< class _Tp1, class _Tp2> static constexpr const _Tp2 &&
# 213
__const_move_get(const pair< _Tp1, _Tp2>  &&__pair) noexcept 
# 214
{ return std::forward< const _Tp2> ((__pair.second)); } 
# 215
}; 
# 217
template< size_t _Int, class _Tp1, class _Tp2> constexpr typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &
# 219
get(pair< _Tp1, _Tp2>  &__in) noexcept 
# 220
{ return __pair_get< _Int> ::__get(__in); } 
# 222
template< size_t _Int, class _Tp1, class _Tp2> constexpr typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &&
# 224
get(pair< _Tp1, _Tp2>  &&__in) noexcept 
# 225
{ return __pair_get< _Int> ::__move_get(std::move(__in)); } 
# 227
template< size_t _Int, class _Tp1, class _Tp2> constexpr const typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &
# 229
get(const pair< _Tp1, _Tp2>  &__in) noexcept 
# 230
{ return __pair_get< _Int> ::__const_get(__in); } 
# 232
template< size_t _Int, class _Tp1, class _Tp2> constexpr const typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &&
# 234
get(const pair< _Tp1, _Tp2>  &&__in) noexcept 
# 235
{ return __pair_get< _Int> ::__const_move_get(std::move(__in)); } 
# 241
template< class _Tp, class _Up> constexpr _Tp &
# 243
get(pair< _Tp, _Up>  &__p) noexcept 
# 244
{ return __p.first; } 
# 246
template< class _Tp, class _Up> constexpr const _Tp &
# 248
get(const pair< _Tp, _Up>  &__p) noexcept 
# 249
{ return __p.first; } 
# 251
template< class _Tp, class _Up> constexpr _Tp &&
# 253
get(pair< _Tp, _Up>  &&__p) noexcept 
# 254
{ return std::move((__p.first)); } 
# 256
template< class _Tp, class _Up> constexpr const _Tp &&
# 258
get(const pair< _Tp, _Up>  &&__p) noexcept 
# 259
{ return std::move((__p.first)); } 
# 261
template< class _Tp, class _Up> constexpr _Tp &
# 263
get(pair< _Up, _Tp>  &__p) noexcept 
# 264
{ return __p.second; } 
# 266
template< class _Tp, class _Up> constexpr const _Tp &
# 268
get(const pair< _Up, _Tp>  &__p) noexcept 
# 269
{ return __p.second; } 
# 271
template< class _Tp, class _Up> constexpr _Tp &&
# 273
get(pair< _Up, _Tp>  &&__p) noexcept 
# 274
{ return std::move((__p.second)); } 
# 276
template< class _Tp, class _Up> constexpr const _Tp &&
# 278
get(const pair< _Up, _Tp>  &&__p) noexcept 
# 279
{ return std::move((__p.second)); } 
# 284
template< class _Tp, class _Up = _Tp> inline _Tp 
# 286
exchange(_Tp &__obj, _Up &&__new_val) 
# 287
{ return std::__exchange(__obj, std::forward< _Up> (__new_val)); } 
# 292
template< size_t ..._Indexes> struct _Index_tuple { }; 
# 301 "/usr/include/c++/9/utility" 3
template< size_t _Num> 
# 302
struct _Build_index_tuple { 
# 310
using __type = _Index_tuple< __integer_pack(_Num)...> ; 
# 312
}; 
# 319
template< class _Tp, _Tp ..._Idx> 
# 320
struct integer_sequence { 
# 322
typedef _Tp value_type; 
# 323
static constexpr size_t size() noexcept { return sizeof...(_Idx); } 
# 324
}; 
# 327
template< class _Tp, _Tp _Num> using make_integer_sequence = integer_sequence< _Tp, __integer_pack(_Num)...> ; 
# 338
template< size_t ..._Idx> using index_sequence = integer_sequence< unsigned long, _Idx...> ; 
# 342
template< size_t _Num> using make_index_sequence = make_integer_sequence< unsigned long, _Num> ; 
# 346
template< class ..._Types> using index_sequence_for = make_index_sequence< sizeof...(_Types)> ; 
# 397 "/usr/include/c++/9/utility" 3
}
# 206 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 207
cudaLaunchKernel(const T *
# 208
func, dim3 
# 209
gridDim, dim3 
# 210
blockDim, void **
# 211
args, size_t 
# 212
sharedMem = 0, cudaStream_t 
# 213
stream = 0) 
# 215
{ 
# 216
return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
# 217
} 
# 277 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class ...ExpTypes, class ...ActTypes> static inline cudaError_t 
# 278
cudaLaunchKernelEx(const cudaLaunchConfig_t *
# 279
config, void (*
# 280
kernel)(ExpTypes ...), ActTypes &&...
# 281
args) 
# 283
{ 
# 284
return [&](ExpTypes ...coercedArgs) { 
# 285
void *pArgs[] = {(&coercedArgs)...}; 
# 286
return ::cudaLaunchKernelExC(config, (const void *)(kernel), pArgs); 
# 287
} (std::forward< ActTypes> (args)...); 
# 288
} 
# 340 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 341
cudaLaunchCooperativeKernel(const T *
# 342
func, dim3 
# 343
gridDim, dim3 
# 344
blockDim, void **
# 345
args, size_t 
# 346
sharedMem = 0, cudaStream_t 
# 347
stream = 0) 
# 349
{ 
# 350
return ::cudaLaunchCooperativeKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
# 351
} 
# 384 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
static inline cudaError_t cudaEventCreate(cudaEvent_t *
# 385
event, unsigned 
# 386
flags) 
# 388
{ 
# 389
return ::cudaEventCreateWithFlags(event, flags); 
# 390
} 
# 428 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
static inline cudaError_t cudaGraphInstantiate(cudaGraphExec_t *
# 429
pGraphExec, cudaGraph_t 
# 430
graph, cudaGraphNode_t *
# 431
pErrorNode, char *
# 432
pLogBuffer, size_t 
# 433
bufferSize) 
# 435
{ 
# 436
(void)pErrorNode; 
# 437
(void)pLogBuffer; 
# 438
(void)bufferSize; 
# 439
return ::cudaGraphInstantiate(pGraphExec, graph, 0); 
# 440
} 
# 499 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
static inline cudaError_t cudaMallocHost(void **
# 500
ptr, size_t 
# 501
size, unsigned 
# 502
flags) 
# 504
{ 
# 505
return ::cudaHostAlloc(ptr, size, flags); 
# 506
} 
# 508
template< class T> static inline cudaError_t 
# 509
cudaHostAlloc(T **
# 510
ptr, size_t 
# 511
size, unsigned 
# 512
flags) 
# 514
{ 
# 515
return ::cudaHostAlloc((void **)((void *)ptr), size, flags); 
# 516
} 
# 518
template< class T> static inline cudaError_t 
# 519
cudaHostGetDevicePointer(T **
# 520
pDevice, void *
# 521
pHost, unsigned 
# 522
flags) 
# 524
{ 
# 525
return ::cudaHostGetDevicePointer((void **)((void *)pDevice), pHost, flags); 
# 526
} 
# 628 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 629
cudaMallocManaged(T **
# 630
devPtr, size_t 
# 631
size, unsigned 
# 632
flags = 1) 
# 634
{ 
# 635
return ::cudaMallocManaged((void **)((void *)devPtr), size, flags); 
# 636
} 
# 718 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 719
cudaStreamAttachMemAsync(cudaStream_t 
# 720
stream, T *
# 721
devPtr, size_t 
# 722
length = 0, unsigned 
# 723
flags = 4) 
# 725
{ 
# 726
return ::cudaStreamAttachMemAsync(stream, (void *)devPtr, length, flags); 
# 727
} 
# 729
template< class T> inline cudaError_t 
# 730
cudaMalloc(T **
# 731
devPtr, size_t 
# 732
size) 
# 734
{ 
# 735
return ::cudaMalloc((void **)((void *)devPtr), size); 
# 736
} 
# 738
template< class T> static inline cudaError_t 
# 739
cudaMallocHost(T **
# 740
ptr, size_t 
# 741
size, unsigned 
# 742
flags = 0) 
# 744
{ 
# 745
return cudaMallocHost((void **)((void *)ptr), size, flags); 
# 746
} 
# 748
template< class T> static inline cudaError_t 
# 749
cudaMallocPitch(T **
# 750
devPtr, size_t *
# 751
pitch, size_t 
# 752
width, size_t 
# 753
height) 
# 755
{ 
# 756
return ::cudaMallocPitch((void **)((void *)devPtr), pitch, width, height); 
# 757
} 
# 768 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
static inline cudaError_t cudaMallocAsync(void **
# 769
ptr, size_t 
# 770
size, cudaMemPool_t 
# 771
memPool, cudaStream_t 
# 772
stream) 
# 774
{ 
# 775
return ::cudaMallocFromPoolAsync(ptr, size, memPool, stream); 
# 776
} 
# 778
template< class T> static inline cudaError_t 
# 779
cudaMallocAsync(T **
# 780
ptr, size_t 
# 781
size, cudaMemPool_t 
# 782
memPool, cudaStream_t 
# 783
stream) 
# 785
{ 
# 786
return ::cudaMallocFromPoolAsync((void **)((void *)ptr), size, memPool, stream); 
# 787
} 
# 789
template< class T> static inline cudaError_t 
# 790
cudaMallocAsync(T **
# 791
ptr, size_t 
# 792
size, cudaStream_t 
# 793
stream) 
# 795
{ 
# 796
return ::cudaMallocAsync((void **)((void *)ptr), size, stream); 
# 797
} 
# 799
template< class T> static inline cudaError_t 
# 800
cudaMallocFromPoolAsync(T **
# 801
ptr, size_t 
# 802
size, cudaMemPool_t 
# 803
memPool, cudaStream_t 
# 804
stream) 
# 806
{ 
# 807
return ::cudaMallocFromPoolAsync((void **)((void *)ptr), size, memPool, stream); 
# 808
} 
# 847 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 848
cudaMemcpyToSymbol(const T &
# 849
symbol, const void *
# 850
src, size_t 
# 851
count, size_t 
# 852
offset = 0, cudaMemcpyKind 
# 853
kind = cudaMemcpyHostToDevice) 
# 855
{ 
# 856
return ::cudaMemcpyToSymbol((const void *)(&symbol), src, count, offset, kind); 
# 857
} 
# 901 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 902
cudaMemcpyToSymbolAsync(const T &
# 903
symbol, const void *
# 904
src, size_t 
# 905
count, size_t 
# 906
offset = 0, cudaMemcpyKind 
# 907
kind = cudaMemcpyHostToDevice, cudaStream_t 
# 908
stream = 0) 
# 910
{ 
# 911
return ::cudaMemcpyToSymbolAsync((const void *)(&symbol), src, count, offset, kind, stream); 
# 912
} 
# 949 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 950
cudaMemcpyFromSymbol(void *
# 951
dst, const T &
# 952
symbol, size_t 
# 953
count, size_t 
# 954
offset = 0, cudaMemcpyKind 
# 955
kind = cudaMemcpyDeviceToHost) 
# 957
{ 
# 958
return ::cudaMemcpyFromSymbol(dst, (const void *)(&symbol), count, offset, kind); 
# 959
} 
# 1003 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1004
cudaMemcpyFromSymbolAsync(void *
# 1005
dst, const T &
# 1006
symbol, size_t 
# 1007
count, size_t 
# 1008
offset = 0, cudaMemcpyKind 
# 1009
kind = cudaMemcpyDeviceToHost, cudaStream_t 
# 1010
stream = 0) 
# 1012
{ 
# 1013
return ::cudaMemcpyFromSymbolAsync(dst, (const void *)(&symbol), count, offset, kind, stream); 
# 1014
} 
# 1072 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1073
cudaGraphAddMemcpyNodeToSymbol(cudaGraphNode_t *
# 1074
pGraphNode, cudaGraph_t 
# 1075
graph, const cudaGraphNode_t *
# 1076
pDependencies, size_t 
# 1077
numDependencies, const T &
# 1078
symbol, const void *
# 1079
src, size_t 
# 1080
count, size_t 
# 1081
offset, cudaMemcpyKind 
# 1082
kind) 
# 1083
{ 
# 1084
return ::cudaGraphAddMemcpyNodeToSymbol(pGraphNode, graph, pDependencies, numDependencies, (const void *)(&symbol), src, count, offset, kind); 
# 1085
} 
# 1143 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1144
cudaGraphAddMemcpyNodeFromSymbol(cudaGraphNode_t *
# 1145
pGraphNode, cudaGraph_t 
# 1146
graph, const cudaGraphNode_t *
# 1147
pDependencies, size_t 
# 1148
numDependencies, void *
# 1149
dst, const T &
# 1150
symbol, size_t 
# 1151
count, size_t 
# 1152
offset, cudaMemcpyKind 
# 1153
kind) 
# 1154
{ 
# 1155
return ::cudaGraphAddMemcpyNodeFromSymbol(pGraphNode, graph, pDependencies, numDependencies, dst, (const void *)(&symbol), count, offset, kind); 
# 1156
} 
# 1194 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1195
cudaGraphMemcpyNodeSetParamsToSymbol(cudaGraphNode_t 
# 1196
node, const T &
# 1197
symbol, const void *
# 1198
src, size_t 
# 1199
count, size_t 
# 1200
offset, cudaMemcpyKind 
# 1201
kind) 
# 1202
{ 
# 1203
return ::cudaGraphMemcpyNodeSetParamsToSymbol(node, (const void *)(&symbol), src, count, offset, kind); 
# 1204
} 
# 1242 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1243
cudaGraphMemcpyNodeSetParamsFromSymbol(cudaGraphNode_t 
# 1244
node, void *
# 1245
dst, const T &
# 1246
symbol, size_t 
# 1247
count, size_t 
# 1248
offset, cudaMemcpyKind 
# 1249
kind) 
# 1250
{ 
# 1251
return ::cudaGraphMemcpyNodeSetParamsFromSymbol(node, dst, (const void *)(&symbol), count, offset, kind); 
# 1252
} 
# 1300 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1301
cudaGraphExecMemcpyNodeSetParamsToSymbol(cudaGraphExec_t 
# 1302
hGraphExec, cudaGraphNode_t 
# 1303
node, const T &
# 1304
symbol, const void *
# 1305
src, size_t 
# 1306
count, size_t 
# 1307
offset, cudaMemcpyKind 
# 1308
kind) 
# 1309
{ 
# 1310
return ::cudaGraphExecMemcpyNodeSetParamsToSymbol(hGraphExec, node, (const void *)(&symbol), src, count, offset, kind); 
# 1311
} 
# 1359 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1360
cudaGraphExecMemcpyNodeSetParamsFromSymbol(cudaGraphExec_t 
# 1361
hGraphExec, cudaGraphNode_t 
# 1362
node, void *
# 1363
dst, const T &
# 1364
symbol, size_t 
# 1365
count, size_t 
# 1366
offset, cudaMemcpyKind 
# 1367
kind) 
# 1368
{ 
# 1369
return ::cudaGraphExecMemcpyNodeSetParamsFromSymbol(hGraphExec, node, dst, (const void *)(&symbol), count, offset, kind); 
# 1370
} 
# 1373
static inline cudaError_t cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphNode_t *hErrorNode_out, cudaGraphExecUpdateResult *updateResult_out) 
# 1374
{ 
# 1375
cudaGraphExecUpdateResultInfo resultInfo; 
# 1376
cudaError_t status = cudaGraphExecUpdate(hGraphExec, hGraph, &resultInfo); 
# 1377
if (hErrorNode_out) { 
# 1378
(*hErrorNode_out) = (resultInfo.errorNode); 
# 1379
}  
# 1380
if (updateResult_out) { 
# 1381
(*updateResult_out) = (resultInfo.result); 
# 1382
}  
# 1383
return status; 
# 1384
} 
# 1412 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1413
cudaUserObjectCreate(cudaUserObject_t *
# 1414
object_out, T *
# 1415
objectToWrap, unsigned 
# 1416
initialRefcount, unsigned 
# 1417
flags) 
# 1418
{ 
# 1419
return ::cudaUserObjectCreate(object_out, objectToWrap, [](void *
# 1422
vpObj) { delete (reinterpret_cast< T *>(vpObj)); } , initialRefcount, flags); 
# 1425
} 
# 1427
template< class T> static inline cudaError_t 
# 1428
cudaUserObjectCreate(cudaUserObject_t *
# 1429
object_out, T *
# 1430
objectToWrap, unsigned 
# 1431
initialRefcount, cudaUserObjectFlags 
# 1432
flags) 
# 1433
{ 
# 1434
return cudaUserObjectCreate(object_out, objectToWrap, initialRefcount, (unsigned)flags); 
# 1435
} 
# 1462 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1463
cudaGetSymbolAddress(void **
# 1464
devPtr, const T &
# 1465
symbol) 
# 1467
{ 
# 1468
return ::cudaGetSymbolAddress(devPtr, (const void *)(&symbol)); 
# 1469
} 
# 1494 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1495
cudaGetSymbolSize(size_t *
# 1496
size, const T &
# 1497
symbol) 
# 1499
{ 
# 1500
return ::cudaGetSymbolSize(size, (const void *)(&symbol)); 
# 1501
} 
# 1546 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1547
cudaFuncSetCacheConfig(T *
# 1548
func, cudaFuncCache 
# 1549
cacheConfig) 
# 1551
{ 
# 1552
return ::cudaFuncSetCacheConfig((const void *)func, cacheConfig); 
# 1553
} 
# 1555
template< class T> static inline cudaError_t 
# 1556
cudaFuncSetSharedMemConfig(T *
# 1557
func, cudaSharedMemConfig 
# 1558
config) 
# 1560
{ 
# 1561
return ::cudaFuncSetSharedMemConfig((const void *)func, config); 
# 1562
} 
# 1594 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 1595
cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *
# 1596
numBlocks, T 
# 1597
func, int 
# 1598
blockSize, size_t 
# 1599
dynamicSMemSize) 
# 1600
{ 
# 1601
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, 0); 
# 1602
} 
# 1646 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 1647
cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *
# 1648
numBlocks, T 
# 1649
func, int 
# 1650
blockSize, size_t 
# 1651
dynamicSMemSize, unsigned 
# 1652
flags) 
# 1653
{ 
# 1654
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, flags); 
# 1655
} 
# 1660
class __cudaOccupancyB2DHelper { 
# 1661
size_t n; 
# 1663
public: __cudaOccupancyB2DHelper(size_t n_) : n(n_) { } 
# 1664
size_t operator()(int) 
# 1665
{ 
# 1666
return n; 
# 1667
} 
# 1668
}; 
# 1716 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class UnaryFunction, class T> static inline cudaError_t 
# 1717
cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(int *
# 1718
minGridSize, int *
# 1719
blockSize, T 
# 1720
func, UnaryFunction 
# 1721
blockSizeToDynamicSMemSize, int 
# 1722
blockSizeLimit = 0, unsigned 
# 1723
flags = 0) 
# 1724
{ 
# 1725
cudaError_t status; 
# 1728
int device; 
# 1729
cudaFuncAttributes attr; 
# 1732
int maxThreadsPerMultiProcessor; 
# 1733
int warpSize; 
# 1734
int devMaxThreadsPerBlock; 
# 1735
int multiProcessorCount; 
# 1736
int funcMaxThreadsPerBlock; 
# 1737
int occupancyLimit; 
# 1738
int granularity; 
# 1741
int maxBlockSize = 0; 
# 1742
int numBlocks = 0; 
# 1743
int maxOccupancy = 0; 
# 1746
int blockSizeToTryAligned; 
# 1747
int blockSizeToTry; 
# 1748
int blockSizeLimitAligned; 
# 1749
int occupancyInBlocks; 
# 1750
int occupancyInThreads; 
# 1751
size_t dynamicSMemSize; 
# 1757
if (((!minGridSize) || (!blockSize)) || (!func)) { 
# 1758
return cudaErrorInvalidValue; 
# 1759
}  
# 1765
status = ::cudaGetDevice(&device); 
# 1766
if (status != (cudaSuccess)) { 
# 1767
return status; 
# 1768
}  
# 1770
status = cudaDeviceGetAttribute(&maxThreadsPerMultiProcessor, cudaDevAttrMaxThreadsPerMultiProcessor, device); 
# 1774
if (status != (cudaSuccess)) { 
# 1775
return status; 
# 1776
}  
# 1778
status = cudaDeviceGetAttribute(&warpSize, cudaDevAttrWarpSize, device); 
# 1782
if (status != (cudaSuccess)) { 
# 1783
return status; 
# 1784
}  
# 1786
status = cudaDeviceGetAttribute(&devMaxThreadsPerBlock, cudaDevAttrMaxThreadsPerBlock, device); 
# 1790
if (status != (cudaSuccess)) { 
# 1791
return status; 
# 1792
}  
# 1794
status = cudaDeviceGetAttribute(&multiProcessorCount, cudaDevAttrMultiProcessorCount, device); 
# 1798
if (status != (cudaSuccess)) { 
# 1799
return status; 
# 1800
}  
# 1802
status = cudaFuncGetAttributes(&attr, func); 
# 1803
if (status != (cudaSuccess)) { 
# 1804
return status; 
# 1805
}  
# 1807
funcMaxThreadsPerBlock = (attr.maxThreadsPerBlock); 
# 1813
occupancyLimit = maxThreadsPerMultiProcessor; 
# 1814
granularity = warpSize; 
# 1816
if (blockSizeLimit == 0) { 
# 1817
blockSizeLimit = devMaxThreadsPerBlock; 
# 1818
}  
# 1820
if (devMaxThreadsPerBlock < blockSizeLimit) { 
# 1821
blockSizeLimit = devMaxThreadsPerBlock; 
# 1822
}  
# 1824
if (funcMaxThreadsPerBlock < blockSizeLimit) { 
# 1825
blockSizeLimit = funcMaxThreadsPerBlock; 
# 1826
}  
# 1828
blockSizeLimitAligned = (((blockSizeLimit + (granularity - 1)) / granularity) * granularity); 
# 1830
for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) { 
# 1834
if (blockSizeLimit < blockSizeToTryAligned) { 
# 1835
blockSizeToTry = blockSizeLimit; 
# 1836
} else { 
# 1837
blockSizeToTry = blockSizeToTryAligned; 
# 1838
}  
# 1840
dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry); 
# 1842
status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(&occupancyInBlocks, func, blockSizeToTry, dynamicSMemSize, flags); 
# 1849
if (status != (cudaSuccess)) { 
# 1850
return status; 
# 1851
}  
# 1853
occupancyInThreads = (blockSizeToTry * occupancyInBlocks); 
# 1855
if (occupancyInThreads > maxOccupancy) { 
# 1856
maxBlockSize = blockSizeToTry; 
# 1857
numBlocks = occupancyInBlocks; 
# 1858
maxOccupancy = occupancyInThreads; 
# 1859
}  
# 1863
if (occupancyLimit == maxOccupancy) { 
# 1864
break; 
# 1865
}  
# 1866
}  
# 1874
(*minGridSize) = (numBlocks * multiProcessorCount); 
# 1875
(*blockSize) = maxBlockSize; 
# 1877
return status; 
# 1878
} 
# 1912 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class UnaryFunction, class T> static inline cudaError_t 
# 1913
cudaOccupancyMaxPotentialBlockSizeVariableSMem(int *
# 1914
minGridSize, int *
# 1915
blockSize, T 
# 1916
func, UnaryFunction 
# 1917
blockSizeToDynamicSMemSize, int 
# 1918
blockSizeLimit = 0) 
# 1919
{ 
# 1920
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0); 
# 1921
} 
# 1958 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1959
cudaOccupancyMaxPotentialBlockSize(int *
# 1960
minGridSize, int *
# 1961
blockSize, T 
# 1962
func, size_t 
# 1963
dynamicSMemSize = 0, int 
# 1964
blockSizeLimit = 0) 
# 1965
{ 
# 1966
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, 0); 
# 1967
} 
# 1996 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1997
cudaOccupancyAvailableDynamicSMemPerBlock(size_t *
# 1998
dynamicSmemSize, T 
# 1999
func, int 
# 2000
numBlocks, int 
# 2001
blockSize) 
# 2002
{ 
# 2003
return ::cudaOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, (const void *)func, numBlocks, blockSize); 
# 2004
} 
# 2055 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 2056
cudaOccupancyMaxPotentialBlockSizeWithFlags(int *
# 2057
minGridSize, int *
# 2058
blockSize, T 
# 2059
func, size_t 
# 2060
dynamicSMemSize = 0, int 
# 2061
blockSizeLimit = 0, unsigned 
# 2062
flags = 0) 
# 2063
{ 
# 2064
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, flags); 
# 2065
} 
# 2099 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 2100
cudaOccupancyMaxPotentialClusterSize(int *
# 2101
clusterSize, T *
# 2102
func, const cudaLaunchConfig_t *
# 2103
config) 
# 2104
{ 
# 2105
return ::cudaOccupancyMaxPotentialClusterSize(clusterSize, (const void *)func, config); 
# 2106
} 
# 2142 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 2143
cudaOccupancyMaxActiveClusters(int *
# 2144
numClusters, T *
# 2145
func, const cudaLaunchConfig_t *
# 2146
config) 
# 2147
{ 
# 2148
return ::cudaOccupancyMaxActiveClusters(numClusters, (const void *)func, config); 
# 2149
} 
# 2182 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 2183
cudaFuncGetAttributes(cudaFuncAttributes *
# 2184
attr, T *
# 2185
entry) 
# 2187
{ 
# 2188
return ::cudaFuncGetAttributes(attr, (const void *)entry); 
# 2189
} 
# 2244 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 2245
cudaFuncSetAttribute(T *
# 2246
entry, cudaFuncAttribute 
# 2247
attr, int 
# 2248
value) 
# 2250
{ 
# 2251
return ::cudaFuncSetAttribute((const void *)entry, attr, value); 
# 2252
} 
# 2268 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 2269
cudaGetKernel(cudaKernel_t *
# 2270
kernelPtr, const T *
# 2271
entryFuncAddr) 
# 2273
{ 
# 2274
return ::cudaGetKernel(kernelPtr, (const void *)entryFuncAddr); 
# 2275
} 
# 2286 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
#pragma GCC diagnostic pop
# 42 "/usr/include/c++/9/bits/functexcept.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 48
void __throw_bad_exception() __attribute((__noreturn__)); 
# 52
void __throw_bad_alloc() __attribute((__noreturn__)); 
# 56
void __throw_bad_cast() __attribute((__noreturn__)); 
# 59
void __throw_bad_typeid() __attribute((__noreturn__)); 
# 63
void __throw_logic_error(const char *) __attribute((__noreturn__)); 
# 66
void __throw_domain_error(const char *) __attribute((__noreturn__)); 
# 69
void __throw_invalid_argument(const char *) __attribute((__noreturn__)); 
# 72
void __throw_length_error(const char *) __attribute((__noreturn__)); 
# 75
void __throw_out_of_range(const char *) __attribute((__noreturn__)); 
# 78
void __throw_out_of_range_fmt(const char *, ...) __attribute((__noreturn__))
# 79
 __attribute((__format__(__gnu_printf__, 1, 2))); 
# 82
void __throw_runtime_error(const char *) __attribute((__noreturn__)); 
# 85
void __throw_range_error(const char *) __attribute((__noreturn__)); 
# 88
void __throw_overflow_error(const char *) __attribute((__noreturn__)); 
# 91
void __throw_underflow_error(const char *) __attribute((__noreturn__)); 
# 95
void __throw_ios_failure(const char *) __attribute((__noreturn__)); 
# 98
void __throw_ios_failure(const char *, int) __attribute((__noreturn__)); 
# 102
void __throw_system_error(int) __attribute((__noreturn__)); 
# 106
void __throw_future_error(int) __attribute((__noreturn__)); 
# 110
void __throw_bad_function_call() __attribute((__noreturn__)); 
# 113
}
# 37 "/usr/include/c++/9/ext/numeric_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 50 "/usr/include/c++/9/ext/numeric_traits.h" 3
template< class _Tp> 
# 51
struct __is_integer_nonstrict : public std::__is_integer< _Tp>  { 
# 54
using std::__is_integer< _Tp> ::__value;
# 57
enum { __width = (__value) ? sizeof(_Tp) * (8) : (0)}; 
# 58
}; 
# 60
template< class _Value> 
# 61
struct __numeric_traits_integer { 
# 64
static_assert((__is_integer_nonstrict< _Value> ::__value), "invalid specialization");
# 70
static const bool __is_signed = (((_Value)(-1)) < 0); 
# 71
static const int __digits = (__is_integer_nonstrict< _Value> ::__width - __is_signed); 
# 75
static const _Value __max = (__is_signed ? (((((_Value)1) << (__digits - 1)) - 1) << 1) + 1 : (~((_Value)0))); 
# 78
static const _Value __min = (__is_signed ? (-__max) - 1 : ((_Value)0)); 
# 79
}; 
# 81
template< class _Value> const _Value __numeric_traits_integer< _Value> ::__min; 
# 84
template< class _Value> const _Value __numeric_traits_integer< _Value> ::__max; 
# 87
template< class _Value> const bool __numeric_traits_integer< _Value> ::__is_signed; 
# 90
template< class _Value> const int __numeric_traits_integer< _Value> ::__digits; 
# 135 "/usr/include/c++/9/ext/numeric_traits.h" 3
template< class _Tp> using __int_traits = __numeric_traits_integer< _Tp> ; 
# 155 "/usr/include/c++/9/ext/numeric_traits.h" 3
template< class _Value> 
# 156
struct __numeric_traits_floating { 
# 159
static const int __max_digits10 = ((2) + ((((std::template __are_same< _Value, float> ::__value) ? 24 : ((std::template __are_same< _Value, double> ::__value) ? 53 : 64)) * 643L) / (2136))); 
# 162
static const bool __is_signed = true; 
# 163
static const int __digits10 = ((std::template __are_same< _Value, float> ::__value) ? 6 : ((std::template __are_same< _Value, double> ::__value) ? 15 : 18)); 
# 164
static const int __max_exponent10 = ((std::template __are_same< _Value, float> ::__value) ? 38 : ((std::template __are_same< _Value, double> ::__value) ? 308 : 4932)); 
# 165
}; 
# 167
template< class _Value> const int __numeric_traits_floating< _Value> ::__max_digits10; 
# 170
template< class _Value> const bool __numeric_traits_floating< _Value> ::__is_signed; 
# 173
template< class _Value> const int __numeric_traits_floating< _Value> ::__digits10; 
# 176
template< class _Value> const int __numeric_traits_floating< _Value> ::__max_exponent10; 
# 179
template< class _Value> 
# 180
struct __numeric_traits : public __conditional_type< std::__is_integer< _Value> ::__value, __numeric_traits_integer< _Value> , __numeric_traits_floating< _Value> > ::__type { 
# 184
}; 
# 187
}
# 70 "/usr/include/c++/9/bits/stl_iterator_base_types.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 89 "/usr/include/c++/9/bits/stl_iterator_base_types.h" 3
struct input_iterator_tag { }; 
# 92
struct output_iterator_tag { }; 
# 95
struct forward_iterator_tag : public input_iterator_tag { }; 
# 99
struct bidirectional_iterator_tag : public forward_iterator_tag { }; 
# 103
struct random_access_iterator_tag : public bidirectional_iterator_tag { }; 
# 116 "/usr/include/c++/9/bits/stl_iterator_base_types.h" 3
template< class _Category, class _Tp, class _Distance = ptrdiff_t, class 
# 117
_Pointer = _Tp *, class _Reference = _Tp &> 
# 118
struct iterator { 
# 121
typedef _Category iterator_category; 
# 123
typedef _Tp value_type; 
# 125
typedef _Distance difference_type; 
# 127
typedef _Pointer pointer; 
# 129
typedef _Reference reference; 
# 130
}; 
# 143 "/usr/include/c++/9/bits/stl_iterator_base_types.h" 3
template< class _Iterator, class  = __void_t< > > 
# 144
struct __iterator_traits { }; 
# 146
template< class _Iterator> 
# 147
struct __iterator_traits< _Iterator, __void_t< typename _Iterator::iterator_category, typename _Iterator::value_type, typename _Iterator::difference_type, typename _Iterator::pointer, typename _Iterator::reference> >  { 
# 154
typedef typename _Iterator::iterator_category iterator_category; 
# 155
typedef typename _Iterator::value_type value_type; 
# 156
typedef typename _Iterator::difference_type difference_type; 
# 157
typedef typename _Iterator::pointer pointer; 
# 158
typedef typename _Iterator::reference reference; 
# 159
}; 
# 161
template< class _Iterator> 
# 162
struct iterator_traits : public __iterator_traits< _Iterator>  { 
# 163
}; 
# 177 "/usr/include/c++/9/bits/stl_iterator_base_types.h" 3
template< class _Tp> 
# 178
struct iterator_traits< _Tp *>  { 
# 180
typedef random_access_iterator_tag iterator_category; 
# 181
typedef _Tp value_type; 
# 182
typedef ptrdiff_t difference_type; 
# 183
typedef _Tp *pointer; 
# 184
typedef _Tp &reference; 
# 185
}; 
# 188
template< class _Tp> 
# 189
struct iterator_traits< const _Tp *>  { 
# 191
typedef random_access_iterator_tag iterator_category; 
# 192
typedef _Tp value_type; 
# 193
typedef ptrdiff_t difference_type; 
# 194
typedef const _Tp *pointer; 
# 195
typedef const _Tp &reference; 
# 196
}; 
# 202
template< class _Iter> constexpr typename iterator_traits< _Iter> ::iterator_category 
# 205
__iterator_category(const _Iter &) 
# 206
{ return typename iterator_traits< _Iter> ::iterator_category(); } 
# 231 "/usr/include/c++/9/bits/stl_iterator_base_types.h" 3
template< class _InIter> using _RequireInputIter = typename enable_if< is_convertible< typename iterator_traits< _InIter> ::iterator_category, input_iterator_tag> ::value> ::type; 
# 239
}
# 67 "/usr/include/c++/9/bits/stl_iterator_base_funcs.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 73
template< class > struct _List_iterator; 
# 74
template< class > struct _List_const_iterator; 
# 77
template< class _InputIterator> constexpr typename iterator_traits< _InputIterator> ::difference_type 
# 80
__distance(_InputIterator __first, _InputIterator __last, input_iterator_tag) 
# 82
{ 
# 86
typename iterator_traits< _InputIterator> ::difference_type __n = (0); 
# 87
while (__first != __last) 
# 88
{ 
# 89
++__first; 
# 90
++__n; 
# 91
}  
# 92
return __n; 
# 93
} 
# 95
template< class _RandomAccessIterator> constexpr typename iterator_traits< _RandomAccessIterator> ::difference_type 
# 98
__distance(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag) 
# 100
{ 
# 104
return __last - __first; 
# 105
} 
# 109
template< class _Tp> ptrdiff_t __distance(_List_iterator< _Tp> , _List_iterator< _Tp> , input_iterator_tag); 
# 115
template< class _Tp> ptrdiff_t __distance(_List_const_iterator< _Tp> , _List_const_iterator< _Tp> , input_iterator_tag); 
# 135 "/usr/include/c++/9/bits/stl_iterator_base_funcs.h" 3
template< class _InputIterator> inline typename iterator_traits< _InputIterator> ::difference_type 
# 138
distance(_InputIterator __first, _InputIterator __last) 
# 139
{ 
# 141
return std::__distance(__first, __last, std::__iterator_category(__first)); 
# 143
} 
# 145
template< class _InputIterator, class _Distance> constexpr void 
# 147
__advance(_InputIterator &__i, _Distance __n, input_iterator_tag) 
# 148
{ 
# 151
; 
# 152
while (__n--) { 
# 153
++__i; }  
# 154
} 
# 156
template< class _BidirectionalIterator, class _Distance> constexpr void 
# 158
__advance(_BidirectionalIterator &__i, _Distance __n, bidirectional_iterator_tag) 
# 160
{ 
# 164
if (__n > 0) { 
# 165
while (__n--) { 
# 166
++__i; }  } else { 
# 168
while (__n++) { 
# 169
--__i; }  }  
# 170
} 
# 172
template< class _RandomAccessIterator, class _Distance> constexpr void 
# 174
__advance(_RandomAccessIterator &__i, _Distance __n, random_access_iterator_tag) 
# 176
{ 
# 180
if (__builtin_constant_p(__n) && (__n == 1)) { 
# 181
++__i; } else { 
# 182
if (__builtin_constant_p(__n) && (__n == (-1))) { 
# 183
--__i; } else { 
# 185
__i += __n; }  }  
# 186
} 
# 200 "/usr/include/c++/9/bits/stl_iterator_base_funcs.h" 3
template< class _InputIterator, class _Distance> inline void 
# 202
advance(_InputIterator &__i, _Distance __n) 
# 203
{ 
# 205
typename iterator_traits< _InputIterator> ::difference_type __d = __n; 
# 206
std::__advance(__i, __d, std::__iterator_category(__i)); 
# 207
} 
# 211
template< class _InputIterator> inline _InputIterator 
# 213
next(_InputIterator __x, typename iterator_traits< _InputIterator> ::difference_type 
# 214
__n = 1) 
# 215
{ 
# 218
std::advance(__x, __n); 
# 219
return __x; 
# 220
} 
# 222
template< class _BidirectionalIterator> inline _BidirectionalIterator 
# 224
prev(_BidirectionalIterator __x, typename iterator_traits< _BidirectionalIterator> ::difference_type 
# 225
__n = 1) 
# 226
{ 
# 230
std::advance(__x, -__n); 
# 231
return __x; 
# 232
} 
# 237
}
# 42 "/usr/include/c++/9/bits/ptr_traits.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 46
class __undefined; 
# 49
template< class _Tp> 
# 50
struct __get_first_arg { 
# 51
using type = __undefined; }; 
# 53
template< template< class , class ...>  class _Template, class _Tp, class ...
# 54
_Types> 
# 55
struct __get_first_arg< _Template< _Tp, _Types...> >  { 
# 56
using type = _Tp; }; 
# 58
template< class _Tp> using __get_first_arg_t = typename __get_first_arg< _Tp> ::type; 
# 62
template< class _Tp, class _Up> 
# 63
struct __replace_first_arg { 
# 64
}; 
# 66
template< template< class , class ...>  class _Template, class _Up, class 
# 67
_Tp, class ..._Types> 
# 68
struct __replace_first_arg< _Template< _Tp, _Types...> , _Up>  { 
# 69
using type = _Template< _Up, _Types...> ; }; 
# 71
template< class _Tp, class _Up> using __replace_first_arg_t = typename __replace_first_arg< _Tp, _Up> ::type; 
# 74
template< class _Tp> using __make_not_void = typename conditional< is_void< _Tp> ::value, __undefined, _Tp> ::type; 
# 82
template< class _Ptr> 
# 83
struct pointer_traits { 
# 87
private: 
# 86
template< class _Tp> using __element_type = typename _Tp::element_type; 
# 89
template< class _Tp> using __difference_type = typename _Tp::difference_type; 
# 92
template< class _Tp, class _Up, class  = void> 
# 93
struct __rebind : public __replace_first_arg< _Tp, _Up>  { }; 
# 95
template< class _Tp, class _Up> 
# 96
struct __rebind< _Tp, _Up, __void_t< typename _Tp::template rebind< _Up> > >  { 
# 97
using type = typename _Tp::template rebind< _Up> ; }; 
# 101
public: using pointer = _Ptr; 
# 104
using element_type = __detected_or_t< __get_first_arg_t< _Ptr> , __element_type, _Ptr> ; 
# 108
using difference_type = __detected_or_t< ptrdiff_t, __difference_type, _Ptr> ; 
# 112
template< class _Up> using rebind = typename __rebind< _Ptr, _Up> ::type; 
# 116
static _Ptr pointer_to(__make_not_void< element_type>  &__e) 
# 117
{ return _Ptr::pointer_to(__e); } 
# 119
static_assert((!is_same< element_type, __undefined> ::value), "pointer type defines element_type or is like SomePointer<T, Args>");
# 121
}; 
# 127
template< class _Tp> 
# 128
struct pointer_traits< _Tp *>  { 
# 131
typedef _Tp *pointer; 
# 133
typedef _Tp element_type; 
# 135
typedef ptrdiff_t difference_type; 
# 137
template< class _Up> using rebind = _Up *; 
# 146
static pointer pointer_to(__make_not_void< element_type>  &__r) noexcept 
# 147
{ return std::addressof(__r); } 
# 148
}; 
# 151
template< class _Ptr, class _Tp> using __ptr_rebind = typename pointer_traits< _Ptr> ::template rebind< _Tp> ; 
# 154
template< class _Tp> constexpr _Tp *
# 156
__to_address(_Tp *__ptr) noexcept 
# 157
{ 
# 158
static_assert((!std::template is_function< _Tp> ::value), "not a function pointer");
# 159
return __ptr; 
# 160
} 
# 163
template< class _Ptr> constexpr typename pointer_traits< _Ptr> ::element_type *
# 165
__to_address(const _Ptr &__ptr) 
# 166
{ return std::__to_address(__ptr.operator->()); } 
# 211 "/usr/include/c++/9/bits/ptr_traits.h" 3
}
# 76 "/usr/include/c++/9/bits/stl_iterator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 104 "/usr/include/c++/9/bits/stl_iterator.h" 3
template< class _Iterator> 
# 105
class reverse_iterator : public iterator< typename iterator_traits< _Iterator> ::iterator_category, typename iterator_traits< _Iterator> ::value_type, typename iterator_traits< _Iterator> ::difference_type, typename iterator_traits< _Iterator> ::pointer, typename iterator_traits< _Iterator> ::reference>  { 
# 113
protected: _Iterator current; 
# 115
typedef iterator_traits< _Iterator>  __traits_type; 
# 118
public: typedef _Iterator iterator_type; 
# 119
typedef typename iterator_traits< _Iterator> ::difference_type difference_type; 
# 120
typedef typename iterator_traits< _Iterator> ::pointer pointer; 
# 121
typedef typename iterator_traits< _Iterator> ::reference reference; 
# 131 "/usr/include/c++/9/bits/stl_iterator.h" 3
reverse_iterator() : current() { } 
# 137
explicit reverse_iterator(iterator_type __x) : current(__x) { } 
# 143
reverse_iterator(const reverse_iterator &__x) : current(__x.current) 
# 144
{ } 
# 147
reverse_iterator &operator=(const reverse_iterator &) = default;
# 154
template< class _Iter> 
# 156
reverse_iterator(const reverse_iterator< _Iter>  &__x) : current(__x.base()) 
# 157
{ } 
# 163
iterator_type base() const 
# 164
{ return current; } 
# 177 "/usr/include/c++/9/bits/stl_iterator.h" 3
reference operator*() const 
# 178
{ 
# 179
_Iterator __tmp = current; 
# 180
return *(--__tmp); 
# 181
} 
# 189
pointer operator->() const 
# 190
{ 
# 193
_Iterator __tmp = current; 
# 194
--__tmp; 
# 195
return _S_to_pointer(__tmp); 
# 196
} 
# 204
reverse_iterator &operator++() 
# 205
{ 
# 206
--(current); 
# 207
return *this; 
# 208
} 
# 216
reverse_iterator operator++(int) 
# 217
{ 
# 218
reverse_iterator __tmp = *this; 
# 219
--(current); 
# 220
return __tmp; 
# 221
} 
# 229
reverse_iterator &operator--() 
# 230
{ 
# 231
++(current); 
# 232
return *this; 
# 233
} 
# 241
reverse_iterator operator--(int) 
# 242
{ 
# 243
reverse_iterator __tmp = *this; 
# 244
++(current); 
# 245
return __tmp; 
# 246
} 
# 254
reverse_iterator operator+(difference_type __n) const 
# 255
{ return ((reverse_iterator)((current) - __n)); } 
# 264
reverse_iterator &operator+=(difference_type __n) 
# 265
{ 
# 266
(current) -= __n; 
# 267
return *this; 
# 268
} 
# 276
reverse_iterator operator-(difference_type __n) const 
# 277
{ return ((reverse_iterator)((current) + __n)); } 
# 286
reverse_iterator &operator-=(difference_type __n) 
# 287
{ 
# 288
(current) += __n; 
# 289
return *this; 
# 290
} 
# 298
reference operator[](difference_type __n) const 
# 299
{ return *((*this) + __n); } 
# 304
private: 
# 302
template< class _Tp> static _Tp *
# 304
_S_to_pointer(_Tp *__p) 
# 305
{ return __p; } 
# 307
template< class _Tp> static pointer 
# 309
_S_to_pointer(_Tp __t) 
# 310
{ return __t.operator->(); } 
# 311
}; 
# 323 "/usr/include/c++/9/bits/stl_iterator.h" 3
template< class _Iterator> inline bool 
# 325
operator==(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 326
__y) 
# 327
{ return __x.base() == __y.base(); } 
# 329
template< class _Iterator> inline bool 
# 331
operator<(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 332
__y) 
# 333
{ return __y.base() < __x.base(); } 
# 335
template< class _Iterator> inline bool 
# 337
operator!=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 338
__y) 
# 339
{ return !(__x == __y); } 
# 341
template< class _Iterator> inline bool 
# 343
operator>(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 344
__y) 
# 345
{ return __y < __x; } 
# 347
template< class _Iterator> inline bool 
# 349
operator<=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 350
__y) 
# 351
{ return !(__y < __x); } 
# 353
template< class _Iterator> inline bool 
# 355
operator>=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 356
__y) 
# 357
{ return !(__x < __y); } 
# 361
template< class _IteratorL, class _IteratorR> inline bool 
# 363
operator==(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 364
__y) 
# 365
{ return __x.base() == __y.base(); } 
# 367
template< class _IteratorL, class _IteratorR> inline bool 
# 369
operator<(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 370
__y) 
# 371
{ return __y.base() < __x.base(); } 
# 373
template< class _IteratorL, class _IteratorR> inline bool 
# 375
operator!=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 376
__y) 
# 377
{ return !(__x == __y); } 
# 379
template< class _IteratorL, class _IteratorR> inline bool 
# 381
operator>(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 382
__y) 
# 383
{ return __y < __x; } 
# 385
template< class _IteratorL, class _IteratorR> inline bool 
# 387
operator<=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 388
__y) 
# 389
{ return !(__y < __x); } 
# 391
template< class _IteratorL, class _IteratorR> inline bool 
# 393
operator>=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 394
__y) 
# 395
{ return !(__x < __y); } 
# 413 "/usr/include/c++/9/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR> inline auto 
# 415
operator-(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 416
__y)->__decltype((__y.base() - __x.base())) 
# 418
{ return __y.base() - __x.base(); } 
# 421
template< class _Iterator> inline reverse_iterator< _Iterator>  
# 423
operator+(typename reverse_iterator< _Iterator> ::difference_type __n, const reverse_iterator< _Iterator>  &
# 424
__x) 
# 425
{ return ((reverse_iterator< _Iterator> )(__x.base() - __n)); } 
# 429
template< class _Iterator> inline reverse_iterator< _Iterator>  
# 431
__make_reverse_iterator(_Iterator __i) 
# 432
{ return ((reverse_iterator< _Iterator> )(__i)); } 
# 440
template< class _Iterator> inline reverse_iterator< _Iterator>  
# 442
make_reverse_iterator(_Iterator __i) 
# 443
{ return ((reverse_iterator< _Iterator> )(__i)); } 
# 448
template< class _Iterator> auto 
# 450
__niter_base(reverse_iterator< _Iterator>  __it)->__decltype((__make_reverse_iterator(__niter_base(__it.base())))) 
# 452
{ return __make_reverse_iterator(__niter_base(__it.base())); } 
# 454
template< class _Iterator> 
# 455
struct __is_move_iterator< reverse_iterator< _Iterator> >  : public std::__is_move_iterator< _Iterator>  { 
# 457
}; 
# 459
template< class _Iterator> auto 
# 461
__miter_base(reverse_iterator< _Iterator>  __it)->__decltype((__make_reverse_iterator(__miter_base(__it.base())))) 
# 463
{ return __make_reverse_iterator(__miter_base(__it.base())); } 
# 477 "/usr/include/c++/9/bits/stl_iterator.h" 3
template< class _Container> 
# 478
class back_insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 482
protected: _Container *container; 
# 486
public: typedef _Container container_type; 
# 490
explicit back_insert_iterator(_Container &__x) : container(std::__addressof(__x)) 
# 491
{ } 
# 513 "/usr/include/c++/9/bits/stl_iterator.h" 3
back_insert_iterator &operator=(const typename _Container::value_type &__value) 
# 514
{ 
# 515
(container)->push_back(__value); 
# 516
return *this; 
# 517
} 
# 520
back_insert_iterator &operator=(typename _Container::value_type &&__value) 
# 521
{ 
# 522
(container)->push_back(std::move(__value)); 
# 523
return *this; 
# 524
} 
# 529
back_insert_iterator &operator*() 
# 530
{ return *this; } 
# 534
back_insert_iterator &operator++() 
# 535
{ return *this; } 
# 539
back_insert_iterator operator++(int) 
# 540
{ return *this; } 
# 541
}; 
# 554 "/usr/include/c++/9/bits/stl_iterator.h" 3
template< class _Container> inline back_insert_iterator< _Container>  
# 556
back_inserter(_Container &__x) 
# 557
{ return ((back_insert_iterator< _Container> )(__x)); } 
# 569 "/usr/include/c++/9/bits/stl_iterator.h" 3
template< class _Container> 
# 570
class front_insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 574
protected: _Container *container; 
# 578
public: typedef _Container container_type; 
# 581
explicit front_insert_iterator(_Container &__x) : container(std::__addressof(__x)) 
# 582
{ } 
# 604 "/usr/include/c++/9/bits/stl_iterator.h" 3
front_insert_iterator &operator=(const typename _Container::value_type &__value) 
# 605
{ 
# 606
(container)->push_front(__value); 
# 607
return *this; 
# 608
} 
# 611
front_insert_iterator &operator=(typename _Container::value_type &&__value) 
# 612
{ 
# 613
(container)->push_front(std::move(__value)); 
# 614
return *this; 
# 615
} 
# 620
front_insert_iterator &operator*() 
# 621
{ return *this; } 
# 625
front_insert_iterator &operator++() 
# 626
{ return *this; } 
# 630
front_insert_iterator operator++(int) 
# 631
{ return *this; } 
# 632
}; 
# 645 "/usr/include/c++/9/bits/stl_iterator.h" 3
template< class _Container> inline front_insert_iterator< _Container>  
# 647
front_inserter(_Container &__x) 
# 648
{ return ((front_insert_iterator< _Container> )(__x)); } 
# 664 "/usr/include/c++/9/bits/stl_iterator.h" 3
template< class _Container> 
# 665
class insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 669
protected: _Container *container; 
# 670
typename _Container::iterator iter; 
# 674
public: typedef _Container container_type; 
# 680
insert_iterator(_Container &__x, typename _Container::iterator __i) : container(std::__addressof(__x)), iter(__i) 
# 681
{ } 
# 716 "/usr/include/c++/9/bits/stl_iterator.h" 3
insert_iterator &operator=(const typename _Container::value_type &__value) 
# 717
{ 
# 718
(iter) = (container)->insert(iter, __value); 
# 719
++(iter); 
# 720
return *this; 
# 721
} 
# 724
insert_iterator &operator=(typename _Container::value_type &&__value) 
# 725
{ 
# 726
(iter) = (container)->insert(iter, std::move(__value)); 
# 727
++(iter); 
# 728
return *this; 
# 729
} 
# 734
insert_iterator &operator*() 
# 735
{ return *this; } 
# 739
insert_iterator &operator++() 
# 740
{ return *this; } 
# 744
insert_iterator &operator++(int) 
# 745
{ return *this; } 
# 746
}; 
# 760 "/usr/include/c++/9/bits/stl_iterator.h" 3
template< class _Container> inline insert_iterator< _Container>  
# 762
inserter(_Container &__x, typename _Container::iterator __i) 
# 763
{ return insert_iterator< _Container> (__x, __i); } 
# 768
}
# 770
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 781 "/usr/include/c++/9/bits/stl_iterator.h" 3
using std::iterator_traits;
# 782
using std::iterator;
# 783
template< class _Iterator, class _Container> 
# 784
class __normal_iterator { 
# 787
protected: _Iterator _M_current; 
# 789
typedef std::iterator_traits< _Iterator>  __traits_type; 
# 792
public: typedef _Iterator iterator_type; 
# 793
typedef typename std::iterator_traits< _Iterator> ::iterator_category iterator_category; 
# 794
typedef typename std::iterator_traits< _Iterator> ::value_type value_type; 
# 795
typedef typename std::iterator_traits< _Iterator> ::difference_type difference_type; 
# 796
typedef typename std::iterator_traits< _Iterator> ::reference reference; 
# 797
typedef typename std::iterator_traits< _Iterator> ::pointer pointer; 
# 799
constexpr __normal_iterator() noexcept : _M_current(_Iterator()) 
# 800
{ } 
# 803
explicit __normal_iterator(const _Iterator &__i) noexcept : _M_current(__i) 
# 804
{ } 
# 807
template< class _Iter> 
# 808
__normal_iterator(const __normal_iterator< _Iter, typename __enable_if< std::__are_same< _Iter, typename _Container::pointer> ::__value, _Container> ::__type>  &
# 811
__i) noexcept : _M_current(__i.base()) 
# 812
{ } 
# 816
reference operator*() const noexcept 
# 817
{ return *(_M_current); } 
# 820
pointer operator->() const noexcept 
# 821
{ return _M_current; } 
# 824
__normal_iterator &operator++() noexcept 
# 825
{ 
# 826
++(_M_current); 
# 827
return *this; 
# 828
} 
# 831
__normal_iterator operator++(int) noexcept 
# 832
{ return ((__normal_iterator)((_M_current)++)); } 
# 836
__normal_iterator &operator--() noexcept 
# 837
{ 
# 838
--(_M_current); 
# 839
return *this; 
# 840
} 
# 843
__normal_iterator operator--(int) noexcept 
# 844
{ return ((__normal_iterator)((_M_current)--)); } 
# 848
reference operator[](difference_type __n) const noexcept 
# 849
{ return (_M_current)[__n]; } 
# 852
__normal_iterator &operator+=(difference_type __n) noexcept 
# 853
{ (_M_current) += __n; return *this; } 
# 856
__normal_iterator operator+(difference_type __n) const noexcept 
# 857
{ return ((__normal_iterator)((_M_current) + __n)); } 
# 860
__normal_iterator &operator-=(difference_type __n) noexcept 
# 861
{ (_M_current) -= __n; return *this; } 
# 864
__normal_iterator operator-(difference_type __n) const noexcept 
# 865
{ return ((__normal_iterator)((_M_current) - __n)); } 
# 868
const _Iterator &base() const noexcept 
# 869
{ return _M_current; } 
# 870
}; 
# 881 "/usr/include/c++/9/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 883
operator==(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 884
__rhs) noexcept 
# 886
{ return __lhs.base() == __rhs.base(); } 
# 888
template< class _Iterator, class _Container> inline bool 
# 890
operator==(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 891
__rhs) noexcept 
# 893
{ return __lhs.base() == __rhs.base(); } 
# 895
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 897
operator!=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 898
__rhs) noexcept 
# 900
{ return __lhs.base() != __rhs.base(); } 
# 902
template< class _Iterator, class _Container> inline bool 
# 904
operator!=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 905
__rhs) noexcept 
# 907
{ return __lhs.base() != __rhs.base(); } 
# 910
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 912
operator<(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 913
__rhs) noexcept 
# 915
{ return __lhs.base() < __rhs.base(); } 
# 917
template< class _Iterator, class _Container> inline bool 
# 919
operator<(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 920
__rhs) noexcept 
# 922
{ return __lhs.base() < __rhs.base(); } 
# 924
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 926
operator>(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 927
__rhs) noexcept 
# 929
{ return __lhs.base() > __rhs.base(); } 
# 931
template< class _Iterator, class _Container> inline bool 
# 933
operator>(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 934
__rhs) noexcept 
# 936
{ return __lhs.base() > __rhs.base(); } 
# 938
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 940
operator<=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 941
__rhs) noexcept 
# 943
{ return __lhs.base() <= __rhs.base(); } 
# 945
template< class _Iterator, class _Container> inline bool 
# 947
operator<=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 948
__rhs) noexcept 
# 950
{ return __lhs.base() <= __rhs.base(); } 
# 952
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 954
operator>=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 955
__rhs) noexcept 
# 957
{ return __lhs.base() >= __rhs.base(); } 
# 959
template< class _Iterator, class _Container> inline bool 
# 961
operator>=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 962
__rhs) noexcept 
# 964
{ return __lhs.base() >= __rhs.base(); } 
# 970
template< class _IteratorL, class _IteratorR, class _Container> inline auto 
# 974
operator-(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 975
__rhs) noexcept->__decltype((__lhs.base() - __rhs.base())) 
# 982
{ return __lhs.base() - __rhs.base(); } 
# 984
template< class _Iterator, class _Container> inline typename __normal_iterator< _Iterator, _Container> ::difference_type 
# 986
operator-(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 987
__rhs) noexcept 
# 989
{ return __lhs.base() - __rhs.base(); } 
# 991
template< class _Iterator, class _Container> inline __normal_iterator< _Iterator, _Container>  
# 993
operator+(typename __normal_iterator< _Iterator, _Container> ::difference_type 
# 994
__n, const __normal_iterator< _Iterator, _Container>  &__i) noexcept 
# 996
{ return ((__normal_iterator< _Iterator, _Container> )(__i.base() + __n)); } 
# 999
}
# 1001
namespace std __attribute((__visibility__("default"))) { 
# 1005
template< class _Iterator, class _Container> _Iterator 
# 1007
__niter_base(__gnu_cxx::__normal_iterator< _Iterator, _Container>  __it) noexcept(std::template is_nothrow_copy_constructible< _Iterator> ::value) 
# 1009
{ return __it.base(); } 
# 1027 "/usr/include/c++/9/bits/stl_iterator.h" 3
template< class _Iterator> 
# 1028
class move_iterator { 
# 1031
protected: _Iterator _M_current; 
# 1033
typedef iterator_traits< _Iterator>  __traits_type; 
# 1034
typedef typename iterator_traits< _Iterator> ::reference __base_ref; 
# 1037
public: typedef _Iterator iterator_type; 
# 1038
typedef typename iterator_traits< _Iterator> ::iterator_category iterator_category; 
# 1039
typedef typename iterator_traits< _Iterator> ::value_type value_type; 
# 1040
typedef typename iterator_traits< _Iterator> ::difference_type difference_type; 
# 1042
typedef _Iterator pointer; 
# 1047
typedef typename conditional< is_reference< __base_ref> ::value, typename remove_reference< __base_ref> ::type &&, __base_ref> ::type reference; 
# 1050
move_iterator() : _M_current() 
# 1051
{ } 
# 1054
explicit move_iterator(iterator_type __i) : _M_current(__i) 
# 1055
{ } 
# 1057
template< class _Iter> 
# 1059
move_iterator(const move_iterator< _Iter>  &__i) : _M_current(__i.base()) 
# 1060
{ } 
# 1063
iterator_type base() const 
# 1064
{ return _M_current; } 
# 1067
reference operator*() const 
# 1068
{ return static_cast< reference>(*(_M_current)); } 
# 1071
pointer operator->() const 
# 1072
{ return _M_current; } 
# 1075
move_iterator &operator++() 
# 1076
{ 
# 1077
++(_M_current); 
# 1078
return *this; 
# 1079
} 
# 1082
move_iterator operator++(int) 
# 1083
{ 
# 1084
move_iterator __tmp = *this; 
# 1085
++(_M_current); 
# 1086
return __tmp; 
# 1087
} 
# 1090
move_iterator &operator--() 
# 1091
{ 
# 1092
--(_M_current); 
# 1093
return *this; 
# 1094
} 
# 1097
move_iterator operator--(int) 
# 1098
{ 
# 1099
move_iterator __tmp = *this; 
# 1100
--(_M_current); 
# 1101
return __tmp; 
# 1102
} 
# 1105
move_iterator operator+(difference_type __n) const 
# 1106
{ return ((move_iterator)((_M_current) + __n)); } 
# 1109
move_iterator &operator+=(difference_type __n) 
# 1110
{ 
# 1111
(_M_current) += __n; 
# 1112
return *this; 
# 1113
} 
# 1116
move_iterator operator-(difference_type __n) const 
# 1117
{ return ((move_iterator)((_M_current) - __n)); } 
# 1120
move_iterator &operator-=(difference_type __n) 
# 1121
{ 
# 1122
(_M_current) -= __n; 
# 1123
return *this; 
# 1124
} 
# 1127
reference operator[](difference_type __n) const 
# 1128
{ return std::move((_M_current)[__n]); } 
# 1129
}; 
# 1134
template< class _IteratorL, class _IteratorR> inline bool 
# 1136
operator==(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1137
__y) 
# 1138
{ return __x.base() == __y.base(); } 
# 1140
template< class _Iterator> inline bool 
# 1142
operator==(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1143
__y) 
# 1144
{ return __x.base() == __y.base(); } 
# 1146
template< class _IteratorL, class _IteratorR> inline bool 
# 1148
operator!=(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1149
__y) 
# 1150
{ return !(__x == __y); } 
# 1152
template< class _Iterator> inline bool 
# 1154
operator!=(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1155
__y) 
# 1156
{ return !(__x == __y); } 
# 1158
template< class _IteratorL, class _IteratorR> inline bool 
# 1160
operator<(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1161
__y) 
# 1162
{ return __x.base() < __y.base(); } 
# 1164
template< class _Iterator> inline bool 
# 1166
operator<(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1167
__y) 
# 1168
{ return __x.base() < __y.base(); } 
# 1170
template< class _IteratorL, class _IteratorR> inline bool 
# 1172
operator<=(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1173
__y) 
# 1174
{ return !(__y < __x); } 
# 1176
template< class _Iterator> inline bool 
# 1178
operator<=(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1179
__y) 
# 1180
{ return !(__y < __x); } 
# 1182
template< class _IteratorL, class _IteratorR> inline bool 
# 1184
operator>(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1185
__y) 
# 1186
{ return __y < __x; } 
# 1188
template< class _Iterator> inline bool 
# 1190
operator>(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1191
__y) 
# 1192
{ return __y < __x; } 
# 1194
template< class _IteratorL, class _IteratorR> inline bool 
# 1196
operator>=(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1197
__y) 
# 1198
{ return !(__x < __y); } 
# 1200
template< class _Iterator> inline bool 
# 1202
operator>=(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1203
__y) 
# 1204
{ return !(__x < __y); } 
# 1207
template< class _IteratorL, class _IteratorR> inline auto 
# 1209
operator-(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1210
__y)->__decltype((__x.base() - __y.base())) 
# 1212
{ return __x.base() - __y.base(); } 
# 1214
template< class _Iterator> inline move_iterator< _Iterator>  
# 1216
operator+(typename move_iterator< _Iterator> ::difference_type __n, const move_iterator< _Iterator>  &
# 1217
__x) 
# 1218
{ return __x + __n; } 
# 1220
template< class _Iterator> inline move_iterator< _Iterator>  
# 1222
make_move_iterator(_Iterator __i) 
# 1223
{ return ((move_iterator< _Iterator> )(__i)); } 
# 1225
template< class _Iterator, class _ReturnType = typename conditional< __move_if_noexcept_cond< typename iterator_traits< _Iterator> ::value_type> ::value, _Iterator, move_iterator< _Iterator> > ::type> inline _ReturnType 
# 1230
__make_move_if_noexcept_iterator(_Iterator __i) 
# 1231
{ return (_ReturnType)__i; } 
# 1235
template< class _Tp, class _ReturnType = typename conditional< __move_if_noexcept_cond< _Tp> ::value, const _Tp *, move_iterator< _Tp *> > ::type> inline _ReturnType 
# 1239
__make_move_if_noexcept_iterator(_Tp *__i) 
# 1240
{ return (_ReturnType)__i; } 
# 1244
template< class _Iterator> auto 
# 1246
__niter_base(move_iterator< _Iterator>  __it)->__decltype((make_move_iterator(__niter_base(__it.base())))) 
# 1248
{ return make_move_iterator(__niter_base(__it.base())); } 
# 1250
template< class _Iterator> 
# 1251
struct __is_move_iterator< move_iterator< _Iterator> >  { 
# 1253
enum { __value = 1}; 
# 1254
typedef __true_type __type; 
# 1255
}; 
# 1257
template< class _Iterator> auto 
# 1259
__miter_base(move_iterator< _Iterator>  __it)->__decltype((__miter_base(__it.base()))) 
# 1261
{ return __miter_base(__it.base()); } 
# 1293 "/usr/include/c++/9/bits/stl_iterator.h" 3
}
# 48 "/usr/include/c++/9/debug/debug.h" 3
namespace std { 
# 50
namespace __debug { }
# 51
}
# 56
namespace __gnu_debug { 
# 58
using namespace std::__debug;
# 59
}
# 33 "/usr/include/c++/9/bits/predefined_ops.h" 3
namespace __gnu_cxx { 
# 35
namespace __ops { 
# 37
struct _Iter_less_iter { 
# 39
template< class _Iterator1, class _Iterator2> constexpr bool 
# 42
operator()(_Iterator1 __it1, _Iterator2 __it2) const 
# 43
{ return (*__it1) < (*__it2); } 
# 44
}; 
# 48
constexpr _Iter_less_iter __iter_less_iter() 
# 49
{ return _Iter_less_iter(); } 
# 51
struct _Iter_less_val { 
# 54
constexpr _Iter_less_val() = default;
# 60
explicit _Iter_less_val(_Iter_less_iter) { } 
# 62
template< class _Iterator, class _Value> bool 
# 64
operator()(_Iterator __it, _Value &__val) const 
# 65
{ return (*__it) < __val; } 
# 66
}; 
# 69
inline _Iter_less_val __iter_less_val() 
# 70
{ return _Iter_less_val(); } 
# 73
inline _Iter_less_val __iter_comp_val(_Iter_less_iter) 
# 74
{ return _Iter_less_val(); } 
# 76
struct _Val_less_iter { 
# 79
constexpr _Val_less_iter() = default;
# 85
explicit _Val_less_iter(_Iter_less_iter) { } 
# 87
template< class _Value, class _Iterator> bool 
# 89
operator()(_Value &__val, _Iterator __it) const 
# 90
{ return __val < (*__it); } 
# 91
}; 
# 94
inline _Val_less_iter __val_less_iter() 
# 95
{ return _Val_less_iter(); } 
# 98
inline _Val_less_iter __val_comp_iter(_Iter_less_iter) 
# 99
{ return _Val_less_iter(); } 
# 101
struct _Iter_equal_to_iter { 
# 103
template< class _Iterator1, class _Iterator2> bool 
# 105
operator()(_Iterator1 __it1, _Iterator2 __it2) const 
# 106
{ return (*__it1) == (*__it2); } 
# 107
}; 
# 110
inline _Iter_equal_to_iter __iter_equal_to_iter() 
# 111
{ return _Iter_equal_to_iter(); } 
# 113
struct _Iter_equal_to_val { 
# 115
template< class _Iterator, class _Value> bool 
# 117
operator()(_Iterator __it, _Value &__val) const 
# 118
{ return (*__it) == __val; } 
# 119
}; 
# 122
inline _Iter_equal_to_val __iter_equal_to_val() 
# 123
{ return _Iter_equal_to_val(); } 
# 126
inline _Iter_equal_to_val __iter_comp_val(_Iter_equal_to_iter) 
# 127
{ return _Iter_equal_to_val(); } 
# 129
template< class _Compare> 
# 130
struct _Iter_comp_iter { 
# 132
_Compare _M_comp; 
# 135
constexpr explicit _Iter_comp_iter(_Compare __comp) : _M_comp(std::move(__comp)) 
# 137
{ } 
# 139
template< class _Iterator1, class _Iterator2> constexpr bool 
# 142
operator()(_Iterator1 __it1, _Iterator2 __it2) 
# 143
{ return (bool)(_M_comp)(*__it1, *__it2); } 
# 144
}; 
# 146
template< class _Compare> constexpr _Iter_comp_iter< _Compare>  
# 149
__iter_comp_iter(_Compare __comp) 
# 150
{ return ((_Iter_comp_iter< _Compare> )(std::move(__comp))); } 
# 152
template< class _Compare> 
# 153
struct _Iter_comp_val { 
# 155
_Compare _M_comp; 
# 158
explicit _Iter_comp_val(_Compare __comp) : _M_comp(std::move(__comp)) 
# 160
{ } 
# 163
explicit _Iter_comp_val(const _Iter_comp_iter< _Compare>  &__comp) : _M_comp((__comp._M_comp)) 
# 165
{ } 
# 169
explicit _Iter_comp_val(_Iter_comp_iter< _Compare>  &&__comp) : _M_comp(std::move((__comp._M_comp))) 
# 171
{ } 
# 174
template< class _Iterator, class _Value> bool 
# 176
operator()(_Iterator __it, _Value &__val) 
# 177
{ return (bool)(_M_comp)(*__it, __val); } 
# 178
}; 
# 180
template< class _Compare> inline _Iter_comp_val< _Compare>  
# 182
__iter_comp_val(_Compare __comp) 
# 183
{ return ((_Iter_comp_val< _Compare> )(std::move(__comp))); } 
# 185
template< class _Compare> inline _Iter_comp_val< _Compare>  
# 187
__iter_comp_val(_Iter_comp_iter< _Compare>  __comp) 
# 188
{ return ((_Iter_comp_val< _Compare> )(std::move(__comp))); } 
# 190
template< class _Compare> 
# 191
struct _Val_comp_iter { 
# 193
_Compare _M_comp; 
# 196
explicit _Val_comp_iter(_Compare __comp) : _M_comp(std::move(__comp)) 
# 198
{ } 
# 201
explicit _Val_comp_iter(const _Iter_comp_iter< _Compare>  &__comp) : _M_comp((__comp._M_comp)) 
# 203
{ } 
# 207
explicit _Val_comp_iter(_Iter_comp_iter< _Compare>  &&__comp) : _M_comp(std::move((__comp._M_comp))) 
# 209
{ } 
# 212
template< class _Value, class _Iterator> bool 
# 214
operator()(_Value &__val, _Iterator __it) 
# 215
{ return (bool)(_M_comp)(__val, *__it); } 
# 216
}; 
# 218
template< class _Compare> inline _Val_comp_iter< _Compare>  
# 220
__val_comp_iter(_Compare __comp) 
# 221
{ return ((_Val_comp_iter< _Compare> )(std::move(__comp))); } 
# 223
template< class _Compare> inline _Val_comp_iter< _Compare>  
# 225
__val_comp_iter(_Iter_comp_iter< _Compare>  __comp) 
# 226
{ return ((_Val_comp_iter< _Compare> )(std::move(__comp))); } 
# 228
template< class _Value> 
# 229
struct _Iter_equals_val { 
# 231
_Value &_M_value; 
# 234
explicit _Iter_equals_val(_Value &__value) : _M_value(__value) 
# 236
{ } 
# 238
template< class _Iterator> bool 
# 240
operator()(_Iterator __it) 
# 241
{ return (*__it) == (_M_value); } 
# 242
}; 
# 244
template< class _Value> inline _Iter_equals_val< _Value>  
# 246
__iter_equals_val(_Value &__val) 
# 247
{ return ((_Iter_equals_val< _Value> )(__val)); } 
# 249
template< class _Iterator1> 
# 250
struct _Iter_equals_iter { 
# 252
_Iterator1 _M_it1; 
# 255
explicit _Iter_equals_iter(_Iterator1 __it1) : _M_it1(__it1) 
# 257
{ } 
# 259
template< class _Iterator2> bool 
# 261
operator()(_Iterator2 __it2) 
# 262
{ return (*__it2) == (*(_M_it1)); } 
# 263
}; 
# 265
template< class _Iterator> inline _Iter_equals_iter< _Iterator>  
# 267
__iter_comp_iter(_Iter_equal_to_iter, _Iterator __it) 
# 268
{ return ((_Iter_equals_iter< _Iterator> )(__it)); } 
# 270
template< class _Predicate> 
# 271
struct _Iter_pred { 
# 273
_Predicate _M_pred; 
# 276
explicit _Iter_pred(_Predicate __pred) : _M_pred(std::move(__pred)) 
# 278
{ } 
# 280
template< class _Iterator> bool 
# 282
operator()(_Iterator __it) 
# 283
{ return (bool)(_M_pred)(*__it); } 
# 284
}; 
# 286
template< class _Predicate> inline _Iter_pred< _Predicate>  
# 288
__pred_iter(_Predicate __pred) 
# 289
{ return ((_Iter_pred< _Predicate> )(std::move(__pred))); } 
# 291
template< class _Compare, class _Value> 
# 292
struct _Iter_comp_to_val { 
# 294
_Compare _M_comp; 
# 295
_Value &_M_value; 
# 297
_Iter_comp_to_val(_Compare __comp, _Value &__value) : _M_comp(std::move(__comp)), _M_value(__value) 
# 299
{ } 
# 301
template< class _Iterator> bool 
# 303
operator()(_Iterator __it) 
# 304
{ return (bool)(_M_comp)(*__it, _M_value); } 
# 305
}; 
# 307
template< class _Compare, class _Value> _Iter_comp_to_val< _Compare, _Value>  
# 309
__iter_comp_val(_Compare __comp, _Value &__val) 
# 310
{ 
# 311
return _Iter_comp_to_val< _Compare, _Value> (std::move(__comp), __val); 
# 312
} 
# 314
template< class _Compare, class _Iterator1> 
# 315
struct _Iter_comp_to_iter { 
# 317
_Compare _M_comp; 
# 318
_Iterator1 _M_it1; 
# 320
_Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1) : _M_comp(std::move(__comp)), _M_it1(__it1) 
# 322
{ } 
# 324
template< class _Iterator2> bool 
# 326
operator()(_Iterator2 __it2) 
# 327
{ return (bool)(_M_comp)(*__it2, *(_M_it1)); } 
# 328
}; 
# 330
template< class _Compare, class _Iterator> inline _Iter_comp_to_iter< _Compare, _Iterator>  
# 332
__iter_comp_iter(_Iter_comp_iter< _Compare>  __comp, _Iterator __it) 
# 333
{ 
# 334
return _Iter_comp_to_iter< _Compare, _Iterator> (std::move((__comp._M_comp)), __it); 
# 336
} 
# 338
template< class _Predicate> 
# 339
struct _Iter_negate { 
# 341
_Predicate _M_pred; 
# 344
explicit _Iter_negate(_Predicate __pred) : _M_pred(std::move(__pred)) 
# 346
{ } 
# 348
template< class _Iterator> bool 
# 350
operator()(_Iterator __it) 
# 351
{ return !((bool)(_M_pred)(*__it)); } 
# 352
}; 
# 354
template< class _Predicate> inline _Iter_negate< _Predicate>  
# 356
__negate(_Iter_pred< _Predicate>  __pred) 
# 357
{ return ((_Iter_negate< _Predicate> )(std::move((__pred._M_pred)))); } 
# 359
}
# 360
}
# 76 "/usr/include/c++/9/bits/stl_algobase.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 121 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline void 
# 123
iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b) 
# 124
{ 
# 151 "/usr/include/c++/9/bits/stl_algobase.h" 3
swap(*__a, *__b); 
# 153
} 
# 167 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> _ForwardIterator2 
# 169
swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 170
__first2) 
# 171
{ 
# 177
; 
# 179
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 180
std::iter_swap(__first1, __first2); }  
# 181
return __first2; 
# 182
} 
# 195 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _Tp> constexpr const _Tp &
# 198
min(const _Tp &__a, const _Tp &__b) 
# 199
{ 
# 203
if (__b < __a) { 
# 204
return __b; }  
# 205
return __a; 
# 206
} 
# 219 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _Tp> constexpr const _Tp &
# 222
max(const _Tp &__a, const _Tp &__b) 
# 223
{ 
# 227
if (__a < __b) { 
# 228
return __b; }  
# 229
return __a; 
# 230
} 
# 243 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _Tp, class _Compare> constexpr const _Tp &
# 246
min(const _Tp &__a, const _Tp &__b, _Compare __comp) 
# 247
{ 
# 249
if (__comp(__b, __a)) { 
# 250
return __b; }  
# 251
return __a; 
# 252
} 
# 265 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _Tp, class _Compare> constexpr const _Tp &
# 268
max(const _Tp &__a, const _Tp &__b, _Compare __comp) 
# 269
{ 
# 271
if (__comp(__a, __b)) { 
# 272
return __b; }  
# 273
return __a; 
# 274
} 
# 278
template< class _Iterator> inline _Iterator 
# 280
__niter_base(_Iterator __it) noexcept(std::template is_nothrow_copy_constructible< _Iterator> ::value) 
# 282
{ return __it; } 
# 287
template< class _From, class _To> inline _From 
# 289
__niter_wrap(_From __from, _To __res) 
# 290
{ return __from + (__res - std::__niter_base(__from)); } 
# 293
template< class _Iterator> inline _Iterator 
# 295
__niter_wrap(const _Iterator &, _Iterator __res) 
# 296
{ return __res; } 
# 304
template< bool _IsMove, bool _IsSimple, class _Category> 
# 305
struct __copy_move { 
# 307
template< class _II, class _OI> static _OI 
# 309
__copy_m(_II __first, _II __last, _OI __result) 
# 310
{ 
# 311
for (; __first != __last; (++__result), ((void)(++__first))) { 
# 312
(*__result) = (*__first); }  
# 313
return __result; 
# 314
} 
# 315
}; 
# 318
template< class _Category> 
# 319
struct __copy_move< true, false, _Category>  { 
# 321
template< class _II, class _OI> static _OI 
# 323
__copy_m(_II __first, _II __last, _OI __result) 
# 324
{ 
# 325
for (; __first != __last; (++__result), ((void)(++__first))) { 
# 326
(*__result) = std::move(*__first); }  
# 327
return __result; 
# 328
} 
# 329
}; 
# 333
template<> struct __copy_move< false, false, random_access_iterator_tag>  { 
# 335
template< class _II, class _OI> static _OI 
# 337
__copy_m(_II __first, _II __last, _OI __result) 
# 338
{ 
# 339
typedef typename iterator_traits< _II> ::difference_type _Distance; 
# 340
for (_Distance __n = __last - __first; __n > 0; --__n) 
# 341
{ 
# 342
(*__result) = (*__first); 
# 343
++__first; 
# 344
++__result; 
# 345
}  
# 346
return __result; 
# 347
} 
# 348
}; 
# 352
template<> struct __copy_move< true, false, random_access_iterator_tag>  { 
# 354
template< class _II, class _OI> static _OI 
# 356
__copy_m(_II __first, _II __last, _OI __result) 
# 357
{ 
# 358
typedef typename iterator_traits< _II> ::difference_type _Distance; 
# 359
for (_Distance __n = __last - __first; __n > 0; --__n) 
# 360
{ 
# 361
(*__result) = std::move(*__first); 
# 362
++__first; 
# 363
++__result; 
# 364
}  
# 365
return __result; 
# 366
} 
# 367
}; 
# 370
template< bool _IsMove> 
# 371
struct __copy_move< _IsMove, true, random_access_iterator_tag>  { 
# 373
template< class _Tp> static _Tp *
# 375
__copy_m(const _Tp *__first, const _Tp *__last, _Tp *__result) 
# 376
{ 
# 378
using __assignable = conditional< _IsMove, is_move_assignable< _Tp> , is_copy_assignable< _Tp> > ; 
# 382
static_assert((__assignable::type::value), "type is not assignable");
# 384
const ptrdiff_t _Num = __last - __first; 
# 385
if (_Num) { 
# 386
__builtin_memmove(__result, __first, sizeof(_Tp) * _Num); }  
# 387
return __result + _Num; 
# 388
} 
# 389
}; 
# 391
template< bool _IsMove, class _II, class _OI> inline _OI 
# 393
__copy_move_a(_II __first, _II __last, _OI __result) 
# 394
{ 
# 395
typedef typename iterator_traits< _II> ::value_type _ValueTypeI; 
# 396
typedef typename iterator_traits< _OI> ::value_type _ValueTypeO; 
# 397
typedef typename iterator_traits< _II> ::iterator_category _Category; 
# 398
const bool __simple = (__is_trivially_copyable(_ValueTypeI) && __is_pointer< _II> ::__value && __is_pointer< _OI> ::__value && __are_same< typename iterator_traits< _II> ::value_type, typename iterator_traits< _OI> ::value_type> ::__value); 
# 403
return std::template __copy_move< _IsMove, __simple, typename iterator_traits< _II> ::iterator_category> ::__copy_m(__first, __last, __result); 
# 405
} 
# 409
template< class _CharT> struct char_traits; 
# 412
template< class _CharT, class _Traits> class istreambuf_iterator; 
# 415
template< class _CharT, class _Traits> class ostreambuf_iterator; 
# 418
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type __copy_move_a2(_CharT *, _CharT *, ostreambuf_iterator< _CharT, char_traits< _CharT> > ); 
# 424
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type __copy_move_a2(const _CharT *, const _CharT *, ostreambuf_iterator< _CharT, char_traits< _CharT> > ); 
# 430
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _CharT *> ::__type __copy_move_a2(istreambuf_iterator< _CharT, char_traits< _CharT> > , istreambuf_iterator< _CharT, char_traits< _CharT> > , _CharT *); 
# 436
template< bool _IsMove, class _II, class _OI> inline _OI 
# 438
__copy_move_a2(_II __first, _II __last, _OI __result) 
# 439
{ 
# 440
return std::__niter_wrap(__result, std::__copy_move_a< _IsMove> (std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result))); 
# 444
} 
# 463 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _II, class _OI> inline _OI 
# 465
copy(_II __first, _II __last, _OI __result) 
# 466
{ 
# 471
; 
# 473
return std::__copy_move_a2< __is_move_iterator< _II> ::__value> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 475
} 
# 495 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _II, class _OI> inline _OI 
# 497
move(_II __first, _II __last, _OI __result) 
# 498
{ 
# 503
; 
# 505
return std::__copy_move_a2< true> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 507
} 
# 514
template< bool , bool , class > 
# 515
struct __copy_move_backward { 
# 517
template< class _BI1, class _BI2> static _BI2 
# 519
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 520
{ 
# 521
while (__first != __last) { 
# 522
(*(--__result)) = (*(--__last)); }  
# 523
return __result; 
# 524
} 
# 525
}; 
# 528
template< class _Category> 
# 529
struct __copy_move_backward< true, false, _Category>  { 
# 531
template< class _BI1, class _BI2> static _BI2 
# 533
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 534
{ 
# 535
while (__first != __last) { 
# 536
(*(--__result)) = std::move(*(--__last)); }  
# 537
return __result; 
# 538
} 
# 539
}; 
# 543
template<> struct __copy_move_backward< false, false, random_access_iterator_tag>  { 
# 545
template< class _BI1, class _BI2> static _BI2 
# 547
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 548
{ 
# 549
typename iterator_traits< _BI1> ::difference_type __n; 
# 550
for (__n = (__last - __first); __n > 0; --__n) { 
# 551
(*(--__result)) = (*(--__last)); }  
# 552
return __result; 
# 553
} 
# 554
}; 
# 558
template<> struct __copy_move_backward< true, false, random_access_iterator_tag>  { 
# 560
template< class _BI1, class _BI2> static _BI2 
# 562
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 563
{ 
# 564
typename iterator_traits< _BI1> ::difference_type __n; 
# 565
for (__n = (__last - __first); __n > 0; --__n) { 
# 566
(*(--__result)) = std::move(*(--__last)); }  
# 567
return __result; 
# 568
} 
# 569
}; 
# 572
template< bool _IsMove> 
# 573
struct __copy_move_backward< _IsMove, true, random_access_iterator_tag>  { 
# 575
template< class _Tp> static _Tp *
# 577
__copy_move_b(const _Tp *__first, const _Tp *__last, _Tp *__result) 
# 578
{ 
# 580
using __assignable = conditional< _IsMove, is_move_assignable< _Tp> , is_copy_assignable< _Tp> > ; 
# 584
static_assert((__assignable::type::value), "type is not assignable");
# 586
const ptrdiff_t _Num = __last - __first; 
# 587
if (_Num) { 
# 588
__builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num); }  
# 589
return __result - _Num; 
# 590
} 
# 591
}; 
# 593
template< bool _IsMove, class _BI1, class _BI2> inline _BI2 
# 595
__copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result) 
# 596
{ 
# 597
typedef typename iterator_traits< _BI1> ::value_type _ValueType1; 
# 598
typedef typename iterator_traits< _BI2> ::value_type _ValueType2; 
# 599
typedef typename iterator_traits< _BI1> ::iterator_category _Category; 
# 600
const bool __simple = (__is_trivially_copyable(_ValueType1) && __is_pointer< _BI1> ::__value && __is_pointer< _BI2> ::__value && __are_same< typename iterator_traits< _BI1> ::value_type, typename iterator_traits< _BI2> ::value_type> ::__value); 
# 605
return std::template __copy_move_backward< _IsMove, __simple, typename iterator_traits< _BI1> ::iterator_category> ::__copy_move_b(__first, __last, __result); 
# 609
} 
# 611
template< bool _IsMove, class _BI1, class _BI2> inline _BI2 
# 613
__copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result) 
# 614
{ 
# 615
return std::__niter_wrap(__result, std::__copy_move_backward_a< _IsMove> (std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result))); 
# 619
} 
# 639 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _BI1, class _BI2> inline _BI2 
# 641
copy_backward(_BI1 __first, _BI1 __last, _BI2 __result) 
# 642
{ 
# 649
; 
# 651
return std::__copy_move_backward_a2< __is_move_iterator< _BI1> ::__value> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 653
} 
# 674 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _BI1, class _BI2> inline _BI2 
# 676
move_backward(_BI1 __first, _BI1 __last, _BI2 __result) 
# 677
{ 
# 684
; 
# 686
return std::__copy_move_backward_a2< true> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 689
} 
# 696
template< class _ForwardIterator, class _Tp> inline typename __gnu_cxx::__enable_if< !__is_scalar< _Tp> ::__value, void> ::__type 
# 699
__fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 700
__value) 
# 701
{ 
# 702
for (; __first != __last; ++__first) { 
# 703
(*__first) = __value; }  
# 704
} 
# 706
template< class _ForwardIterator, class _Tp> inline typename __gnu_cxx::__enable_if< __is_scalar< _Tp> ::__value, void> ::__type 
# 709
__fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 710
__value) 
# 711
{ 
# 712
const _Tp __tmp = __value; 
# 713
for (; __first != __last; ++__first) { 
# 714
(*__first) = __tmp; }  
# 715
} 
# 718
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_byte< _Tp> ::__value, void> ::__type 
# 721
__fill_a(_Tp *__first, _Tp *__last, const _Tp &__c) 
# 722
{ 
# 723
const _Tp __tmp = __c; 
# 724
if (const size_t __len = __last - __first) { 
# 725
__builtin_memset(__first, static_cast< unsigned char>(__tmp), __len); }  
# 726
} 
# 740 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _ForwardIterator, class _Tp> inline void 
# 742
fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value) 
# 743
{ 
# 747
; 
# 749
std::__fill_a(std::__niter_base(__first), std::__niter_base(__last), __value); 
# 751
} 
# 753
template< class _OutputIterator, class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< !__is_scalar< _Tp> ::__value, _OutputIterator> ::__type 
# 756
__fill_n_a(_OutputIterator __first, _Size __n, const _Tp &__value) 
# 757
{ 
# 758
for (__decltype((__n + 0)) __niter = __n; __niter > 0; (--__niter), ((void)(++__first))) { 
# 760
(*__first) = __value; }  
# 761
return __first; 
# 762
} 
# 764
template< class _OutputIterator, class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< __is_scalar< _Tp> ::__value, _OutputIterator> ::__type 
# 767
__fill_n_a(_OutputIterator __first, _Size __n, const _Tp &__value) 
# 768
{ 
# 769
const _Tp __tmp = __value; 
# 770
for (__decltype((__n + 0)) __niter = __n; __niter > 0; (--__niter), ((void)(++__first))) { 
# 772
(*__first) = __tmp; }  
# 773
return __first; 
# 774
} 
# 776
template< class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< __is_byte< _Tp> ::__value, _Tp *> ::__type 
# 779
__fill_n_a(_Tp *__first, _Size __n, const _Tp &__c) 
# 780
{ 
# 781
std::__fill_a(__first, __first + __n, __c); 
# 782
return __first + __n; 
# 783
} 
# 800 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _OI, class _Size, class _Tp> inline _OI 
# 802
fill_n(_OI __first, _Size __n, const _Tp &__value) 
# 803
{ 
# 806
; 
# 808
return std::__niter_wrap(__first, std::__fill_n_a(std::__niter_base(__first), __n, __value)); 
# 810
} 
# 812
template< bool _BoolType> 
# 813
struct __equal { 
# 815
template< class _II1, class _II2> static bool 
# 817
equal(_II1 __first1, _II1 __last1, _II2 __first2) 
# 818
{ 
# 819
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 820
if (!((*__first1) == (*__first2))) { 
# 821
return false; }  }  
# 822
return true; 
# 823
} 
# 824
}; 
# 827
template<> struct __equal< true>  { 
# 829
template< class _Tp> static bool 
# 831
equal(const _Tp *__first1, const _Tp *__last1, const _Tp *__first2) 
# 832
{ 
# 833
if (const size_t __len = __last1 - __first1) { 
# 834
return !(__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len)); }  
# 835
return true; 
# 836
} 
# 837
}; 
# 839
template< class _II1, class _II2> inline bool 
# 841
__equal_aux(_II1 __first1, _II1 __last1, _II2 __first2) 
# 842
{ 
# 843
typedef typename iterator_traits< _II1> ::value_type _ValueType1; 
# 844
typedef typename iterator_traits< _II2> ::value_type _ValueType2; 
# 845
const bool __simple = ((__is_integer< typename iterator_traits< _II1> ::value_type> ::__value || __is_pointer< typename iterator_traits< _II1> ::value_type> ::__value) && __is_pointer< _II1> ::__value && __is_pointer< _II2> ::__value && __are_same< typename iterator_traits< _II1> ::value_type, typename iterator_traits< _II2> ::value_type> ::__value); 
# 851
return std::template __equal< __simple> ::equal(__first1, __last1, __first2); 
# 852
} 
# 854
template< class , class > 
# 855
struct __lc_rai { 
# 857
template< class _II1, class _II2> static _II1 
# 859
__newlast1(_II1, _II1 __last1, _II2, _II2) 
# 860
{ return __last1; } 
# 862
template< class _II> static bool 
# 864
__cnd2(_II __first, _II __last) 
# 865
{ return __first != __last; } 
# 866
}; 
# 869
template<> struct __lc_rai< random_access_iterator_tag, random_access_iterator_tag>  { 
# 871
template< class _RAI1, class _RAI2> static _RAI1 
# 873
__newlast1(_RAI1 __first1, _RAI1 __last1, _RAI2 
# 874
__first2, _RAI2 __last2) 
# 875
{ 
# 877
const typename iterator_traits< _RAI1> ::difference_type __diff1 = __last1 - __first1; 
# 879
const typename iterator_traits< _RAI2> ::difference_type __diff2 = __last2 - __first2; 
# 880
return (__diff2 < __diff1) ? __first1 + __diff2 : __last1; 
# 881
} 
# 883
template< class _RAI> static bool 
# 885
__cnd2(_RAI, _RAI) 
# 886
{ return true; } 
# 887
}; 
# 889
template< class _II1, class _II2, class _Compare> bool 
# 891
__lexicographical_compare_impl(_II1 __first1, _II1 __last1, _II2 
# 892
__first2, _II2 __last2, _Compare 
# 893
__comp) 
# 894
{ 
# 895
typedef typename iterator_traits< _II1> ::iterator_category _Category1; 
# 896
typedef typename iterator_traits< _II2> ::iterator_category _Category2; 
# 897
typedef __lc_rai< typename iterator_traits< _II1> ::iterator_category, typename iterator_traits< _II2> ::iterator_category>  __rai_type; 
# 899
__last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2); 
# 900
for (; (__first1 != __last1) && __rai_type::__cnd2(__first2, __last2); (++__first1), ((void)(++__first2))) 
# 902
{ 
# 903
if (__comp(__first1, __first2)) { 
# 904
return true; }  
# 905
if (__comp(__first2, __first1)) { 
# 906
return false; }  
# 907
}  
# 908
return (__first1 == __last1) && (__first2 != __last2); 
# 909
} 
# 911
template< bool _BoolType> 
# 912
struct __lexicographical_compare { 
# 914
template< class _II1, class _II2> static bool __lc(_II1, _II1, _II2, _II2); 
# 916
}; 
# 918
template< bool _BoolType> 
# 919
template< class _II1, class _II2> bool 
# 922
__lexicographical_compare< _BoolType> ::__lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) 
# 923
{ 
# 924
return std::__lexicographical_compare_impl(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_less_iter()); 
# 927
} 
# 930
template<> struct __lexicographical_compare< true>  { 
# 932
template< class _Tp, class _Up> static bool 
# 934
__lc(const _Tp *__first1, const _Tp *__last1, const _Up *
# 935
__first2, const _Up *__last2) 
# 936
{ 
# 937
const size_t __len1 = __last1 - __first1; 
# 938
const size_t __len2 = __last2 - __first2; 
# 939
if (const size_t __len = std::min(__len1, __len2)) { 
# 940
if (int __result = __builtin_memcmp(__first1, __first2, __len)) { 
# 941
return __result < 0; }  }  
# 942
return __len1 < __len2; 
# 943
} 
# 944
}; 
# 946
template< class _II1, class _II2> inline bool 
# 948
__lexicographical_compare_aux(_II1 __first1, _II1 __last1, _II2 
# 949
__first2, _II2 __last2) 
# 950
{ 
# 951
typedef typename iterator_traits< _II1> ::value_type _ValueType1; 
# 952
typedef typename iterator_traits< _II2> ::value_type _ValueType2; 
# 953
const bool __simple = (__is_byte< typename iterator_traits< _II1> ::value_type> ::__value && __is_byte< typename iterator_traits< _II2> ::value_type> ::__value && (!__gnu_cxx::template __numeric_traits< typename iterator_traits< _II1> ::value_type> ::__is_signed) && (!__gnu_cxx::template __numeric_traits< typename iterator_traits< _II2> ::value_type> ::__is_signed) && __is_pointer< _II1> ::__value && __is_pointer< _II2> ::__value); 
# 960
return std::template __lexicographical_compare< __simple> ::__lc(__first1, __last1, __first2, __last2); 
# 962
} 
# 964
template< class _ForwardIterator, class _Tp, class _Compare> _ForwardIterator 
# 966
__lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 967
__val, _Compare __comp) 
# 968
{ 
# 970
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 972
_DistanceType __len = std::distance(__first, __last); 
# 974
while (__len > 0) 
# 975
{ 
# 976
_DistanceType __half = __len >> 1; 
# 977
_ForwardIterator __middle = __first; 
# 978
std::advance(__middle, __half); 
# 979
if (__comp(__middle, __val)) 
# 980
{ 
# 981
__first = __middle; 
# 982
++__first; 
# 983
__len = ((__len - __half) - 1); 
# 984
} else { 
# 986
__len = __half; }  
# 987
}  
# 988
return __first; 
# 989
} 
# 1002 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _ForwardIterator, class _Tp> inline _ForwardIterator 
# 1004
lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 1005
__val) 
# 1006
{ 
# 1011
; 
# 1013
return std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_less_val()); 
# 1015
} 
# 1020
constexpr int __lg(int __n) 
# 1021
{ return ((((int)sizeof(int)) * 8) - 1) - __builtin_clz(__n); } 
# 1024
constexpr unsigned __lg(unsigned __n) 
# 1025
{ return ((((int)sizeof(int)) * 8) - 1) - __builtin_clz(__n); } 
# 1028
constexpr long __lg(long __n) 
# 1029
{ return ((((int)sizeof(long)) * 8) - 1) - __builtin_clzl(__n); } 
# 1032
constexpr unsigned long __lg(unsigned long __n) 
# 1033
{ return ((((int)sizeof(long)) * 8) - 1) - __builtin_clzl(__n); } 
# 1036
constexpr long long __lg(long long __n) 
# 1037
{ return ((((int)sizeof(long long)) * 8) - 1) - __builtin_clzll(__n); } 
# 1040
constexpr unsigned long long __lg(unsigned long long __n) 
# 1041
{ return ((((int)sizeof(long long)) * 8) - 1) - __builtin_clzll(__n); } 
# 1057 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool 
# 1059
equal(_II1 __first1, _II1 __last1, _II2 __first2) 
# 1060
{ 
# 1067
; 
# 1069
return std::__equal_aux(std::__niter_base(__first1), std::__niter_base(__last1), std::__niter_base(__first2)); 
# 1072
} 
# 1089 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline bool 
# 1091
equal(_IIter1 __first1, _IIter1 __last1, _IIter2 
# 1092
__first2, _BinaryPredicate __binary_pred) 
# 1093
{ 
# 1097
; 
# 1099
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 1100
if (!((bool)__binary_pred(*__first1, *__first2))) { 
# 1101
return false; }  }  
# 1102
return true; 
# 1103
} 
# 1107
template< class _II1, class _II2> inline bool 
# 1109
__equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) 
# 1110
{ 
# 1111
using _RATag = random_access_iterator_tag; 
# 1112
using _Cat1 = typename iterator_traits< _II1> ::iterator_category; 
# 1113
using _Cat2 = typename iterator_traits< _II2> ::iterator_category; 
# 1114
using _RAIters = __and_< is_same< typename iterator_traits< _II1> ::iterator_category, random_access_iterator_tag> , is_same< typename iterator_traits< _II2> ::iterator_category, random_access_iterator_tag> > ; 
# 1115
if (_RAIters()) 
# 1116
{ 
# 1117
auto __d1 = std::distance(__first1, __last1); 
# 1118
auto __d2 = std::distance(__first2, __last2); 
# 1119
if (__d1 != __d2) { 
# 1120
return false; }  
# 1121
return std::equal(__first1, __last1, __first2); 
# 1122
}  
# 1124
for (; (__first1 != __last1) && (__first2 != __last2); (++__first1), ((void)(++__first2))) { 
# 1126
if (!((*__first1) == (*__first2))) { 
# 1127
return false; }  }  
# 1128
return (__first1 == __last1) && (__first2 == __last2); 
# 1129
} 
# 1132
template< class _II1, class _II2, class _BinaryPredicate> inline bool 
# 1134
__equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2, _BinaryPredicate 
# 1135
__binary_pred) 
# 1136
{ 
# 1137
using _RATag = random_access_iterator_tag; 
# 1138
using _Cat1 = typename iterator_traits< _II1> ::iterator_category; 
# 1139
using _Cat2 = typename iterator_traits< _II2> ::iterator_category; 
# 1140
using _RAIters = __and_< is_same< typename iterator_traits< _II1> ::iterator_category, random_access_iterator_tag> , is_same< typename iterator_traits< _II2> ::iterator_category, random_access_iterator_tag> > ; 
# 1141
if (_RAIters()) 
# 1142
{ 
# 1143
auto __d1 = std::distance(__first1, __last1); 
# 1144
auto __d2 = std::distance(__first2, __last2); 
# 1145
if (__d1 != __d2) { 
# 1146
return false; }  
# 1147
return std::equal(__first1, __last1, __first2, __binary_pred); 
# 1149
}  
# 1151
for (; (__first1 != __last1) && (__first2 != __last2); (++__first1), ((void)(++__first2))) { 
# 1153
if (!((bool)__binary_pred(*__first1, *__first2))) { 
# 1154
return false; }  }  
# 1155
return (__first1 == __last1) && (__first2 == __last2); 
# 1156
} 
# 1176 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool 
# 1178
equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) 
# 1179
{ 
# 1186
; 
# 1187
; 
# 1189
return std::__equal4(__first1, __last1, __first2, __last2); 
# 1190
} 
# 1208 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline bool 
# 1210
equal(_IIter1 __first1, _IIter1 __last1, _IIter2 
# 1211
__first2, _IIter2 __last2, _BinaryPredicate __binary_pred) 
# 1212
{ 
# 1216
; 
# 1217
; 
# 1219
return std::__equal4(__first1, __last1, __first2, __last2, __binary_pred); 
# 1221
} 
# 1239 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool 
# 1241
lexicographical_compare(_II1 __first1, _II1 __last1, _II2 
# 1242
__first2, _II2 __last2) 
# 1243
{ 
# 1253
; 
# 1254
; 
# 1256
return std::__lexicographical_compare_aux(std::__niter_base(__first1), std::__niter_base(__last1), std::__niter_base(__first2), std::__niter_base(__last2)); 
# 1260
} 
# 1275 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _II1, class _II2, class _Compare> inline bool 
# 1277
lexicographical_compare(_II1 __first1, _II1 __last1, _II2 
# 1278
__first2, _II2 __last2, _Compare __comp) 
# 1279
{ 
# 1283
; 
# 1284
; 
# 1286
return std::__lexicographical_compare_impl(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 1289
} 
# 1291
template< class _InputIterator1, class _InputIterator2, class 
# 1292
_BinaryPredicate> pair< _InputIterator1, _InputIterator2>  
# 1294
__mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1295
__first2, _BinaryPredicate __binary_pred) 
# 1296
{ 
# 1297
while ((__first1 != __last1) && __binary_pred(__first1, __first2)) 
# 1298
{ 
# 1299
++__first1; 
# 1300
++__first2; 
# 1301
}  
# 1302
return pair< _InputIterator1, _InputIterator2> (__first1, __first2); 
# 1303
} 
# 1318 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2> inline pair< _InputIterator1, _InputIterator2>  
# 1320
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1321
__first2) 
# 1322
{ 
# 1329
; 
# 1331
return std::__mismatch(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 1333
} 
# 1351 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 1352
_BinaryPredicate> inline pair< _InputIterator1, _InputIterator2>  
# 1354
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1355
__first2, _BinaryPredicate __binary_pred) 
# 1356
{ 
# 1360
; 
# 1362
return std::__mismatch(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred)); 
# 1364
} 
# 1368
template< class _InputIterator1, class _InputIterator2, class 
# 1369
_BinaryPredicate> pair< _InputIterator1, _InputIterator2>  
# 1371
__mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1372
__first2, _InputIterator2 __last2, _BinaryPredicate 
# 1373
__binary_pred) 
# 1374
{ 
# 1375
while ((__first1 != __last1) && (__first2 != __last2) && __binary_pred(__first1, __first2)) 
# 1377
{ 
# 1378
++__first1; 
# 1379
++__first2; 
# 1380
}  
# 1381
return pair< _InputIterator1, _InputIterator2> (__first1, __first2); 
# 1382
} 
# 1398 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2> inline pair< _InputIterator1, _InputIterator2>  
# 1400
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1401
__first2, _InputIterator2 __last2) 
# 1402
{ 
# 1409
; 
# 1410
; 
# 1412
return std::__mismatch(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 1414
} 
# 1433 "/usr/include/c++/9/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 1434
_BinaryPredicate> inline pair< _InputIterator1, _InputIterator2>  
# 1436
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1437
__first2, _InputIterator2 __last2, _BinaryPredicate 
# 1438
__binary_pred) 
# 1439
{ 
# 1443
; 
# 1444
; 
# 1446
return std::__mismatch(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred)); 
# 1448
} 
# 1453
}
# 42 "/usr/include/c++/9/bits/algorithmfwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 195 "/usr/include/c++/9/bits/algorithmfwd.h" 3
template< class _IIter, class _Predicate> inline bool all_of(_IIter, _IIter, _Predicate); 
# 199
template< class _IIter, class _Predicate> inline bool any_of(_IIter, _IIter, _Predicate); 
# 204
template< class _FIter, class _Tp> bool binary_search(_FIter, _FIter, const _Tp &); 
# 208
template< class _FIter, class _Tp, class _Compare> bool binary_search(_FIter, _FIter, const _Tp &, _Compare); 
# 224 "/usr/include/c++/9/bits/algorithmfwd.h" 3
template< class _IIter, class _OIter> inline _OIter copy(_IIter, _IIter, _OIter); 
# 228
template< class _BIter1, class _BIter2> inline _BIter2 copy_backward(_BIter1, _BIter1, _BIter2); 
# 233
template< class _IIter, class _OIter, class _Predicate> _OIter copy_if(_IIter, _IIter, _OIter, _Predicate); 
# 237
template< class _IIter, class _Size, class _OIter> inline _OIter copy_n(_IIter, _Size, _OIter); 
# 245
template< class _FIter, class _Tp> inline pair< _FIter, _FIter>  equal_range(_FIter, _FIter, const _Tp &); 
# 249
template< class _FIter, class _Tp, class _Compare> inline pair< _FIter, _FIter>  equal_range(_FIter, _FIter, const _Tp &, _Compare); 
# 253
template< class _FIter, class _Tp> inline void fill(_FIter, _FIter, const _Tp &); 
# 257
template< class _OIter, class _Size, class _Tp> inline _OIter fill_n(_OIter, _Size, const _Tp &); 
# 263
template< class _FIter1, class _FIter2> inline _FIter1 find_end(_FIter1, _FIter1, _FIter2, _FIter2); 
# 267
template< class _FIter1, class _FIter2, class _BinaryPredicate> inline _FIter1 find_end(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate); 
# 275
template< class _IIter, class _Predicate> inline _IIter find_if_not(_IIter, _IIter, _Predicate); 
# 284
template< class _IIter1, class _IIter2> inline bool includes(_IIter1, _IIter1, _IIter2, _IIter2); 
# 288
template< class _IIter1, class _IIter2, class _Compare> inline bool includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare); 
# 292
template< class _BIter> inline void inplace_merge(_BIter, _BIter, _BIter); 
# 296
template< class _BIter, class _Compare> inline void inplace_merge(_BIter, _BIter, _BIter, _Compare); 
# 301
template< class _RAIter> inline bool is_heap(_RAIter, _RAIter); 
# 305
template< class _RAIter, class _Compare> inline bool is_heap(_RAIter, _RAIter, _Compare); 
# 309
template< class _RAIter> inline _RAIter is_heap_until(_RAIter, _RAIter); 
# 313
template< class _RAIter, class _Compare> inline _RAIter is_heap_until(_RAIter, _RAIter, _Compare); 
# 317
template< class _IIter, class _Predicate> inline bool is_partitioned(_IIter, _IIter, _Predicate); 
# 321
template< class _FIter1, class _FIter2> inline bool is_permutation(_FIter1, _FIter1, _FIter2); 
# 325
template< class _FIter1, class _FIter2, class 
# 326
_BinaryPredicate> inline bool 
# 325
is_permutation(_FIter1, _FIter1, _FIter2, _BinaryPredicate); 
# 330
template< class _FIter> inline bool is_sorted(_FIter, _FIter); 
# 334
template< class _FIter, class _Compare> inline bool is_sorted(_FIter, _FIter, _Compare); 
# 338
template< class _FIter> inline _FIter is_sorted_until(_FIter, _FIter); 
# 342
template< class _FIter, class _Compare> inline _FIter is_sorted_until(_FIter, _FIter, _Compare); 
# 347
template< class _FIter1, class _FIter2> inline void iter_swap(_FIter1, _FIter2); 
# 351
template< class _FIter, class _Tp> inline _FIter lower_bound(_FIter, _FIter, const _Tp &); 
# 355
template< class _FIter, class _Tp, class _Compare> inline _FIter lower_bound(_FIter, _FIter, const _Tp &, _Compare); 
# 359
template< class _RAIter> inline void make_heap(_RAIter, _RAIter); 
# 363
template< class _RAIter, class _Compare> inline void make_heap(_RAIter, _RAIter, _Compare); 
# 367
template< class _Tp> constexpr const _Tp &max(const _Tp &, const _Tp &); 
# 372
template< class _Tp, class _Compare> constexpr const _Tp &max(const _Tp &, const _Tp &, _Compare); 
# 380
template< class _Tp> constexpr const _Tp &min(const _Tp &, const _Tp &); 
# 385
template< class _Tp, class _Compare> constexpr const _Tp &min(const _Tp &, const _Tp &, _Compare); 
# 393
template< class _Tp> constexpr pair< const _Tp &, const _Tp &>  minmax(const _Tp &, const _Tp &); 
# 398
template< class _Tp, class _Compare> constexpr pair< const _Tp &, const _Tp &>  minmax(const _Tp &, const _Tp &, _Compare); 
# 403
template< class _FIter> constexpr pair< _FIter, _FIter>  minmax_element(_FIter, _FIter); 
# 408
template< class _FIter, class _Compare> constexpr pair< _FIter, _FIter>  minmax_element(_FIter, _FIter, _Compare); 
# 413
template< class _Tp> constexpr _Tp min(initializer_list< _Tp> ); 
# 418
template< class _Tp, class _Compare> constexpr _Tp min(initializer_list< _Tp> , _Compare); 
# 423
template< class _Tp> constexpr _Tp max(initializer_list< _Tp> ); 
# 428
template< class _Tp, class _Compare> constexpr _Tp max(initializer_list< _Tp> , _Compare); 
# 433
template< class _Tp> constexpr pair< _Tp, _Tp>  minmax(initializer_list< _Tp> ); 
# 438
template< class _Tp, class _Compare> constexpr pair< _Tp, _Tp>  minmax(initializer_list< _Tp> , _Compare); 
# 446
template< class _BIter> inline bool next_permutation(_BIter, _BIter); 
# 450
template< class _BIter, class _Compare> inline bool next_permutation(_BIter, _BIter, _Compare); 
# 455
template< class _IIter, class _Predicate> inline bool none_of(_IIter, _IIter, _Predicate); 
# 463
template< class _IIter, class _RAIter> inline _RAIter partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter); 
# 467
template< class _IIter, class _RAIter, class _Compare> inline _RAIter partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare); 
# 474
template< class _IIter, class _OIter1, class 
# 475
_OIter2, class _Predicate> pair< _OIter1, _OIter2>  
# 474
partition_copy(_IIter, _IIter, _OIter1, _OIter2, _Predicate); 
# 479
template< class _FIter, class _Predicate> _FIter partition_point(_FIter, _FIter, _Predicate); 
# 484
template< class _RAIter> inline void pop_heap(_RAIter, _RAIter); 
# 488
template< class _RAIter, class _Compare> inline void pop_heap(_RAIter, _RAIter, _Compare); 
# 492
template< class _BIter> inline bool prev_permutation(_BIter, _BIter); 
# 496
template< class _BIter, class _Compare> inline bool prev_permutation(_BIter, _BIter, _Compare); 
# 500
template< class _RAIter> inline void push_heap(_RAIter, _RAIter); 
# 504
template< class _RAIter, class _Compare> inline void push_heap(_RAIter, _RAIter, _Compare); 
# 510
template< class _FIter, class _Tp> inline _FIter remove(_FIter, _FIter, const _Tp &); 
# 514
template< class _FIter, class _Predicate> inline _FIter remove_if(_FIter, _FIter, _Predicate); 
# 518
template< class _IIter, class _OIter, class _Tp> inline _OIter remove_copy(_IIter, _IIter, _OIter, const _Tp &); 
# 522
template< class _IIter, class _OIter, class _Predicate> inline _OIter remove_copy_if(_IIter, _IIter, _OIter, _Predicate); 
# 528
template< class _IIter, class _OIter, class _Tp> inline _OIter replace_copy(_IIter, _IIter, _OIter, const _Tp &, const _Tp &); 
# 532
template< class _Iter, class _OIter, class _Predicate, class _Tp> inline _OIter replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp &); 
# 538
template< class _BIter> inline void reverse(_BIter, _BIter); 
# 542
template< class _BIter, class _OIter> _OIter reverse_copy(_BIter, _BIter, _OIter); 
# 546
inline namespace _V2 { 
# 548
template< class _FIter> inline _FIter rotate(_FIter, _FIter, _FIter); 
# 551
}
# 553
template< class _FIter, class _OIter> inline _OIter rotate_copy(_FIter, _FIter, _FIter, _OIter); 
# 565 "/usr/include/c++/9/bits/algorithmfwd.h" 3
template< class _RAIter, class _UGenerator> void shuffle(_RAIter, _RAIter, _UGenerator &&); 
# 570
template< class _RAIter> inline void sort_heap(_RAIter, _RAIter); 
# 574
template< class _RAIter, class _Compare> inline void sort_heap(_RAIter, _RAIter, _Compare); 
# 578
template< class _BIter, class _Predicate> inline _BIter stable_partition(_BIter, _BIter, _Predicate); 
# 594 "/usr/include/c++/9/bits/algorithmfwd.h" 3
template< class _FIter1, class _FIter2> _FIter2 swap_ranges(_FIter1, _FIter1, _FIter2); 
# 600
template< class _FIter> inline _FIter unique(_FIter, _FIter); 
# 604
template< class _FIter, class _BinaryPredicate> inline _FIter unique(_FIter, _FIter, _BinaryPredicate); 
# 610
template< class _FIter, class _Tp> inline _FIter upper_bound(_FIter, _FIter, const _Tp &); 
# 614
template< class _FIter, class _Tp, class _Compare> inline _FIter upper_bound(_FIter, _FIter, const _Tp &, _Compare); 
# 620
template< class _FIter> inline _FIter adjacent_find(_FIter, _FIter); 
# 624
template< class _FIter, class _BinaryPredicate> inline _FIter adjacent_find(_FIter, _FIter, _BinaryPredicate); 
# 628
template< class _IIter, class _Tp> inline typename iterator_traits< _IIter> ::difference_type count(_IIter, _IIter, const _Tp &); 
# 632
template< class _IIter, class _Predicate> inline typename iterator_traits< _IIter> ::difference_type count_if(_IIter, _IIter, _Predicate); 
# 636
template< class _IIter1, class _IIter2> inline bool equal(_IIter1, _IIter1, _IIter2); 
# 640
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline bool equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate); 
# 644
template< class _IIter, class _Tp> inline _IIter find(_IIter, _IIter, const _Tp &); 
# 648
template< class _FIter1, class _FIter2> _FIter1 find_first_of(_FIter1, _FIter1, _FIter2, _FIter2); 
# 652
template< class _FIter1, class _FIter2, class _BinaryPredicate> _FIter1 find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate); 
# 656
template< class _IIter, class _Predicate> inline _IIter find_if(_IIter, _IIter, _Predicate); 
# 660
template< class _IIter, class _Funct> _Funct for_each(_IIter, _IIter, _Funct); 
# 664
template< class _FIter, class _Generator> void generate(_FIter, _FIter, _Generator); 
# 668
template< class _OIter, class _Size, class _Generator> _OIter generate_n(_OIter, _Size, _Generator); 
# 672
template< class _IIter1, class _IIter2> inline bool lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2); 
# 676
template< class _IIter1, class _IIter2, class _Compare> inline bool lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare); 
# 680
template< class _FIter> constexpr _FIter max_element(_FIter, _FIter); 
# 685
template< class _FIter, class _Compare> constexpr _FIter max_element(_FIter, _FIter, _Compare); 
# 690
template< class _IIter1, class _IIter2, class _OIter> inline _OIter merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter); 
# 694
template< class _IIter1, class _IIter2, class _OIter, class 
# 695
_Compare> inline _OIter 
# 694
merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare); 
# 699
template< class _FIter> constexpr _FIter min_element(_FIter, _FIter); 
# 704
template< class _FIter, class _Compare> constexpr _FIter min_element(_FIter, _FIter, _Compare); 
# 709
template< class _IIter1, class _IIter2> inline pair< _IIter1, _IIter2>  mismatch(_IIter1, _IIter1, _IIter2); 
# 713
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline pair< _IIter1, _IIter2>  mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate); 
# 717
template< class _RAIter> inline void nth_element(_RAIter, _RAIter, _RAIter); 
# 721
template< class _RAIter, class _Compare> inline void nth_element(_RAIter, _RAIter, _RAIter, _Compare); 
# 725
template< class _RAIter> inline void partial_sort(_RAIter, _RAIter, _RAIter); 
# 729
template< class _RAIter, class _Compare> inline void partial_sort(_RAIter, _RAIter, _RAIter, _Compare); 
# 733
template< class _BIter, class _Predicate> inline _BIter partition(_BIter, _BIter, _Predicate); 
# 737
template< class _RAIter> inline void random_shuffle(_RAIter, _RAIter); 
# 741
template< class _RAIter, class _Generator> void random_shuffle(_RAIter, _RAIter, _Generator &&); 
# 750
template< class _FIter, class _Tp> void replace(_FIter, _FIter, const _Tp &, const _Tp &); 
# 754
template< class _FIter, class _Predicate, class _Tp> void replace_if(_FIter, _FIter, _Predicate, const _Tp &); 
# 758
template< class _FIter1, class _FIter2> inline _FIter1 search(_FIter1, _FIter1, _FIter2, _FIter2); 
# 762
template< class _FIter1, class _FIter2, class _BinaryPredicate> inline _FIter1 search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate); 
# 766
template< class _FIter, class _Size, class _Tp> inline _FIter search_n(_FIter, _FIter, _Size, const _Tp &); 
# 770
template< class _FIter, class _Size, class _Tp, class 
# 771
_BinaryPredicate> inline _FIter 
# 770
search_n(_FIter, _FIter, _Size, const _Tp &, _BinaryPredicate); 
# 775
template< class _IIter1, class _IIter2, class _OIter> inline _OIter set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter); 
# 779
template< class _IIter1, class _IIter2, class _OIter, class 
# 780
_Compare> inline _OIter 
# 779
set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare); 
# 784
template< class _IIter1, class _IIter2, class _OIter> inline _OIter set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter); 
# 788
template< class _IIter1, class _IIter2, class _OIter, class 
# 789
_Compare> inline _OIter 
# 788
set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare); 
# 793
template< class _IIter1, class _IIter2, class _OIter> inline _OIter set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter); 
# 797
template< class _IIter1, class _IIter2, class _OIter, class 
# 798
_Compare> inline _OIter 
# 797
set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare); 
# 803
template< class _IIter1, class _IIter2, class _OIter> inline _OIter set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter); 
# 807
template< class _IIter1, class _IIter2, class _OIter, class 
# 808
_Compare> inline _OIter 
# 807
set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare); 
# 812
template< class _RAIter> inline void sort(_RAIter, _RAIter); 
# 816
template< class _RAIter, class _Compare> inline void sort(_RAIter, _RAIter, _Compare); 
# 820
template< class _RAIter> inline void stable_sort(_RAIter, _RAIter); 
# 824
template< class _RAIter, class _Compare> inline void stable_sort(_RAIter, _RAIter, _Compare); 
# 828
template< class _IIter, class _OIter, class _UnaryOperation> _OIter transform(_IIter, _IIter, _OIter, _UnaryOperation); 
# 832
template< class _IIter1, class _IIter2, class _OIter, class 
# 833
_BinaryOperation> _OIter 
# 832
transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation); 
# 837
template< class _IIter, class _OIter> inline _OIter unique_copy(_IIter, _IIter, _OIter); 
# 841
template< class _IIter, class _OIter, class _BinaryPredicate> inline _OIter unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate); 
# 847
}
# 62 "/usr/include/c++/9/bits/stl_heap.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 71
template< class _RandomAccessIterator, class _Distance, class 
# 72
_Compare> _Distance 
# 74
__is_heap_until(_RandomAccessIterator __first, _Distance __n, _Compare &
# 75
__comp) 
# 76
{ 
# 77
_Distance __parent = (0); 
# 78
for (_Distance __child = (1); __child < __n; ++__child) 
# 79
{ 
# 80
if (__comp(__first + __parent, __first + __child)) { 
# 81
return __child; }  
# 82
if ((__child & 1) == 0) { 
# 83
++__parent; }  
# 84
}  
# 85
return __n; 
# 86
} 
# 90
template< class _RandomAccessIterator, class _Distance> inline bool 
# 92
__is_heap(_RandomAccessIterator __first, _Distance __n) 
# 93
{ 
# 94
__gnu_cxx::__ops::_Iter_less_iter __comp; 
# 95
return std::__is_heap_until(__first, __n, __comp) == __n; 
# 96
} 
# 98
template< class _RandomAccessIterator, class _Compare, class 
# 99
_Distance> inline bool 
# 101
__is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n) 
# 102
{ 
# 103
typedef __decltype(__comp) _Cmp; 
# 104
__gnu_cxx::__ops::_Iter_comp_iter< __decltype(__comp)>  __cmp(std::move(__comp)); 
# 105
return std::__is_heap_until(__first, __n, __cmp) == __n; 
# 106
} 
# 108
template< class _RandomAccessIterator> inline bool 
# 110
__is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 111
{ return std::__is_heap(__first, std::distance(__first, __last)); } 
# 113
template< class _RandomAccessIterator, class _Compare> inline bool 
# 115
__is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 116
__comp) 
# 117
{ 
# 118
return std::__is_heap(__first, std::move(__comp), std::distance(__first, __last)); 
# 120
} 
# 125
template< class _RandomAccessIterator, class _Distance, class _Tp, class 
# 126
_Compare> void 
# 128
__push_heap(_RandomAccessIterator __first, _Distance 
# 129
__holeIndex, _Distance __topIndex, _Tp __value, _Compare &
# 130
__comp) 
# 131
{ 
# 132
_Distance __parent = (__holeIndex - 1) / 2; 
# 133
while ((__holeIndex > __topIndex) && __comp(__first + __parent, __value)) 
# 134
{ 
# 135
(*(__first + __holeIndex)) = std::move(*(__first + __parent)); 
# 136
__holeIndex = __parent; 
# 137
__parent = ((__holeIndex - 1) / 2); 
# 138
}  
# 139
(*(__first + __holeIndex)) = std::move(__value); 
# 140
} 
# 152 "/usr/include/c++/9/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline void 
# 154
push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 155
{ 
# 157
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 159
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 165
; 
# 166
; 
# 167
; 
# 169
__gnu_cxx::__ops::_Iter_less_val __comp; 
# 170
_ValueType __value = std::move(*(__last - 1)); 
# 171
std::__push_heap(__first, (_DistanceType)((__last - __first) - 1), (_DistanceType)0, std::move(__value), __comp); 
# 173
} 
# 187 "/usr/include/c++/9/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 189
push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 190
__comp) 
# 191
{ 
# 193
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 195
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 200
; 
# 201
; 
# 202
; 
# 205
__decltype((__gnu_cxx::__ops::__iter_comp_val(std::move(__comp)))) __cmp(std::move(__comp)); 
# 206
_ValueType __value = std::move(*(__last - 1)); 
# 207
std::__push_heap(__first, (_DistanceType)((__last - __first) - 1), (_DistanceType)0, std::move(__value), __cmp); 
# 209
} 
# 211
template< class _RandomAccessIterator, class _Distance, class 
# 212
_Tp, class _Compare> void 
# 214
__adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex, _Distance 
# 215
__len, _Tp __value, _Compare __comp) 
# 216
{ 
# 217
const _Distance __topIndex = __holeIndex; 
# 218
_Distance __secondChild = __holeIndex; 
# 219
while (__secondChild < ((__len - 1) / 2)) 
# 220
{ 
# 221
__secondChild = (2 * (__secondChild + 1)); 
# 222
if (__comp(__first + __secondChild, __first + (__secondChild - 1))) { 
# 224
__secondChild--; }  
# 225
(*(__first + __holeIndex)) = std::move(*(__first + __secondChild)); 
# 226
__holeIndex = __secondChild; 
# 227
}  
# 228
if (((__len & 1) == 0) && (__secondChild == ((__len - 2) / 2))) 
# 229
{ 
# 230
__secondChild = (2 * (__secondChild + 1)); 
# 231
(*(__first + __holeIndex)) = std::move(*(__first + (__secondChild - 1))); 
# 233
__holeIndex = (__secondChild - 1); 
# 234
}  
# 236
__decltype((__gnu_cxx::__ops::__iter_comp_val(std::move(__comp)))) __cmp(std::move(__comp)); 
# 237
std::__push_heap(__first, __holeIndex, __topIndex, std::move(__value), __cmp); 
# 239
} 
# 241
template< class _RandomAccessIterator, class _Compare> inline void 
# 243
__pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator 
# 244
__result, _Compare &__comp) 
# 245
{ 
# 247
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 249
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 251
_ValueType __value = std::move(*__result); 
# 252
(*__result) = std::move(*__first); 
# 253
std::__adjust_heap(__first, (_DistanceType)0, (_DistanceType)(__last - __first), std::move(__value), __comp); 
# 256
} 
# 269 "/usr/include/c++/9/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline void 
# 271
pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 272
{ 
# 278
; 
# 279
; 
# 280
; 
# 281
; 
# 283
if ((__last - __first) > 1) 
# 284
{ 
# 285
--__last; 
# 286
__gnu_cxx::__ops::_Iter_less_iter __comp; 
# 287
std::__pop_heap(__first, __last, __last, __comp); 
# 288
}  
# 289
} 
# 302 "/usr/include/c++/9/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 304
pop_heap(_RandomAccessIterator __first, _RandomAccessIterator 
# 305
__last, _Compare __comp) 
# 306
{ 
# 310
; 
# 311
; 
# 312
; 
# 313
; 
# 315
if ((__last - __first) > 1) 
# 316
{ 
# 317
typedef __decltype(__comp) _Cmp; 
# 318
__gnu_cxx::__ops::_Iter_comp_iter< __decltype(__comp)>  __cmp(std::move(__comp)); 
# 319
--__last; 
# 320
std::__pop_heap(__first, __last, __last, __cmp); 
# 321
}  
# 322
} 
# 324
template< class _RandomAccessIterator, class _Compare> void 
# 326
__make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare &
# 327
__comp) 
# 328
{ 
# 330
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 332
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 334
if ((__last - __first) < 2) { 
# 335
return; }  
# 337
const _DistanceType __len = __last - __first; 
# 338
_DistanceType __parent = (__len - 2) / 2; 
# 339
while (true) 
# 340
{ 
# 341
_ValueType __value = std::move(*(__first + __parent)); 
# 342
std::__adjust_heap(__first, __parent, __len, std::move(__value), __comp); 
# 344
if (__parent == 0) { 
# 345
return; }  
# 346
__parent--; 
# 347
}  
# 348
} 
# 358 "/usr/include/c++/9/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline void 
# 360
make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 361
{ 
# 367
; 
# 368
; 
# 370
__gnu_cxx::__ops::_Iter_less_iter __comp; 
# 371
std::__make_heap(__first, __last, __comp); 
# 372
} 
# 384 "/usr/include/c++/9/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 386
make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 387
__comp) 
# 388
{ 
# 392
; 
# 393
; 
# 395
typedef __decltype(__comp) _Cmp; 
# 396
__gnu_cxx::__ops::_Iter_comp_iter< __decltype(__comp)>  __cmp(std::move(__comp)); 
# 397
std::__make_heap(__first, __last, __cmp); 
# 398
} 
# 400
template< class _RandomAccessIterator, class _Compare> void 
# 402
__sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare &
# 403
__comp) 
# 404
{ 
# 405
while ((__last - __first) > 1) 
# 406
{ 
# 407
--__last; 
# 408
std::__pop_heap(__first, __last, __last, __comp); 
# 409
}  
# 410
} 
# 420 "/usr/include/c++/9/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline void 
# 422
sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 423
{ 
# 429
; 
# 430
; 
# 431
; 
# 433
__gnu_cxx::__ops::_Iter_less_iter __comp; 
# 434
std::__sort_heap(__first, __last, __comp); 
# 435
} 
# 447 "/usr/include/c++/9/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 449
sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 450
__comp) 
# 451
{ 
# 455
; 
# 456
; 
# 457
; 
# 459
typedef __decltype(__comp) _Cmp; 
# 460
__gnu_cxx::__ops::_Iter_comp_iter< __decltype(__comp)>  __cmp(std::move(__comp)); 
# 461
std::__sort_heap(__first, __last, __cmp); 
# 462
} 
# 475 "/usr/include/c++/9/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline _RandomAccessIterator 
# 477
is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 478
{ 
# 484
; 
# 485
; 
# 487
__gnu_cxx::__ops::_Iter_less_iter __comp; 
# 488
return __first + std::__is_heap_until(__first, std::distance(__first, __last), __comp); 
# 490
} 
# 503 "/usr/include/c++/9/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline _RandomAccessIterator 
# 505
is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 506
__comp) 
# 507
{ 
# 511
; 
# 512
; 
# 514
typedef __decltype(__comp) _Cmp; 
# 515
__gnu_cxx::__ops::_Iter_comp_iter< __decltype(__comp)>  __cmp(std::move(__comp)); 
# 516
return __first + std::__is_heap_until(__first, std::distance(__first, __last), __cmp); 
# 518
} 
# 527 "/usr/include/c++/9/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline bool 
# 529
is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 530
{ return std::is_heap_until(__first, __last) == __last; } 
# 540 "/usr/include/c++/9/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline bool 
# 542
is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 543
__comp) 
# 544
{ 
# 548
; 
# 549
; 
# 551
const auto __dist = std::distance(__first, __last); 
# 552
typedef __decltype(__comp) _Cmp; 
# 553
__gnu_cxx::__ops::_Iter_comp_iter< __decltype(__comp)>  __cmp(std::move(__comp)); 
# 554
return std::__is_heap_until(__first, __dist, __cmp) == __dist; 
# 555
} 
# 559
}
# 35 "/usr/include/c++/9/exception" 3
#pragma GCC visibility push ( default )
# 36 "/usr/include/c++/9/bits/exception.h" 3
#pragma GCC visibility push ( default )
# 40
extern "C++" {
# 42
namespace std { 
# 60 "/usr/include/c++/9/bits/exception.h" 3
class exception { 
# 63
public: exception() noexcept { } 
# 64
virtual ~exception() noexcept; 
# 66
exception(const exception &) = default;
# 67
exception &operator=(const exception &) = default;
# 68
exception(exception &&) = default;
# 69
exception &operator=(exception &&) = default;
# 75
virtual const char *what() const noexcept; 
# 76
}; 
# 80
}
# 82
}
# 84
#pragma GCC visibility pop
# 40 "/usr/include/c++/9/exception" 3
extern "C++" {
# 42
namespace std { 
# 46
class bad_exception : public exception { 
# 49
public: bad_exception() noexcept { } 
# 53
virtual ~bad_exception() noexcept; 
# 57
virtual const char *what() const noexcept; 
# 58
}; 
# 61
typedef void (*terminate_handler)(void); 
# 64
typedef void (*unexpected_handler)(void); 
# 67
terminate_handler set_terminate(terminate_handler) noexcept; 
# 71
terminate_handler get_terminate() noexcept; 
# 76
void terminate() noexcept __attribute((__noreturn__)); 
# 79
unexpected_handler set_unexpected(unexpected_handler) noexcept; 
# 83
unexpected_handler get_unexpected() noexcept; 
# 88
void unexpected() __attribute((__noreturn__)); 
# 102 "/usr/include/c++/9/exception" 3
bool uncaught_exception() noexcept __attribute((__pure__)); 
# 107
int uncaught_exceptions() noexcept __attribute((__pure__)); 
# 111
}
# 113
namespace __gnu_cxx { 
# 133 "/usr/include/c++/9/exception" 3
void __verbose_terminate_handler(); 
# 136
}
# 138
}
# 140
#pragma GCC visibility pop
# 34 "/usr/include/c++/9/bits/exception_ptr.h" 3
#pragma GCC visibility push ( default )
# 36 "/usr/include/c++/9/bits/cxxabi_init_exception.h" 3
#pragma GCC visibility push ( default )
# 50 "/usr/include/c++/9/bits/cxxabi_init_exception.h" 3
namespace std { 
# 52
class type_info; 
# 53
}
# 55
namespace __cxxabiv1 { 
# 57
struct __cxa_refcounted_exception; 
# 59
extern "C" {
# 63
void *__cxa_allocate_exception(size_t) noexcept; 
# 66
void __cxa_free_exception(void *) noexcept; 
# 70
__cxa_refcounted_exception *__cxa_init_primary_exception(void * object, std::type_info * tinfo, void (* dest)(void *)) noexcept; 
# 73
}
# 74
}
# 78
#pragma GCC visibility pop
# 37 "/usr/include/c++/9/bits/hash_bytes.h" 3
namespace std { 
# 47
size_t _Hash_bytes(const void * __ptr, size_t __len, size_t __seed); 
# 54
size_t _Fnv_hash_bytes(const void * __ptr, size_t __len, size_t __seed); 
# 57
}
# 39 "/usr/include/c++/9/typeinfo" 3
#pragma GCC visibility push ( default )
# 41
extern "C++" {
# 43
namespace __cxxabiv1 { 
# 45
class __class_type_info; 
# 46
}
# 80 "/usr/include/c++/9/typeinfo" 3
namespace std { 
# 88
class type_info { 
# 95
public: virtual ~type_info(); 
# 99
const char *name() const noexcept 
# 100
{ return (((__name)[0]) == ('*')) ? (__name) + 1 : (__name); } 
# 115 "/usr/include/c++/9/typeinfo" 3
bool before(const type_info &__arg) const noexcept 
# 116
{ return ((((__name)[0]) == ('*')) && (((__arg.__name)[0]) == ('*'))) ? (__name) < (__arg.__name) : (__builtin_strcmp(__name, __arg.__name) < 0); 
# 118
} 
# 120
bool operator==(const type_info &__arg) const noexcept 
# 121
{ 
# 122
return (((__name) == (__arg.__name)) || ((((__name)[0]) != ('*')) && (__builtin_strcmp(__name, __arg.__name) == 0))); 
# 125
} 
# 136 "/usr/include/c++/9/typeinfo" 3
bool operator!=(const type_info &__arg) const noexcept 
# 137
{ return !this->operator==(__arg); } 
# 140
size_t hash_code() const noexcept 
# 141
{ 
# 143
return _Hash_bytes(this->name(), __builtin_strlen(this->name()), static_cast< size_t>(3339675911UL)); 
# 148
} 
# 152
virtual bool __is_pointer_p() const; 
# 155
virtual bool __is_function_p() const; 
# 163
virtual bool __do_catch(const type_info * __thr_type, void ** __thr_obj, unsigned __outer) const; 
# 167
virtual bool __do_upcast(const __cxxabiv1::__class_type_info * __target, void ** __obj_ptr) const; 
# 171
protected: const char *__name; 
# 173
explicit type_info(const char *__n) : __name(__n) { } 
# 177
private: type_info &operator=(const type_info &); 
# 178
type_info(const type_info &); 
# 179
}; 
# 187
class bad_cast : public exception { 
# 190
public: bad_cast() noexcept { } 
# 194
virtual ~bad_cast() noexcept; 
# 197
virtual const char *what() const noexcept; 
# 198
}; 
# 204
class bad_typeid : public exception { 
# 207
public: bad_typeid() noexcept { } 
# 211
virtual ~bad_typeid() noexcept; 
# 214
virtual const char *what() const noexcept; 
# 215
}; 
# 216
}
# 218
}
# 220
#pragma GCC visibility pop
# 42 "/usr/include/c++/9/bits/exception_ptr.h" 3
extern "C++" {
# 44
namespace std { 
# 46
class type_info; 
# 52
namespace __exception_ptr { 
# 54
class exception_ptr; 
# 55
}
# 57
using __exception_ptr::exception_ptr;
# 63
__exception_ptr::exception_ptr current_exception() noexcept; 
# 65
template< class _Ex> __exception_ptr::exception_ptr make_exception_ptr(_Ex) noexcept; 
# 69
void rethrow_exception(__exception_ptr::exception_ptr) __attribute((__noreturn__)); 
# 71
namespace __exception_ptr { 
# 73
using std::rethrow_exception;
# 79
class exception_ptr { 
# 81
void *_M_exception_object; 
# 83
explicit exception_ptr(void * __e) noexcept; 
# 85
void _M_addref() noexcept; 
# 86
void _M_release() noexcept; 
# 88
void *_M_get() const noexcept __attribute((__pure__)); 
# 90
friend exception_ptr std::current_exception() noexcept; 
# 91
friend void std::rethrow_exception(exception_ptr); 
# 92
template< class _Ex> friend exception_ptr std::make_exception_ptr(_Ex) noexcept; 
# 96
public: exception_ptr() noexcept; 
# 98
exception_ptr(const exception_ptr &) noexcept; 
# 101
exception_ptr(nullptr_t) noexcept : _M_exception_object((0)) 
# 103
{ } 
# 105
exception_ptr(exception_ptr &&__o) noexcept : _M_exception_object(__o._M_exception_object) 
# 107
{ (__o._M_exception_object) = (0); } 
# 118 "/usr/include/c++/9/bits/exception_ptr.h" 3
exception_ptr &operator=(const exception_ptr &) noexcept; 
# 122
exception_ptr &operator=(exception_ptr &&__o) noexcept 
# 123
{ 
# 124
((exception_ptr)(static_cast< exception_ptr &&>(__o))).swap(*this); 
# 125
return *this; 
# 126
} 
# 129
~exception_ptr() noexcept; 
# 132
void swap(exception_ptr &) noexcept; 
# 144 "/usr/include/c++/9/bits/exception_ptr.h" 3
explicit operator bool() const 
# 145
{ return _M_exception_object; } 
# 149
friend bool operator==(const exception_ptr &, const exception_ptr &) noexcept
# 150
 __attribute((__pure__)); 
# 153
const type_info *__cxa_exception_type() const noexcept
# 154
 __attribute((__pure__)); 
# 155
}; 
# 158
bool operator==(const exception_ptr &, const exception_ptr &) noexcept
# 159
 __attribute((__pure__)); 
# 162
bool operator!=(const exception_ptr &, const exception_ptr &) noexcept
# 163
 __attribute((__pure__)); 
# 166
inline void swap(exception_ptr &__lhs, exception_ptr &__rhs) 
# 167
{ __lhs.swap(__rhs); } 
# 169
template< class _Ex> inline void 
# 171
__dest_thunk(void *__x) 
# 172
{ (static_cast< _Ex *>(__x))->~_Ex(); } 
# 174
}
# 177
template< class _Ex> __exception_ptr::exception_ptr 
# 179
make_exception_ptr(_Ex __ex) noexcept 
# 180
{ 
# 182
void *__e = __cxxabiv1::__cxa_allocate_exception(sizeof(_Ex)); 
# 183
(void)__cxxabiv1::__cxa_init_primary_exception(__e, const_cast< type_info *>(&typeid(__ex)), __exception_ptr::__dest_thunk< _Ex> ); 
# 186
try 
# 187
{ 
# 188
::new (__e) _Ex(__ex); 
# 189
return ((__exception_ptr::exception_ptr)(__e)); 
# 190
} 
# 191
catch (...) 
# 192
{ 
# 193
__cxxabiv1::__cxa_free_exception(__e); 
# 194
return current_exception(); 
# 195
}  
# 208 "/usr/include/c++/9/bits/exception_ptr.h" 3
} 
# 211
}
# 213
}
# 215
#pragma GCC visibility pop
# 33 "/usr/include/c++/9/bits/nested_exception.h" 3
#pragma GCC visibility push ( default )
# 42 "/usr/include/c++/9/bits/nested_exception.h" 3
extern "C++" {
# 44
namespace std { 
# 52
class nested_exception { 
# 54
__exception_ptr::exception_ptr _M_ptr; 
# 57
public: nested_exception() noexcept : _M_ptr(current_exception()) { } 
# 59
nested_exception(const nested_exception &) noexcept = default;
# 61
nested_exception &operator=(const nested_exception &) noexcept = default;
# 63
virtual ~nested_exception() noexcept; 
# 65
[[noreturn]] void 
# 67
rethrow_nested() const 
# 68
{ 
# 69
if ((_M_ptr)) { 
# 70
rethrow_exception(_M_ptr); }  
# 71
std::terminate(); 
# 72
} 
# 75
__exception_ptr::exception_ptr nested_ptr() const noexcept 
# 76
{ return _M_ptr; } 
# 77
}; 
# 79
template< class _Except> 
# 80
struct _Nested_exception : public _Except, public nested_exception { 
# 82
explicit _Nested_exception(const _Except &__ex) : _Except(__ex) 
# 84
{ } 
# 86
explicit _Nested_exception(_Except &&__ex) : _Except(static_cast< _Except &&>(__ex)) 
# 88
{ } 
# 89
}; 
# 94
template< class _Tp> 
# 95
[[noreturn]] inline void 
# 97
__throw_with_nested_impl(_Tp &&__t, true_type) 
# 98
{ 
# 99
using _Up = typename remove_reference< _Tp> ::type; 
# 100
throw _Nested_exception< typename remove_reference< _Tp> ::type> {std::forward< _Tp> (__t)}; 
# 101
} 
# 103
template< class _Tp> 
# 104
[[noreturn]] inline void 
# 106
__throw_with_nested_impl(_Tp &&__t, false_type) 
# 107
{ throw std::forward< _Tp> (__t); } 
# 111
template< class _Tp> 
# 112
[[noreturn]] inline void 
# 114
throw_with_nested(_Tp &&__t) 
# 115
{ 
# 116
using _Up = typename decay< _Tp> ::type; 
# 117
using _CopyConstructible = __and_< is_copy_constructible< typename decay< _Tp> ::type> , is_move_constructible< typename decay< _Tp> ::type> > ; 
# 119
static_assert((_CopyConstructible::value), "throw_with_nested argument must be CopyConstructible");
# 121
using __nest = __and_< is_class< typename decay< _Tp> ::type> , __bool_constant< !__is_final(_Up)> , __not_< is_base_of< nested_exception, typename decay< _Tp> ::type> > > ; 
# 123
std::__throw_with_nested_impl(std::forward< _Tp> (__t), __nest{}); 
# 124
} 
# 127
template< class _Tp> using __rethrow_if_nested_cond = typename enable_if< __and_< is_polymorphic< _Tp> , __or_< __not_< is_base_of< nested_exception, _Tp> > , is_convertible< _Tp *, nested_exception *> > > ::value> ::type; 
# 135
template< class _Ex> inline __rethrow_if_nested_cond< _Ex>  
# 137
__rethrow_if_nested_impl(const _Ex *__ptr) 
# 138
{ 
# 139
if (auto __ne_ptr = dynamic_cast< const nested_exception *>(__ptr)) { 
# 140
__ne_ptr->rethrow_nested(); }  
# 141
} 
# 145
inline void __rethrow_if_nested_impl(const void *) 
# 146
{ } 
# 149
template< class _Ex> inline void 
# 151
rethrow_if_nested(const _Ex &__ex) 
# 152
{ std::__rethrow_if_nested_impl(std::__addressof(__ex)); } 
# 155
}
# 157
}
# 161
#pragma GCC visibility pop
# 42 "/usr/include/c++/9/new" 3
#pragma GCC visibility push ( default )
# 44
extern "C++" {
# 46
namespace std { 
# 54
class bad_alloc : public exception { 
# 57
public: bad_alloc() throw() { } 
# 60
bad_alloc(const bad_alloc &) = default;
# 61
bad_alloc &operator=(const bad_alloc &) = default;
# 66
virtual ~bad_alloc() throw(); 
# 69
virtual const char *what() const throw(); 
# 70
}; 
# 73
class bad_array_new_length : public bad_alloc { 
# 76
public: bad_array_new_length() throw() { } 
# 80
virtual ~bad_array_new_length() throw(); 
# 83
virtual const char *what() const throw(); 
# 84
}; 
# 91
struct nothrow_t { 
# 94
explicit nothrow_t() = default;
# 96
}; 
# 98
extern const nothrow_t nothrow; 
# 102
typedef void (*new_handler)(void); 
# 106
new_handler set_new_handler(new_handler) throw(); 
# 110
new_handler get_new_handler() noexcept; 
# 112
}
# 125 "/usr/include/c++/9/new" 3
void *operator new(std::size_t)
# 126
 __attribute((__externally_visible__)); 
# 127
void *operator new[](std::size_t)
# 128
 __attribute((__externally_visible__)); 
# 129
void operator delete(void *) noexcept
# 130
 __attribute((__externally_visible__)); 
# 131
void operator delete[](void *) noexcept
# 132
 __attribute((__externally_visible__)); 
# 134
void operator delete(void *, std::size_t) noexcept
# 135
 __attribute((__externally_visible__)); 
# 136
void operator delete[](void *, std::size_t) noexcept
# 137
 __attribute((__externally_visible__)); 
# 139
void *operator new(std::size_t, const std::nothrow_t &) noexcept
# 140
 __attribute((__externally_visible__, __malloc__)); 
# 141
void *operator new[](std::size_t, const std::nothrow_t &) noexcept
# 142
 __attribute((__externally_visible__, __malloc__)); 
# 143
void operator delete(void *, const std::nothrow_t &) noexcept
# 144
 __attribute((__externally_visible__)); 
# 145
void operator delete[](void *, const std::nothrow_t &) noexcept
# 146
 __attribute((__externally_visible__)); 
# 173 "/usr/include/c++/9/new" 3
inline void *operator new(std::size_t, void *__p) noexcept 
# 174
{ return __p; } 
# 175
inline void *operator new[](std::size_t, void *__p) noexcept 
# 176
{ return __p; } 
# 179
inline void operator delete(void *, void *) noexcept { } 
# 180
inline void operator delete[](void *, void *) noexcept { } 
# 182
}
# 226 "/usr/include/c++/9/new" 3
#pragma GCC visibility pop
# 50 "/usr/include/c++/9/bits/memoryfwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 63 "/usr/include/c++/9/bits/memoryfwd.h" 3
template< class > class allocator; 
# 67
template<> class allocator< void> ; 
# 71
template< class , class > struct uses_allocator; 
# 78
}
# 41 "/usr/include/c++/9/bits/alloc_traits.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
struct __allocator_traits_base { 
# 47
template< class _Tp, class _Up, class  = void> 
# 48
struct __rebind : public __replace_first_arg< _Tp, _Up>  { }; 
# 50
template< class _Tp, class _Up> 
# 51
struct __rebind< _Tp, _Up, __void_t< typename _Tp::template rebind< _Up> ::other> >  { 
# 53
using type = typename _Tp::template rebind< _Up> ::other; }; 
# 57
protected: 
# 56
template< class _Tp> using __pointer = typename _Tp::pointer; 
# 58
template< class _Tp> using __c_pointer = typename _Tp::const_pointer; 
# 60
template< class _Tp> using __v_pointer = typename _Tp::void_pointer; 
# 62
template< class _Tp> using __cv_pointer = typename _Tp::const_void_pointer; 
# 64
template< class _Tp> using __pocca = typename _Tp::propagate_on_container_copy_assignment; 
# 66
template< class _Tp> using __pocma = typename _Tp::propagate_on_container_move_assignment; 
# 68
template< class _Tp> using __pocs = typename _Tp::propagate_on_container_swap; 
# 70
template< class _Tp> using __equal = typename _Tp::is_always_equal; 
# 72
}; 
# 74
template< class _Alloc, class _Up> using __alloc_rebind = typename __allocator_traits_base::__rebind< _Alloc, _Up> ::type; 
# 82
template< class _Alloc> 
# 83
struct allocator_traits : public __allocator_traits_base { 
# 86
typedef _Alloc allocator_type; 
# 88
typedef typename _Alloc::value_type value_type; 
# 95
using pointer = __detected_or_t< value_type *, __pointer, _Alloc> ; 
# 100
private: 
# 99
template< template< class >  class _Func, class _Tp, class  = void> 
# 100
struct _Ptr { 
# 102
using type = typename pointer_traits< pointer> ::template rebind< _Tp> ; 
# 103
}; 
# 105
template< template< class >  class _Func, class _Tp> 
# 106
struct _Ptr< _Func, _Tp, __void_t< _Func< _Alloc> > >  { 
# 108
using type = _Func< _Alloc> ; 
# 109
}; 
# 112
template< class _A2, class _PtrT, class  = void> 
# 113
struct _Diff { 
# 114
using type = typename pointer_traits< _PtrT> ::difference_type; }; 
# 116
template< class _A2, class _PtrT> 
# 117
struct _Diff< _A2, _PtrT, __void_t< typename _A2::difference_type> >  { 
# 118
using type = typename _A2::difference_type; }; 
# 121
template< class _A2, class _DiffT, class  = void> 
# 122
struct _Size : public make_unsigned< _DiffT>  { }; 
# 124
template< class _A2, class _DiffT> 
# 125
struct _Size< _A2, _DiffT, __void_t< typename _A2::size_type> >  { 
# 126
using type = typename _A2::size_type; }; 
# 135
public: using const_pointer = typename _Ptr< __c_pointer, const value_type> ::type; 
# 143
using void_pointer = typename _Ptr< __v_pointer, void> ::type; 
# 151
using const_void_pointer = typename _Ptr< __cv_pointer, const void> ::type; 
# 159
using difference_type = typename _Diff< _Alloc, pointer> ::type; 
# 167
using size_type = typename _Size< _Alloc, difference_type> ::type; 
# 175
using propagate_on_container_copy_assignment = __detected_or_t< false_type, __pocca, _Alloc> ; 
# 184
using propagate_on_container_move_assignment = __detected_or_t< false_type, __pocma, _Alloc> ; 
# 193
using propagate_on_container_swap = __detected_or_t< false_type, __pocs, _Alloc> ; 
# 202
using is_always_equal = __detected_or_t< typename is_empty< _Alloc> ::type, __equal, _Alloc> ; 
# 205
template< class _Tp> using rebind_alloc = __alloc_rebind< _Alloc, _Tp> ; 
# 207
template< class _Tp> using rebind_traits = allocator_traits< rebind_alloc< _Tp> > ; 
# 213
private: 
# 211
template< class _Alloc2> static auto 
# 213
_S_allocate(_Alloc2 &__a, size_type __n, const_void_pointer __hint, int)->__decltype((__a.allocate(__n, __hint))) 
# 215
{ return __a.allocate(__n, __hint); } 
# 217
template< class _Alloc2> static pointer 
# 219
_S_allocate(_Alloc2 &__a, size_type __n, const_void_pointer, ...) 
# 220
{ return __a.allocate(__n); } 
# 222
template< class _Tp, class ..._Args> 
# 223
struct __construct_helper { 
# 225
template< class _Alloc2, class 
# 226
 = __decltype((std::declval< _Alloc2 *> ()->construct(std::declval< _Tp *> (), std::declval< _Args> ()...)))> static true_type 
# 225
__test(int); 
# 230
template< class > static false_type __test(...); 
# 233
using type = __decltype((__test< _Alloc> (0))); 
# 234
}; 
# 236
template< class _Tp, class ..._Args> using __has_construct = typename __construct_helper< _Tp, _Args...> ::type; 
# 240
template< class _Tp, class ..._Args> static _Require< __has_construct< _Tp, _Args...> >  
# 242
_S_construct(_Alloc &__a, _Tp *__p, _Args &&...__args) noexcept(noexcept(__a.construct(__p, std::forward< _Args> (__args)...))) 
# 244
{ __a.construct(__p, std::forward< _Args> (__args)...); } 
# 246
template< class _Tp, class ..._Args> static _Require< __and_< __not_< __has_construct< _Tp, _Args...> > , is_constructible< _Tp, _Args...> > >  
# 250
_S_construct(_Alloc &, _Tp *__p, _Args &&...__args) noexcept(std::template is_nothrow_constructible< _Tp, _Args...> ::value) 
# 252
{ ::new ((void *)__p) _Tp(std::forward< _Args> (__args)...); } 
# 254
template< class _Alloc2, class _Tp> static auto 
# 256
_S_destroy(_Alloc2 &__a, _Tp *__p, int) noexcept(noexcept(__a.destroy(__p)))->__decltype((__a.destroy(__p))) 
# 259
{ __a.destroy(__p); } 
# 261
template< class _Alloc2, class _Tp> static void 
# 263
_S_destroy(_Alloc2 &, _Tp *__p, ...) noexcept(std::template is_nothrow_destructible< _Tp> ::value) 
# 265
{ __p->~_Tp(); } 
# 267
template< class _Alloc2> static auto 
# 269
_S_max_size(_Alloc2 &__a, int)->__decltype((__a.max_size())) 
# 271
{ return __a.max_size(); } 
# 273
template< class _Alloc2> static size_type 
# 275
_S_max_size(_Alloc2 &, ...) 
# 276
{ 
# 279
return __gnu_cxx::template __numeric_traits< size_type> ::__max / sizeof(value_type); 
# 281
} 
# 283
template< class _Alloc2> static auto 
# 285
_S_select(_Alloc2 &__a, int)->__decltype((__a.select_on_container_copy_construction())) 
# 287
{ return __a.select_on_container_copy_construction(); } 
# 289
template< class _Alloc2> static _Alloc2 
# 291
_S_select(_Alloc2 &__a, ...) 
# 292
{ return __a; } 
# 304 "/usr/include/c++/9/bits/alloc_traits.h" 3
public: static pointer allocate(_Alloc &__a, size_type __n) 
# 305
{ return __a.allocate(__n); } 
# 319 "/usr/include/c++/9/bits/alloc_traits.h" 3
static pointer allocate(_Alloc &__a, size_type __n, const_void_pointer __hint) 
# 320
{ return _S_allocate(__a, __n, __hint, 0); } 
# 331 "/usr/include/c++/9/bits/alloc_traits.h" 3
static void deallocate(_Alloc &__a, pointer __p, size_type __n) 
# 332
{ __a.deallocate(__p, __n); } 
# 345 "/usr/include/c++/9/bits/alloc_traits.h" 3
template< class _Tp, class ..._Args> static auto 
# 346
construct(_Alloc &__a, _Tp *__p, _Args &&...__args) noexcept(noexcept(_S_construct(__a, __p, std::forward< _Args> (__args)...)))->__decltype((_S_construct(__a, __p, std::forward< _Args> (__args)...))) 
# 350
{ _S_construct(__a, __p, std::forward< _Args> (__args)...); } 
# 360 "/usr/include/c++/9/bits/alloc_traits.h" 3
template< class _Tp> static void 
# 361
destroy(_Alloc &__a, _Tp *__p) noexcept(noexcept(_S_destroy(__a, __p, 0))) 
# 363
{ _S_destroy(__a, __p, 0); } 
# 373 "/usr/include/c++/9/bits/alloc_traits.h" 3
static size_type max_size(const _Alloc &__a) noexcept 
# 374
{ return _S_max_size(__a, 0); } 
# 385 "/usr/include/c++/9/bits/alloc_traits.h" 3
static _Alloc select_on_container_copy_construction(const _Alloc &__rhs) 
# 386
{ return _S_select(__rhs, 0); } 
# 387
}; 
# 390
template< class _Tp> 
# 391
struct allocator_traits< allocator< _Tp> >  { 
# 394
using allocator_type = allocator< _Tp> ; 
# 396
using value_type = _Tp; 
# 399
using pointer = _Tp *; 
# 402
using const_pointer = const _Tp *; 
# 405
using void_pointer = void *; 
# 408
using const_void_pointer = const void *; 
# 411
using difference_type = ptrdiff_t; 
# 414
using size_type = size_t; 
# 417
using propagate_on_container_copy_assignment = false_type; 
# 420
using propagate_on_container_move_assignment = true_type; 
# 423
using propagate_on_container_swap = false_type; 
# 426
using is_always_equal = true_type; 
# 428
template< class _Up> using rebind_alloc = allocator< _Up> ; 
# 431
template< class _Up> using rebind_traits = std::allocator_traits< allocator< _Up> > ; 
# 442 "/usr/include/c++/9/bits/alloc_traits.h" 3
static pointer allocate(allocator_type &__a, size_type __n) 
# 443
{ return __a.allocate(__n); } 
# 456 "/usr/include/c++/9/bits/alloc_traits.h" 3
static pointer allocate(allocator_type &__a, size_type __n, const_void_pointer __hint) 
# 457
{ return __a.allocate(__n, __hint); } 
# 468 "/usr/include/c++/9/bits/alloc_traits.h" 3
static void deallocate(allocator_type &__a, pointer __p, size_type __n) 
# 469
{ __a.deallocate(__p, __n); } 
# 479 "/usr/include/c++/9/bits/alloc_traits.h" 3
template< class _Up, class ..._Args> static void 
# 481
construct(allocator_type &__a, _Up *__p, _Args &&...__args) noexcept(std::template is_nothrow_constructible< _Up, _Args...> ::value) 
# 483
{ __a.construct(__p, std::forward< _Args> (__args)...); } 
# 492 "/usr/include/c++/9/bits/alloc_traits.h" 3
template< class _Up> static void 
# 494
destroy(allocator_type &__a, _Up *__p) noexcept(noexcept(__a.destroy(__p))) 
# 496
{ __a.destroy(__p); } 
# 504
static size_type max_size(const allocator_type &__a) noexcept 
# 505
{ return __a.max_size(); } 
# 513
static allocator_type select_on_container_copy_construction(const allocator_type &__rhs) 
# 514
{ return __rhs; } 
# 515
}; 
# 518
template< class _Alloc> inline void 
# 520
__do_alloc_on_copy(_Alloc &__one, const _Alloc &__two, true_type) 
# 521
{ __one = __two; } 
# 523
template< class _Alloc> inline void 
# 525
__do_alloc_on_copy(_Alloc &, const _Alloc &, false_type) 
# 526
{ } 
# 528
template< class _Alloc> inline void 
# 529
__alloc_on_copy(_Alloc &__one, const _Alloc &__two) 
# 530
{ 
# 531
typedef allocator_traits< _Alloc>  __traits; 
# 532
typedef typename allocator_traits< _Alloc> ::propagate_on_container_copy_assignment __pocca; 
# 533
__do_alloc_on_copy(__one, __two, __pocca()); 
# 534
} 
# 536
template< class _Alloc> inline _Alloc 
# 537
__alloc_on_copy(const _Alloc &__a) 
# 538
{ 
# 539
typedef allocator_traits< _Alloc>  __traits; 
# 540
return __traits::select_on_container_copy_construction(__a); 
# 541
} 
# 543
template< class _Alloc> inline void 
# 544
__do_alloc_on_move(_Alloc &__one, _Alloc &__two, true_type) 
# 545
{ __one = std::move(__two); } 
# 547
template< class _Alloc> inline void 
# 548
__do_alloc_on_move(_Alloc &, _Alloc &, false_type) 
# 549
{ } 
# 551
template< class _Alloc> inline void 
# 552
__alloc_on_move(_Alloc &__one, _Alloc &__two) 
# 553
{ 
# 554
typedef allocator_traits< _Alloc>  __traits; 
# 555
typedef typename allocator_traits< _Alloc> ::propagate_on_container_move_assignment __pocma; 
# 556
__do_alloc_on_move(__one, __two, __pocma()); 
# 557
} 
# 559
template< class _Alloc> inline void 
# 560
__do_alloc_on_swap(_Alloc &__one, _Alloc &__two, true_type) 
# 561
{ 
# 562
using std::swap;
# 563
swap(__one, __two); 
# 564
} 
# 566
template< class _Alloc> inline void 
# 567
__do_alloc_on_swap(_Alloc &, _Alloc &, false_type) 
# 568
{ } 
# 570
template< class _Alloc> inline void 
# 571
__alloc_on_swap(_Alloc &__one, _Alloc &__two) 
# 572
{ 
# 573
typedef allocator_traits< _Alloc>  __traits; 
# 574
typedef typename allocator_traits< _Alloc> ::propagate_on_container_swap __pocs; 
# 575
__do_alloc_on_swap(__one, __two, __pocs()); 
# 576
} 
# 578
template< class _Alloc, class _Tp, class 
# 579
_ValueT = __remove_cvref_t< typename _Alloc::value_type> , class 
# 580
 = void> 
# 581
struct __is_alloc_insertable_impl : public false_type { 
# 583
}; 
# 585
template< class _Alloc, class _Tp, class _ValueT> 
# 586
struct __is_alloc_insertable_impl< _Alloc, _Tp, _ValueT, __void_t< __decltype((allocator_traits< _Alloc> ::construct(std::declval< _Alloc &> (), std::declval< _ValueT *> (), std::declval< _Tp> ())))> >  : public true_type { 
# 591
}; 
# 596
template< class _Alloc> 
# 597
struct __is_copy_insertable : public __is_alloc_insertable_impl< _Alloc, const typename _Alloc::value_type &> ::type { 
# 600
}; 
# 603
template< class _Tp> 
# 604
struct __is_copy_insertable< allocator< _Tp> >  : public is_copy_constructible< _Tp>  { 
# 606
}; 
# 611
template< class _Alloc> 
# 612
struct __is_move_insertable : public __is_alloc_insertable_impl< _Alloc, typename _Alloc::value_type> ::type { 
# 614
}; 
# 617
template< class _Tp> 
# 618
struct __is_move_insertable< allocator< _Tp> >  : public is_move_constructible< _Tp>  { 
# 620
}; 
# 623
template< class _Alloc, class  = void> 
# 624
struct __is_allocator : public false_type { }; 
# 626
template< class _Alloc> 
# 627
struct __is_allocator< _Alloc, __void_t< typename _Alloc::value_type, __decltype((std::declval< _Alloc &> ().allocate((unsigned long)0UL)))> >  : public true_type { 
# 630
}; 
# 632
template< class _Alloc> using _RequireAllocator = typename enable_if< __is_allocator< _Alloc> ::value, _Alloc> ::type; 
# 636
template< class _Alloc> using _RequireNotAllocator = typename enable_if< !__is_allocator< _Alloc> ::value, _Alloc> ::type; 
# 641
}
# 41 "/usr/include/c++/9/ext/alloc_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 49
template< class _Alloc, class  = typename _Alloc::value_type> 
# 50
struct __alloc_traits : public std::allocator_traits< _Alloc>  { 
# 55
typedef _Alloc allocator_type; 
# 57
typedef std::allocator_traits< _Alloc>  _Base_type; 
# 58
typedef typename std::allocator_traits< _Alloc> ::value_type value_type; 
# 59
typedef typename std::allocator_traits< _Alloc> ::pointer pointer; 
# 60
typedef typename std::allocator_traits< _Alloc> ::const_pointer const_pointer; 
# 61
typedef typename std::allocator_traits< _Alloc> ::size_type size_type; 
# 62
typedef typename std::allocator_traits< _Alloc> ::difference_type difference_type; 
# 64
typedef value_type &reference; 
# 65
typedef const value_type &const_reference; 
# 66
using std::allocator_traits< _Alloc> ::allocate;
# 67
using std::allocator_traits< _Alloc> ::deallocate;
# 68
using std::allocator_traits< _Alloc> ::construct;
# 69
using std::allocator_traits< _Alloc> ::destroy;
# 70
using std::allocator_traits< _Alloc> ::max_size;
# 74
private: 
# 73
template< class _Ptr> using __is_custom_pointer = std::__and_< std::is_same< pointer, _Ptr> , std::__not_< std::is_pointer< _Ptr> > > ; 
# 82
public: 
# 80
template< class _Ptr, class ..._Args> static typename std::enable_if< __is_custom_pointer< _Ptr> ::value> ::type 
# 82
construct(_Alloc &__a, _Ptr __p, _Args &&...__args) noexcept(noexcept(_Base_type::construct(__a, std::__to_address(__p), std::forward< _Args> (__args)...))) 
# 85
{ 
# 86
_Base_type::construct(__a, std::__to_address(__p), std::forward< _Args> (__args)...); 
# 88
} 
# 91
template< class _Ptr> static typename std::enable_if< __is_custom_pointer< _Ptr> ::value> ::type 
# 93
destroy(_Alloc &__a, _Ptr __p) noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p)))) 
# 95
{ _Base_type::destroy(__a, std::__to_address(__p)); } 
# 97
static _Alloc _S_select_on_copy(const _Alloc &__a) 
# 98
{ return _Base_type::select_on_container_copy_construction(__a); } 
# 100
static void _S_on_swap(_Alloc &__a, _Alloc &__b) 
# 101
{ std::__alloc_on_swap(__a, __b); } 
# 103
static constexpr bool _S_propagate_on_copy_assign() 
# 104
{ return _Base_type::propagate_on_container_copy_assignment::value; } 
# 106
static constexpr bool _S_propagate_on_move_assign() 
# 107
{ return _Base_type::propagate_on_container_move_assignment::value; } 
# 109
static constexpr bool _S_propagate_on_swap() 
# 110
{ return _Base_type::propagate_on_container_swap::value; } 
# 112
static constexpr bool _S_always_equal() 
# 113
{ return _Base_type::is_always_equal::value; } 
# 115
static constexpr bool _S_nothrow_move() 
# 116
{ return (_S_propagate_on_move_assign)() || (_S_always_equal)(); } 
# 118
template< class _Tp> 
# 119
struct rebind { 
# 120
typedef typename std::allocator_traits< _Alloc> ::template rebind_alloc< _Tp>  other; }; 
# 161 "/usr/include/c++/9/ext/alloc_traits.h" 3
}; 
# 164
}
# 63 "/usr/include/c++/9/bits/stl_construct.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 72
template< class _T1, class ..._Args> inline void 
# 74
_Construct(_T1 *__p, _Args &&...__args) 
# 75
{ ::new (static_cast< void *>(__p)) _T1(std::forward< _Args> (__args)...); } 
# 87 "/usr/include/c++/9/bits/stl_construct.h" 3
template< class _T1> inline void 
# 89
_Construct_novalue(_T1 *__p) 
# 90
{ ::new (static_cast< void *>(__p)) _T1; } 
# 95
template< class _Tp> inline void 
# 97
_Destroy(_Tp *__pointer) 
# 98
{ __pointer->~_Tp(); } 
# 100
template< bool > 
# 101
struct _Destroy_aux { 
# 103
template< class _ForwardIterator> static void 
# 105
__destroy(_ForwardIterator __first, _ForwardIterator __last) 
# 106
{ 
# 107
for (; __first != __last; ++__first) { 
# 108
std::_Destroy(std::__addressof(*__first)); }  
# 109
} 
# 110
}; 
# 113
template<> struct _Destroy_aux< true>  { 
# 115
template< class _ForwardIterator> static void 
# 117
__destroy(_ForwardIterator, _ForwardIterator) { } 
# 118
}; 
# 125
template< class _ForwardIterator> inline void 
# 127
_Destroy(_ForwardIterator __first, _ForwardIterator __last) 
# 128
{ 
# 130
typedef typename iterator_traits< _ForwardIterator> ::value_type _Value_type; 
# 133
static_assert((is_destructible< typename iterator_traits< _ForwardIterator> ::value_type> ::value), "value type is destructible");
# 136
std::template _Destroy_aux< __has_trivial_destructor(_Value_type)> ::__destroy(__first, __last); 
# 138
} 
# 140
template< bool > 
# 141
struct _Destroy_n_aux { 
# 143
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 145
__destroy_n(_ForwardIterator __first, _Size __count) 
# 146
{ 
# 147
for (; __count > 0; ((void)(++__first)), (--__count)) { 
# 148
std::_Destroy(std::__addressof(*__first)); }  
# 149
return __first; 
# 150
} 
# 151
}; 
# 154
template<> struct _Destroy_n_aux< true>  { 
# 156
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 158
__destroy_n(_ForwardIterator __first, _Size __count) 
# 159
{ 
# 160
std::advance(__first, __count); 
# 161
return __first; 
# 162
} 
# 163
}; 
# 170
template< class _ForwardIterator, class _Size> inline _ForwardIterator 
# 172
_Destroy_n(_ForwardIterator __first, _Size __count) 
# 173
{ 
# 175
typedef typename iterator_traits< _ForwardIterator> ::value_type _Value_type; 
# 178
static_assert((is_destructible< typename iterator_traits< _ForwardIterator> ::value_type> ::value), "value type is destructible");
# 181
return std::template _Destroy_n_aux< __has_trivial_destructor(_Value_type)> ::__destroy_n(__first, __count); 
# 183
} 
# 191
template< class _ForwardIterator, class _Allocator> void 
# 193
_Destroy(_ForwardIterator __first, _ForwardIterator __last, _Allocator &
# 194
__alloc) 
# 195
{ 
# 196
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 197
for (; __first != __last; ++__first) { 
# 198
__traits::destroy(__alloc, std::__addressof(*__first)); }  
# 199
} 
# 201
template< class _ForwardIterator, class _Tp> inline void 
# 203
_Destroy(_ForwardIterator __first, _ForwardIterator __last, allocator< _Tp>  &) 
# 205
{ 
# 206
_Destroy(__first, __last); 
# 207
} 
# 233 "/usr/include/c++/9/bits/stl_construct.h" 3
}
# 62 "/usr/include/c++/9/bits/stl_tempbuf.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 83 "/usr/include/c++/9/bits/stl_tempbuf.h" 3
template< class _Tp> pair< _Tp *, long>  
# 85
get_temporary_buffer(ptrdiff_t __len) noexcept 
# 86
{ 
# 87
const ptrdiff_t __max = (__gnu_cxx::__numeric_traits_integer< ptrdiff_t> ::__max / sizeof(_Tp)); 
# 89
if (__len > __max) { 
# 90
__len = __max; }  
# 92
while (__len > (0)) 
# 93
{ 
# 94
_Tp *__tmp = static_cast< _Tp *>(::operator new(__len * sizeof(_Tp), std::nothrow)); 
# 96
if (__tmp != 0) { 
# 97
return pair< _Tp *, long> (__tmp, __len); }  
# 98
__len /= (2); 
# 99
}  
# 100
return pair< _Tp *, ptrdiff_t> (static_cast< _Tp *>(0), 0); 
# 101
} 
# 110 "/usr/include/c++/9/bits/stl_tempbuf.h" 3
template< class _Tp> inline void 
# 112
return_temporary_buffer(_Tp *__p) 
# 113
{ ::operator delete(__p); } 
# 121
template< class _ForwardIterator, class _Tp> 
# 122
class _Temporary_buffer { 
# 128
public: typedef _Tp value_type; 
# 129
typedef value_type *pointer; 
# 130
typedef pointer iterator; 
# 131
typedef ptrdiff_t size_type; 
# 134
protected: size_type _M_original_len; 
# 135
size_type _M_len; 
# 136
pointer _M_buffer; 
# 141
public: size_type size() const 
# 142
{ return _M_len; } 
# 146
size_type requested_size() const 
# 147
{ return _M_original_len; } 
# 151
iterator begin() 
# 152
{ return _M_buffer; } 
# 156
iterator end() 
# 157
{ return (_M_buffer) + (_M_len); } 
# 163
_Temporary_buffer(_ForwardIterator __seed, size_type __original_len); 
# 165
~_Temporary_buffer() 
# 166
{ 
# 167
std::_Destroy(_M_buffer, (_M_buffer) + (_M_len)); 
# 168
std::return_temporary_buffer(_M_buffer); 
# 169
} 
# 173
private: _Temporary_buffer(const _Temporary_buffer &); 
# 176
void operator=(const _Temporary_buffer &); 
# 177
}; 
# 180
template< bool > 
# 181
struct __uninitialized_construct_buf_dispatch { 
# 183
template< class _Pointer, class _ForwardIterator> static void 
# 185
__ucr(_Pointer __first, _Pointer __last, _ForwardIterator 
# 186
__seed) 
# 187
{ 
# 188
if (__first == __last) { 
# 189
return; }  
# 191
_Pointer __cur = __first; 
# 192
try 
# 193
{ 
# 194
std::_Construct(std::__addressof(*__first), std::move(*__seed)); 
# 196
_Pointer __prev = __cur; 
# 197
++__cur; 
# 198
for (; __cur != __last; (++__cur), (++__prev)) { 
# 199
std::_Construct(std::__addressof(*__cur), std::move(*__prev)); }  
# 201
(*__seed) = std::move(*__prev); 
# 202
} 
# 203
catch (...) 
# 204
{ 
# 205
std::_Destroy(__first, __cur); 
# 206
throw; 
# 207
}  
# 208
} 
# 209
}; 
# 212
template<> struct __uninitialized_construct_buf_dispatch< true>  { 
# 214
template< class _Pointer, class _ForwardIterator> static void 
# 216
__ucr(_Pointer, _Pointer, _ForwardIterator) { } 
# 217
}; 
# 229 "/usr/include/c++/9/bits/stl_tempbuf.h" 3
template< class _Pointer, class _ForwardIterator> inline void 
# 231
__uninitialized_construct_buf(_Pointer __first, _Pointer __last, _ForwardIterator 
# 232
__seed) 
# 233
{ 
# 235
typedef typename iterator_traits< _Pointer> ::value_type _ValueType; 
# 237
std::template __uninitialized_construct_buf_dispatch< __has_trivial_constructor(_ValueType)> ::__ucr(__first, __last, __seed); 
# 240
} 
# 242
template< class _ForwardIterator, class _Tp> 
# 244
_Temporary_buffer< _ForwardIterator, _Tp> ::_Temporary_buffer(_ForwardIterator __seed, size_type __original_len) : _M_original_len(__original_len), _M_len((0)), _M_buffer((0)) 
# 246
{ 
# 247
try 
# 248
{ 
# 249
pair< _Tp *, long>  __p(std::get_temporary_buffer< value_type> (_M_original_len)); 
# 251
(_M_buffer) = (__p.first); 
# 252
(_M_len) = (__p.second); 
# 253
if (_M_buffer) { 
# 254
std::__uninitialized_construct_buf(_M_buffer, (_M_buffer) + (_M_len), __seed); }  
# 256
} 
# 257
catch (...) 
# 258
{ 
# 259
std::return_temporary_buffer(_M_buffer); 
# 260
(_M_buffer) = 0; 
# 261
(_M_len) = (0); 
# 262
throw; 
# 263
}  
# 264
} 
# 267
}
# 158 "/usr/include/c++/9/limits" 3
namespace std __attribute((__visibility__("default"))) { 
# 167
enum float_round_style { 
# 169
round_indeterminate = (-1), 
# 170
round_toward_zero = 0, 
# 171
round_to_nearest, 
# 172
round_toward_infinity, 
# 173
round_toward_neg_infinity
# 174
}; 
# 182
enum float_denorm_style { 
# 185
denorm_indeterminate = (-1), 
# 187
denorm_absent = 0, 
# 189
denorm_present
# 190
}; 
# 202 "/usr/include/c++/9/limits" 3
struct __numeric_limits_base { 
# 206
static constexpr bool is_specialized = false; 
# 211
static constexpr int digits = 0; 
# 214
static constexpr int digits10 = 0; 
# 219
static constexpr int max_digits10 = 0; 
# 223
static constexpr bool is_signed = false; 
# 226
static constexpr bool is_integer = false; 
# 231
static constexpr bool is_exact = false; 
# 235
static constexpr int radix = 0; 
# 239
static constexpr int min_exponent = 0; 
# 243
static constexpr int min_exponent10 = 0; 
# 248
static constexpr int max_exponent = 0; 
# 252
static constexpr int max_exponent10 = 0; 
# 255
static constexpr bool has_infinity = false; 
# 259
static constexpr bool has_quiet_NaN = false; 
# 263
static constexpr bool has_signaling_NaN = false; 
# 266
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 270
static constexpr bool has_denorm_loss = false; 
# 274
static constexpr bool is_iec559 = false; 
# 279
static constexpr bool is_bounded = false; 
# 288 "/usr/include/c++/9/limits" 3
static constexpr bool is_modulo = false; 
# 291
static constexpr bool traps = false; 
# 294
static constexpr bool tinyness_before = false; 
# 299
static constexpr float_round_style round_style = round_toward_zero; 
# 301
}; 
# 311 "/usr/include/c++/9/limits" 3
template< class _Tp> 
# 312
struct numeric_limits : public __numeric_limits_base { 
# 317
static constexpr _Tp min() noexcept { return _Tp(); } 
# 321
static constexpr _Tp max() noexcept { return _Tp(); } 
# 327
static constexpr _Tp lowest() noexcept { return _Tp(); } 
# 333
static constexpr _Tp epsilon() noexcept { return _Tp(); } 
# 337
static constexpr _Tp round_error() noexcept { return _Tp(); } 
# 341
static constexpr _Tp infinity() noexcept { return _Tp(); } 
# 346
static constexpr _Tp quiet_NaN() noexcept { return _Tp(); } 
# 351
static constexpr _Tp signaling_NaN() noexcept { return _Tp(); } 
# 357
static constexpr _Tp denorm_min() noexcept { return _Tp(); } 
# 358
}; 
# 363
template< class _Tp> 
# 364
struct numeric_limits< const _Tp>  : public std::numeric_limits< _Tp>  { 
# 365
}; 
# 367
template< class _Tp> 
# 368
struct numeric_limits< volatile _Tp>  : public std::numeric_limits< _Tp>  { 
# 369
}; 
# 371
template< class _Tp> 
# 372
struct numeric_limits< const volatile _Tp>  : public std::numeric_limits< _Tp>  { 
# 373
}; 
# 384 "/usr/include/c++/9/limits" 3
template<> struct numeric_limits< bool>  { 
# 386
static constexpr bool is_specialized = true; 
# 389
static constexpr bool min() noexcept { return false; } 
# 392
static constexpr bool max() noexcept { return true; } 
# 396
static constexpr bool lowest() noexcept { return min(); } 
# 398
static constexpr int digits = 1; 
# 399
static constexpr int digits10 = 0; 
# 401
static constexpr int max_digits10 = 0; 
# 403
static constexpr bool is_signed = false; 
# 404
static constexpr bool is_integer = true; 
# 405
static constexpr bool is_exact = true; 
# 406
static constexpr int radix = 2; 
# 409
static constexpr bool epsilon() noexcept { return false; } 
# 412
static constexpr bool round_error() noexcept { return false; } 
# 414
static constexpr int min_exponent = 0; 
# 415
static constexpr int min_exponent10 = 0; 
# 416
static constexpr int max_exponent = 0; 
# 417
static constexpr int max_exponent10 = 0; 
# 419
static constexpr bool has_infinity = false; 
# 420
static constexpr bool has_quiet_NaN = false; 
# 421
static constexpr bool has_signaling_NaN = false; 
# 422
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 424
static constexpr bool has_denorm_loss = false; 
# 427
static constexpr bool infinity() noexcept { return false; } 
# 430
static constexpr bool quiet_NaN() noexcept { return false; } 
# 433
static constexpr bool signaling_NaN() noexcept { return false; } 
# 436
static constexpr bool denorm_min() noexcept { return false; } 
# 438
static constexpr bool is_iec559 = false; 
# 439
static constexpr bool is_bounded = true; 
# 440
static constexpr bool is_modulo = false; 
# 445
static constexpr bool traps = true; 
# 446
static constexpr bool tinyness_before = false; 
# 447
static constexpr float_round_style round_style = round_toward_zero; 
# 449
}; 
# 453
template<> struct numeric_limits< char>  { 
# 455
static constexpr bool is_specialized = true; 
# 458
static constexpr char min() noexcept { return ((((char)(-1)) < 0) ? (-((((char)(-1)) < 0) ? (((((char)1) << (((sizeof(char) * (8)) - (((char)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char)0)))) - 1 : ((char)0)); } 
# 461
static constexpr char max() noexcept { return ((((char)(-1)) < 0) ? (((((char)1) << (((sizeof(char) * (8)) - (((char)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char)0))); } 
# 465
static constexpr char lowest() noexcept { return min(); } 
# 468
static constexpr int digits = ((sizeof(char) * (8)) - (((char)(-1)) < 0)); 
# 469
static constexpr int digits10 = ((((sizeof(char) * (8)) - (((char)(-1)) < 0)) * (643L)) / (2136)); 
# 471
static constexpr int max_digits10 = 0; 
# 473
static constexpr bool is_signed = (((char)(-1)) < 0); 
# 474
static constexpr bool is_integer = true; 
# 475
static constexpr bool is_exact = true; 
# 476
static constexpr int radix = 2; 
# 479
static constexpr char epsilon() noexcept { return 0; } 
# 482
static constexpr char round_error() noexcept { return 0; } 
# 484
static constexpr int min_exponent = 0; 
# 485
static constexpr int min_exponent10 = 0; 
# 486
static constexpr int max_exponent = 0; 
# 487
static constexpr int max_exponent10 = 0; 
# 489
static constexpr bool has_infinity = false; 
# 490
static constexpr bool has_quiet_NaN = false; 
# 491
static constexpr bool has_signaling_NaN = false; 
# 492
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 494
static constexpr bool has_denorm_loss = false; 
# 497
static constexpr char infinity() noexcept { return ((char)0); } 
# 500
static constexpr char quiet_NaN() noexcept { return ((char)0); } 
# 503
static constexpr char signaling_NaN() noexcept { return ((char)0); } 
# 506
static constexpr char denorm_min() noexcept { return static_cast< char>(0); } 
# 508
static constexpr bool is_iec559 = false; 
# 509
static constexpr bool is_bounded = true; 
# 510
static constexpr bool is_modulo = (!is_signed); 
# 512
static constexpr bool traps = true; 
# 513
static constexpr bool tinyness_before = false; 
# 514
static constexpr float_round_style round_style = round_toward_zero; 
# 516
}; 
# 520
template<> struct numeric_limits< signed char>  { 
# 522
static constexpr bool is_specialized = true; 
# 525
static constexpr signed char min() noexcept { return (-127) - 1; } 
# 528
static constexpr signed char max() noexcept { return 127; } 
# 532
static constexpr signed char lowest() noexcept { return min(); } 
# 535
static constexpr int digits = ((sizeof(signed char) * (8)) - (((signed char)(-1)) < 0)); 
# 536
static constexpr int digits10 = ((((sizeof(signed char) * (8)) - (((signed char)(-1)) < 0)) * (643L)) / (2136)); 
# 539
static constexpr int max_digits10 = 0; 
# 541
static constexpr bool is_signed = true; 
# 542
static constexpr bool is_integer = true; 
# 543
static constexpr bool is_exact = true; 
# 544
static constexpr int radix = 2; 
# 547
static constexpr signed char epsilon() noexcept { return 0; } 
# 550
static constexpr signed char round_error() noexcept { return 0; } 
# 552
static constexpr int min_exponent = 0; 
# 553
static constexpr int min_exponent10 = 0; 
# 554
static constexpr int max_exponent = 0; 
# 555
static constexpr int max_exponent10 = 0; 
# 557
static constexpr bool has_infinity = false; 
# 558
static constexpr bool has_quiet_NaN = false; 
# 559
static constexpr bool has_signaling_NaN = false; 
# 560
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 562
static constexpr bool has_denorm_loss = false; 
# 565
static constexpr signed char infinity() noexcept { return static_cast< signed char>(0); } 
# 568
static constexpr signed char quiet_NaN() noexcept { return static_cast< signed char>(0); } 
# 571
static constexpr signed char signaling_NaN() noexcept 
# 572
{ return static_cast< signed char>(0); } 
# 575
static constexpr signed char denorm_min() noexcept 
# 576
{ return static_cast< signed char>(0); } 
# 578
static constexpr bool is_iec559 = false; 
# 579
static constexpr bool is_bounded = true; 
# 580
static constexpr bool is_modulo = false; 
# 582
static constexpr bool traps = true; 
# 583
static constexpr bool tinyness_before = false; 
# 584
static constexpr float_round_style round_style = round_toward_zero; 
# 586
}; 
# 590
template<> struct numeric_limits< unsigned char>  { 
# 592
static constexpr bool is_specialized = true; 
# 595
static constexpr unsigned char min() noexcept { return 0; } 
# 598
static constexpr unsigned char max() noexcept { return ((127) * 2U) + (1); } 
# 602
static constexpr unsigned char lowest() noexcept { return min(); } 
# 605
static constexpr int digits = ((sizeof(unsigned char) * (8)) - (((unsigned char)(-1)) < 0)); 
# 607
static constexpr int digits10 = ((((sizeof(unsigned char) * (8)) - (((unsigned char)(-1)) < 0)) * (643L)) / (2136)); 
# 610
static constexpr int max_digits10 = 0; 
# 612
static constexpr bool is_signed = false; 
# 613
static constexpr bool is_integer = true; 
# 614
static constexpr bool is_exact = true; 
# 615
static constexpr int radix = 2; 
# 618
static constexpr unsigned char epsilon() noexcept { return 0; } 
# 621
static constexpr unsigned char round_error() noexcept { return 0; } 
# 623
static constexpr int min_exponent = 0; 
# 624
static constexpr int min_exponent10 = 0; 
# 625
static constexpr int max_exponent = 0; 
# 626
static constexpr int max_exponent10 = 0; 
# 628
static constexpr bool has_infinity = false; 
# 629
static constexpr bool has_quiet_NaN = false; 
# 630
static constexpr bool has_signaling_NaN = false; 
# 631
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 633
static constexpr bool has_denorm_loss = false; 
# 636
static constexpr unsigned char infinity() noexcept 
# 637
{ return static_cast< unsigned char>(0); } 
# 640
static constexpr unsigned char quiet_NaN() noexcept 
# 641
{ return static_cast< unsigned char>(0); } 
# 644
static constexpr unsigned char signaling_NaN() noexcept 
# 645
{ return static_cast< unsigned char>(0); } 
# 648
static constexpr unsigned char denorm_min() noexcept 
# 649
{ return static_cast< unsigned char>(0); } 
# 651
static constexpr bool is_iec559 = false; 
# 652
static constexpr bool is_bounded = true; 
# 653
static constexpr bool is_modulo = true; 
# 655
static constexpr bool traps = true; 
# 656
static constexpr bool tinyness_before = false; 
# 657
static constexpr float_round_style round_style = round_toward_zero; 
# 659
}; 
# 663
template<> struct numeric_limits< wchar_t>  { 
# 665
static constexpr bool is_specialized = true; 
# 668
static constexpr wchar_t min() noexcept { return ((((wchar_t)(-1)) < 0) ? (-((((wchar_t)(-1)) < 0) ? (((((wchar_t)1) << (((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((wchar_t)0)))) - 1 : ((wchar_t)0)); } 
# 671
static constexpr wchar_t max() noexcept { return ((((wchar_t)(-1)) < 0) ? (((((wchar_t)1) << (((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((wchar_t)0))); } 
# 675
static constexpr wchar_t lowest() noexcept { return min(); } 
# 678
static constexpr int digits = ((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)); 
# 679
static constexpr int digits10 = ((((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) * (643L)) / (2136)); 
# 682
static constexpr int max_digits10 = 0; 
# 684
static constexpr bool is_signed = (((wchar_t)(-1)) < 0); 
# 685
static constexpr bool is_integer = true; 
# 686
static constexpr bool is_exact = true; 
# 687
static constexpr int radix = 2; 
# 690
static constexpr wchar_t epsilon() noexcept { return 0; } 
# 693
static constexpr wchar_t round_error() noexcept { return 0; } 
# 695
static constexpr int min_exponent = 0; 
# 696
static constexpr int min_exponent10 = 0; 
# 697
static constexpr int max_exponent = 0; 
# 698
static constexpr int max_exponent10 = 0; 
# 700
static constexpr bool has_infinity = false; 
# 701
static constexpr bool has_quiet_NaN = false; 
# 702
static constexpr bool has_signaling_NaN = false; 
# 703
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 705
static constexpr bool has_denorm_loss = false; 
# 708
static constexpr wchar_t infinity() noexcept { return ((wchar_t)0); } 
# 711
static constexpr wchar_t quiet_NaN() noexcept { return ((wchar_t)0); } 
# 714
static constexpr wchar_t signaling_NaN() noexcept { return ((wchar_t)0); } 
# 717
static constexpr wchar_t denorm_min() noexcept { return ((wchar_t)0); } 
# 719
static constexpr bool is_iec559 = false; 
# 720
static constexpr bool is_bounded = true; 
# 721
static constexpr bool is_modulo = (!is_signed); 
# 723
static constexpr bool traps = true; 
# 724
static constexpr bool tinyness_before = false; 
# 725
static constexpr float_round_style round_style = round_toward_zero; 
# 727
}; 
# 797 "/usr/include/c++/9/limits" 3
template<> struct numeric_limits< char16_t>  { 
# 799
static constexpr bool is_specialized = true; 
# 802
static constexpr char16_t min() noexcept { return ((((char16_t)(-1)) < 0) ? (-((((char16_t)(-1)) < 0) ? (((((char16_t)1) << (((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char16_t)0)))) - 1 : ((char16_t)0)); } 
# 805
static constexpr char16_t max() noexcept { return ((((char16_t)(-1)) < 0) ? (((((char16_t)1) << (((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char16_t)0))); } 
# 808
static constexpr char16_t lowest() noexcept { return min(); } 
# 810
static constexpr int digits = ((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)); 
# 811
static constexpr int digits10 = ((((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)) * (643L)) / (2136)); 
# 812
static constexpr int max_digits10 = 0; 
# 813
static constexpr bool is_signed = (((char16_t)(-1)) < 0); 
# 814
static constexpr bool is_integer = true; 
# 815
static constexpr bool is_exact = true; 
# 816
static constexpr int radix = 2; 
# 819
static constexpr char16_t epsilon() noexcept { return 0; } 
# 822
static constexpr char16_t round_error() noexcept { return 0; } 
# 824
static constexpr int min_exponent = 0; 
# 825
static constexpr int min_exponent10 = 0; 
# 826
static constexpr int max_exponent = 0; 
# 827
static constexpr int max_exponent10 = 0; 
# 829
static constexpr bool has_infinity = false; 
# 830
static constexpr bool has_quiet_NaN = false; 
# 831
static constexpr bool has_signaling_NaN = false; 
# 832
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 833
static constexpr bool has_denorm_loss = false; 
# 836
static constexpr char16_t infinity() noexcept { return ((char16_t)0); } 
# 839
static constexpr char16_t quiet_NaN() noexcept { return ((char16_t)0); } 
# 842
static constexpr char16_t signaling_NaN() noexcept { return ((char16_t)0); } 
# 845
static constexpr char16_t denorm_min() noexcept { return ((char16_t)0); } 
# 847
static constexpr bool is_iec559 = false; 
# 848
static constexpr bool is_bounded = true; 
# 849
static constexpr bool is_modulo = (!is_signed); 
# 851
static constexpr bool traps = true; 
# 852
static constexpr bool tinyness_before = false; 
# 853
static constexpr float_round_style round_style = round_toward_zero; 
# 854
}; 
# 858
template<> struct numeric_limits< char32_t>  { 
# 860
static constexpr bool is_specialized = true; 
# 863
static constexpr char32_t min() noexcept { return ((((char32_t)(-1)) < (0)) ? (-((((char32_t)(-1)) < (0)) ? (((((char32_t)1) << (((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))) - (1))) - (1)) << 1) + (1) : (~((char32_t)0)))) - (1) : ((char32_t)0)); } 
# 866
static constexpr char32_t max() noexcept { return ((((char32_t)(-1)) < (0)) ? (((((char32_t)1) << (((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))) - (1))) - (1)) << 1) + (1) : (~((char32_t)0))); } 
# 869
static constexpr char32_t lowest() noexcept { return min(); } 
# 871
static constexpr int digits = ((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))); 
# 872
static constexpr int digits10 = ((((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))) * (643L)) / (2136)); 
# 873
static constexpr int max_digits10 = 0; 
# 874
static constexpr bool is_signed = (((char32_t)(-1)) < (0)); 
# 875
static constexpr bool is_integer = true; 
# 876
static constexpr bool is_exact = true; 
# 877
static constexpr int radix = 2; 
# 880
static constexpr char32_t epsilon() noexcept { return 0; } 
# 883
static constexpr char32_t round_error() noexcept { return 0; } 
# 885
static constexpr int min_exponent = 0; 
# 886
static constexpr int min_exponent10 = 0; 
# 887
static constexpr int max_exponent = 0; 
# 888
static constexpr int max_exponent10 = 0; 
# 890
static constexpr bool has_infinity = false; 
# 891
static constexpr bool has_quiet_NaN = false; 
# 892
static constexpr bool has_signaling_NaN = false; 
# 893
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 894
static constexpr bool has_denorm_loss = false; 
# 897
static constexpr char32_t infinity() noexcept { return ((char32_t)0); } 
# 900
static constexpr char32_t quiet_NaN() noexcept { return ((char32_t)0); } 
# 903
static constexpr char32_t signaling_NaN() noexcept { return ((char32_t)0); } 
# 906
static constexpr char32_t denorm_min() noexcept { return ((char32_t)0); } 
# 908
static constexpr bool is_iec559 = false; 
# 909
static constexpr bool is_bounded = true; 
# 910
static constexpr bool is_modulo = (!is_signed); 
# 912
static constexpr bool traps = true; 
# 913
static constexpr bool tinyness_before = false; 
# 914
static constexpr float_round_style round_style = round_toward_zero; 
# 915
}; 
# 920
template<> struct numeric_limits< short>  { 
# 922
static constexpr bool is_specialized = true; 
# 925
static constexpr short min() noexcept { return (-32767) - 1; } 
# 928
static constexpr short max() noexcept { return 32767; } 
# 932
static constexpr short lowest() noexcept { return min(); } 
# 935
static constexpr int digits = ((sizeof(short) * (8)) - (((short)(-1)) < 0)); 
# 936
static constexpr int digits10 = ((((sizeof(short) * (8)) - (((short)(-1)) < 0)) * (643L)) / (2136)); 
# 938
static constexpr int max_digits10 = 0; 
# 940
static constexpr bool is_signed = true; 
# 941
static constexpr bool is_integer = true; 
# 942
static constexpr bool is_exact = true; 
# 943
static constexpr int radix = 2; 
# 946
static constexpr short epsilon() noexcept { return 0; } 
# 949
static constexpr short round_error() noexcept { return 0; } 
# 951
static constexpr int min_exponent = 0; 
# 952
static constexpr int min_exponent10 = 0; 
# 953
static constexpr int max_exponent = 0; 
# 954
static constexpr int max_exponent10 = 0; 
# 956
static constexpr bool has_infinity = false; 
# 957
static constexpr bool has_quiet_NaN = false; 
# 958
static constexpr bool has_signaling_NaN = false; 
# 959
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 961
static constexpr bool has_denorm_loss = false; 
# 964
static constexpr short infinity() noexcept { return ((short)0); } 
# 967
static constexpr short quiet_NaN() noexcept { return ((short)0); } 
# 970
static constexpr short signaling_NaN() noexcept { return ((short)0); } 
# 973
static constexpr short denorm_min() noexcept { return ((short)0); } 
# 975
static constexpr bool is_iec559 = false; 
# 976
static constexpr bool is_bounded = true; 
# 977
static constexpr bool is_modulo = false; 
# 979
static constexpr bool traps = true; 
# 980
static constexpr bool tinyness_before = false; 
# 981
static constexpr float_round_style round_style = round_toward_zero; 
# 983
}; 
# 987
template<> struct numeric_limits< unsigned short>  { 
# 989
static constexpr bool is_specialized = true; 
# 992
static constexpr unsigned short min() noexcept { return 0; } 
# 995
static constexpr unsigned short max() noexcept { return ((32767) * 2U) + (1); } 
# 999
static constexpr unsigned short lowest() noexcept { return min(); } 
# 1002
static constexpr int digits = ((sizeof(unsigned short) * (8)) - (((unsigned short)(-1)) < 0)); 
# 1004
static constexpr int digits10 = ((((sizeof(unsigned short) * (8)) - (((unsigned short)(-1)) < 0)) * (643L)) / (2136)); 
# 1007
static constexpr int max_digits10 = 0; 
# 1009
static constexpr bool is_signed = false; 
# 1010
static constexpr bool is_integer = true; 
# 1011
static constexpr bool is_exact = true; 
# 1012
static constexpr int radix = 2; 
# 1015
static constexpr unsigned short epsilon() noexcept { return 0; } 
# 1018
static constexpr unsigned short round_error() noexcept { return 0; } 
# 1020
static constexpr int min_exponent = 0; 
# 1021
static constexpr int min_exponent10 = 0; 
# 1022
static constexpr int max_exponent = 0; 
# 1023
static constexpr int max_exponent10 = 0; 
# 1025
static constexpr bool has_infinity = false; 
# 1026
static constexpr bool has_quiet_NaN = false; 
# 1027
static constexpr bool has_signaling_NaN = false; 
# 1028
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 1030
static constexpr bool has_denorm_loss = false; 
# 1033
static constexpr unsigned short infinity() noexcept 
# 1034
{ return static_cast< unsigned short>(0); } 
# 1037
static constexpr unsigned short quiet_NaN() noexcept 
# 1038
{ return static_cast< unsigned short>(0); } 
# 1041
static constexpr unsigned short signaling_NaN() noexcept 
# 1042
{ return static_cast< unsigned short>(0); } 
# 1045
static constexpr unsigned short denorm_min() noexcept 
# 1046
{ return static_cast< unsigned short>(0); } 
# 1048
static constexpr bool is_iec559 = false; 
# 1049
static constexpr bool is_bounded = true; 
# 1050
static constexpr bool is_modulo = true; 
# 1052
static constexpr bool traps = true; 
# 1053
static constexpr bool tinyness_before = false; 
# 1054
static constexpr float_round_style round_style = round_toward_zero; 
# 1056
}; 
# 1060
template<> struct numeric_limits< int>  { 
# 1062
static constexpr bool is_specialized = true; 
# 1065
static constexpr int min() noexcept { return (-2147483647) - 1; } 
# 1068
static constexpr int max() noexcept { return 2147483647; } 
# 1072
static constexpr int lowest() noexcept { return min(); } 
# 1075
static constexpr int digits = ((sizeof(int) * (8)) - (((int)(-1)) < 0)); 
# 1076
static constexpr int digits10 = ((((sizeof(int) * (8)) - (((int)(-1)) < 0)) * (643L)) / (2136)); 
# 1078
static constexpr int max_digits10 = 0; 
# 1080
static constexpr bool is_signed = true; 
# 1081
static constexpr bool is_integer = true; 
# 1082
static constexpr bool is_exact = true; 
# 1083
static constexpr int radix = 2; 
# 1086
static constexpr int epsilon() noexcept { return 0; } 
# 1089
static constexpr int round_error() noexcept { return 0; } 
# 1091
static constexpr int min_exponent = 0; 
# 1092
static constexpr int min_exponent10 = 0; 
# 1093
static constexpr int max_exponent = 0; 
# 1094
static constexpr int max_exponent10 = 0; 
# 1096
static constexpr bool has_infinity = false; 
# 1097
static constexpr bool has_quiet_NaN = false; 
# 1098
static constexpr bool has_signaling_NaN = false; 
# 1099
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 1101
static constexpr bool has_denorm_loss = false; 
# 1104
static constexpr int infinity() noexcept { return static_cast< int>(0); } 
# 1107
static constexpr int quiet_NaN() noexcept { return static_cast< int>(0); } 
# 1110
static constexpr int signaling_NaN() noexcept { return static_cast< int>(0); } 
# 1113
static constexpr int denorm_min() noexcept { return static_cast< int>(0); } 
# 1115
static constexpr bool is_iec559 = false; 
# 1116
static constexpr bool is_bounded = true; 
# 1117
static constexpr bool is_modulo = false; 
# 1119
static constexpr bool traps = true; 
# 1120
static constexpr bool tinyness_before = false; 
# 1121
static constexpr float_round_style round_style = round_toward_zero; 
# 1123
}; 
# 1127
template<> struct numeric_limits< unsigned>  { 
# 1129
static constexpr bool is_specialized = true; 
# 1132
static constexpr unsigned min() noexcept { return 0; } 
# 1135
static constexpr unsigned max() noexcept { return ((2147483647) * 2U) + (1); } 
# 1139
static constexpr unsigned lowest() noexcept { return min(); } 
# 1142
static constexpr int digits = ((sizeof(unsigned) * (8)) - (((unsigned)(-1)) < (0))); 
# 1144
static constexpr int digits10 = ((((sizeof(unsigned) * (8)) - (((unsigned)(-1)) < (0))) * (643L)) / (2136)); 
# 1147
static constexpr int max_digits10 = 0; 
# 1149
static constexpr bool is_signed = false; 
# 1150
static constexpr bool is_integer = true; 
# 1151
static constexpr bool is_exact = true; 
# 1152
static constexpr int radix = 2; 
# 1155
static constexpr unsigned epsilon() noexcept { return 0; } 
# 1158
static constexpr unsigned round_error() noexcept { return 0; } 
# 1160
static constexpr int min_exponent = 0; 
# 1161
static constexpr int min_exponent10 = 0; 
# 1162
static constexpr int max_exponent = 0; 
# 1163
static constexpr int max_exponent10 = 0; 
# 1165
static constexpr bool has_infinity = false; 
# 1166
static constexpr bool has_quiet_NaN = false; 
# 1167
static constexpr bool has_signaling_NaN = false; 
# 1168
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 1170
static constexpr bool has_denorm_loss = false; 
# 1173
static constexpr unsigned infinity() noexcept { return static_cast< unsigned>(0); } 
# 1176
static constexpr unsigned quiet_NaN() noexcept 
# 1177
{ return static_cast< unsigned>(0); } 
# 1180
static constexpr unsigned signaling_NaN() noexcept 
# 1181
{ return static_cast< unsigned>(0); } 
# 1184
static constexpr unsigned denorm_min() noexcept 
# 1185
{ return static_cast< unsigned>(0); } 
# 1187
static constexpr bool is_iec559 = false; 
# 1188
static constexpr bool is_bounded = true; 
# 1189
static constexpr bool is_modulo = true; 
# 1191
static constexpr bool traps = true; 
# 1192
static constexpr bool tinyness_before = false; 
# 1193
static constexpr float_round_style round_style = round_toward_zero; 
# 1195
}; 
# 1199
template<> struct numeric_limits< long>  { 
# 1201
static constexpr bool is_specialized = true; 
# 1204
static constexpr long min() noexcept { return (-9223372036854775807L) - (1); } 
# 1207
static constexpr long max() noexcept { return 9223372036854775807L; } 
# 1211
static constexpr long lowest() noexcept { return min(); } 
# 1214
static constexpr int digits = ((sizeof(long) * (8)) - (((long)(-1)) < (0))); 
# 1215
static constexpr int digits10 = ((((sizeof(long) * (8)) - (((long)(-1)) < (0))) * (643L)) / (2136)); 
# 1217
static constexpr int max_digits10 = 0; 
# 1219
static constexpr bool is_signed = true; 
# 1220
static constexpr bool is_integer = true; 
# 1221
static constexpr bool is_exact = true; 
# 1222
static constexpr int radix = 2; 
# 1225
static constexpr long epsilon() noexcept { return 0; } 
# 1228
static constexpr long round_error() noexcept { return 0; } 
# 1230
static constexpr int min_exponent = 0; 
# 1231
static constexpr int min_exponent10 = 0; 
# 1232
static constexpr int max_exponent = 0; 
# 1233
static constexpr int max_exponent10 = 0; 
# 1235
static constexpr bool has_infinity = false; 
# 1236
static constexpr bool has_quiet_NaN = false; 
# 1237
static constexpr bool has_signaling_NaN = false; 
# 1238
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 1240
static constexpr bool has_denorm_loss = false; 
# 1243
static constexpr long infinity() noexcept { return static_cast< long>(0); } 
# 1246
static constexpr long quiet_NaN() noexcept { return static_cast< long>(0); } 
# 1249
static constexpr long signaling_NaN() noexcept { return static_cast< long>(0); } 
# 1252
static constexpr long denorm_min() noexcept { return static_cast< long>(0); } 
# 1254
static constexpr bool is_iec559 = false; 
# 1255
static constexpr bool is_bounded = true; 
# 1256
static constexpr bool is_modulo = false; 
# 1258
static constexpr bool traps = true; 
# 1259
static constexpr bool tinyness_before = false; 
# 1260
static constexpr float_round_style round_style = round_toward_zero; 
# 1262
}; 
# 1266
template<> struct numeric_limits< unsigned long>  { 
# 1268
static constexpr bool is_specialized = true; 
# 1271
static constexpr unsigned long min() noexcept { return 0; } 
# 1274
static constexpr unsigned long max() noexcept { return ((9223372036854775807L) * 2UL) + (1); } 
# 1278
static constexpr unsigned long lowest() noexcept { return min(); } 
# 1281
static constexpr int digits = ((sizeof(unsigned long) * (8)) - (((unsigned long)(-1)) < (0))); 
# 1283
static constexpr int digits10 = ((((sizeof(unsigned long) * (8)) - (((unsigned long)(-1)) < (0))) * (643L)) / (2136)); 
# 1286
static constexpr int max_digits10 = 0; 
# 1288
static constexpr bool is_signed = false; 
# 1289
static constexpr bool is_integer = true; 
# 1290
static constexpr bool is_exact = true; 
# 1291
static constexpr int radix = 2; 
# 1294
static constexpr unsigned long epsilon() noexcept { return 0; } 
# 1297
static constexpr unsigned long round_error() noexcept { return 0; } 
# 1299
static constexpr int min_exponent = 0; 
# 1300
static constexpr int min_exponent10 = 0; 
# 1301
static constexpr int max_exponent = 0; 
# 1302
static constexpr int max_exponent10 = 0; 
# 1304
static constexpr bool has_infinity = false; 
# 1305
static constexpr bool has_quiet_NaN = false; 
# 1306
static constexpr bool has_signaling_NaN = false; 
# 1307
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 1309
static constexpr bool has_denorm_loss = false; 
# 1312
static constexpr unsigned long infinity() noexcept 
# 1313
{ return static_cast< unsigned long>(0); } 
# 1316
static constexpr unsigned long quiet_NaN() noexcept 
# 1317
{ return static_cast< unsigned long>(0); } 
# 1320
static constexpr unsigned long signaling_NaN() noexcept 
# 1321
{ return static_cast< unsigned long>(0); } 
# 1324
static constexpr unsigned long denorm_min() noexcept 
# 1325
{ return static_cast< unsigned long>(0); } 
# 1327
static constexpr bool is_iec559 = false; 
# 1328
static constexpr bool is_bounded = true; 
# 1329
static constexpr bool is_modulo = true; 
# 1331
static constexpr bool traps = true; 
# 1332
static constexpr bool tinyness_before = false; 
# 1333
static constexpr float_round_style round_style = round_toward_zero; 
# 1335
}; 
# 1339
template<> struct numeric_limits< long long>  { 
# 1341
static constexpr bool is_specialized = true; 
# 1344
static constexpr long long min() noexcept { return (-9223372036854775807LL) - (1); } 
# 1347
static constexpr long long max() noexcept { return 9223372036854775807LL; } 
# 1351
static constexpr long long lowest() noexcept { return min(); } 
# 1354
static constexpr int digits = ((sizeof(long long) * (8)) - (((long long)(-1)) < (0))); 
# 1356
static constexpr int digits10 = ((((sizeof(long long) * (8)) - (((long long)(-1)) < (0))) * (643L)) / (2136)); 
# 1359
static constexpr int max_digits10 = 0; 
# 1361
static constexpr bool is_signed = true; 
# 1362
static constexpr bool is_integer = true; 
# 1363
static constexpr bool is_exact = true; 
# 1364
static constexpr int radix = 2; 
# 1367
static constexpr long long epsilon() noexcept { return 0; } 
# 1370
static constexpr long long round_error() noexcept { return 0; } 
# 1372
static constexpr int min_exponent = 0; 
# 1373
static constexpr int min_exponent10 = 0; 
# 1374
static constexpr int max_exponent = 0; 
# 1375
static constexpr int max_exponent10 = 0; 
# 1377
static constexpr bool has_infinity = false; 
# 1378
static constexpr bool has_quiet_NaN = false; 
# 1379
static constexpr bool has_signaling_NaN = false; 
# 1380
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 1382
static constexpr bool has_denorm_loss = false; 
# 1385
static constexpr long long infinity() noexcept { return static_cast< long long>(0); } 
# 1388
static constexpr long long quiet_NaN() noexcept { return static_cast< long long>(0); } 
# 1391
static constexpr long long signaling_NaN() noexcept 
# 1392
{ return static_cast< long long>(0); } 
# 1395
static constexpr long long denorm_min() noexcept { return static_cast< long long>(0); } 
# 1397
static constexpr bool is_iec559 = false; 
# 1398
static constexpr bool is_bounded = true; 
# 1399
static constexpr bool is_modulo = false; 
# 1401
static constexpr bool traps = true; 
# 1402
static constexpr bool tinyness_before = false; 
# 1403
static constexpr float_round_style round_style = round_toward_zero; 
# 1405
}; 
# 1409
template<> struct numeric_limits< unsigned long long>  { 
# 1411
static constexpr bool is_specialized = true; 
# 1414
static constexpr unsigned long long min() noexcept { return 0; } 
# 1417
static constexpr unsigned long long max() noexcept { return ((9223372036854775807LL) * 2ULL) + (1); } 
# 1421
static constexpr unsigned long long lowest() noexcept { return min(); } 
# 1424
static constexpr int digits = ((sizeof(unsigned long long) * (8)) - (((unsigned long long)(-1)) < (0))); 
# 1426
static constexpr int digits10 = ((((sizeof(unsigned long long) * (8)) - (((unsigned long long)(-1)) < (0))) * (643L)) / (2136)); 
# 1429
static constexpr int max_digits10 = 0; 
# 1431
static constexpr bool is_signed = false; 
# 1432
static constexpr bool is_integer = true; 
# 1433
static constexpr bool is_exact = true; 
# 1434
static constexpr int radix = 2; 
# 1437
static constexpr unsigned long long epsilon() noexcept { return 0; } 
# 1440
static constexpr unsigned long long round_error() noexcept { return 0; } 
# 1442
static constexpr int min_exponent = 0; 
# 1443
static constexpr int min_exponent10 = 0; 
# 1444
static constexpr int max_exponent = 0; 
# 1445
static constexpr int max_exponent10 = 0; 
# 1447
static constexpr bool has_infinity = false; 
# 1448
static constexpr bool has_quiet_NaN = false; 
# 1449
static constexpr bool has_signaling_NaN = false; 
# 1450
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 1452
static constexpr bool has_denorm_loss = false; 
# 1455
static constexpr unsigned long long infinity() noexcept 
# 1456
{ return static_cast< unsigned long long>(0); } 
# 1459
static constexpr unsigned long long quiet_NaN() noexcept 
# 1460
{ return static_cast< unsigned long long>(0); } 
# 1463
static constexpr unsigned long long signaling_NaN() noexcept 
# 1464
{ return static_cast< unsigned long long>(0); } 
# 1467
static constexpr unsigned long long denorm_min() noexcept 
# 1468
{ return static_cast< unsigned long long>(0); } 
# 1470
static constexpr bool is_iec559 = false; 
# 1471
static constexpr bool is_bounded = true; 
# 1472
static constexpr bool is_modulo = true; 
# 1474
static constexpr bool traps = true; 
# 1475
static constexpr bool tinyness_before = false; 
# 1476
static constexpr float_round_style round_style = round_toward_zero; 
# 1478
}; 
# 1636 "/usr/include/c++/9/limits" 3
template<> struct numeric_limits< __int128>  { static constexpr bool is_specialized = true; static constexpr __int128 min() noexcept { return ((((__int128)(-1)) < (0)) ? (-((((__int128)(-1)) < (0)) ? (((((__int128)1) << ((128 - (((__int128)(-1)) < (0))) - 1)) - (1)) << 1) + (1) : (~((__int128)0)))) - (1) : ((__int128)0)); } static constexpr __int128 max() noexcept { return ((((__int128)(-1)) < (0)) ? (((((__int128)1) << ((128 - (((__int128)(-1)) < (0))) - 1)) - (1)) << 1) + (1) : (~((__int128)0))); } static constexpr int digits = (128 - 1); static constexpr int digits10 = (((128 - 1) * 643L) / (2136)); static constexpr bool is_signed = true; static constexpr bool is_integer = true; static constexpr bool is_exact = true; static constexpr int radix = 2; static constexpr __int128 epsilon() noexcept { return 0; } static constexpr __int128 round_error() noexcept { return 0; } static constexpr __int128 lowest() noexcept { return min(); } static constexpr int max_digits10 = 0; static constexpr int min_exponent = 0; static constexpr int min_exponent10 = 0; static constexpr int max_exponent = 0; static constexpr int max_exponent10 = 0; static constexpr bool has_infinity = false; static constexpr bool has_quiet_NaN = false; static constexpr bool has_signaling_NaN = false; static constexpr float_denorm_style has_denorm = denorm_absent; static constexpr bool has_denorm_loss = false; static constexpr __int128 infinity() noexcept { return static_cast< __int128>(0); } static constexpr __int128 quiet_NaN() noexcept { return static_cast< __int128>(0); } static constexpr __int128 signaling_NaN() noexcept { return static_cast< __int128>(0); } static constexpr __int128 denorm_min() noexcept { return static_cast< __int128>(0); } static constexpr bool is_iec559 = false; static constexpr bool is_bounded = true; static constexpr bool is_modulo = false; static constexpr bool traps = true; static constexpr bool tinyness_before = false; static constexpr float_round_style round_style = round_toward_zero; }; template<> struct numeric_limits< unsigned __int128>  { static constexpr bool is_specialized = true; static constexpr unsigned __int128 min() noexcept { return 0; } static constexpr unsigned __int128 max() noexcept { return ((((unsigned __int128)(-1)) < (0)) ? (((((unsigned __int128)1) << ((128 - (((unsigned __int128)(-1)) < (0))) - 1)) - (1)) << 1) + (1) : (~((unsigned __int128)0))); } static constexpr unsigned __int128 lowest() noexcept { return min(); } static constexpr int max_digits10 = 0; static constexpr int digits = 128; static constexpr int digits10 = (((128) * 643L) / (2136)); static constexpr bool is_signed = false; static constexpr bool is_integer = true; static constexpr bool is_exact = true; static constexpr int radix = 2; static constexpr unsigned __int128 epsilon() noexcept { return 0; } static constexpr unsigned __int128 round_error() noexcept { return 0; } static constexpr int min_exponent = 0; static constexpr int min_exponent10 = 0; static constexpr int max_exponent = 0; static constexpr int max_exponent10 = 0; static constexpr bool has_infinity = false; static constexpr bool has_quiet_NaN = false; static constexpr bool has_signaling_NaN = false; static constexpr float_denorm_style has_denorm = denorm_absent; static constexpr bool has_denorm_loss = false; static constexpr unsigned __int128 infinity() noexcept { return static_cast< unsigned __int128>(0); } static constexpr unsigned __int128 quiet_NaN() noexcept { return static_cast< unsigned __int128>(0); } static constexpr unsigned __int128 signaling_NaN() noexcept { return static_cast< unsigned __int128>(0); } static constexpr unsigned __int128 denorm_min() noexcept { return static_cast< unsigned __int128>(0); } static constexpr bool is_iec559 = false; static constexpr bool is_bounded = true; static constexpr bool is_modulo = true; static constexpr bool traps = true; static constexpr bool tinyness_before = false; static constexpr float_round_style round_style = round_toward_zero; }; 
# 1660 "/usr/include/c++/9/limits" 3
template<> struct numeric_limits< float>  { 
# 1662
static constexpr bool is_specialized = true; 
# 1665
static constexpr float min() noexcept { return (1.1754944E-38F); } 
# 1668
static constexpr float max() noexcept { return (3.4028235E38F); } 
# 1672
static constexpr float lowest() noexcept { return -(3.4028235E38F); } 
# 1675
static constexpr int digits = 24; 
# 1676
static constexpr int digits10 = 6; 
# 1678
static constexpr int max_digits10 = ((2) + (((24) * 643L) / (2136))); 
# 1681
static constexpr bool is_signed = true; 
# 1682
static constexpr bool is_integer = false; 
# 1683
static constexpr bool is_exact = false; 
# 1684
static constexpr int radix = 2; 
# 1687
static constexpr float epsilon() noexcept { return (1.1920929E-7F); } 
# 1690
static constexpr float round_error() noexcept { return (0.5F); } 
# 1692
static constexpr int min_exponent = (-125); 
# 1693
static constexpr int min_exponent10 = (-37); 
# 1694
static constexpr int max_exponent = 128; 
# 1695
static constexpr int max_exponent10 = 38; 
# 1697
static constexpr bool has_infinity = (1); 
# 1698
static constexpr bool has_quiet_NaN = (1); 
# 1699
static constexpr bool has_signaling_NaN = has_quiet_NaN; 
# 1700
static constexpr float_denorm_style has_denorm = (((bool)1) ? denorm_present : denorm_absent); 
# 1702
static constexpr bool has_denorm_loss = false; 
# 1706
static constexpr float infinity() noexcept { return __builtin_huge_valf(); } 
# 1709
static constexpr float quiet_NaN() noexcept { return __builtin_nanf(""); } 
# 1712
static constexpr float signaling_NaN() noexcept { return __builtin_nansf(""); } 
# 1715
static constexpr float denorm_min() noexcept { return (1.4E-45F); } 
# 1717
static constexpr bool is_iec559 = (has_infinity && has_quiet_NaN && (has_denorm == (denorm_present))); 
# 1719
static constexpr bool is_bounded = true; 
# 1720
static constexpr bool is_modulo = false; 
# 1722
static constexpr bool traps = false; 
# 1723
static constexpr bool tinyness_before = false; 
# 1725
static constexpr float_round_style round_style = round_to_nearest; 
# 1727
}; 
# 1735
template<> struct numeric_limits< double>  { 
# 1737
static constexpr bool is_specialized = true; 
# 1740
static constexpr double min() noexcept { return (double)(2.2250738585072013831E-308L); } 
# 1743
static constexpr double max() noexcept { return (double)(1.7976931348623157081E308L); } 
# 1747
static constexpr double lowest() noexcept { return -((double)(1.7976931348623157081E308L)); } 
# 1750
static constexpr int digits = 53; 
# 1751
static constexpr int digits10 = 15; 
# 1753
static constexpr int max_digits10 = ((2) + (((53) * 643L) / (2136))); 
# 1756
static constexpr bool is_signed = true; 
# 1757
static constexpr bool is_integer = false; 
# 1758
static constexpr bool is_exact = false; 
# 1759
static constexpr int radix = 2; 
# 1762
static constexpr double epsilon() noexcept { return (double)(2.2204460492503130808E-16L); } 
# 1765
static constexpr double round_error() noexcept { return (0.5); } 
# 1767
static constexpr int min_exponent = (-1021); 
# 1768
static constexpr int min_exponent10 = (-307); 
# 1769
static constexpr int max_exponent = 1024; 
# 1770
static constexpr int max_exponent10 = 308; 
# 1772
static constexpr bool has_infinity = (1); 
# 1773
static constexpr bool has_quiet_NaN = (1); 
# 1774
static constexpr bool has_signaling_NaN = has_quiet_NaN; 
# 1775
static constexpr float_denorm_style has_denorm = (((bool)1) ? denorm_present : denorm_absent); 
# 1777
static constexpr bool has_denorm_loss = false; 
# 1781
static constexpr double infinity() noexcept { return __builtin_huge_val(); } 
# 1784
static constexpr double quiet_NaN() noexcept { return __builtin_nan(""); } 
# 1787
static constexpr double signaling_NaN() noexcept { return __builtin_nans(""); } 
# 1790
static constexpr double denorm_min() noexcept { return (double)(4.940656458412465442E-324L); } 
# 1792
static constexpr bool is_iec559 = (has_infinity && has_quiet_NaN && (has_denorm == (denorm_present))); 
# 1794
static constexpr bool is_bounded = true; 
# 1795
static constexpr bool is_modulo = false; 
# 1797
static constexpr bool traps = false; 
# 1798
static constexpr bool tinyness_before = false; 
# 1800
static constexpr float_round_style round_style = round_to_nearest; 
# 1802
}; 
# 1810
template<> struct numeric_limits< long double>  { 
# 1812
static constexpr bool is_specialized = true; 
# 1815
static constexpr long double min() noexcept { return (3.3621031431120935063E-4932L); } 
# 1818
static constexpr long double max() noexcept { return (1.189731495357231765E4932L); } 
# 1822
static constexpr long double lowest() noexcept { return -(1.189731495357231765E4932L); } 
# 1825
static constexpr int digits = 64; 
# 1826
static constexpr int digits10 = 18; 
# 1828
static constexpr int max_digits10 = ((2) + (((64) * 643L) / (2136))); 
# 1831
static constexpr bool is_signed = true; 
# 1832
static constexpr bool is_integer = false; 
# 1833
static constexpr bool is_exact = false; 
# 1834
static constexpr int radix = 2; 
# 1837
static constexpr long double epsilon() noexcept { return (1.084202172485504434E-19L); } 
# 1840
static constexpr long double round_error() noexcept { return (0.5L); } 
# 1842
static constexpr int min_exponent = (-16381); 
# 1843
static constexpr int min_exponent10 = (-4931); 
# 1844
static constexpr int max_exponent = 16384; 
# 1845
static constexpr int max_exponent10 = 4932; 
# 1847
static constexpr bool has_infinity = (1); 
# 1848
static constexpr bool has_quiet_NaN = (1); 
# 1849
static constexpr bool has_signaling_NaN = has_quiet_NaN; 
# 1850
static constexpr float_denorm_style has_denorm = (((bool)1) ? denorm_present : denorm_absent); 
# 1852
static constexpr bool has_denorm_loss = false; 
# 1856
static constexpr long double infinity() noexcept { return __builtin_huge_vall(); } 
# 1859
static constexpr long double quiet_NaN() noexcept { return __builtin_nanl(""); } 
# 1862
static constexpr long double signaling_NaN() noexcept { return __builtin_nansl(""); } 
# 1865
static constexpr long double denorm_min() noexcept { return (3.6E-4951L); } 
# 1867
static constexpr bool is_iec559 = (has_infinity && has_quiet_NaN && (has_denorm == (denorm_present))); 
# 1869
static constexpr bool is_bounded = true; 
# 1870
static constexpr bool is_modulo = false; 
# 1872
static constexpr bool traps = false; 
# 1873
static constexpr bool tinyness_before = false; 
# 1875
static constexpr float_round_style round_style = round_to_nearest; 
# 1877
}; 
# 1884
}
# 37 "/usr/include/c++/9/bits/uniform_int_dist.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
namespace __detail { 
# 44
template< class _Tp> inline bool 
# 46
_Power_of_2(_Tp __x) 
# 47
{ 
# 48
return ((__x - 1) & __x) == 0; 
# 49
} 
# 50
}
# 57
template< class _IntType = int> 
# 58
class uniform_int_distribution { 
# 60
static_assert((std::template is_integral< _IntType> ::value), "template argument must be an integral type");
# 65
public: typedef _IntType result_type; 
# 67
struct param_type { 
# 69
typedef uniform_int_distribution distribution_type; 
# 71
param_type() : param_type(0) { } 
# 74
explicit param_type(_IntType __a, _IntType 
# 75
__b = numeric_limits< _IntType> ::max()) : _M_a(__a), _M_b(__b) 
# 77
{ 
# 78
; 
# 79
} 
# 82
result_type a() const 
# 83
{ return _M_a; } 
# 86
result_type b() const 
# 87
{ return _M_b; } 
# 90
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 91
{ return ((__p1._M_a) == (__p2._M_a)) && ((__p1._M_b) == (__p2._M_b)); } 
# 94
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 95
{ return !(__p1 == __p2); } 
# 98
private: _IntType _M_a; 
# 99
_IntType _M_b; 
# 100
}; 
# 106
uniform_int_distribution() : uniform_int_distribution(0) { } 
# 112
explicit uniform_int_distribution(_IntType __a, _IntType 
# 113
__b = numeric_limits< _IntType> ::max()) : _M_param(__a, __b) 
# 115
{ } 
# 118
explicit uniform_int_distribution(const param_type &__p) : _M_param(__p) 
# 120
{ } 
# 128
void reset() { } 
# 131
result_type a() const 
# 132
{ return (_M_param).a(); } 
# 135
result_type b() const 
# 136
{ return (_M_param).b(); } 
# 142
param_type param() const 
# 143
{ return _M_param; } 
# 150
void param(const param_type &__param) 
# 151
{ (_M_param) = __param; } 
# 157
result_type min() const 
# 158
{ return a(); } 
# 164
result_type max() const 
# 165
{ return b(); } 
# 170
template< class _UniformRandomNumberGenerator> result_type 
# 172
operator()(_UniformRandomNumberGenerator &__urng) 
# 173
{ return this->operator()(__urng, _M_param); } 
# 175
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 180
template< class _ForwardIterator, class 
# 181
_UniformRandomNumberGenerator> void 
# 183
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 184
__urng) 
# 185
{ this->__generate(__f, __t, __urng, _M_param); } 
# 187
template< class _ForwardIterator, class 
# 188
_UniformRandomNumberGenerator> void 
# 190
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 191
__urng, const param_type &
# 192
__p) 
# 193
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 195
template< class _UniformRandomNumberGenerator> void 
# 197
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 198
__urng, const param_type &
# 199
__p) 
# 200
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 207
friend inline bool operator==(const uniform_int_distribution< _IntType>  &__d1, const uniform_int_distribution< _IntType>  &
# 208
__d2) 
# 209
{ return (__d1._M_param) == (__d2._M_param); } 
# 212
private: template< class _ForwardIterator, class 
# 213
_UniformRandomNumberGenerator> void 
# 212
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 219
param_type _M_param; 
# 220
}; 
# 222
template< class _IntType> 
# 223
template< class _UniformRandomNumberGenerator> typename uniform_int_distribution< _IntType> ::result_type 
# 226
uniform_int_distribution< _IntType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 227
__param) 
# 228
{ 
# 230
typedef typename _UniformRandomNumberGenerator::result_type _Gresult_type; 
# 231
typedef typename make_unsigned< result_type> ::type __utype; 
# 233
typedef typename common_type< typename _UniformRandomNumberGenerator::result_type, typename make_unsigned< result_type> ::type> ::type __uctype; 
# 235
const __uctype __urngmin = __urng.min(); 
# 236
const __uctype __urngmax = __urng.max(); 
# 237
const __uctype __urngrange = __urngmax - __urngmin; 
# 238
const __uctype __urange = ((__uctype)__param.b()) - ((__uctype)__param.a()); 
# 241
__uctype __ret; 
# 243
if (__urngrange > __urange) 
# 244
{ 
# 246
const __uctype __uerange = __urange + 1; 
# 247
const __uctype __scaling = __urngrange / __uerange; 
# 248
const __uctype __past = __uerange * __scaling; 
# 249
do { 
# 250
__ret = (((__uctype)__urng()) - __urngmin); } 
# 251
while (__ret >= __past); 
# 252
__ret /= __scaling; 
# 253
} else { 
# 254
if (__urngrange < __urange) 
# 255
{ 
# 271 "/usr/include/c++/9/bits/uniform_int_dist.h" 3
__uctype __tmp; 
# 272
do 
# 273
{ 
# 274
const __uctype __uerngrange = __urngrange + 1; 
# 275
__tmp = (__uerngrange * operator()(__urng, param_type(0, __urange / __uerngrange))); 
# 277
__ret = (__tmp + (((__uctype)__urng()) - __urngmin)); 
# 278
} 
# 279
while ((__ret > __urange) || (__ret < __tmp)); 
# 280
} else { 
# 282
__ret = (((__uctype)__urng()) - __urngmin); }  }  
# 284
return __ret + __param.a(); 
# 285
} 
# 288
template< class _IntType> 
# 289
template< class _ForwardIterator, class 
# 290
_UniformRandomNumberGenerator> void 
# 293
uniform_int_distribution< _IntType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 294
__urng, const param_type &
# 295
__param) 
# 296
{ 
# 299
typedef typename _UniformRandomNumberGenerator::result_type _Gresult_type; 
# 300
typedef typename make_unsigned< result_type> ::type __utype; 
# 302
typedef typename common_type< typename _UniformRandomNumberGenerator::result_type, typename make_unsigned< result_type> ::type> ::type __uctype; 
# 304
const __uctype __urngmin = __urng.min(); 
# 305
const __uctype __urngmax = __urng.max(); 
# 306
const __uctype __urngrange = __urngmax - __urngmin; 
# 307
const __uctype __urange = ((__uctype)__param.b()) - ((__uctype)__param.a()); 
# 310
__uctype __ret; 
# 312
if (__urngrange > __urange) 
# 313
{ 
# 314
if (__detail::_Power_of_2(__urngrange + 1) && __detail::_Power_of_2(__urange + 1)) 
# 316
{ 
# 317
while (__f != __t) 
# 318
{ 
# 319
__ret = (((__uctype)__urng()) - __urngmin); 
# 320
(*(__f++)) = ((__ret & __urange) + __param.a()); 
# 321
}  
# 322
} else 
# 324
{ 
# 326
const __uctype __uerange = __urange + 1; 
# 327
const __uctype __scaling = __urngrange / __uerange; 
# 328
const __uctype __past = __uerange * __scaling; 
# 329
while (__f != __t) 
# 330
{ 
# 331
do { 
# 332
__ret = (((__uctype)__urng()) - __urngmin); } 
# 333
while (__ret >= __past); 
# 334
(*(__f++)) = ((__ret / __scaling) + __param.a()); 
# 335
}  
# 336
}  
# 337
} else { 
# 338
if (__urngrange < __urange) 
# 339
{ 
# 355 "/usr/include/c++/9/bits/uniform_int_dist.h" 3
__uctype __tmp; 
# 356
while (__f != __t) 
# 357
{ 
# 358
do 
# 359
{ 
# 360
const __uctype __uerngrange = __urngrange + 1; 
# 361
__tmp = (__uerngrange * operator()(__urng, param_type(0, __urange / __uerngrange))); 
# 363
__ret = (__tmp + (((__uctype)__urng()) - __urngmin)); 
# 364
} 
# 365
while ((__ret > __urange) || (__ret < __tmp)); 
# 366
(*(__f++)) = __ret; 
# 367
}  
# 368
} else { 
# 370
while (__f != __t) { 
# 371
(*(__f++)) = ((((__uctype)__urng()) - __urngmin) + __param.a()); }  }  }  
# 372
} 
# 377
}
# 71 "/usr/include/c++/9/bits/stl_algo.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 76
template< class _Iterator, class _Compare> void 
# 78
__move_median_to_first(_Iterator __result, _Iterator __a, _Iterator __b, _Iterator 
# 79
__c, _Compare __comp) 
# 80
{ 
# 81
if (__comp(__a, __b)) 
# 82
{ 
# 83
if (__comp(__b, __c)) { 
# 84
std::iter_swap(__result, __b); } else { 
# 85
if (__comp(__a, __c)) { 
# 86
std::iter_swap(__result, __c); } else { 
# 88
std::iter_swap(__result, __a); }  }  
# 89
} else { 
# 90
if (__comp(__a, __c)) { 
# 91
std::iter_swap(__result, __a); } else { 
# 92
if (__comp(__b, __c)) { 
# 93
std::iter_swap(__result, __c); } else { 
# 95
std::iter_swap(__result, __b); }  }  }  
# 96
} 
# 99
template< class _InputIterator, class _Predicate> inline _InputIterator 
# 101
__find_if(_InputIterator __first, _InputIterator __last, _Predicate 
# 102
__pred, input_iterator_tag) 
# 103
{ 
# 104
while ((__first != __last) && (!__pred(__first))) { 
# 105
++__first; }  
# 106
return __first; 
# 107
} 
# 110
template< class _RandomAccessIterator, class _Predicate> _RandomAccessIterator 
# 112
__find_if(_RandomAccessIterator __first, _RandomAccessIterator __last, _Predicate 
# 113
__pred, random_access_iterator_tag) 
# 114
{ 
# 116
typename iterator_traits< _RandomAccessIterator> ::difference_type __trip_count = (__last - __first) >> 2; 
# 118
for (; __trip_count > 0; --__trip_count) 
# 119
{ 
# 120
if (__pred(__first)) { 
# 121
return __first; }  
# 122
++__first; 
# 124
if (__pred(__first)) { 
# 125
return __first; }  
# 126
++__first; 
# 128
if (__pred(__first)) { 
# 129
return __first; }  
# 130
++__first; 
# 132
if (__pred(__first)) { 
# 133
return __first; }  
# 134
++__first; 
# 135
}  
# 137
switch (__last - __first) 
# 138
{ 
# 139
case 3:  
# 140
if (__pred(__first)) { 
# 141
return __first; }  
# 142
++__first; 
# 143
case 2:  
# 144
if (__pred(__first)) { 
# 145
return __first; }  
# 146
++__first; 
# 147
case 1:  
# 148
if (__pred(__first)) { 
# 149
return __first; }  
# 150
++__first; 
# 151
case 0:  
# 152
default:  
# 153
return __last; 
# 154
}  
# 155
} 
# 157
template< class _Iterator, class _Predicate> inline _Iterator 
# 159
__find_if(_Iterator __first, _Iterator __last, _Predicate __pred) 
# 160
{ 
# 161
return __find_if(__first, __last, __pred, std::__iterator_category(__first)); 
# 163
} 
# 166
template< class _InputIterator, class _Predicate> inline _InputIterator 
# 168
__find_if_not(_InputIterator __first, _InputIterator __last, _Predicate 
# 169
__pred) 
# 170
{ 
# 171
return std::__find_if(__first, __last, __gnu_cxx::__ops::__negate(__pred), std::__iterator_category(__first)); 
# 174
} 
# 179
template< class _InputIterator, class _Predicate, class _Distance> _InputIterator 
# 181
__find_if_not_n(_InputIterator __first, _Distance &__len, _Predicate __pred) 
# 182
{ 
# 183
for (; __len; (--__len), ((void)(++__first))) { 
# 184
if (!__pred(__first)) { 
# 185
break; }  }  
# 186
return __first; 
# 187
} 
# 202 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 203
_BinaryPredicate> _ForwardIterator1 
# 205
__search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 206
__first2, _ForwardIterator2 __last2, _BinaryPredicate 
# 207
__predicate) 
# 208
{ 
# 210
if ((__first1 == __last1) || (__first2 == __last2)) { 
# 211
return __first1; }  
# 214
_ForwardIterator2 __p1(__first2); 
# 215
if ((++__p1) == __last2) { 
# 216
return std::__find_if(__first1, __last1, __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2)); }  
# 220
_ForwardIterator2 __p; 
# 221
_ForwardIterator1 __current = __first1; 
# 223
for (; ;) 
# 224
{ 
# 225
__first1 = std::__find_if(__first1, __last1, __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2)); 
# 229
if (__first1 == __last1) { 
# 230
return __last1; }  
# 232
__p = __p1; 
# 233
__current = __first1; 
# 234
if ((++__current) == __last1) { 
# 235
return __last1; }  
# 237
while (__predicate(__current, __p)) 
# 238
{ 
# 239
if ((++__p) == __last2) { 
# 240
return __first1; }  
# 241
if ((++__current) == __last1) { 
# 242
return __last1; }  
# 243
}  
# 244
++__first1; 
# 245
}  
# 246
return __first1; 
# 247
} 
# 254
template< class _ForwardIterator, class _Integer, class 
# 255
_UnaryPredicate> _ForwardIterator 
# 257
__search_n_aux(_ForwardIterator __first, _ForwardIterator __last, _Integer 
# 258
__count, _UnaryPredicate __unary_pred, forward_iterator_tag) 
# 260
{ 
# 261
__first = std::__find_if(__first, __last, __unary_pred); 
# 262
while (__first != __last) 
# 263
{ 
# 265
typename iterator_traits< _ForwardIterator> ::difference_type __n = __count; 
# 266
_ForwardIterator __i = __first; 
# 267
++__i; 
# 268
while ((__i != __last) && (__n != 1) && __unary_pred(__i)) 
# 269
{ 
# 270
++__i; 
# 271
--__n; 
# 272
}  
# 273
if (__n == 1) { 
# 274
return __first; }  
# 275
if (__i == __last) { 
# 276
return __last; }  
# 277
__first = std::__find_if(++__i, __last, __unary_pred); 
# 278
}  
# 279
return __last; 
# 280
} 
# 286
template< class _RandomAccessIter, class _Integer, class 
# 287
_UnaryPredicate> _RandomAccessIter 
# 289
__search_n_aux(_RandomAccessIter __first, _RandomAccessIter __last, _Integer 
# 290
__count, _UnaryPredicate __unary_pred, random_access_iterator_tag) 
# 292
{ 
# 294
typedef typename iterator_traits< _RandomAccessIter> ::difference_type _DistanceType; 
# 296
_DistanceType __tailSize = __last - __first; 
# 297
_DistanceType __remainder = __count; 
# 299
while (__remainder <= __tailSize) 
# 300
{ 
# 301
__first += __remainder; 
# 302
__tailSize -= __remainder; 
# 305
_RandomAccessIter __backTrack = __first; 
# 306
while (__unary_pred(--__backTrack)) 
# 307
{ 
# 308
if ((--__remainder) == 0) { 
# 309
return (__first - __count); }  
# 310
}  
# 311
__remainder = ((__count + 1) - (__first - __backTrack)); 
# 312
}  
# 313
return __last; 
# 314
} 
# 316
template< class _ForwardIterator, class _Integer, class 
# 317
_UnaryPredicate> _ForwardIterator 
# 319
__search_n(_ForwardIterator __first, _ForwardIterator __last, _Integer 
# 320
__count, _UnaryPredicate 
# 321
__unary_pred) 
# 322
{ 
# 323
if (__count <= 0) { 
# 324
return __first; }  
# 326
if (__count == 1) { 
# 327
return std::__find_if(__first, __last, __unary_pred); }  
# 329
return std::__search_n_aux(__first, __last, __count, __unary_pred, std::__iterator_category(__first)); 
# 331
} 
# 334
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 335
_BinaryPredicate> _ForwardIterator1 
# 337
__find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 338
__first2, _ForwardIterator2 __last2, forward_iterator_tag, forward_iterator_tag, _BinaryPredicate 
# 340
__comp) 
# 341
{ 
# 342
if (__first2 == __last2) { 
# 343
return __last1; }  
# 345
_ForwardIterator1 __result = __last1; 
# 346
while (1) 
# 347
{ 
# 348
_ForwardIterator1 __new_result = std::__search(__first1, __last1, __first2, __last2, __comp); 
# 350
if (__new_result == __last1) { 
# 351
return __result; } else 
# 353
{ 
# 354
__result = __new_result; 
# 355
__first1 = __new_result; 
# 356
++__first1; 
# 357
}  
# 358
}  
# 359
} 
# 362
template< class _BidirectionalIterator1, class _BidirectionalIterator2, class 
# 363
_BinaryPredicate> _BidirectionalIterator1 
# 365
__find_end(_BidirectionalIterator1 __first1, _BidirectionalIterator1 
# 366
__last1, _BidirectionalIterator2 
# 367
__first2, _BidirectionalIterator2 
# 368
__last2, bidirectional_iterator_tag, bidirectional_iterator_tag, _BinaryPredicate 
# 370
__comp) 
# 371
{ 
# 378
typedef reverse_iterator< _BidirectionalIterator1>  _RevIterator1; 
# 379
typedef reverse_iterator< _BidirectionalIterator2>  _RevIterator2; 
# 381
_RevIterator1 __rlast1(__first1); 
# 382
_RevIterator2 __rlast2(__first2); 
# 383
_RevIterator1 __rresult = std::__search(((reverse_iterator< _BidirectionalIterator1> )(__last1)), __rlast1, ((reverse_iterator< _BidirectionalIterator2> )(__last2)), __rlast2, __comp); 
# 387
if (__rresult == __rlast1) { 
# 388
return __last1; } else 
# 390
{ 
# 391
_BidirectionalIterator1 __result = __rresult.base(); 
# 392
std::advance(__result, -std::distance(__first2, __last2)); 
# 393
return __result; 
# 394
}  
# 395
} 
# 423 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline _ForwardIterator1 
# 425
find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 426
__first2, _ForwardIterator2 __last2) 
# 427
{ 
# 434
; 
# 435
; 
# 437
return std::__find_end(__first1, __last1, __first2, __last2, std::__iterator_category(__first1), std::__iterator_category(__first2), __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 441
} 
# 471 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 472
_BinaryPredicate> inline _ForwardIterator1 
# 474
find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 475
__first2, _ForwardIterator2 __last2, _BinaryPredicate 
# 476
__comp) 
# 477
{ 
# 484
; 
# 485
; 
# 487
return std::__find_end(__first1, __last1, __first2, __last2, std::__iterator_category(__first1), std::__iterator_category(__first2), __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 491
} 
# 506 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline bool 
# 508
all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred) 
# 509
{ return __last == std::find_if_not(__first, __last, __pred); } 
# 523 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline bool 
# 525
none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred) 
# 526
{ return __last == std::find_if(__first, __last, __pred); } 
# 541 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline bool 
# 543
any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred) 
# 544
{ return !std::none_of(__first, __last, __pred); } 
# 556 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline _InputIterator 
# 558
find_if_not(_InputIterator __first, _InputIterator __last, _Predicate 
# 559
__pred) 
# 560
{ 
# 565
; 
# 566
return std::__find_if_not(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 568
} 
# 580 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline bool 
# 582
is_partitioned(_InputIterator __first, _InputIterator __last, _Predicate 
# 583
__pred) 
# 584
{ 
# 585
__first = std::find_if_not(__first, __last, __pred); 
# 586
if (__first == __last) { 
# 587
return true; }  
# 588
++__first; 
# 589
return std::none_of(__first, __last, __pred); 
# 590
} 
# 601 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Predicate> _ForwardIterator 
# 603
partition_point(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 604
__pred) 
# 605
{ 
# 612
; 
# 615
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 617
_DistanceType __len = std::distance(__first, __last); 
# 618
_DistanceType __half; 
# 619
_ForwardIterator __middle; 
# 621
while (__len > 0) 
# 622
{ 
# 623
__half = (__len >> 1); 
# 624
__middle = __first; 
# 625
std::advance(__middle, __half); 
# 626
if (__pred(*__middle)) 
# 627
{ 
# 628
__first = __middle; 
# 629
++__first; 
# 630
__len = ((__len - __half) - 1); 
# 631
} else { 
# 633
__len = __half; }  
# 634
}  
# 635
return __first; 
# 636
} 
# 639
template< class _InputIterator, class _OutputIterator, class 
# 640
_Predicate> _OutputIterator 
# 642
__remove_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 643
__result, _Predicate __pred) 
# 644
{ 
# 645
for (; __first != __last; ++__first) { 
# 646
if (!__pred(__first)) 
# 647
{ 
# 648
(*__result) = (*__first); 
# 649
++__result; 
# 650
}  }  
# 651
return __result; 
# 652
} 
# 668 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class _Tp> inline _OutputIterator 
# 670
remove_copy(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 671
__result, const _Tp &__value) 
# 672
{ 
# 679
; 
# 681
return std::__remove_copy_if(__first, __last, __result, __gnu_cxx::__ops::__iter_equals_val(__value)); 
# 683
} 
# 700 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class 
# 701
_Predicate> inline _OutputIterator 
# 703
remove_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 704
__result, _Predicate __pred) 
# 705
{ 
# 712
; 
# 714
return std::__remove_copy_if(__first, __last, __result, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 716
} 
# 734 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class 
# 735
_Predicate> _OutputIterator 
# 737
copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 738
__result, _Predicate __pred) 
# 739
{ 
# 746
; 
# 748
for (; __first != __last; ++__first) { 
# 749
if (__pred(*__first)) 
# 750
{ 
# 751
(*__result) = (*__first); 
# 752
++__result; 
# 753
}  }  
# 754
return __result; 
# 755
} 
# 757
template< class _InputIterator, class _Size, class _OutputIterator> _OutputIterator 
# 759
__copy_n(_InputIterator __first, _Size __n, _OutputIterator 
# 760
__result, input_iterator_tag) 
# 761
{ 
# 762
if (__n > 0) 
# 763
{ 
# 764
while (true) 
# 765
{ 
# 766
(*__result) = (*__first); 
# 767
++__result; 
# 768
if ((--__n) > 0) { 
# 769
++__first; } else { 
# 771
break; }  
# 772
}  
# 773
}  
# 774
return __result; 
# 775
} 
# 777
template< class _RandomAccessIterator, class _Size, class 
# 778
_OutputIterator> inline _OutputIterator 
# 780
__copy_n(_RandomAccessIterator __first, _Size __n, _OutputIterator 
# 781
__result, random_access_iterator_tag) 
# 782
{ return std::copy(__first, __first + __n, __result); } 
# 797 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator, class _Size, class _OutputIterator> inline _OutputIterator 
# 799
copy_n(_InputIterator __first, _Size __n, _OutputIterator __result) 
# 800
{ 
# 806
if (__n <= 0) { 
# 807
return __result; }  
# 809
; 
# 810
; 
# 812
return std::__copy_n(__first, __n, __result, std::__iterator_category(__first)); 
# 814
} 
# 831 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator1, class 
# 832
_OutputIterator2, class _Predicate> pair< _OutputIterator1, _OutputIterator2>  
# 834
partition_copy(_InputIterator __first, _InputIterator __last, _OutputIterator1 
# 835
__out_true, _OutputIterator2 __out_false, _Predicate 
# 836
__pred) 
# 837
{ 
# 846
; 
# 848
for (; __first != __last; ++__first) { 
# 849
if (__pred(*__first)) 
# 850
{ 
# 851
(*__out_true) = (*__first); 
# 852
++__out_true; 
# 853
} else 
# 855
{ 
# 856
(*__out_false) = (*__first); 
# 857
++__out_false; 
# 858
}  }  
# 860
return pair< _OutputIterator1, _OutputIterator2> (__out_true, __out_false); 
# 861
} 
# 864
template< class _ForwardIterator, class _Predicate> _ForwardIterator 
# 866
__remove_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 867
__pred) 
# 868
{ 
# 869
__first = std::__find_if(__first, __last, __pred); 
# 870
if (__first == __last) { 
# 871
return __first; }  
# 872
_ForwardIterator __result = __first; 
# 873
++__first; 
# 874
for (; __first != __last; ++__first) { 
# 875
if (!__pred(__first)) 
# 876
{ 
# 877
(*__result) = std::move(*__first); 
# 878
++__result; 
# 879
}  }  
# 880
return __result; 
# 881
} 
# 900 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp> inline _ForwardIterator 
# 902
remove(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 903
__value) 
# 904
{ 
# 910
; 
# 912
return std::__remove_if(__first, __last, __gnu_cxx::__ops::__iter_equals_val(__value)); 
# 914
} 
# 933 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Predicate> inline _ForwardIterator 
# 935
remove_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 936
__pred) 
# 937
{ 
# 943
; 
# 945
return std::__remove_if(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 947
} 
# 949
template< class _ForwardIterator, class _BinaryPredicate> _ForwardIterator 
# 951
__adjacent_find(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate 
# 952
__binary_pred) 
# 953
{ 
# 954
if (__first == __last) { 
# 955
return __last; }  
# 956
_ForwardIterator __next = __first; 
# 957
while ((++__next) != __last) 
# 958
{ 
# 959
if (__binary_pred(__first, __next)) { 
# 960
return __first; }  
# 961
__first = __next; 
# 962
}  
# 963
return __last; 
# 964
} 
# 966
template< class _ForwardIterator, class _BinaryPredicate> _ForwardIterator 
# 968
__unique(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate 
# 969
__binary_pred) 
# 970
{ 
# 972
__first = std::__adjacent_find(__first, __last, __binary_pred); 
# 973
if (__first == __last) { 
# 974
return __last; }  
# 977
_ForwardIterator __dest = __first; 
# 978
++__first; 
# 979
while ((++__first) != __last) { 
# 980
if (!__binary_pred(__dest, __first)) { 
# 981
(*(++__dest)) = std::move(*__first); }  }  
# 982
return ++__dest; 
# 983
} 
# 999 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator> inline _ForwardIterator 
# 1001
unique(_ForwardIterator __first, _ForwardIterator __last) 
# 1002
{ 
# 1008
; 
# 1010
return std::__unique(__first, __last, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 1012
} 
# 1029 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator, class _BinaryPredicate> inline _ForwardIterator 
# 1031
unique(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate 
# 1032
__binary_pred) 
# 1033
{ 
# 1040
; 
# 1042
return std::__unique(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred)); 
# 1044
} 
# 1052
template< class _ForwardIterator, class _OutputIterator, class 
# 1053
_BinaryPredicate> _OutputIterator 
# 1055
__unique_copy(_ForwardIterator __first, _ForwardIterator __last, _OutputIterator 
# 1056
__result, _BinaryPredicate __binary_pred, forward_iterator_tag, output_iterator_tag) 
# 1058
{ 
# 1064
_ForwardIterator __next = __first; 
# 1065
(*__result) = (*__first); 
# 1066
while ((++__next) != __last) { 
# 1067
if (!__binary_pred(__first, __next)) 
# 1068
{ 
# 1069
__first = __next; 
# 1070
(*(++__result)) = (*__first); 
# 1071
}  }  
# 1072
return ++__result; 
# 1073
} 
# 1081
template< class _InputIterator, class _OutputIterator, class 
# 1082
_BinaryPredicate> _OutputIterator 
# 1084
__unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 1085
__result, _BinaryPredicate __binary_pred, input_iterator_tag, output_iterator_tag) 
# 1087
{ 
# 1093
typename iterator_traits< _InputIterator> ::value_type __value = (*__first); 
# 1095
__decltype((__gnu_cxx::__ops::__iter_comp_val(__binary_pred))) __rebound_pred = __gnu_cxx::__ops::__iter_comp_val(__binary_pred); 
# 1097
(*__result) = __value; 
# 1098
while ((++__first) != __last) { 
# 1099
if (!__rebound_pred(__first, __value)) 
# 1100
{ 
# 1101
__value = (*__first); 
# 1102
(*(++__result)) = __value; 
# 1103
}  }  
# 1104
return ++__result; 
# 1105
} 
# 1113
template< class _InputIterator, class _ForwardIterator, class 
# 1114
_BinaryPredicate> _ForwardIterator 
# 1116
__unique_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 1117
__result, _BinaryPredicate __binary_pred, input_iterator_tag, forward_iterator_tag) 
# 1119
{ 
# 1124
(*__result) = (*__first); 
# 1125
while ((++__first) != __last) { 
# 1126
if (!__binary_pred(__result, __first)) { 
# 1127
(*(++__result)) = (*__first); }  }  
# 1128
return ++__result; 
# 1129
} 
# 1136
template< class _BidirectionalIterator> void 
# 1138
__reverse(_BidirectionalIterator __first, _BidirectionalIterator __last, bidirectional_iterator_tag) 
# 1140
{ 
# 1141
while (true) { 
# 1142
if ((__first == __last) || (__first == (--__last))) { 
# 1143
return; } else 
# 1145
{ 
# 1146
std::iter_swap(__first, __last); 
# 1147
++__first; 
# 1148
}  }  
# 1149
} 
# 1156
template< class _RandomAccessIterator> void 
# 1158
__reverse(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag) 
# 1160
{ 
# 1161
if (__first == __last) { 
# 1162
return; }  
# 1163
--__last; 
# 1164
while (__first < __last) 
# 1165
{ 
# 1166
std::iter_swap(__first, __last); 
# 1167
++__first; 
# 1168
--__last; 
# 1169
}  
# 1170
} 
# 1184 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _BidirectionalIterator> inline void 
# 1186
reverse(_BidirectionalIterator __first, _BidirectionalIterator __last) 
# 1187
{ 
# 1191
; 
# 1192
std::__reverse(__first, __last, std::__iterator_category(__first)); 
# 1193
} 
# 1211 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _OutputIterator> _OutputIterator 
# 1213
reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last, _OutputIterator 
# 1214
__result) 
# 1215
{ 
# 1221
; 
# 1223
while (__first != __last) 
# 1224
{ 
# 1225
--__last; 
# 1226
(*__result) = (*__last); 
# 1227
++__result; 
# 1228
}  
# 1229
return __result; 
# 1230
} 
# 1236
template< class _EuclideanRingElement> _EuclideanRingElement 
# 1238
__gcd(_EuclideanRingElement __m, _EuclideanRingElement __n) 
# 1239
{ 
# 1240
while (__n != 0) 
# 1241
{ 
# 1242
_EuclideanRingElement __t = __m % __n; 
# 1243
__m = __n; 
# 1244
__n = __t; 
# 1245
}  
# 1246
return __m; 
# 1247
} 
# 1249
inline namespace _V2 { 
# 1253
template< class _ForwardIterator> _ForwardIterator 
# 1255
__rotate(_ForwardIterator __first, _ForwardIterator 
# 1256
__middle, _ForwardIterator 
# 1257
__last, forward_iterator_tag) 
# 1259
{ 
# 1260
if (__first == __middle) { 
# 1261
return __last; } else { 
# 1262
if (__last == __middle) { 
# 1263
return __first; }  }  
# 1265
_ForwardIterator __first2 = __middle; 
# 1266
do 
# 1267
{ 
# 1268
std::iter_swap(__first, __first2); 
# 1269
++__first; 
# 1270
++__first2; 
# 1271
if (__first == __middle) { 
# 1272
__middle = __first2; }  
# 1273
} 
# 1274
while (__first2 != __last); 
# 1276
_ForwardIterator __ret = __first; 
# 1278
__first2 = __middle; 
# 1280
while (__first2 != __last) 
# 1281
{ 
# 1282
std::iter_swap(__first, __first2); 
# 1283
++__first; 
# 1284
++__first2; 
# 1285
if (__first == __middle) { 
# 1286
__middle = __first2; } else { 
# 1287
if (__first2 == __last) { 
# 1288
__first2 = __middle; }  }  
# 1289
}  
# 1290
return __ret; 
# 1291
} 
# 1294
template< class _BidirectionalIterator> _BidirectionalIterator 
# 1296
__rotate(_BidirectionalIterator __first, _BidirectionalIterator 
# 1297
__middle, _BidirectionalIterator 
# 1298
__last, bidirectional_iterator_tag) 
# 1300
{ 
# 1305
if (__first == __middle) { 
# 1306
return __last; } else { 
# 1307
if (__last == __middle) { 
# 1308
return __first; }  }  
# 1310
std::__reverse(__first, __middle, bidirectional_iterator_tag()); 
# 1311
std::__reverse(__middle, __last, bidirectional_iterator_tag()); 
# 1313
while ((__first != __middle) && (__middle != __last)) 
# 1314
{ 
# 1315
std::iter_swap(__first, --__last); 
# 1316
++__first; 
# 1317
}  
# 1319
if (__first == __middle) 
# 1320
{ 
# 1321
std::__reverse(__middle, __last, bidirectional_iterator_tag()); 
# 1322
return __last; 
# 1323
} else 
# 1325
{ 
# 1326
std::__reverse(__first, __middle, bidirectional_iterator_tag()); 
# 1327
return __first; 
# 1328
}  
# 1329
} 
# 1332
template< class _RandomAccessIterator> _RandomAccessIterator 
# 1334
__rotate(_RandomAccessIterator __first, _RandomAccessIterator 
# 1335
__middle, _RandomAccessIterator 
# 1336
__last, random_access_iterator_tag) 
# 1338
{ 
# 1343
if (__first == __middle) { 
# 1344
return __last; } else { 
# 1345
if (__last == __middle) { 
# 1346
return __first; }  }  
# 1349
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _Distance; 
# 1351
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 1353
_Distance __n = __last - __first; 
# 1354
_Distance __k = __middle - __first; 
# 1356
if (__k == (__n - __k)) 
# 1357
{ 
# 1358
std::swap_ranges(__first, __middle, __middle); 
# 1359
return __middle; 
# 1360
}  
# 1362
_RandomAccessIterator __p = __first; 
# 1363
_RandomAccessIterator __ret = __first + (__last - __middle); 
# 1365
for (; ;) 
# 1366
{ 
# 1367
if (__k < (__n - __k)) 
# 1368
{ 
# 1369
if (__is_pod(_ValueType) && (__k == 1)) 
# 1370
{ 
# 1371
_ValueType __t = std::move(*__p); 
# 1372
std::move(__p + 1, __p + __n, __p); 
# 1373
(*((__p + __n) - 1)) = std::move(__t); 
# 1374
return __ret; 
# 1375
}  
# 1376
_RandomAccessIterator __q = __p + __k; 
# 1377
for (_Distance __i = (0); __i < (__n - __k); ++__i) 
# 1378
{ 
# 1379
std::iter_swap(__p, __q); 
# 1380
++__p; 
# 1381
++__q; 
# 1382
}  
# 1383
__n %= __k; 
# 1384
if (__n == 0) { 
# 1385
return __ret; }  
# 1386
std::swap(__n, __k); 
# 1387
__k = (__n - __k); 
# 1388
} else 
# 1390
{ 
# 1391
__k = (__n - __k); 
# 1392
if (__is_pod(_ValueType) && (__k == 1)) 
# 1393
{ 
# 1394
_ValueType __t = std::move(*((__p + __n) - 1)); 
# 1395
std::move_backward(__p, (__p + __n) - 1, __p + __n); 
# 1396
(*__p) = std::move(__t); 
# 1397
return __ret; 
# 1398
}  
# 1399
_RandomAccessIterator __q = __p + __n; 
# 1400
__p = (__q - __k); 
# 1401
for (_Distance __i = (0); __i < (__n - __k); ++__i) 
# 1402
{ 
# 1403
--__p; 
# 1404
--__q; 
# 1405
std::iter_swap(__p, __q); 
# 1406
}  
# 1407
__n %= __k; 
# 1408
if (__n == 0) { 
# 1409
return __ret; }  
# 1410
std::swap(__n, __k); 
# 1411
}  
# 1412
}  
# 1413
} 
# 1438 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator> inline _ForwardIterator 
# 1440
rotate(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator 
# 1441
__last) 
# 1442
{ 
# 1446
; 
# 1447
; 
# 1449
return std::__rotate(__first, __middle, __last, std::__iterator_category(__first)); 
# 1451
} 
# 1453
}
# 1475 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator, class _OutputIterator> inline _OutputIterator 
# 1477
rotate_copy(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator 
# 1478
__last, _OutputIterator __result) 
# 1479
{ 
# 1484
; 
# 1485
; 
# 1487
return std::copy(__first, __middle, std::copy(__middle, __last, __result)); 
# 1489
} 
# 1492
template< class _ForwardIterator, class _Predicate> _ForwardIterator 
# 1494
__partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 1495
__pred, forward_iterator_tag) 
# 1496
{ 
# 1497
if (__first == __last) { 
# 1498
return __first; }  
# 1500
while (__pred(*__first)) { 
# 1501
if ((++__first) == __last) { 
# 1502
return __first; }  }  
# 1504
_ForwardIterator __next = __first; 
# 1506
while ((++__next) != __last) { 
# 1507
if (__pred(*__next)) 
# 1508
{ 
# 1509
std::iter_swap(__first, __next); 
# 1510
++__first; 
# 1511
}  }  
# 1513
return __first; 
# 1514
} 
# 1517
template< class _BidirectionalIterator, class _Predicate> _BidirectionalIterator 
# 1519
__partition(_BidirectionalIterator __first, _BidirectionalIterator __last, _Predicate 
# 1520
__pred, bidirectional_iterator_tag) 
# 1521
{ 
# 1522
while (true) 
# 1523
{ 
# 1524
while (true) { 
# 1525
if (__first == __last) { 
# 1526
return __first; } else { 
# 1527
if (__pred(*__first)) { 
# 1528
++__first; } else { 
# 1530
break; }  }  }  
# 1531
--__last; 
# 1532
while (true) { 
# 1533
if (__first == __last) { 
# 1534
return __first; } else { 
# 1535
if (!((bool)__pred(*__last))) { 
# 1536
--__last; } else { 
# 1538
break; }  }  }  
# 1539
std::iter_swap(__first, __last); 
# 1540
++__first; 
# 1541
}  
# 1542
} 
# 1552 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Pointer, class _Predicate, class 
# 1553
_Distance> _ForwardIterator 
# 1555
__stable_partition_adaptive(_ForwardIterator __first, _ForwardIterator 
# 1556
__last, _Predicate 
# 1557
__pred, _Distance __len, _Pointer 
# 1558
__buffer, _Distance 
# 1559
__buffer_size) 
# 1560
{ 
# 1561
if (__len == 1) { 
# 1562
return __first; }  
# 1564
if (__len <= __buffer_size) 
# 1565
{ 
# 1566
_ForwardIterator __result1 = __first; 
# 1567
_Pointer __result2 = __buffer; 
# 1572
(*__result2) = std::move(*__first); 
# 1573
++__result2; 
# 1574
++__first; 
# 1575
for (; __first != __last; ++__first) { 
# 1576
if (__pred(__first)) 
# 1577
{ 
# 1578
(*__result1) = std::move(*__first); 
# 1579
++__result1; 
# 1580
} else 
# 1582
{ 
# 1583
(*__result2) = std::move(*__first); 
# 1584
++__result2; 
# 1585
}  }  
# 1587
std::move(__buffer, __result2, __result1); 
# 1588
return __result1; 
# 1589
}  
# 1591
_ForwardIterator __middle = __first; 
# 1592
std::advance(__middle, __len / 2); 
# 1593
_ForwardIterator __left_split = std::__stable_partition_adaptive(__first, __middle, __pred, __len / 2, __buffer, __buffer_size); 
# 1600
_Distance __right_len = __len - (__len / 2); 
# 1601
_ForwardIterator __right_split = std::__find_if_not_n(__middle, __right_len, __pred); 
# 1604
if (__right_len) { 
# 1605
__right_split = std::__stable_partition_adaptive(__right_split, __last, __pred, __right_len, __buffer, __buffer_size); }  
# 1610
return std::rotate(__left_split, __middle, __right_split); 
# 1611
} 
# 1613
template< class _ForwardIterator, class _Predicate> _ForwardIterator 
# 1615
__stable_partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 1616
__pred) 
# 1617
{ 
# 1618
__first = std::__find_if_not(__first, __last, __pred); 
# 1620
if (__first == __last) { 
# 1621
return __first; }  
# 1624
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 1626
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 1629
_Temporary_buffer< _ForwardIterator, typename iterator_traits< _ForwardIterator> ::value_type>  __buf(__first, std::distance(__first, __last)); 
# 1630
return std::__stable_partition_adaptive(__first, __last, __pred, (_DistanceType)__buf.requested_size(), __buf.begin(), (_DistanceType)__buf.size()); 
# 1635
} 
# 1654 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Predicate> inline _ForwardIterator 
# 1656
stable_partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 1657
__pred) 
# 1658
{ 
# 1664
; 
# 1666
return std::__stable_partition(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 1668
} 
# 1671
template< class _RandomAccessIterator, class _Compare> void 
# 1673
__heap_select(_RandomAccessIterator __first, _RandomAccessIterator 
# 1674
__middle, _RandomAccessIterator 
# 1675
__last, _Compare __comp) 
# 1676
{ 
# 1677
std::__make_heap(__first, __middle, __comp); 
# 1678
for (_RandomAccessIterator __i = __middle; __i < __last; ++__i) { 
# 1679
if (__comp(__i, __first)) { 
# 1680
std::__pop_heap(__first, __middle, __i, __comp); }  }  
# 1681
} 
# 1685
template< class _InputIterator, class _RandomAccessIterator, class 
# 1686
_Compare> _RandomAccessIterator 
# 1688
__partial_sort_copy(_InputIterator __first, _InputIterator __last, _RandomAccessIterator 
# 1689
__result_first, _RandomAccessIterator 
# 1690
__result_last, _Compare 
# 1691
__comp) 
# 1692
{ 
# 1694
typedef typename iterator_traits< _InputIterator> ::value_type _InputValueType; 
# 1695
typedef iterator_traits< _RandomAccessIterator>  _RItTraits; 
# 1696
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 1698
if (__result_first == __result_last) { 
# 1699
return __result_last; }  
# 1700
_RandomAccessIterator __result_real_last = __result_first; 
# 1701
while ((__first != __last) && (__result_real_last != __result_last)) 
# 1702
{ 
# 1703
(*__result_real_last) = (*__first); 
# 1704
++__result_real_last; 
# 1705
++__first; 
# 1706
}  
# 1708
std::__make_heap(__result_first, __result_real_last, __comp); 
# 1709
while (__first != __last) 
# 1710
{ 
# 1711
if (__comp(__first, __result_first)) { 
# 1712
std::__adjust_heap(__result_first, (_DistanceType)0, (_DistanceType)(__result_real_last - __result_first), (_InputValueType)(*__first), __comp); }  
# 1716
++__first; 
# 1717
}  
# 1718
std::__sort_heap(__result_first, __result_real_last, __comp); 
# 1719
return __result_real_last; 
# 1720
} 
# 1740 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator, class _RandomAccessIterator> inline _RandomAccessIterator 
# 1742
partial_sort_copy(_InputIterator __first, _InputIterator __last, _RandomAccessIterator 
# 1743
__result_first, _RandomAccessIterator 
# 1744
__result_last) 
# 1745
{ 
# 1760 "/usr/include/c++/9/bits/stl_algo.h" 3
; 
# 1761
; 
# 1762
; 
# 1764
return std::__partial_sort_copy(__first, __last, __result_first, __result_last, __gnu_cxx::__ops::__iter_less_iter()); 
# 1767
} 
# 1789 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator, class _RandomAccessIterator, class 
# 1790
_Compare> inline _RandomAccessIterator 
# 1792
partial_sort_copy(_InputIterator __first, _InputIterator __last, _RandomAccessIterator 
# 1793
__result_first, _RandomAccessIterator 
# 1794
__result_last, _Compare 
# 1795
__comp) 
# 1796
{ 
# 1814 "/usr/include/c++/9/bits/stl_algo.h" 3
; 
# 1815
; 
# 1816
; 
# 1818
return std::__partial_sort_copy(__first, __last, __result_first, __result_last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 1821
} 
# 1824
template< class _RandomAccessIterator, class _Compare> void 
# 1826
__unguarded_linear_insert(_RandomAccessIterator __last, _Compare 
# 1827
__comp) 
# 1828
{ 
# 1830
typename iterator_traits< _RandomAccessIterator> ::value_type __val = std::move(*__last); 
# 1831
_RandomAccessIterator __next = __last; 
# 1832
--__next; 
# 1833
while (__comp(__val, __next)) 
# 1834
{ 
# 1835
(*__last) = std::move(*__next); 
# 1836
__last = __next; 
# 1837
--__next; 
# 1838
}  
# 1839
(*__last) = std::move(__val); 
# 1840
} 
# 1843
template< class _RandomAccessIterator, class _Compare> void 
# 1845
__insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 1846
__last, _Compare __comp) 
# 1847
{ 
# 1848
if (__first == __last) { return; }  
# 1850
for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i) 
# 1851
{ 
# 1852
if (__comp(__i, __first)) 
# 1853
{ 
# 1855
typename iterator_traits< _RandomAccessIterator> ::value_type __val = std::move(*__i); 
# 1856
std::move_backward(__first, __i, __i + 1); 
# 1857
(*__first) = std::move(__val); 
# 1858
} else { 
# 1860
std::__unguarded_linear_insert(__i, __gnu_cxx::__ops::__val_comp_iter(__comp)); }  
# 1862
}  
# 1863
} 
# 1866
template< class _RandomAccessIterator, class _Compare> inline void 
# 1868
__unguarded_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 1869
__last, _Compare __comp) 
# 1870
{ 
# 1871
for (_RandomAccessIterator __i = __first; __i != __last; ++__i) { 
# 1872
std::__unguarded_linear_insert(__i, __gnu_cxx::__ops::__val_comp_iter(__comp)); }  
# 1874
} 
# 1880
enum { _S_threshold = 16}; 
# 1883
template< class _RandomAccessIterator, class _Compare> void 
# 1885
__final_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 1886
__last, _Compare __comp) 
# 1887
{ 
# 1888
if ((__last - __first) > ((int)_S_threshold)) 
# 1889
{ 
# 1890
std::__insertion_sort(__first, __first + ((int)_S_threshold), __comp); 
# 1891
std::__unguarded_insertion_sort(__first + ((int)_S_threshold), __last, __comp); 
# 1893
} else { 
# 1895
std::__insertion_sort(__first, __last, __comp); }  
# 1896
} 
# 1899
template< class _RandomAccessIterator, class _Compare> _RandomAccessIterator 
# 1901
__unguarded_partition(_RandomAccessIterator __first, _RandomAccessIterator 
# 1902
__last, _RandomAccessIterator 
# 1903
__pivot, _Compare __comp) 
# 1904
{ 
# 1905
while (true) 
# 1906
{ 
# 1907
while (__comp(__first, __pivot)) { 
# 1908
++__first; }  
# 1909
--__last; 
# 1910
while (__comp(__pivot, __last)) { 
# 1911
--__last; }  
# 1912
if (!(__first < __last)) { 
# 1913
return __first; }  
# 1914
std::iter_swap(__first, __last); 
# 1915
++__first; 
# 1916
}  
# 1917
} 
# 1920
template< class _RandomAccessIterator, class _Compare> inline _RandomAccessIterator 
# 1922
__unguarded_partition_pivot(_RandomAccessIterator __first, _RandomAccessIterator 
# 1923
__last, _Compare __comp) 
# 1924
{ 
# 1925
_RandomAccessIterator __mid = __first + ((__last - __first) / 2); 
# 1926
std::__move_median_to_first(__first, __first + 1, __mid, __last - 1, __comp); 
# 1928
return std::__unguarded_partition(__first + 1, __last, __first, __comp); 
# 1929
} 
# 1931
template< class _RandomAccessIterator, class _Compare> inline void 
# 1933
__partial_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 1934
__middle, _RandomAccessIterator 
# 1935
__last, _Compare 
# 1936
__comp) 
# 1937
{ 
# 1938
std::__heap_select(__first, __middle, __last, __comp); 
# 1939
std::__sort_heap(__first, __middle, __comp); 
# 1940
} 
# 1943
template< class _RandomAccessIterator, class _Size, class _Compare> void 
# 1945
__introsort_loop(_RandomAccessIterator __first, _RandomAccessIterator 
# 1946
__last, _Size 
# 1947
__depth_limit, _Compare __comp) 
# 1948
{ 
# 1949
while ((__last - __first) > ((int)_S_threshold)) 
# 1950
{ 
# 1951
if (__depth_limit == 0) 
# 1952
{ 
# 1953
std::__partial_sort(__first, __last, __last, __comp); 
# 1954
return; 
# 1955
}  
# 1956
--__depth_limit; 
# 1957
_RandomAccessIterator __cut = std::__unguarded_partition_pivot(__first, __last, __comp); 
# 1959
std::__introsort_loop(__cut, __last, __depth_limit, __comp); 
# 1960
__last = __cut; 
# 1961
}  
# 1962
} 
# 1966
template< class _RandomAccessIterator, class _Compare> inline void 
# 1968
__sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 1969
__comp) 
# 1970
{ 
# 1971
if (__first != __last) 
# 1972
{ 
# 1973
std::__introsort_loop(__first, __last, std::__lg(__last - __first) * 2, __comp); 
# 1976
std::__final_insertion_sort(__first, __last, __comp); 
# 1977
}  
# 1978
} 
# 1980
template< class _RandomAccessIterator, class _Size, class _Compare> void 
# 1982
__introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator 
# 1983
__last, _Size __depth_limit, _Compare 
# 1984
__comp) 
# 1985
{ 
# 1986
while ((__last - __first) > 3) 
# 1987
{ 
# 1988
if (__depth_limit == 0) 
# 1989
{ 
# 1990
std::__heap_select(__first, __nth + 1, __last, __comp); 
# 1992
std::iter_swap(__first, __nth); 
# 1993
return; 
# 1994
}  
# 1995
--__depth_limit; 
# 1996
_RandomAccessIterator __cut = std::__unguarded_partition_pivot(__first, __last, __comp); 
# 1998
if (__cut <= __nth) { 
# 1999
__first = __cut; } else { 
# 2001
__last = __cut; }  
# 2002
}  
# 2003
std::__insertion_sort(__first, __last, __comp); 
# 2004
} 
# 2026 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp, class _Compare> inline _ForwardIterator 
# 2028
lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2029
__val, _Compare __comp) 
# 2030
{ 
# 2036
; 
# 2038
return std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_comp_val(__comp)); 
# 2040
} 
# 2042
template< class _ForwardIterator, class _Tp, class _Compare> _ForwardIterator 
# 2044
__upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2045
__val, _Compare __comp) 
# 2046
{ 
# 2048
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 2050
_DistanceType __len = std::distance(__first, __last); 
# 2052
while (__len > 0) 
# 2053
{ 
# 2054
_DistanceType __half = __len >> 1; 
# 2055
_ForwardIterator __middle = __first; 
# 2056
std::advance(__middle, __half); 
# 2057
if (__comp(__val, __middle)) { 
# 2058
__len = __half; } else 
# 2060
{ 
# 2061
__first = __middle; 
# 2062
++__first; 
# 2063
__len = ((__len - __half) - 1); 
# 2064
}  
# 2065
}  
# 2066
return __first; 
# 2067
} 
# 2080 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp> inline _ForwardIterator 
# 2082
upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2083
__val) 
# 2084
{ 
# 2089
; 
# 2091
return std::__upper_bound(__first, __last, __val, __gnu_cxx::__ops::__val_less_iter()); 
# 2093
} 
# 2110 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp, class _Compare> inline _ForwardIterator 
# 2112
upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2113
__val, _Compare __comp) 
# 2114
{ 
# 2120
; 
# 2122
return std::__upper_bound(__first, __last, __val, __gnu_cxx::__ops::__val_comp_iter(__comp)); 
# 2124
} 
# 2126
template< class _ForwardIterator, class _Tp, class 
# 2127
_CompareItTp, class _CompareTpIt> pair< _ForwardIterator, _ForwardIterator>  
# 2129
__equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2130
__val, _CompareItTp 
# 2131
__comp_it_val, _CompareTpIt __comp_val_it) 
# 2132
{ 
# 2134
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 2136
_DistanceType __len = std::distance(__first, __last); 
# 2138
while (__len > 0) 
# 2139
{ 
# 2140
_DistanceType __half = __len >> 1; 
# 2141
_ForwardIterator __middle = __first; 
# 2142
std::advance(__middle, __half); 
# 2143
if (__comp_it_val(__middle, __val)) 
# 2144
{ 
# 2145
__first = __middle; 
# 2146
++__first; 
# 2147
__len = ((__len - __half) - 1); 
# 2148
} else { 
# 2149
if (__comp_val_it(__val, __middle)) { 
# 2150
__len = __half; } else 
# 2152
{ 
# 2153
_ForwardIterator __left = std::__lower_bound(__first, __middle, __val, __comp_it_val); 
# 2155
std::advance(__first, __len); 
# 2156
_ForwardIterator __right = std::__upper_bound(++__middle, __first, __val, __comp_val_it); 
# 2158
return pair< _ForwardIterator, _ForwardIterator> (__left, __right); 
# 2159
}  }  
# 2160
}  
# 2161
return pair< _ForwardIterator, _ForwardIterator> (__first, __first); 
# 2162
} 
# 2181 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp> inline pair< _ForwardIterator, _ForwardIterator>  
# 2183
equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2184
__val) 
# 2185
{ 
# 2192
; 
# 2193
; 
# 2195
return std::__equal_range(__first, __last, __val, __gnu_cxx::__ops::__iter_less_val(), __gnu_cxx::__ops::__val_less_iter()); 
# 2198
} 
# 2217 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp, class _Compare> inline pair< _ForwardIterator, _ForwardIterator>  
# 2219
equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2220
__val, _Compare __comp) 
# 2221
{ 
# 2229
; 
# 2231
; 
# 2233
return std::__equal_range(__first, __last, __val, __gnu_cxx::__ops::__iter_comp_val(__comp), __gnu_cxx::__ops::__val_comp_iter(__comp)); 
# 2236
} 
# 2250 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp> bool 
# 2252
binary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2253
__val) 
# 2254
{ 
# 2259
; 
# 2260
; 
# 2262
_ForwardIterator __i = std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_less_val()); 
# 2265
return (__i != __last) && (!(__val < (*__i))); 
# 2266
} 
# 2283 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp, class _Compare> bool 
# 2285
binary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2286
__val, _Compare __comp) 
# 2287
{ 
# 2293
; 
# 2295
; 
# 2297
_ForwardIterator __i = std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_comp_val(__comp)); 
# 2300
return (__i != __last) && (!((bool)__comp(__val, *__i))); 
# 2301
} 
# 2306
template< class _InputIterator1, class _InputIterator2, class 
# 2307
_OutputIterator, class _Compare> void 
# 2309
__move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 2310
__first2, _InputIterator2 __last2, _OutputIterator 
# 2311
__result, _Compare __comp) 
# 2312
{ 
# 2313
while ((__first1 != __last1) && (__first2 != __last2)) 
# 2314
{ 
# 2315
if (__comp(__first2, __first1)) 
# 2316
{ 
# 2317
(*__result) = std::move(*__first2); 
# 2318
++__first2; 
# 2319
} else 
# 2321
{ 
# 2322
(*__result) = std::move(*__first1); 
# 2323
++__first1; 
# 2324
}  
# 2325
++__result; 
# 2326
}  
# 2327
if (__first1 != __last1) { 
# 2328
std::move(__first1, __last1, __result); }  
# 2329
} 
# 2332
template< class _BidirectionalIterator1, class _BidirectionalIterator2, class 
# 2333
_BidirectionalIterator3, class _Compare> void 
# 2335
__move_merge_adaptive_backward(_BidirectionalIterator1 __first1, _BidirectionalIterator1 
# 2336
__last1, _BidirectionalIterator2 
# 2337
__first2, _BidirectionalIterator2 
# 2338
__last2, _BidirectionalIterator3 
# 2339
__result, _Compare 
# 2340
__comp) 
# 2341
{ 
# 2342
if (__first1 == __last1) 
# 2343
{ 
# 2344
std::move_backward(__first2, __last2, __result); 
# 2345
return; 
# 2346
} else { 
# 2347
if (__first2 == __last2) { 
# 2348
return; }  }  
# 2350
--__last1; 
# 2351
--__last2; 
# 2352
while (true) 
# 2353
{ 
# 2354
if (__comp(__last2, __last1)) 
# 2355
{ 
# 2356
(*(--__result)) = std::move(*__last1); 
# 2357
if (__first1 == __last1) 
# 2358
{ 
# 2359
std::move_backward(__first2, ++__last2, __result); 
# 2360
return; 
# 2361
}  
# 2362
--__last1; 
# 2363
} else 
# 2365
{ 
# 2366
(*(--__result)) = std::move(*__last2); 
# 2367
if (__first2 == __last2) { 
# 2368
return; }  
# 2369
--__last2; 
# 2370
}  
# 2371
}  
# 2372
} 
# 2375
template< class _BidirectionalIterator1, class _BidirectionalIterator2, class 
# 2376
_Distance> _BidirectionalIterator1 
# 2378
__rotate_adaptive(_BidirectionalIterator1 __first, _BidirectionalIterator1 
# 2379
__middle, _BidirectionalIterator1 
# 2380
__last, _Distance 
# 2381
__len1, _Distance __len2, _BidirectionalIterator2 
# 2382
__buffer, _Distance 
# 2383
__buffer_size) 
# 2384
{ 
# 2385
_BidirectionalIterator2 __buffer_end; 
# 2386
if ((__len1 > __len2) && (__len2 <= __buffer_size)) 
# 2387
{ 
# 2388
if (__len2) 
# 2389
{ 
# 2390
__buffer_end = std::move(__middle, __last, __buffer); 
# 2391
std::move_backward(__first, __middle, __last); 
# 2392
return std::move(__buffer, __buffer_end, __first); 
# 2393
} else { 
# 2395
return __first; }  
# 2396
} else { 
# 2397
if (__len1 <= __buffer_size) 
# 2398
{ 
# 2399
if (__len1) 
# 2400
{ 
# 2401
__buffer_end = std::move(__first, __middle, __buffer); 
# 2402
std::move(__middle, __last, __first); 
# 2403
return std::move_backward(__buffer, __buffer_end, __last); 
# 2404
} else { 
# 2406
return __last; }  
# 2407
} else { 
# 2409
return std::rotate(__first, __middle, __last); }  }  
# 2410
} 
# 2413
template< class _BidirectionalIterator, class _Distance, class 
# 2414
_Pointer, class _Compare> void 
# 2416
__merge_adaptive(_BidirectionalIterator __first, _BidirectionalIterator 
# 2417
__middle, _BidirectionalIterator 
# 2418
__last, _Distance 
# 2419
__len1, _Distance __len2, _Pointer 
# 2420
__buffer, _Distance __buffer_size, _Compare 
# 2421
__comp) 
# 2422
{ 
# 2423
if ((__len1 <= __len2) && (__len1 <= __buffer_size)) 
# 2424
{ 
# 2425
_Pointer __buffer_end = std::move(__first, __middle, __buffer); 
# 2426
std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last, __first, __comp); 
# 2428
} else { 
# 2429
if (__len2 <= __buffer_size) 
# 2430
{ 
# 2431
_Pointer __buffer_end = std::move(__middle, __last, __buffer); 
# 2432
std::__move_merge_adaptive_backward(__first, __middle, __buffer, __buffer_end, __last, __comp); 
# 2434
} else 
# 2436
{ 
# 2437
_BidirectionalIterator __first_cut = __first; 
# 2438
_BidirectionalIterator __second_cut = __middle; 
# 2439
_Distance __len11 = (0); 
# 2440
_Distance __len22 = (0); 
# 2441
if (__len1 > __len2) 
# 2442
{ 
# 2443
__len11 = (__len1 / 2); 
# 2444
std::advance(__first_cut, __len11); 
# 2445
__second_cut = std::__lower_bound(__middle, __last, *__first_cut, __gnu_cxx::__ops::__iter_comp_val(__comp)); 
# 2448
__len22 = std::distance(__middle, __second_cut); 
# 2449
} else 
# 2451
{ 
# 2452
__len22 = (__len2 / 2); 
# 2453
std::advance(__second_cut, __len22); 
# 2454
__first_cut = std::__upper_bound(__first, __middle, *__second_cut, __gnu_cxx::__ops::__val_comp_iter(__comp)); 
# 2457
__len11 = std::distance(__first, __first_cut); 
# 2458
}  
# 2460
_BidirectionalIterator __new_middle = std::__rotate_adaptive(__first_cut, __middle, __second_cut, __len1 - __len11, __len22, __buffer, __buffer_size); 
# 2464
std::__merge_adaptive(__first, __first_cut, __new_middle, __len11, __len22, __buffer, __buffer_size, __comp); 
# 2466
std::__merge_adaptive(__new_middle, __second_cut, __last, __len1 - __len11, __len2 - __len22, __buffer, __buffer_size, __comp); 
# 2470
}  }  
# 2471
} 
# 2474
template< class _BidirectionalIterator, class _Distance, class 
# 2475
_Compare> void 
# 2477
__merge_without_buffer(_BidirectionalIterator __first, _BidirectionalIterator 
# 2478
__middle, _BidirectionalIterator 
# 2479
__last, _Distance 
# 2480
__len1, _Distance __len2, _Compare 
# 2481
__comp) 
# 2482
{ 
# 2483
if ((__len1 == 0) || (__len2 == 0)) { 
# 2484
return; }  
# 2486
if ((__len1 + __len2) == 2) 
# 2487
{ 
# 2488
if (__comp(__middle, __first)) { 
# 2489
std::iter_swap(__first, __middle); }  
# 2490
return; 
# 2491
}  
# 2493
_BidirectionalIterator __first_cut = __first; 
# 2494
_BidirectionalIterator __second_cut = __middle; 
# 2495
_Distance __len11 = (0); 
# 2496
_Distance __len22 = (0); 
# 2497
if (__len1 > __len2) 
# 2498
{ 
# 2499
__len11 = (__len1 / 2); 
# 2500
std::advance(__first_cut, __len11); 
# 2501
__second_cut = std::__lower_bound(__middle, __last, *__first_cut, __gnu_cxx::__ops::__iter_comp_val(__comp)); 
# 2504
__len22 = std::distance(__middle, __second_cut); 
# 2505
} else 
# 2507
{ 
# 2508
__len22 = (__len2 / 2); 
# 2509
std::advance(__second_cut, __len22); 
# 2510
__first_cut = std::__upper_bound(__first, __middle, *__second_cut, __gnu_cxx::__ops::__val_comp_iter(__comp)); 
# 2513
__len11 = std::distance(__first, __first_cut); 
# 2514
}  
# 2516
_BidirectionalIterator __new_middle = std::rotate(__first_cut, __middle, __second_cut); 
# 2518
std::__merge_without_buffer(__first, __first_cut, __new_middle, __len11, __len22, __comp); 
# 2520
std::__merge_without_buffer(__new_middle, __second_cut, __last, __len1 - __len11, __len2 - __len22, __comp); 
# 2522
} 
# 2524
template< class _BidirectionalIterator, class _Compare> void 
# 2526
__inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator 
# 2527
__middle, _BidirectionalIterator 
# 2528
__last, _Compare 
# 2529
__comp) 
# 2530
{ 
# 2532
typedef typename iterator_traits< _BidirectionalIterator> ::value_type _ValueType; 
# 2534
typedef typename iterator_traits< _BidirectionalIterator> ::difference_type _DistanceType; 
# 2536
if ((__first == __middle) || (__middle == __last)) { 
# 2537
return; }  
# 2539
const _DistanceType __len1 = std::distance(__first, __middle); 
# 2540
const _DistanceType __len2 = std::distance(__middle, __last); 
# 2542
typedef _Temporary_buffer< _BidirectionalIterator, typename iterator_traits< _BidirectionalIterator> ::value_type>  _TmpBuf; 
# 2543
_TmpBuf __buf(__first, __len1 + __len2); 
# 2545
if (__buf.begin() == 0) { 
# 2546
std::__merge_without_buffer(__first, __middle, __last, __len1, __len2, __comp); } else { 
# 2549
std::__merge_adaptive(__first, __middle, __last, __len1, __len2, __buf.begin(), (_DistanceType)__buf.size(), __comp); }  
# 2552
} 
# 2572 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _BidirectionalIterator> inline void 
# 2574
inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator 
# 2575
__middle, _BidirectionalIterator 
# 2576
__last) 
# 2577
{ 
# 2583
; 
# 2584
; 
# 2585
; 
# 2587
std::__inplace_merge(__first, __middle, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 2589
} 
# 2613 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _Compare> inline void 
# 2615
inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator 
# 2616
__middle, _BidirectionalIterator 
# 2617
__last, _Compare 
# 2618
__comp) 
# 2619
{ 
# 2626
; 
# 2627
; 
# 2628
; 
# 2630
std::__inplace_merge(__first, __middle, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 2632
} 
# 2636
template< class _InputIterator, class _OutputIterator, class 
# 2637
_Compare> _OutputIterator 
# 2639
__move_merge(_InputIterator __first1, _InputIterator __last1, _InputIterator 
# 2640
__first2, _InputIterator __last2, _OutputIterator 
# 2641
__result, _Compare __comp) 
# 2642
{ 
# 2643
while ((__first1 != __last1) && (__first2 != __last2)) 
# 2644
{ 
# 2645
if (__comp(__first2, __first1)) 
# 2646
{ 
# 2647
(*__result) = std::move(*__first2); 
# 2648
++__first2; 
# 2649
} else 
# 2651
{ 
# 2652
(*__result) = std::move(*__first1); 
# 2653
++__first1; 
# 2654
}  
# 2655
++__result; 
# 2656
}  
# 2657
return std::move(__first2, __last2, std::move(__first1, __last1, __result)); 
# 2660
} 
# 2662
template< class _RandomAccessIterator1, class _RandomAccessIterator2, class 
# 2663
_Distance, class _Compare> void 
# 2665
__merge_sort_loop(_RandomAccessIterator1 __first, _RandomAccessIterator1 
# 2666
__last, _RandomAccessIterator2 
# 2667
__result, _Distance __step_size, _Compare 
# 2668
__comp) 
# 2669
{ 
# 2670
const _Distance __two_step = 2 * __step_size; 
# 2672
while ((__last - __first) >= __two_step) 
# 2673
{ 
# 2674
__result = std::__move_merge(__first, __first + __step_size, __first + __step_size, __first + __two_step, __result, __comp); 
# 2678
__first += __two_step; 
# 2679
}  
# 2680
__step_size = std::min((_Distance)(__last - __first), __step_size); 
# 2682
std::__move_merge(__first, __first + __step_size, __first + __step_size, __last, __result, __comp); 
# 2684
} 
# 2686
template< class _RandomAccessIterator, class _Distance, class 
# 2687
_Compare> void 
# 2689
__chunk_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 2690
__last, _Distance 
# 2691
__chunk_size, _Compare __comp) 
# 2692
{ 
# 2693
while ((__last - __first) >= __chunk_size) 
# 2694
{ 
# 2695
std::__insertion_sort(__first, __first + __chunk_size, __comp); 
# 2696
__first += __chunk_size; 
# 2697
}  
# 2698
std::__insertion_sort(__first, __last, __comp); 
# 2699
} 
# 2701
enum { _S_chunk_size = 7}; 
# 2703
template< class _RandomAccessIterator, class _Pointer, class _Compare> void 
# 2705
__merge_sort_with_buffer(_RandomAccessIterator __first, _RandomAccessIterator 
# 2706
__last, _Pointer 
# 2707
__buffer, _Compare __comp) 
# 2708
{ 
# 2710
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _Distance; 
# 2712
const _Distance __len = __last - __first; 
# 2713
const _Pointer __buffer_last = __buffer + __len; 
# 2715
_Distance __step_size = (_S_chunk_size); 
# 2716
std::__chunk_insertion_sort(__first, __last, __step_size, __comp); 
# 2718
while (__step_size < __len) 
# 2719
{ 
# 2720
std::__merge_sort_loop(__first, __last, __buffer, __step_size, __comp); 
# 2722
__step_size *= 2; 
# 2723
std::__merge_sort_loop(__buffer, __buffer_last, __first, __step_size, __comp); 
# 2725
__step_size *= 2; 
# 2726
}  
# 2727
} 
# 2729
template< class _RandomAccessIterator, class _Pointer, class 
# 2730
_Distance, class _Compare> void 
# 2732
__stable_sort_adaptive(_RandomAccessIterator __first, _RandomAccessIterator 
# 2733
__last, _Pointer 
# 2734
__buffer, _Distance __buffer_size, _Compare 
# 2735
__comp) 
# 2736
{ 
# 2737
const _Distance __len = ((__last - __first) + 1) / 2; 
# 2738
const _RandomAccessIterator __middle = __first + __len; 
# 2739
if (__len > __buffer_size) 
# 2740
{ 
# 2741
std::__stable_sort_adaptive(__first, __middle, __buffer, __buffer_size, __comp); 
# 2743
std::__stable_sort_adaptive(__middle, __last, __buffer, __buffer_size, __comp); 
# 2745
} else 
# 2747
{ 
# 2748
std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp); 
# 2749
std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp); 
# 2750
}  
# 2751
std::__merge_adaptive(__first, __middle, __last, (_Distance)(__middle - __first), (_Distance)(__last - __middle), __buffer, __buffer_size, __comp); 
# 2756
} 
# 2759
template< class _RandomAccessIterator, class _Compare> void 
# 2761
__inplace_stable_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 2762
__last, _Compare __comp) 
# 2763
{ 
# 2764
if ((__last - __first) < 15) 
# 2765
{ 
# 2766
std::__insertion_sort(__first, __last, __comp); 
# 2767
return; 
# 2768
}  
# 2769
_RandomAccessIterator __middle = __first + ((__last - __first) / 2); 
# 2770
std::__inplace_stable_sort(__first, __middle, __comp); 
# 2771
std::__inplace_stable_sort(__middle, __last, __comp); 
# 2772
std::__merge_without_buffer(__first, __middle, __last, __middle - __first, __last - __middle, __comp); 
# 2776
} 
# 2785 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 2786
_Compare> bool 
# 2788
__includes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 2789
__first2, _InputIterator2 __last2, _Compare 
# 2790
__comp) 
# 2791
{ 
# 2792
while ((__first1 != __last1) && (__first2 != __last2)) { 
# 2793
if (__comp(__first2, __first1)) { 
# 2794
return false; } else { 
# 2795
if (__comp(__first1, __first2)) { 
# 2796
++__first1; } else 
# 2798
{ 
# 2799
++__first1; 
# 2800
++__first2; 
# 2801
}  }  }  
# 2803
return __first2 == __last2; 
# 2804
} 
# 2824 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2> inline bool 
# 2826
includes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 2827
__first2, _InputIterator2 __last2) 
# 2828
{ 
# 2838
; 
# 2839
; 
# 2840
; 
# 2841
; 
# 2843
return std::__includes(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_less_iter()); 
# 2845
} 
# 2868 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 2869
_Compare> inline bool 
# 2871
includes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 2872
__first2, _InputIterator2 __last2, _Compare 
# 2873
__comp) 
# 2874
{ 
# 2884
; 
# 2885
; 
# 2886
; 
# 2887
; 
# 2889
return std::__includes(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 2891
} 
# 2903 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _Compare> bool 
# 2905
__next_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 2906
__last, _Compare __comp) 
# 2907
{ 
# 2908
if (__first == __last) { 
# 2909
return false; }  
# 2910
_BidirectionalIterator __i = __first; 
# 2911
++__i; 
# 2912
if (__i == __last) { 
# 2913
return false; }  
# 2914
__i = __last; 
# 2915
--__i; 
# 2917
for (; ;) 
# 2918
{ 
# 2919
_BidirectionalIterator __ii = __i; 
# 2920
--__i; 
# 2921
if (__comp(__i, __ii)) 
# 2922
{ 
# 2923
_BidirectionalIterator __j = __last; 
# 2924
while (!__comp(__i, --__j)) 
# 2925
{ }  
# 2926
std::iter_swap(__i, __j); 
# 2927
std::__reverse(__ii, __last, std::__iterator_category(__first)); 
# 2929
return true; 
# 2930
}  
# 2931
if (__i == __first) 
# 2932
{ 
# 2933
std::__reverse(__first, __last, std::__iterator_category(__first)); 
# 2935
return false; 
# 2936
}  
# 2937
}  
# 2938
} 
# 2952 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _BidirectionalIterator> inline bool 
# 2954
next_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 2955
__last) 
# 2956
{ 
# 2962
; 
# 2963
; 
# 2965
return std::__next_permutation(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 2967
} 
# 2984 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _Compare> inline bool 
# 2986
next_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 2987
__last, _Compare __comp) 
# 2988
{ 
# 2995
; 
# 2996
; 
# 2998
return std::__next_permutation(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 3000
} 
# 3002
template< class _BidirectionalIterator, class _Compare> bool 
# 3004
__prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 3005
__last, _Compare __comp) 
# 3006
{ 
# 3007
if (__first == __last) { 
# 3008
return false; }  
# 3009
_BidirectionalIterator __i = __first; 
# 3010
++__i; 
# 3011
if (__i == __last) { 
# 3012
return false; }  
# 3013
__i = __last; 
# 3014
--__i; 
# 3016
for (; ;) 
# 3017
{ 
# 3018
_BidirectionalIterator __ii = __i; 
# 3019
--__i; 
# 3020
if (__comp(__ii, __i)) 
# 3021
{ 
# 3022
_BidirectionalIterator __j = __last; 
# 3023
while (!__comp(--__j, __i)) 
# 3024
{ }  
# 3025
std::iter_swap(__i, __j); 
# 3026
std::__reverse(__ii, __last, std::__iterator_category(__first)); 
# 3028
return true; 
# 3029
}  
# 3030
if (__i == __first) 
# 3031
{ 
# 3032
std::__reverse(__first, __last, std::__iterator_category(__first)); 
# 3034
return false; 
# 3035
}  
# 3036
}  
# 3037
} 
# 3052 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _BidirectionalIterator> inline bool 
# 3054
prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 3055
__last) 
# 3056
{ 
# 3062
; 
# 3063
; 
# 3065
return std::__prev_permutation(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 3067
} 
# 3084 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _Compare> inline bool 
# 3086
prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 3087
__last, _Compare __comp) 
# 3088
{ 
# 3095
; 
# 3096
; 
# 3098
return std::__prev_permutation(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 3100
} 
# 3105
template< class _InputIterator, class _OutputIterator, class 
# 3106
_Predicate, class _Tp> _OutputIterator 
# 3108
__replace_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 3109
__result, _Predicate 
# 3110
__pred, const _Tp &__new_value) 
# 3111
{ 
# 3112
for (; __first != __last; (++__first), ((void)(++__result))) { 
# 3113
if (__pred(__first)) { 
# 3114
(*__result) = __new_value; } else { 
# 3116
(*__result) = (*__first); }  }  
# 3117
return __result; 
# 3118
} 
# 3134 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class _Tp> inline _OutputIterator 
# 3136
replace_copy(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 3137
__result, const _Tp &
# 3138
__old_value, const _Tp &__new_value) 
# 3139
{ 
# 3146
; 
# 3148
return std::__replace_copy_if(__first, __last, __result, __gnu_cxx::__ops::__iter_equals_val(__old_value), __new_value); 
# 3151
} 
# 3168 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class 
# 3169
_Predicate, class _Tp> inline _OutputIterator 
# 3171
replace_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 3172
__result, _Predicate 
# 3173
__pred, const _Tp &__new_value) 
# 3174
{ 
# 3181
; 
# 3183
return std::__replace_copy_if(__first, __last, __result, __gnu_cxx::__ops::__pred_iter(__pred), __new_value); 
# 3186
} 
# 3188
template< class _InputIterator, class _Predicate> typename iterator_traits< _InputIterator> ::difference_type 
# 3190
__count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred) 
# 3191
{ 
# 3192
typename iterator_traits< _InputIterator> ::difference_type __n = (0); 
# 3193
for (; __first != __last; ++__first) { 
# 3194
if (__pred(__first)) { 
# 3195
++__n; }  }  
# 3196
return __n; 
# 3197
} 
# 3207 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator> inline bool 
# 3209
is_sorted(_ForwardIterator __first, _ForwardIterator __last) 
# 3210
{ return std::is_sorted_until(__first, __last) == __last; } 
# 3221 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Compare> inline bool 
# 3223
is_sorted(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 3224
__comp) 
# 3225
{ return std::is_sorted_until(__first, __last, __comp) == __last; } 
# 3227
template< class _ForwardIterator, class _Compare> _ForwardIterator 
# 3229
__is_sorted_until(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 3230
__comp) 
# 3231
{ 
# 3232
if (__first == __last) { 
# 3233
return __last; }  
# 3235
_ForwardIterator __next = __first; 
# 3236
for (++__next; __next != __last; (__first = __next), ((void)(++__next))) { 
# 3237
if (__comp(__next, __first)) { 
# 3238
return __next; }  }  
# 3239
return __next; 
# 3240
} 
# 3250 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator> inline _ForwardIterator 
# 3252
is_sorted_until(_ForwardIterator __first, _ForwardIterator __last) 
# 3253
{ 
# 3258
; 
# 3259
; 
# 3261
return std::__is_sorted_until(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 3263
} 
# 3274 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Compare> inline _ForwardIterator 
# 3276
is_sorted_until(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 3277
__comp) 
# 3278
{ 
# 3284
; 
# 3285
; 
# 3287
return std::__is_sorted_until(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 3289
} 
# 3299 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _Tp> constexpr pair< const _Tp &, const _Tp &>  
# 3302
minmax(const _Tp &__a, const _Tp &__b) 
# 3303
{ 
# 3307
return (__b < __a) ? pair< const _Tp &, const _Tp &> (__b, __a) : pair< const _Tp &, const _Tp &> (__a, __b); 
# 3309
} 
# 3320 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _Tp, class _Compare> constexpr pair< const _Tp &, const _Tp &>  
# 3323
minmax(const _Tp &__a, const _Tp &__b, _Compare __comp) 
# 3324
{ 
# 3325
return (__comp(__b, __a)) ? pair< const _Tp &, const _Tp &> (__b, __a) : pair< const _Tp &, const _Tp &> (__a, __b); 
# 3327
} 
# 3329
template< class _ForwardIterator, class _Compare> constexpr pair< _ForwardIterator, _ForwardIterator>  
# 3332
__minmax_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 3333
__comp) 
# 3334
{ 
# 3335
_ForwardIterator __next = __first; 
# 3336
if ((__first == __last) || ((++__next) == __last)) { 
# 3338
return std::make_pair(__first, __first); }  
# 3340
_ForwardIterator __min{}, __max{}; 
# 3341
if (__comp(__next, __first)) 
# 3342
{ 
# 3343
__min = __next; 
# 3344
__max = __first; 
# 3345
} else 
# 3347
{ 
# 3348
__min = __first; 
# 3349
__max = __next; 
# 3350
}  
# 3352
__first = __next; 
# 3353
++__first; 
# 3355
while (__first != __last) 
# 3356
{ 
# 3357
__next = __first; 
# 3358
if ((++__next) == __last) 
# 3359
{ 
# 3360
if (__comp(__first, __min)) { 
# 3361
__min = __first; } else { 
# 3362
if (!__comp(__first, __max)) { 
# 3363
__max = __first; }  }  
# 3364
break; 
# 3365
}  
# 3367
if (__comp(__next, __first)) 
# 3368
{ 
# 3369
if (__comp(__next, __min)) { 
# 3370
__min = __next; }  
# 3371
if (!__comp(__first, __max)) { 
# 3372
__max = __first; }  
# 3373
} else 
# 3375
{ 
# 3376
if (__comp(__first, __min)) { 
# 3377
__min = __first; }  
# 3378
if (!__comp(__next, __max)) { 
# 3379
__max = __next; }  
# 3380
}  
# 3382
__first = __next; 
# 3383
++__first; 
# 3384
}  
# 3386
return std::make_pair(__min, __max); 
# 3387
} 
# 3400 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator> constexpr pair< _ForwardIterator, _ForwardIterator>  
# 3403
minmax_element(_ForwardIterator __first, _ForwardIterator __last) 
# 3404
{ 
# 3409
; 
# 3410
; 
# 3412
return std::__minmax_element(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 3414
} 
# 3428 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Compare> constexpr pair< _ForwardIterator, _ForwardIterator>  
# 3431
minmax_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 3432
__comp) 
# 3433
{ 
# 3439
; 
# 3440
; 
# 3442
return std::__minmax_element(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 3444
} 
# 3447
template< class _Tp> constexpr _Tp 
# 3450
min(initializer_list< _Tp>  __l) 
# 3451
{ return *std::min_element(__l.begin(), __l.end()); } 
# 3453
template< class _Tp, class _Compare> constexpr _Tp 
# 3456
min(initializer_list< _Tp>  __l, _Compare __comp) 
# 3457
{ return *std::min_element(__l.begin(), __l.end(), __comp); } 
# 3459
template< class _Tp> constexpr _Tp 
# 3462
max(initializer_list< _Tp>  __l) 
# 3463
{ return *std::max_element(__l.begin(), __l.end()); } 
# 3465
template< class _Tp, class _Compare> constexpr _Tp 
# 3468
max(initializer_list< _Tp>  __l, _Compare __comp) 
# 3469
{ return *std::max_element(__l.begin(), __l.end(), __comp); } 
# 3471
template< class _Tp> constexpr pair< _Tp, _Tp>  
# 3474
minmax(initializer_list< _Tp>  __l) 
# 3475
{ 
# 3476
pair< const _Tp *, const _Tp *>  __p = std::minmax_element(__l.begin(), __l.end()); 
# 3478
return std::make_pair(*(__p.first), *(__p.second)); 
# 3479
} 
# 3481
template< class _Tp, class _Compare> constexpr pair< _Tp, _Tp>  
# 3484
minmax(initializer_list< _Tp>  __l, _Compare __comp) 
# 3485
{ 
# 3486
pair< const _Tp *, const _Tp *>  __p = std::minmax_element(__l.begin(), __l.end(), __comp); 
# 3488
return std::make_pair(*(__p.first), *(__p.second)); 
# 3489
} 
# 3491
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 3492
_BinaryPredicate> bool 
# 3494
__is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 3495
__first2, _BinaryPredicate __pred) 
# 3496
{ 
# 3499
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 3500
if (!__pred(__first1, __first2)) { 
# 3501
break; }  }  
# 3503
if (__first1 == __last1) { 
# 3504
return true; }  
# 3508
_ForwardIterator2 __last2 = __first2; 
# 3509
std::advance(__last2, std::distance(__first1, __last1)); 
# 3510
for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan) 
# 3511
{ 
# 3512
if (__scan != std::__find_if(__first1, __scan, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))) { 
# 3514
continue; }  
# 3516
auto __matches = std::__count_if(__first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)); 
# 3519
if ((0 == __matches) || (std::__count_if(__scan, __last1, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)) != __matches)) { 
# 3523
return false; }  
# 3524
}   
# 3525
return true; 
# 3526
} 
# 3540 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline bool 
# 3542
is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 3543
__first2) 
# 3544
{ 
# 3551
; 
# 3553
return std::__is_permutation(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 3555
} 
# 3571 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 3572
_BinaryPredicate> inline bool 
# 3574
is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 3575
__first2, _BinaryPredicate __pred) 
# 3576
{ 
# 3583
; 
# 3585
return std::__is_permutation(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_comp_iter(__pred)); 
# 3587
} 
# 3590
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 3591
_BinaryPredicate> bool 
# 3593
__is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 3594
__first2, _ForwardIterator2 __last2, _BinaryPredicate 
# 3595
__pred) 
# 3596
{ 
# 3597
using _Cat1 = typename iterator_traits< _ForwardIterator1> ::iterator_category; 
# 3599
using _Cat2 = typename iterator_traits< _ForwardIterator2> ::iterator_category; 
# 3601
using _It1_is_RA = is_same< typename iterator_traits< _ForwardIterator1> ::iterator_category, random_access_iterator_tag> ; 
# 3602
using _It2_is_RA = is_same< typename iterator_traits< _ForwardIterator2> ::iterator_category, random_access_iterator_tag> ; 
# 3603
constexpr bool __ra_iters = (_It1_is_RA() && _It2_is_RA()); 
# 3604
if (__ra_iters) 
# 3605
{ 
# 3606
auto __d1 = std::distance(__first1, __last1); 
# 3607
auto __d2 = std::distance(__first2, __last2); 
# 3608
if (__d1 != __d2) { 
# 3609
return false; }  
# 3610
}  
# 3614
for (; (__first1 != __last1) && (__first2 != __last2); (++__first1), ((void)(++__first2))) { 
# 3616
if (!__pred(__first1, __first2)) { 
# 3617
break; }  }  
# 3619
if (__ra_iters) 
# 3620
{ 
# 3621
if (__first1 == __last1) { 
# 3622
return true; }  
# 3623
} else 
# 3625
{ 
# 3626
auto __d1 = std::distance(__first1, __last1); 
# 3627
auto __d2 = std::distance(__first2, __last2); 
# 3628
if ((__d1 == 0) && (__d2 == 0)) { 
# 3629
return true; }  
# 3630
if (__d1 != __d2) { 
# 3631
return false; }  
# 3632
}  
# 3634
for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan) 
# 3635
{ 
# 3636
if (__scan != std::__find_if(__first1, __scan, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))) { 
# 3638
continue; }  
# 3640
auto __matches = std::__count_if(__first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)); 
# 3642
if ((0 == __matches) || (std::__count_if(__scan, __last1, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)) != __matches)) { 
# 3646
return false; }  
# 3647
}   
# 3648
return true; 
# 3649
} 
# 3664 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline bool 
# 3666
is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 3667
__first2, _ForwardIterator2 __last2) 
# 3668
{ 
# 3669
; 
# 3670
; 
# 3672
return std::__is_permutation(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 3675
} 
# 3691 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 3692
_BinaryPredicate> inline bool 
# 3694
is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 3695
__first2, _ForwardIterator2 __last2, _BinaryPredicate 
# 3696
__pred) 
# 3697
{ 
# 3698
; 
# 3699
; 
# 3701
return std::__is_permutation(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__pred)); 
# 3703
} 
# 3767 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _IntType, class _UniformRandomBitGenerator> pair< _IntType, _IntType>  
# 3769
__gen_two_uniform_ints(_IntType __b0, _IntType __b1, _UniformRandomBitGenerator &&
# 3770
__g) 
# 3771
{ 
# 3772
_IntType __x = uniform_int_distribution< _IntType> {0, (__b0 * __b1) - 1}(__g); 
# 3774
return std::make_pair(__x / __b1, __x % __b1); 
# 3775
} 
# 3789 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class 
# 3790
_UniformRandomNumberGenerator> void 
# 3792
shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last, _UniformRandomNumberGenerator &&
# 3793
__g) 
# 3794
{ 
# 3798
; 
# 3800
if (__first == __last) { 
# 3801
return; }  
# 3804
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 3806
typedef typename make_unsigned< typename iterator_traits< _RandomAccessIterator> ::difference_type> ::type __ud_type; 
# 3807
typedef uniform_int_distribution< typename make_unsigned< typename iterator_traits< _RandomAccessIterator> ::difference_type> ::type>  __distr_type; 
# 3808
typedef typename uniform_int_distribution< typename make_unsigned< typename iterator_traits< _RandomAccessIterator> ::difference_type> ::type> ::param_type __p_type; 
# 3811
typedef typename remove_reference< _UniformRandomNumberGenerator> ::type _Gen; 
# 3813
typedef typename common_type< typename remove_reference< _UniformRandomNumberGenerator> ::type::result_type, typename make_unsigned< typename iterator_traits< _RandomAccessIterator> ::difference_type> ::type> ::type __uc_type; 
# 3815
const __uc_type __urngrange = __g.max() - __g.min(); 
# 3816
const __uc_type __urange = (__uc_type)(__last - __first); 
# 3818
if ((__urngrange / __urange) >= __urange) 
# 3820
{ 
# 3821
_RandomAccessIterator __i = __first + 1; 
# 3827
if ((__urange % 2) == 0) 
# 3828
{ 
# 3829
__distr_type __d{0, 1}; 
# 3830
std::iter_swap(__i++, __first + __d(__g)); 
# 3831
}  
# 3837
while (__i != __last) 
# 3838
{ 
# 3839
const __uc_type __swap_range = ((__uc_type)(__i - __first)) + 1; 
# 3841
const pair< typename common_type< typename remove_reference< _UniformRandomNumberGenerator> ::type::result_type, typename make_unsigned< typename iterator_traits< _RandomAccessIterator> ::difference_type> ::type> ::type, typename common_type< typename remove_reference< _UniformRandomNumberGenerator> ::type::result_type, typename make_unsigned< typename iterator_traits< _RandomAccessIterator> ::difference_type> ::type> ::type>  __pospos = __gen_two_uniform_ints(__swap_range, __swap_range + 1, __g); 
# 3844
std::iter_swap(__i++, __first + (__pospos.first)); 
# 3845
std::iter_swap(__i++, __first + (__pospos.second)); 
# 3846
}  
# 3848
return; 
# 3849
}  
# 3851
__distr_type __d; 
# 3853
for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i) { 
# 3854
std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first))); }  
# 3855
} 
# 3874 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator, class _Function> _Function 
# 3876
for_each(_InputIterator __first, _InputIterator __last, _Function __f) 
# 3877
{ 
# 3880
; 
# 3881
for (; __first != __last; ++__first) { 
# 3882
__f(*__first); }  
# 3883
return __f; 
# 3884
} 
# 3934 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator, class _Tp> inline _InputIterator 
# 3936
find(_InputIterator __first, _InputIterator __last, const _Tp &
# 3937
__val) 
# 3938
{ 
# 3943
; 
# 3944
return std::__find_if(__first, __last, __gnu_cxx::__ops::__iter_equals_val(__val)); 
# 3946
} 
# 3958 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline _InputIterator 
# 3960
find_if(_InputIterator __first, _InputIterator __last, _Predicate 
# 3961
__pred) 
# 3962
{ 
# 3967
; 
# 3969
return std::__find_if(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 3971
} 
# 3989 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator, class _ForwardIterator> _InputIterator 
# 3991
find_first_of(_InputIterator __first1, _InputIterator __last1, _ForwardIterator 
# 3992
__first2, _ForwardIterator __last2) 
# 3993
{ 
# 4000
; 
# 4001
; 
# 4003
for (; __first1 != __last1; ++__first1) { 
# 4004
for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter) { 
# 4005
if ((*__first1) == (*__iter)) { 
# 4006
return __first1; }  }  }  
# 4007
return __last1; 
# 4008
} 
# 4029 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator, class _ForwardIterator, class 
# 4030
_BinaryPredicate> _InputIterator 
# 4032
find_first_of(_InputIterator __first1, _InputIterator __last1, _ForwardIterator 
# 4033
__first2, _ForwardIterator __last2, _BinaryPredicate 
# 4034
__comp) 
# 4035
{ 
# 4042
; 
# 4043
; 
# 4045
for (; __first1 != __last1; ++__first1) { 
# 4046
for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter) { 
# 4047
if (__comp(*__first1, *__iter)) { 
# 4048
return __first1; }  }  }  
# 4049
return __last1; 
# 4050
} 
# 4061 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator> inline _ForwardIterator 
# 4063
adjacent_find(_ForwardIterator __first, _ForwardIterator __last) 
# 4064
{ 
# 4069
; 
# 4071
return std::__adjacent_find(__first, __last, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 4073
} 
# 4086 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator, class _BinaryPredicate> inline _ForwardIterator 
# 4088
adjacent_find(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate 
# 4089
__binary_pred) 
# 4090
{ 
# 4096
; 
# 4098
return std::__adjacent_find(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred)); 
# 4100
} 
# 4111 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator, class _Tp> inline typename iterator_traits< _InputIterator> ::difference_type 
# 4113
count(_InputIterator __first, _InputIterator __last, const _Tp &__value) 
# 4114
{ 
# 4119
; 
# 4121
return std::__count_if(__first, __last, __gnu_cxx::__ops::__iter_equals_val(__value)); 
# 4123
} 
# 4134 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline typename iterator_traits< _InputIterator> ::difference_type 
# 4136
count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred) 
# 4137
{ 
# 4142
; 
# 4144
return std::__count_if(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 4146
} 
# 4174 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline _ForwardIterator1 
# 4176
search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 4177
__first2, _ForwardIterator2 __last2) 
# 4178
{ 
# 4185
; 
# 4186
; 
# 4188
return std::__search(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 4190
} 
# 4213 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 4214
_BinaryPredicate> inline _ForwardIterator1 
# 4216
search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 4217
__first2, _ForwardIterator2 __last2, _BinaryPredicate 
# 4218
__predicate) 
# 4219
{ 
# 4226
; 
# 4227
; 
# 4229
return std::__search(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__predicate)); 
# 4231
} 
# 4248 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Integer, class _Tp> inline _ForwardIterator 
# 4250
search_n(_ForwardIterator __first, _ForwardIterator __last, _Integer 
# 4251
__count, const _Tp &__val) 
# 4252
{ 
# 4257
; 
# 4259
return std::__search_n(__first, __last, __count, __gnu_cxx::__ops::__iter_equals_val(__val)); 
# 4261
} 
# 4281 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Integer, class _Tp, class 
# 4282
_BinaryPredicate> inline _ForwardIterator 
# 4284
search_n(_ForwardIterator __first, _ForwardIterator __last, _Integer 
# 4285
__count, const _Tp &__val, _BinaryPredicate 
# 4286
__binary_pred) 
# 4287
{ 
# 4292
; 
# 4294
return std::__search_n(__first, __last, __count, __gnu_cxx::__ops::__iter_comp_val(__binary_pred, __val)); 
# 4296
} 
# 4329 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class 
# 4330
_UnaryOperation> _OutputIterator 
# 4332
transform(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 4333
__result, _UnaryOperation __unary_op) 
# 4334
{ 
# 4340
; 
# 4342
for (; __first != __last; (++__first), ((void)(++__result))) { 
# 4343
(*__result) = __unary_op(*__first); }  
# 4344
return __result; 
# 4345
} 
# 4366 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 4367
_OutputIterator, class _BinaryOperation> _OutputIterator 
# 4369
transform(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 4370
__first2, _OutputIterator __result, _BinaryOperation 
# 4371
__binary_op) 
# 4372
{ 
# 4379
; 
# 4381
for (; __first1 != __last1; ((++__first1), ((void)(++__first2))), (++__result)) { 
# 4382
(*__result) = __binary_op(*__first1, *__first2); }  
# 4383
return __result; 
# 4384
} 
# 4399 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp> void 
# 4401
replace(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 4402
__old_value, const _Tp &__new_value) 
# 4403
{ 
# 4411
; 
# 4413
for (; __first != __last; ++__first) { 
# 4414
if ((*__first) == __old_value) { 
# 4415
(*__first) = __new_value; }  }  
# 4416
} 
# 4431 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Predicate, class _Tp> void 
# 4433
replace_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 4434
__pred, const _Tp &__new_value) 
# 4435
{ 
# 4443
; 
# 4445
for (; __first != __last; ++__first) { 
# 4446
if (__pred(*__first)) { 
# 4447
(*__first) = __new_value; }  }  
# 4448
} 
# 4463 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Generator> void 
# 4465
generate(_ForwardIterator __first, _ForwardIterator __last, _Generator 
# 4466
__gen) 
# 4467
{ 
# 4472
; 
# 4474
for (; __first != __last; ++__first) { 
# 4475
(*__first) = __gen(); }  
# 4476
} 
# 4494 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _OutputIterator, class _Size, class _Generator> _OutputIterator 
# 4496
generate_n(_OutputIterator __first, _Size __n, _Generator __gen) 
# 4497
{ 
# 4503
for (__decltype((__n + 0)) __niter = __n; __niter > 0; (--__niter), ((void)(++__first))) { 
# 4505
(*__first) = __gen(); }  
# 4506
return __first; 
# 4507
} 
# 4530 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator> inline _OutputIterator 
# 4532
unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 4533
__result) 
# 4534
{ 
# 4541
; 
# 4543
if (__first == __last) { 
# 4544
return __result; }  
# 4545
return std::__unique_copy(__first, __last, __result, __gnu_cxx::__ops::__iter_equal_to_iter(), std::__iterator_category(__first), std::__iterator_category(__result)); 
# 4549
} 
# 4570 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class 
# 4571
_BinaryPredicate> inline _OutputIterator 
# 4573
unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 4574
__result, _BinaryPredicate 
# 4575
__binary_pred) 
# 4576
{ 
# 4581
; 
# 4583
if (__first == __last) { 
# 4584
return __result; }  
# 4585
return std::__unique_copy(__first, __last, __result, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred), std::__iterator_category(__first), std::__iterator_category(__result)); 
# 4589
} 
# 4603 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _RandomAccessIterator> inline void 
# 4605
random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 4606
{ 
# 4610
; 
# 4612
if (__first != __last) { 
# 4613
for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i) 
# 4614
{ 
# 4616
_RandomAccessIterator __j = __first + (std::rand() % ((__i - __first) + 1)); 
# 4618
if (__i != __j) { 
# 4619
std::iter_swap(__i, __j); }  
# 4620
}  }  
# 4621
} 
# 4638 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _RandomNumberGenerator> void 
# 4640
random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomNumberGenerator &&
# 4642
__rand) 
# 4646
{ 
# 4650
; 
# 4652
if (__first == __last) { 
# 4653
return; }  
# 4654
for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i) 
# 4655
{ 
# 4656
_RandomAccessIterator __j = __first + __rand((__i - __first) + 1); 
# 4657
if (__i != __j) { 
# 4658
std::iter_swap(__i, __j); }  
# 4659
}  
# 4660
} 
# 4678 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Predicate> inline _ForwardIterator 
# 4680
partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 4681
__pred) 
# 4682
{ 
# 4688
; 
# 4690
return std::__partition(__first, __last, __pred, std::__iterator_category(__first)); 
# 4692
} 
# 4711 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _RandomAccessIterator> inline void 
# 4713
partial_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 4714
__middle, _RandomAccessIterator 
# 4715
__last) 
# 4716
{ 
# 4722
; 
# 4723
; 
# 4724
; 
# 4726
std::__partial_sort(__first, __middle, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 4728
} 
# 4749 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 4751
partial_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 4752
__middle, _RandomAccessIterator 
# 4753
__last, _Compare 
# 4754
__comp) 
# 4755
{ 
# 4762
; 
# 4763
; 
# 4764
; 
# 4766
std::__partial_sort(__first, __middle, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 4768
} 
# 4785 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _RandomAccessIterator> inline void 
# 4787
nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator 
# 4788
__last) 
# 4789
{ 
# 4795
; 
# 4796
; 
# 4797
; 
# 4799
if ((__first == __last) || (__nth == __last)) { 
# 4800
return; }  
# 4802
std::__introselect(__first, __nth, __last, std::__lg(__last - __first) * 2, __gnu_cxx::__ops::__iter_less_iter()); 
# 4805
} 
# 4824 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 4826
nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator 
# 4827
__last, _Compare __comp) 
# 4828
{ 
# 4835
; 
# 4836
; 
# 4837
; 
# 4839
if ((__first == __last) || (__nth == __last)) { 
# 4840
return; }  
# 4842
std::__introselect(__first, __nth, __last, std::__lg(__last - __first) * 2, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 4845
} 
# 4861 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _RandomAccessIterator> inline void 
# 4863
sort(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 4864
{ 
# 4870
; 
# 4871
; 
# 4873
std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 4874
} 
# 4891 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 4893
sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 4894
__comp) 
# 4895
{ 
# 4902
; 
# 4903
; 
# 4905
std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 4906
} 
# 4908
template< class _InputIterator1, class _InputIterator2, class 
# 4909
_OutputIterator, class _Compare> _OutputIterator 
# 4911
__merge(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 4912
__first2, _InputIterator2 __last2, _OutputIterator 
# 4913
__result, _Compare __comp) 
# 4914
{ 
# 4915
while ((__first1 != __last1) && (__first2 != __last2)) 
# 4916
{ 
# 4917
if (__comp(__first2, __first1)) 
# 4918
{ 
# 4919
(*__result) = (*__first2); 
# 4920
++__first2; 
# 4921
} else 
# 4923
{ 
# 4924
(*__result) = (*__first1); 
# 4925
++__first1; 
# 4926
}  
# 4927
++__result; 
# 4928
}  
# 4929
return std::copy(__first2, __last2, std::copy(__first1, __last1, __result)); 
# 4931
} 
# 4952 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 4953
_OutputIterator> inline _OutputIterator 
# 4955
merge(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 4956
__first2, _InputIterator2 __last2, _OutputIterator 
# 4957
__result) 
# 4958
{ 
# 4969
; 
# 4970
; 
# 4971
; 
# 4972
; 
# 4974
return std::__merge(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter()); 
# 4977
} 
# 5002 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5003
_OutputIterator, class _Compare> inline _OutputIterator 
# 5005
merge(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5006
__first2, _InputIterator2 __last2, _OutputIterator 
# 5007
__result, _Compare __comp) 
# 5008
{ 
# 5019
; 
# 5020
; 
# 5021
; 
# 5022
; 
# 5024
return std::__merge(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5027
} 
# 5029
template< class _RandomAccessIterator, class _Compare> inline void 
# 5031
__stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 5032
__comp) 
# 5033
{ 
# 5035
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 5037
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 5039
typedef _Temporary_buffer< _RandomAccessIterator, typename iterator_traits< _RandomAccessIterator> ::value_type>  _TmpBuf; 
# 5040
_TmpBuf __buf(__first, std::distance(__first, __last)); 
# 5042
if (__buf.begin() == 0) { 
# 5043
std::__inplace_stable_sort(__first, __last, __comp); } else { 
# 5045
std::__stable_sort_adaptive(__first, __last, __buf.begin(), (_DistanceType)__buf.size(), __comp); }  
# 5047
} 
# 5066 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _RandomAccessIterator> inline void 
# 5068
stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 5069
{ 
# 5075
; 
# 5076
; 
# 5078
std::__stable_sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 5080
} 
# 5100 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 5102
stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 5103
__comp) 
# 5104
{ 
# 5111
; 
# 5112
; 
# 5114
std::__stable_sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5116
} 
# 5118
template< class _InputIterator1, class _InputIterator2, class 
# 5119
_OutputIterator, class 
# 5120
_Compare> _OutputIterator 
# 5122
__set_union(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5123
__first2, _InputIterator2 __last2, _OutputIterator 
# 5124
__result, _Compare __comp) 
# 5125
{ 
# 5126
while ((__first1 != __last1) && (__first2 != __last2)) 
# 5127
{ 
# 5128
if (__comp(__first1, __first2)) 
# 5129
{ 
# 5130
(*__result) = (*__first1); 
# 5131
++__first1; 
# 5132
} else { 
# 5133
if (__comp(__first2, __first1)) 
# 5134
{ 
# 5135
(*__result) = (*__first2); 
# 5136
++__first2; 
# 5137
} else 
# 5139
{ 
# 5140
(*__result) = (*__first1); 
# 5141
++__first1; 
# 5142
++__first2; 
# 5143
}  }  
# 5144
++__result; 
# 5145
}  
# 5146
return std::copy(__first2, __last2, std::copy(__first1, __last1, __result)); 
# 5148
} 
# 5169 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5170
_OutputIterator> inline _OutputIterator 
# 5172
set_union(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5173
__first2, _InputIterator2 __last2, _OutputIterator 
# 5174
__result) 
# 5175
{ 
# 5189
; 
# 5190
; 
# 5191
; 
# 5192
; 
# 5194
return std::__set_union(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter()); 
# 5197
} 
# 5219 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5220
_OutputIterator, class _Compare> inline _OutputIterator 
# 5222
set_union(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5223
__first2, _InputIterator2 __last2, _OutputIterator 
# 5224
__result, _Compare __comp) 
# 5225
{ 
# 5239
; 
# 5240
; 
# 5241
; 
# 5242
; 
# 5244
return std::__set_union(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5247
} 
# 5249
template< class _InputIterator1, class _InputIterator2, class 
# 5250
_OutputIterator, class 
# 5251
_Compare> _OutputIterator 
# 5253
__set_intersection(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5254
__first2, _InputIterator2 __last2, _OutputIterator 
# 5255
__result, _Compare __comp) 
# 5256
{ 
# 5257
while ((__first1 != __last1) && (__first2 != __last2)) { 
# 5258
if (__comp(__first1, __first2)) { 
# 5259
++__first1; } else { 
# 5260
if (__comp(__first2, __first1)) { 
# 5261
++__first2; } else 
# 5263
{ 
# 5264
(*__result) = (*__first1); 
# 5265
++__first1; 
# 5266
++__first2; 
# 5267
++__result; 
# 5268
}  }  }  
# 5269
return __result; 
# 5270
} 
# 5290 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5291
_OutputIterator> inline _OutputIterator 
# 5293
set_intersection(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5294
__first2, _InputIterator2 __last2, _OutputIterator 
# 5295
__result) 
# 5296
{ 
# 5308
; 
# 5309
; 
# 5310
; 
# 5311
; 
# 5313
return std::__set_intersection(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter()); 
# 5316
} 
# 5339 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5340
_OutputIterator, class _Compare> inline _OutputIterator 
# 5342
set_intersection(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5343
__first2, _InputIterator2 __last2, _OutputIterator 
# 5344
__result, _Compare __comp) 
# 5345
{ 
# 5357
; 
# 5358
; 
# 5359
; 
# 5360
; 
# 5362
return std::__set_intersection(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5365
} 
# 5367
template< class _InputIterator1, class _InputIterator2, class 
# 5368
_OutputIterator, class 
# 5369
_Compare> _OutputIterator 
# 5371
__set_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5372
__first2, _InputIterator2 __last2, _OutputIterator 
# 5373
__result, _Compare __comp) 
# 5374
{ 
# 5375
while ((__first1 != __last1) && (__first2 != __last2)) { 
# 5376
if (__comp(__first1, __first2)) 
# 5377
{ 
# 5378
(*__result) = (*__first1); 
# 5379
++__first1; 
# 5380
++__result; 
# 5381
} else { 
# 5382
if (__comp(__first2, __first1)) { 
# 5383
++__first2; } else 
# 5385
{ 
# 5386
++__first1; 
# 5387
++__first2; 
# 5388
}  }  }  
# 5389
return std::copy(__first1, __last1, __result); 
# 5390
} 
# 5412 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5413
_OutputIterator> inline _OutputIterator 
# 5415
set_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5416
__first2, _InputIterator2 __last2, _OutputIterator 
# 5417
__result) 
# 5418
{ 
# 5430
; 
# 5431
; 
# 5432
; 
# 5433
; 
# 5435
return std::__set_difference(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter()); 
# 5438
} 
# 5463 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5464
_OutputIterator, class _Compare> inline _OutputIterator 
# 5466
set_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5467
__first2, _InputIterator2 __last2, _OutputIterator 
# 5468
__result, _Compare __comp) 
# 5469
{ 
# 5481
; 
# 5482
; 
# 5483
; 
# 5484
; 
# 5486
return std::__set_difference(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5489
} 
# 5491
template< class _InputIterator1, class _InputIterator2, class 
# 5492
_OutputIterator, class 
# 5493
_Compare> _OutputIterator 
# 5495
__set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 
# 5496
__last1, _InputIterator2 
# 5497
__first2, _InputIterator2 
# 5498
__last2, _OutputIterator 
# 5499
__result, _Compare 
# 5500
__comp) 
# 5501
{ 
# 5502
while ((__first1 != __last1) && (__first2 != __last2)) { 
# 5503
if (__comp(__first1, __first2)) 
# 5504
{ 
# 5505
(*__result) = (*__first1); 
# 5506
++__first1; 
# 5507
++__result; 
# 5508
} else { 
# 5509
if (__comp(__first2, __first1)) 
# 5510
{ 
# 5511
(*__result) = (*__first2); 
# 5512
++__first2; 
# 5513
++__result; 
# 5514
} else 
# 5516
{ 
# 5517
++__first1; 
# 5518
++__first2; 
# 5519
}  }  }  
# 5520
return std::copy(__first2, __last2, std::copy(__first1, __last1, __result)); 
# 5522
} 
# 5542 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5543
_OutputIterator> inline _OutputIterator 
# 5545
set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5546
__first2, _InputIterator2 __last2, _OutputIterator 
# 5547
__result) 
# 5548
{ 
# 5562
; 
# 5563
; 
# 5564
; 
# 5565
; 
# 5567
return std::__set_symmetric_difference(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter()); 
# 5570
} 
# 5593 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5594
_OutputIterator, class _Compare> inline _OutputIterator 
# 5596
set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5597
__first2, _InputIterator2 __last2, _OutputIterator 
# 5598
__result, _Compare 
# 5599
__comp) 
# 5600
{ 
# 5614
; 
# 5615
; 
# 5616
; 
# 5617
; 
# 5619
return std::__set_symmetric_difference(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5622
} 
# 5624
template< class _ForwardIterator, class _Compare> constexpr _ForwardIterator 
# 5627
__min_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 5628
__comp) 
# 5629
{ 
# 5630
if (__first == __last) { 
# 5631
return __first; }  
# 5632
_ForwardIterator __result = __first; 
# 5633
while ((++__first) != __last) { 
# 5634
if (__comp(__first, __result)) { 
# 5635
__result = __first; }  }  
# 5636
return __result; 
# 5637
} 
# 5646 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator> constexpr _ForwardIterator 
# 5649
min_element(_ForwardIterator __first, _ForwardIterator __last) 
# 5650
{ 
# 5655
; 
# 5656
; 
# 5658
return std::__min_element(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 5660
} 
# 5671 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Compare> constexpr _ForwardIterator 
# 5674
min_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 5675
__comp) 
# 5676
{ 
# 5682
; 
# 5683
; 
# 5685
return std::__min_element(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5687
} 
# 5689
template< class _ForwardIterator, class _Compare> constexpr _ForwardIterator 
# 5692
__max_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 5693
__comp) 
# 5694
{ 
# 5695
if (__first == __last) { return __first; }  
# 5696
_ForwardIterator __result = __first; 
# 5697
while ((++__first) != __last) { 
# 5698
if (__comp(__result, __first)) { 
# 5699
__result = __first; }  }  
# 5700
return __result; 
# 5701
} 
# 5710 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator> constexpr _ForwardIterator 
# 5713
max_element(_ForwardIterator __first, _ForwardIterator __last) 
# 5714
{ 
# 5719
; 
# 5720
; 
# 5722
return std::__max_element(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 5724
} 
# 5735 "/usr/include/c++/9/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Compare> constexpr _ForwardIterator 
# 5738
max_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 5739
__comp) 
# 5740
{ 
# 5746
; 
# 5747
; 
# 5749
return std::__max_element(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5751
} 
# 5755
template< class _InputIterator, class _RandomAccessIterator, class 
# 5756
_Size, class _UniformRandomBitGenerator> _RandomAccessIterator 
# 5758
__sample(_InputIterator __first, _InputIterator __last, input_iterator_tag, _RandomAccessIterator 
# 5759
__out, random_access_iterator_tag, _Size 
# 5760
__n, _UniformRandomBitGenerator &&__g) 
# 5761
{ 
# 5762
using __distrib_type = uniform_int_distribution< _Size> ; 
# 5763
using __param_type = typename uniform_int_distribution< _Size> ::param_type; 
# 5764
__distrib_type __d{}; 
# 5765
_Size __sample_sz = (0); 
# 5766
while ((__first != __last) && (__sample_sz != __n)) 
# 5767
{ 
# 5768
(__out[__sample_sz++]) = (*__first); 
# 5769
++__first; 
# 5770
}  
# 5771
for (auto __pop_sz = __sample_sz; __first != __last; (++__first), ((void)(++__pop_sz))) 
# 5773
{ 
# 5774
const auto __k = __d(__g, __param_type{0, __pop_sz}); 
# 5775
if (__k < __n) { 
# 5776
(__out[__k]) = (*__first); }  
# 5777
}  
# 5778
return __out + __sample_sz; 
# 5779
} 
# 5782
template< class _ForwardIterator, class _OutputIterator, class _Cat, class 
# 5783
_Size, class _UniformRandomBitGenerator> _OutputIterator 
# 5785
__sample(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag, _OutputIterator 
# 5787
__out, _Cat, _Size 
# 5788
__n, _UniformRandomBitGenerator &&__g) 
# 5789
{ 
# 5790
using __distrib_type = uniform_int_distribution< _Size> ; 
# 5791
using __param_type = typename uniform_int_distribution< _Size> ::param_type; 
# 5792
using _USize = make_unsigned_t< _Size> ; 
# 5793
using _Gen = remove_reference_t< _UniformRandomBitGenerator> ; 
# 5794
using __uc_type = common_type_t< typename remove_reference_t< _UniformRandomBitGenerator> ::result_type, make_unsigned_t< _Size> > ; 
# 5796
if (__first == __last) { 
# 5797
return __out; }  
# 5799
__distrib_type __d{}; 
# 5800
_Size __unsampled_sz = std::distance(__first, __last); 
# 5801
__n = std::min(__n, __unsampled_sz); 
# 5806
const __uc_type __urngrange = __g.max() - __g.min(); 
# 5807
if ((__urngrange / ((__uc_type)__unsampled_sz)) >= ((__uc_type)__unsampled_sz)) 
# 5810
{ 
# 5811
while ((__n != 0) && (__unsampled_sz >= 2)) 
# 5812
{ 
# 5813
const pair< _Size, _Size>  __p = __gen_two_uniform_ints(__unsampled_sz, __unsampled_sz - 1, __g); 
# 5816
--__unsampled_sz; 
# 5817
if ((__p.first) < __n) 
# 5818
{ 
# 5819
(*(__out++)) = (*__first); 
# 5820
--__n; 
# 5821
}  
# 5823
++__first; 
# 5825
if (__n == 0) { break; }  
# 5827
--__unsampled_sz; 
# 5828
if ((__p.second) < __n) 
# 5829
{ 
# 5830
(*(__out++)) = (*__first); 
# 5831
--__n; 
# 5832
}  
# 5834
++__first; 
# 5835
}  
# 5836
}  
# 5840
for (; __n != 0; ++__first) { 
# 5841
if (__d(__g, __param_type{0, --__unsampled_sz}) < __n) 
# 5842
{ 
# 5843
(*(__out++)) = (*__first); 
# 5844
--__n; 
# 5845
}  }  
# 5846
return __out; 
# 5847
} 
# 5883 "/usr/include/c++/9/bits/stl_algo.h" 3
}
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3
typedef __uint8_t uint8_t; 
# 25
typedef __uint16_t uint16_t; 
# 26
typedef __uint32_t uint32_t; 
# 27
typedef __uint64_t uint64_t; 
# 43 "/usr/include/stdint.h" 3
typedef __int_least8_t int_least8_t; 
# 44
typedef __int_least16_t int_least16_t; 
# 45
typedef __int_least32_t int_least32_t; 
# 46
typedef __int_least64_t int_least64_t; 
# 49
typedef __uint_least8_t uint_least8_t; 
# 50
typedef __uint_least16_t uint_least16_t; 
# 51
typedef __uint_least32_t uint_least32_t; 
# 52
typedef __uint_least64_t uint_least64_t; 
# 58
typedef signed char int_fast8_t; 
# 60
typedef long int_fast16_t; 
# 61
typedef long int_fast32_t; 
# 62
typedef long int_fast64_t; 
# 71 "/usr/include/stdint.h" 3
typedef unsigned char uint_fast8_t; 
# 73
typedef unsigned long uint_fast16_t; 
# 74
typedef unsigned long uint_fast32_t; 
# 75
typedef unsigned long uint_fast64_t; 
# 87 "/usr/include/stdint.h" 3
typedef long intptr_t; 
# 90
typedef unsigned long uintptr_t; 
# 101 "/usr/include/stdint.h" 3
typedef __intmax_t intmax_t; 
# 102
typedef __uintmax_t uintmax_t; 
# 62 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
typedef uint32_t cuuint32_t; 
# 63
typedef uint64_t cuuint64_t; 
# 244 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
extern "C" {
# 252
typedef unsigned long long CUdeviceptr_v2; 
# 256
typedef CUdeviceptr_v2 CUdeviceptr; 
# 258
typedef int CUdevice_v1; 
# 259
typedef CUdevice_v1 CUdevice; 
# 260
typedef struct CUctx_st *CUcontext; 
# 261
typedef struct CUmod_st *CUmodule; 
# 262
typedef CUfunc_st *CUfunction; 
# 263
typedef struct CUlib_st *CUlibrary; 
# 264
typedef CUkern_st *CUkernel; 
# 265
typedef struct CUarray_st *CUarray; 
# 266
typedef struct CUmipmappedArray_st *CUmipmappedArray; 
# 267
typedef struct CUtexref_st *CUtexref; 
# 268
typedef struct CUsurfref_st *CUsurfref; 
# 269
typedef CUevent_st *CUevent; 
# 270
typedef CUstream_st *CUstream; 
# 271
typedef struct CUgraphicsResource_st *CUgraphicsResource; 
# 272
typedef unsigned long long CUtexObject_v1; 
# 273
typedef CUtexObject_v1 CUtexObject; 
# 274
typedef unsigned long long CUsurfObject_v1; 
# 275
typedef CUsurfObject_v1 CUsurfObject; 
# 276
typedef struct CUextMemory_st *CUexternalMemory; 
# 277
typedef struct CUextSemaphore_st *CUexternalSemaphore; 
# 278
typedef CUgraph_st *CUgraph; 
# 279
typedef CUgraphNode_st *CUgraphNode; 
# 280
typedef CUgraphExec_st *CUgraphExec; 
# 281
typedef CUmemPoolHandle_st *CUmemoryPool; 
# 282
typedef CUuserObject_st *CUuserObject; 
# 301 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
typedef 
# 299
struct CUipcEventHandle_st { 
# 300
char reserved[64]; 
# 301
} CUipcEventHandle_v1; 
# 302
typedef CUipcEventHandle_v1 CUipcEventHandle; 
# 309
typedef 
# 307
struct CUipcMemHandle_st { 
# 308
char reserved[64]; 
# 309
} CUipcMemHandle_v1; 
# 310
typedef CUipcMemHandle_v1 CUipcMemHandle; 
# 317
typedef 
# 315
enum CUipcMem_flags_enum { 
# 316
CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS = 1
# 317
} CUipcMem_flags; 
# 327
typedef 
# 323
enum CUmemAttach_flags_enum { 
# 324
CU_MEM_ATTACH_GLOBAL = 1, 
# 325
CU_MEM_ATTACH_HOST, 
# 326
CU_MEM_ATTACH_SINGLE = 4
# 327
} CUmemAttach_flags; 
# 349
typedef 
# 332
enum CUctx_flags_enum { 
# 333
CU_CTX_SCHED_AUTO, 
# 334
CU_CTX_SCHED_SPIN, 
# 335
CU_CTX_SCHED_YIELD, 
# 336
CU_CTX_SCHED_BLOCKING_SYNC = 4, 
# 337
CU_CTX_BLOCKING_SYNC = 4, 
# 340
CU_CTX_SCHED_MASK = 7, 
# 341
CU_CTX_MAP_HOST, 
# 344
CU_CTX_LMEM_RESIZE_TO_MAX = 16, 
# 345
CU_CTX_COREDUMP_ENABLE = 32, 
# 346
CU_CTX_USER_COREDUMP_ENABLE = 64, 
# 347
CU_CTX_SYNC_MEMOPS = 128, 
# 348
CU_CTX_FLAGS_MASK = 255
# 349
} CUctx_flags; 
# 359
typedef 
# 354
enum CUevent_sched_flags_enum { 
# 355
CU_EVENT_SCHED_AUTO, 
# 356
CU_EVENT_SCHED_SPIN, 
# 357
CU_EVENT_SCHED_YIELD, 
# 358
CU_EVENT_SCHED_BLOCKING_SYNC = 4
# 359
} CUevent_sched_flags; 
# 369
typedef 
# 364
enum cl_event_flags_enum { 
# 365
NVCL_EVENT_SCHED_AUTO, 
# 366
NVCL_EVENT_SCHED_SPIN, 
# 367
NVCL_EVENT_SCHED_YIELD, 
# 368
NVCL_EVENT_SCHED_BLOCKING_SYNC = 4
# 369
} cl_event_flags; 
# 379
typedef 
# 374
enum cl_context_flags_enum { 
# 375
NVCL_CTX_SCHED_AUTO, 
# 376
NVCL_CTX_SCHED_SPIN, 
# 377
NVCL_CTX_SCHED_YIELD, 
# 378
NVCL_CTX_SCHED_BLOCKING_SYNC = 4
# 379
} cl_context_flags; 
# 388
typedef 
# 385
enum CUstream_flags_enum { 
# 386
CU_STREAM_DEFAULT, 
# 387
CU_STREAM_NON_BLOCKING
# 388
} CUstream_flags; 
# 418 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
typedef 
# 413
enum CUevent_flags_enum { 
# 414
CU_EVENT_DEFAULT, 
# 415
CU_EVENT_BLOCKING_SYNC, 
# 416
CU_EVENT_DISABLE_TIMING, 
# 417
CU_EVENT_INTERPROCESS = 4
# 418
} CUevent_flags; 
# 428
typedef 
# 423
enum CUevent_record_flags_enum { 
# 424
CU_EVENT_RECORD_DEFAULT, 
# 425
CU_EVENT_RECORD_EXTERNAL
# 428
} CUevent_record_flags; 
# 438
typedef 
# 433
enum CUevent_wait_flags_enum { 
# 434
CU_EVENT_WAIT_DEFAULT, 
# 435
CU_EVENT_WAIT_EXTERNAL
# 438
} CUevent_wait_flags; 
# 461 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
typedef 
# 443 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
enum CUstreamWaitValue_flags_enum { 
# 444
CU_STREAM_WAIT_VALUE_GEQ, 
# 447
CU_STREAM_WAIT_VALUE_EQ, 
# 448
CU_STREAM_WAIT_VALUE_AND, 
# 449
CU_STREAM_WAIT_VALUE_NOR, 
# 452
CU_STREAM_WAIT_VALUE_FLUSH = (1 << 30)
# 461 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
} CUstreamWaitValue_flags; 
# 475
typedef 
# 466
enum CUstreamWriteValue_flags_enum { 
# 467
CU_STREAM_WRITE_VALUE_DEFAULT, 
# 468
CU_STREAM_WRITE_VALUE_NO_MEMORY_BARRIER
# 475
} CUstreamWriteValue_flags; 
# 488
typedef 
# 480
enum CUstreamBatchMemOpType_enum { 
# 481
CU_STREAM_MEM_OP_WAIT_VALUE_32 = 1, 
# 482
CU_STREAM_MEM_OP_WRITE_VALUE_32, 
# 483
CU_STREAM_MEM_OP_WAIT_VALUE_64 = 4, 
# 484
CU_STREAM_MEM_OP_WRITE_VALUE_64, 
# 485
CU_STREAM_MEM_OP_BARRIER, 
# 486
CU_STREAM_MEM_OP_FLUSH_REMOTE_WRITES = 3
# 488
} CUstreamBatchMemOpType; 
# 496
typedef 
# 493
enum CUstreamMemoryBarrier_flags_enum { 
# 494
CU_STREAM_MEMORY_BARRIER_TYPE_SYS, 
# 495
CU_STREAM_MEMORY_BARRIER_TYPE_GPU
# 496
} CUstreamMemoryBarrier_flags; 
# 532
typedef 
# 501
union CUstreamBatchMemOpParams_union { 
# 502
CUstreamBatchMemOpType operation; 
# 503
struct CUstreamMemOpWaitValueParams_st { 
# 504
CUstreamBatchMemOpType operation; 
# 505
CUdeviceptr address; 
# 506
union { 
# 507
cuuint32_t value; 
# 508
cuuint64_t value64; 
# 509
}; 
# 510
unsigned flags; 
# 511
CUdeviceptr alias; 
# 512
} waitValue; 
# 513
struct CUstreamMemOpWriteValueParams_st { 
# 514
CUstreamBatchMemOpType operation; 
# 515
CUdeviceptr address; 
# 516
union { 
# 517
cuuint32_t value; 
# 518
cuuint64_t value64; 
# 519
}; 
# 520
unsigned flags; 
# 521
CUdeviceptr alias; 
# 522
} writeValue; 
# 523
struct CUstreamMemOpFlushRemoteWritesParams_st { 
# 524
CUstreamBatchMemOpType operation; 
# 525
unsigned flags; 
# 526
} flushRemoteWrites; 
# 527
struct CUstreamMemOpMemoryBarrierParams_st { 
# 528
CUstreamBatchMemOpType operation; 
# 529
unsigned flags; 
# 530
} memoryBarrier; 
# 531
cuuint64_t pad[6]; 
# 532
} CUstreamBatchMemOpParams_v1; 
# 533
typedef CUstreamBatchMemOpParams_v1 CUstreamBatchMemOpParams; 
# 540
typedef 
# 535
struct CUDA_BATCH_MEM_OP_NODE_PARAMS_st { 
# 536
CUcontext ctx; 
# 537
unsigned count; 
# 538
CUstreamBatchMemOpParams *paramArray; 
# 539
unsigned flags; 
# 540
} CUDA_BATCH_MEM_OP_NODE_PARAMS; 
# 548
typedef 
# 545
enum CUoccupancy_flags_enum { 
# 546
CU_OCCUPANCY_DEFAULT, 
# 547
CU_OCCUPANCY_DISABLE_CACHING_OVERRIDE
# 548
} CUoccupancy_flags; 
# 556
typedef 
# 553
enum CUstreamUpdateCaptureDependencies_flags_enum { 
# 554
CU_STREAM_ADD_CAPTURE_DEPENDENCIES, 
# 555
CU_STREAM_SET_CAPTURE_DEPENDENCIES
# 556
} CUstreamUpdateCaptureDependencies_flags; 
# 597
typedef 
# 561
enum CUarray_format_enum { 
# 562
CU_AD_FORMAT_UNSIGNED_INT8 = 1, 
# 563
CU_AD_FORMAT_UNSIGNED_INT16, 
# 564
CU_AD_FORMAT_UNSIGNED_INT32, 
# 565
CU_AD_FORMAT_SIGNED_INT8 = 8, 
# 566
CU_AD_FORMAT_SIGNED_INT16, 
# 567
CU_AD_FORMAT_SIGNED_INT32, 
# 568
CU_AD_FORMAT_HALF = 16, 
# 569
CU_AD_FORMAT_FLOAT = 32, 
# 570
CU_AD_FORMAT_NV12 = 176, 
# 571
CU_AD_FORMAT_UNORM_INT8X1 = 192, 
# 572
CU_AD_FORMAT_UNORM_INT8X2, 
# 573
CU_AD_FORMAT_UNORM_INT8X4, 
# 574
CU_AD_FORMAT_UNORM_INT16X1, 
# 575
CU_AD_FORMAT_UNORM_INT16X2, 
# 576
CU_AD_FORMAT_UNORM_INT16X4, 
# 577
CU_AD_FORMAT_SNORM_INT8X1, 
# 578
CU_AD_FORMAT_SNORM_INT8X2, 
# 579
CU_AD_FORMAT_SNORM_INT8X4, 
# 580
CU_AD_FORMAT_SNORM_INT16X1, 
# 581
CU_AD_FORMAT_SNORM_INT16X2, 
# 582
CU_AD_FORMAT_SNORM_INT16X4, 
# 583
CU_AD_FORMAT_BC1_UNORM = 145, 
# 584
CU_AD_FORMAT_BC1_UNORM_SRGB, 
# 585
CU_AD_FORMAT_BC2_UNORM, 
# 586
CU_AD_FORMAT_BC2_UNORM_SRGB, 
# 587
CU_AD_FORMAT_BC3_UNORM, 
# 588
CU_AD_FORMAT_BC3_UNORM_SRGB, 
# 589
CU_AD_FORMAT_BC4_UNORM, 
# 590
CU_AD_FORMAT_BC4_SNORM, 
# 591
CU_AD_FORMAT_BC5_UNORM, 
# 592
CU_AD_FORMAT_BC5_SNORM, 
# 593
CU_AD_FORMAT_BC6H_UF16, 
# 594
CU_AD_FORMAT_BC6H_SF16, 
# 595
CU_AD_FORMAT_BC7_UNORM, 
# 596
CU_AD_FORMAT_BC7_UNORM_SRGB
# 597
} CUarray_format; 
# 607
typedef 
# 602
enum CUaddress_mode_enum { 
# 603
CU_TR_ADDRESS_MODE_WRAP, 
# 604
CU_TR_ADDRESS_MODE_CLAMP, 
# 605
CU_TR_ADDRESS_MODE_MIRROR, 
# 606
CU_TR_ADDRESS_MODE_BORDER
# 607
} CUaddress_mode; 
# 615
typedef 
# 612
enum CUfilter_mode_enum { 
# 613
CU_TR_FILTER_MODE_POINT, 
# 614
CU_TR_FILTER_MODE_LINEAR
# 615
} CUfilter_mode; 
# 757
typedef 
# 620
enum CUdevice_attribute_enum { 
# 621
CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 1, 
# 622
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X, 
# 623
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y, 
# 624
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z, 
# 625
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X, 
# 626
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y, 
# 627
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z, 
# 628
CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK, 
# 629
CU_DEVICE_ATTRIBUTE_SHARED_MEMORY_PER_BLOCK = 8, 
# 630
CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY, 
# 631
CU_DEVICE_ATTRIBUTE_WARP_SIZE, 
# 632
CU_DEVICE_ATTRIBUTE_MAX_PITCH, 
# 633
CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK, 
# 634
CU_DEVICE_ATTRIBUTE_REGISTERS_PER_BLOCK = 12, 
# 635
CU_DEVICE_ATTRIBUTE_CLOCK_RATE, 
# 636
CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT, 
# 637
CU_DEVICE_ATTRIBUTE_GPU_OVERLAP, 
# 638
CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT, 
# 639
CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT, 
# 640
CU_DEVICE_ATTRIBUTE_INTEGRATED, 
# 641
CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY, 
# 642
CU_DEVICE_ATTRIBUTE_COMPUTE_MODE, 
# 643
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH, 
# 644
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH, 
# 645
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT, 
# 646
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH, 
# 647
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT, 
# 648
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH, 
# 649
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH, 
# 650
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT, 
# 651
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS, 
# 652
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_WIDTH = 27, 
# 653
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_HEIGHT, 
# 654
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_NUMSLICES, 
# 655
CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT, 
# 656
CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS, 
# 657
CU_DEVICE_ATTRIBUTE_ECC_ENABLED, 
# 658
CU_DEVICE_ATTRIBUTE_PCI_BUS_ID, 
# 659
CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID, 
# 660
CU_DEVICE_ATTRIBUTE_TCC_DRIVER, 
# 661
CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE, 
# 662
CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH, 
# 663
CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE, 
# 664
CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR, 
# 665
CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT, 
# 666
CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING, 
# 667
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH, 
# 668
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS, 
# 669
CU_DEVICE_ATTRIBUTE_CAN_TEX2D_GATHER, 
# 670
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_WIDTH, 
# 671
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_HEIGHT, 
# 672
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH_ALTERNATE, 
# 673
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT_ALTERNATE, 
# 674
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH_ALTERNATE, 
# 675
CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID, 
# 676
CU_DEVICE_ATTRIBUTE_TEXTURE_PITCH_ALIGNMENT, 
# 677
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_WIDTH, 
# 678
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_WIDTH, 
# 679
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_LAYERS, 
# 680
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_WIDTH, 
# 681
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_WIDTH, 
# 682
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_HEIGHT, 
# 683
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_WIDTH, 
# 684
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_HEIGHT, 
# 685
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_DEPTH, 
# 686
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_WIDTH, 
# 687
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_LAYERS, 
# 688
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_WIDTH, 
# 689
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_HEIGHT, 
# 690
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_LAYERS, 
# 691
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_WIDTH, 
# 692
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_WIDTH, 
# 693
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_LAYERS, 
# 694
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LINEAR_WIDTH, 
# 695
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_WIDTH, 
# 696
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_HEIGHT, 
# 697
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_PITCH, 
# 698
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_WIDTH, 
# 699
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_HEIGHT, 
# 700
CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR, 
# 701
CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR, 
# 702
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_MIPMAPPED_WIDTH, 
# 703
CU_DEVICE_ATTRIBUTE_STREAM_PRIORITIES_SUPPORTED, 
# 704
CU_DEVICE_ATTRIBUTE_GLOBAL_L1_CACHE_SUPPORTED, 
# 705
CU_DEVICE_ATTRIBUTE_LOCAL_L1_CACHE_SUPPORTED, 
# 706
CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_MULTIPROCESSOR, 
# 707
CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_MULTIPROCESSOR, 
# 708
CU_DEVICE_ATTRIBUTE_MANAGED_MEMORY, 
# 709
CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD, 
# 710
CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD_GROUP_ID, 
# 711
CU_DEVICE_ATTRIBUTE_HOST_NATIVE_ATOMIC_SUPPORTED, 
# 712
CU_DEVICE_ATTRIBUTE_SINGLE_TO_DOUBLE_PRECISION_PERF_RATIO, 
# 713
CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS, 
# 714
CU_DEVICE_ATTRIBUTE_CONCURRENT_MANAGED_ACCESS, 
# 715
CU_DEVICE_ATTRIBUTE_COMPUTE_PREEMPTION_SUPPORTED, 
# 716
CU_DEVICE_ATTRIBUTE_CAN_USE_HOST_POINTER_FOR_REGISTERED_MEM, 
# 717
CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_MEM_OPS_V1, 
# 718
CU_DEVICE_ATTRIBUTE_CAN_USE_64_BIT_STREAM_MEM_OPS_V1, 
# 719
CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_WAIT_VALUE_NOR_V1, 
# 720
CU_DEVICE_ATTRIBUTE_COOPERATIVE_LAUNCH, 
# 721
CU_DEVICE_ATTRIBUTE_COOPERATIVE_MULTI_DEVICE_LAUNCH, 
# 722
CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK_OPTIN, 
# 723
CU_DEVICE_ATTRIBUTE_CAN_FLUSH_REMOTE_WRITES, 
# 724
CU_DEVICE_ATTRIBUTE_HOST_REGISTER_SUPPORTED, 
# 725
CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS_USES_HOST_PAGE_TABLES, 
# 726
CU_DEVICE_ATTRIBUTE_DIRECT_MANAGED_MEM_ACCESS_FROM_HOST, 
# 727
CU_DEVICE_ATTRIBUTE_VIRTUAL_ADDRESS_MANAGEMENT_SUPPORTED, 
# 728
CU_DEVICE_ATTRIBUTE_VIRTUAL_MEMORY_MANAGEMENT_SUPPORTED = 102, 
# 729
CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR_SUPPORTED, 
# 730
CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_WIN32_HANDLE_SUPPORTED, 
# 731
CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_WIN32_KMT_HANDLE_SUPPORTED, 
# 732
CU_DEVICE_ATTRIBUTE_MAX_BLOCKS_PER_MULTIPROCESSOR, 
# 733
CU_DEVICE_ATTRIBUTE_GENERIC_COMPRESSION_SUPPORTED, 
# 734
CU_DEVICE_ATTRIBUTE_MAX_PERSISTING_L2_CACHE_SIZE, 
# 735
CU_DEVICE_ATTRIBUTE_MAX_ACCESS_POLICY_WINDOW_SIZE, 
# 736
CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_WITH_CUDA_VMM_SUPPORTED, 
# 737
CU_DEVICE_ATTRIBUTE_RESERVED_SHARED_MEMORY_PER_BLOCK, 
# 738
CU_DEVICE_ATTRIBUTE_SPARSE_CUDA_ARRAY_SUPPORTED, 
# 739
CU_DEVICE_ATTRIBUTE_READ_ONLY_HOST_REGISTER_SUPPORTED, 
# 740
CU_DEVICE_ATTRIBUTE_TIMELINE_SEMAPHORE_INTEROP_SUPPORTED, 
# 741
CU_DEVICE_ATTRIBUTE_MEMORY_POOLS_SUPPORTED, 
# 742
CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_SUPPORTED, 
# 743
CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_FLUSH_WRITES_OPTIONS, 
# 744
CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_WRITES_ORDERING, 
# 745
CU_DEVICE_ATTRIBUTE_MEMPOOL_SUPPORTED_HANDLE_TYPES, 
# 746
CU_DEVICE_ATTRIBUTE_CLUSTER_LAUNCH, 
# 747
CU_DEVICE_ATTRIBUTE_DEFERRED_MAPPING_CUDA_ARRAY_SUPPORTED, 
# 748
CU_DEVICE_ATTRIBUTE_CAN_USE_64_BIT_STREAM_MEM_OPS, 
# 749
CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_WAIT_VALUE_NOR, 
# 750
CU_DEVICE_ATTRIBUTE_DMA_BUF_SUPPORTED, 
# 751
CU_DEVICE_ATTRIBUTE_IPC_EVENT_SUPPORTED, 
# 752
CU_DEVICE_ATTRIBUTE_MEM_SYNC_DOMAIN_COUNT, 
# 753
CU_DEVICE_ATTRIBUTE_TENSOR_MAP_ACCESS_SUPPORTED, 
# 754
CU_DEVICE_ATTRIBUTE_UNIFIED_FUNCTION_POINTERS = 129, 
# 755
CU_DEVICE_ATTRIBUTE_MULTICAST_SUPPORTED = 132, 
# 756
CU_DEVICE_ATTRIBUTE_MAX
# 757
} CUdevice_attribute; 
# 773
typedef 
# 762
struct CUdevprop_st { 
# 763
int maxThreadsPerBlock; 
# 764
int maxThreadsDim[3]; 
# 765
int maxGridSize[3]; 
# 766
int sharedMemPerBlock; 
# 767
int totalConstantMemory; 
# 768
int SIMDWidth; 
# 769
int memPitch; 
# 770
int regsPerBlock; 
# 771
int clockRate; 
# 772
int textureAlign; 
# 773
} CUdevprop_v1; 
# 774
typedef CUdevprop_v1 CUdevprop; 
# 801
typedef 
# 779
enum CUpointer_attribute_enum { 
# 780
CU_POINTER_ATTRIBUTE_CONTEXT = 1, 
# 781
CU_POINTER_ATTRIBUTE_MEMORY_TYPE, 
# 782
CU_POINTER_ATTRIBUTE_DEVICE_POINTER, 
# 783
CU_POINTER_ATTRIBUTE_HOST_POINTER, 
# 784
CU_POINTER_ATTRIBUTE_P2P_TOKENS, 
# 785
CU_POINTER_ATTRIBUTE_SYNC_MEMOPS, 
# 786
CU_POINTER_ATTRIBUTE_BUFFER_ID, 
# 787
CU_POINTER_ATTRIBUTE_IS_MANAGED, 
# 788
CU_POINTER_ATTRIBUTE_DEVICE_ORDINAL, 
# 789
CU_POINTER_ATTRIBUTE_IS_LEGACY_CUDA_IPC_CAPABLE, 
# 790
CU_POINTER_ATTRIBUTE_RANGE_START_ADDR, 
# 791
CU_POINTER_ATTRIBUTE_RANGE_SIZE, 
# 792
CU_POINTER_ATTRIBUTE_MAPPED, 
# 793
CU_POINTER_ATTRIBUTE_ALLOWED_HANDLE_TYPES, 
# 794
CU_POINTER_ATTRIBUTE_IS_GPU_DIRECT_RDMA_CAPABLE, 
# 795
CU_POINTER_ATTRIBUTE_ACCESS_FLAGS, 
# 796
CU_POINTER_ATTRIBUTE_MEMPOOL_HANDLE, 
# 798
CU_POINTER_ATTRIBUTE_MAPPING_SIZE, 
# 799
CU_POINTER_ATTRIBUTE_MAPPING_BASE_ADDR, 
# 800
CU_POINTER_ATTRIBUTE_MEMORY_BLOCK_ID
# 801
} CUpointer_attribute; 
# 948 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
typedef 
# 806 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
enum CUfunction_attribute_enum { 
# 812
CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK, 
# 819
CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES, 
# 825
CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES, 
# 830
CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES, 
# 835
CU_FUNC_ATTRIBUTE_NUM_REGS, 
# 844 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_FUNC_ATTRIBUTE_PTX_VERSION, 
# 853 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_FUNC_ATTRIBUTE_BINARY_VERSION, 
# 859
CU_FUNC_ATTRIBUTE_CACHE_MODE_CA, 
# 867
CU_FUNC_ATTRIBUTE_MAX_DYNAMIC_SHARED_SIZE_BYTES, 
# 876 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_FUNC_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT, 
# 883
CU_FUNC_ATTRIBUTE_CLUSTER_SIZE_MUST_BE_SET, 
# 894 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_FUNC_ATTRIBUTE_REQUIRED_CLUSTER_WIDTH, 
# 905 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_FUNC_ATTRIBUTE_REQUIRED_CLUSTER_HEIGHT, 
# 916 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_FUNC_ATTRIBUTE_REQUIRED_CLUSTER_DEPTH, 
# 938 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_FUNC_ATTRIBUTE_NON_PORTABLE_CLUSTER_SIZE_ALLOWED, 
# 945
CU_FUNC_ATTRIBUTE_CLUSTER_SCHEDULING_POLICY_PREFERENCE, 
# 947
CU_FUNC_ATTRIBUTE_MAX
# 948
} CUfunction_attribute; 
# 958
typedef 
# 953
enum CUfunc_cache_enum { 
# 954
CU_FUNC_CACHE_PREFER_NONE, 
# 955
CU_FUNC_CACHE_PREFER_SHARED, 
# 956
CU_FUNC_CACHE_PREFER_L1, 
# 957
CU_FUNC_CACHE_PREFER_EQUAL
# 958
} CUfunc_cache; 
# 967
typedef 
# 963
enum CUsharedconfig_enum { 
# 964
CU_SHARED_MEM_CONFIG_DEFAULT_BANK_SIZE, 
# 965
CU_SHARED_MEM_CONFIG_FOUR_BYTE_BANK_SIZE, 
# 966
CU_SHARED_MEM_CONFIG_EIGHT_BYTE_BANK_SIZE
# 967
} CUsharedconfig; 
# 976
typedef 
# 972
enum CUshared_carveout_enum { 
# 973
CU_SHAREDMEM_CARVEOUT_DEFAULT = (-1), 
# 974
CU_SHAREDMEM_CARVEOUT_MAX_SHARED = 100, 
# 975
CU_SHAREDMEM_CARVEOUT_MAX_L1 = 0
# 976
} CUshared_carveout; 
# 986
typedef 
# 981
enum CUmemorytype_enum { 
# 982
CU_MEMORYTYPE_HOST = 1, 
# 983
CU_MEMORYTYPE_DEVICE, 
# 984
CU_MEMORYTYPE_ARRAY, 
# 985
CU_MEMORYTYPE_UNIFIED
# 986
} CUmemorytype; 
# 995
typedef 
# 991
enum CUcomputemode_enum { 
# 992
CU_COMPUTEMODE_DEFAULT, 
# 993
CU_COMPUTEMODE_PROHIBITED = 2, 
# 994
CU_COMPUTEMODE_EXCLUSIVE_PROCESS
# 995
} CUcomputemode; 
# 1007
typedef 
# 1000
enum CUmem_advise_enum { 
# 1001
CU_MEM_ADVISE_SET_READ_MOSTLY = 1, 
# 1002
CU_MEM_ADVISE_UNSET_READ_MOSTLY, 
# 1003
CU_MEM_ADVISE_SET_PREFERRED_LOCATION, 
# 1004
CU_MEM_ADVISE_UNSET_PREFERRED_LOCATION, 
# 1005
CU_MEM_ADVISE_SET_ACCESSED_BY, 
# 1006
CU_MEM_ADVISE_UNSET_ACCESSED_BY
# 1007
} CUmem_advise; 
# 1014
typedef 
# 1009
enum CUmem_range_attribute_enum { 
# 1010
CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY = 1, 
# 1011
CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION, 
# 1012
CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY, 
# 1013
CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION
# 1014
} CUmem_range_attribute; 
# 1337 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
typedef 
# 1019 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
enum CUjit_option_enum { 
# 1026
CU_JIT_MAX_REGISTERS, 
# 1041 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_JIT_THREADS_PER_BLOCK, 
# 1049
CU_JIT_WALL_TIME, 
# 1058 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_JIT_INFO_LOG_BUFFER, 
# 1067 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES, 
# 1076 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_JIT_ERROR_LOG_BUFFER, 
# 1085 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES, 
# 1093
CU_JIT_OPTIMIZATION_LEVEL, 
# 1101
CU_JIT_TARGET_FROM_CUCONTEXT, 
# 1109
CU_JIT_TARGET, 
# 1118 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_JIT_FALLBACK_STRATEGY, 
# 1126
CU_JIT_GENERATE_DEBUG_INFO, 
# 1133
CU_JIT_LOG_VERBOSE, 
# 1140
CU_JIT_GENERATE_LINE_INFO, 
# 1148
CU_JIT_CACHE_MODE, 
# 1154
CU_JIT_NEW_SM3X_OPT, 
# 1159
CU_JIT_FAST_COMPILE, 
# 1173 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_JIT_GLOBAL_SYMBOL_NAMES, 
# 1182 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_JIT_GLOBAL_SYMBOL_ADDRESSES, 
# 1190
CU_JIT_GLOBAL_SYMBOL_COUNT, 
# 1201 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_JIT_LTO, 
# 1213 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_JIT_FTZ, 
# 1226 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_JIT_PREC_DIV, 
# 1239 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_JIT_PREC_SQRT, 
# 1251 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_JIT_FMA, 
# 1271 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_JIT_REFERENCED_KERNEL_NAMES, 
# 1281 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_JIT_REFERENCED_KERNEL_COUNT, 
# 1301 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_JIT_REFERENCED_VARIABLE_NAMES, 
# 1311 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_JIT_REFERENCED_VARIABLE_COUNT, 
# 1326 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_JIT_OPTIMIZE_UNUSED_DEVICE_VARIABLES, 
# 1333
CU_JIT_POSITION_INDEPENDENT_CODE, 
# 1335
CU_JIT_NUM_OPTIONS
# 1337
} CUjit_option; 
# 1370 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
typedef 
# 1347
enum CUjit_target_enum { 
# 1349
CU_TARGET_COMPUTE_30 = 30, 
# 1350
CU_TARGET_COMPUTE_32 = 32, 
# 1351
CU_TARGET_COMPUTE_35 = 35, 
# 1352
CU_TARGET_COMPUTE_37 = 37, 
# 1353
CU_TARGET_COMPUTE_50 = 50, 
# 1354
CU_TARGET_COMPUTE_52 = 52, 
# 1355
CU_TARGET_COMPUTE_53, 
# 1356
CU_TARGET_COMPUTE_60 = 60, 
# 1357
CU_TARGET_COMPUTE_61, 
# 1358
CU_TARGET_COMPUTE_62, 
# 1359
CU_TARGET_COMPUTE_70 = 70, 
# 1360
CU_TARGET_COMPUTE_72 = 72, 
# 1361
CU_TARGET_COMPUTE_75 = 75, 
# 1362
CU_TARGET_COMPUTE_80 = 80, 
# 1363
CU_TARGET_COMPUTE_86 = 86, 
# 1364
CU_TARGET_COMPUTE_87, 
# 1365
CU_TARGET_COMPUTE_89 = 89, 
# 1366
CU_TARGET_COMPUTE_90, 
# 1369
CU_TARGET_COMPUTE_90A = (65536 + CU_TARGET_COMPUTE_90)
# 1370
} CUjit_target; 
# 1381
typedef 
# 1375
enum CUjit_fallback_enum { 
# 1377
CU_PREFER_PTX, 
# 1379
CU_PREFER_BINARY
# 1381
} CUjit_fallback; 
# 1391
typedef 
# 1386
enum CUjit_cacheMode_enum { 
# 1388
CU_JIT_CACHE_OPTION_NONE, 
# 1389
CU_JIT_CACHE_OPTION_CG, 
# 1390
CU_JIT_CACHE_OPTION_CA
# 1391
} CUjit_cacheMode; 
# 1438 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
typedef 
# 1396 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
enum CUjitInputType_enum { 
# 1402
CU_JIT_INPUT_CUBIN, 
# 1408
CU_JIT_INPUT_PTX, 
# 1414
CU_JIT_INPUT_FATBINARY, 
# 1420
CU_JIT_INPUT_OBJECT, 
# 1426
CU_JIT_INPUT_LIBRARY, 
# 1435 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_JIT_INPUT_NVVM, 
# 1437
CU_JIT_NUM_INPUT_TYPES
# 1438
} CUjitInputType; 
# 1440
typedef struct CUlinkState_st *CUlinkState; 
# 1451
typedef 
# 1445
enum CUgraphicsRegisterFlags_enum { 
# 1446
CU_GRAPHICS_REGISTER_FLAGS_NONE, 
# 1447
CU_GRAPHICS_REGISTER_FLAGS_READ_ONLY, 
# 1448
CU_GRAPHICS_REGISTER_FLAGS_WRITE_DISCARD, 
# 1449
CU_GRAPHICS_REGISTER_FLAGS_SURFACE_LDST = 4, 
# 1450
CU_GRAPHICS_REGISTER_FLAGS_TEXTURE_GATHER = 8
# 1451
} CUgraphicsRegisterFlags; 
# 1460
typedef 
# 1456
enum CUgraphicsMapResourceFlags_enum { 
# 1457
CU_GRAPHICS_MAP_RESOURCE_FLAGS_NONE, 
# 1458
CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY, 
# 1459
CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD
# 1460
} CUgraphicsMapResourceFlags; 
# 1472
typedef 
# 1465
enum CUarray_cubemap_face_enum { 
# 1466
CU_CUBEMAP_FACE_POSITIVE_X, 
# 1467
CU_CUBEMAP_FACE_NEGATIVE_X, 
# 1468
CU_CUBEMAP_FACE_POSITIVE_Y, 
# 1469
CU_CUBEMAP_FACE_NEGATIVE_Y, 
# 1470
CU_CUBEMAP_FACE_POSITIVE_Z, 
# 1471
CU_CUBEMAP_FACE_NEGATIVE_Z
# 1472
} CUarray_cubemap_face; 
# 1486
typedef 
# 1477
enum CUlimit_enum { 
# 1478
CU_LIMIT_STACK_SIZE, 
# 1479
CU_LIMIT_PRINTF_FIFO_SIZE, 
# 1480
CU_LIMIT_MALLOC_HEAP_SIZE, 
# 1481
CU_LIMIT_DEV_RUNTIME_SYNC_DEPTH, 
# 1482
CU_LIMIT_DEV_RUNTIME_PENDING_LAUNCH_COUNT, 
# 1483
CU_LIMIT_MAX_L2_FETCH_GRANULARITY, 
# 1484
CU_LIMIT_PERSISTING_L2_CACHE_SIZE, 
# 1485
CU_LIMIT_MAX
# 1486
} CUlimit; 
# 1496
typedef 
# 1491
enum CUresourcetype_enum { 
# 1492
CU_RESOURCE_TYPE_ARRAY, 
# 1493
CU_RESOURCE_TYPE_MIPMAPPED_ARRAY, 
# 1494
CU_RESOURCE_TYPE_LINEAR, 
# 1495
CU_RESOURCE_TYPE_PITCH2D
# 1496
} CUresourcetype; 
# 1508 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
typedef void (*CUhostFn)(void * userData); 
# 1517
typedef 
# 1513
enum CUaccessProperty_enum { 
# 1514
CU_ACCESS_PROPERTY_NORMAL, 
# 1515
CU_ACCESS_PROPERTY_STREAMING, 
# 1516
CU_ACCESS_PROPERTY_PERSISTING
# 1517
} CUaccessProperty; 
# 1537 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
typedef 
# 1531
struct CUaccessPolicyWindow_st { 
# 1532
void *base_ptr; 
# 1533
size_t num_bytes; 
# 1534
float hitRatio; 
# 1535
CUaccessProperty hitProp; 
# 1536
CUaccessProperty missProp; 
# 1537
} CUaccessPolicyWindow_v1; 
# 1541
typedef CUaccessPolicyWindow_v1 CUaccessPolicyWindow; 
# 1557
typedef 
# 1546
struct CUDA_KERNEL_NODE_PARAMS_st { 
# 1547
CUfunction func; 
# 1548
unsigned gridDimX; 
# 1549
unsigned gridDimY; 
# 1550
unsigned gridDimZ; 
# 1551
unsigned blockDimX; 
# 1552
unsigned blockDimY; 
# 1553
unsigned blockDimZ; 
# 1554
unsigned sharedMemBytes; 
# 1555
void **kernelParams; 
# 1556
void **extra; 
# 1557
} CUDA_KERNEL_NODE_PARAMS_v1; 
# 1574
typedef 
# 1561
struct CUDA_KERNEL_NODE_PARAMS_v2_st { 
# 1562
CUfunction func; 
# 1563
unsigned gridDimX; 
# 1564
unsigned gridDimY; 
# 1565
unsigned gridDimZ; 
# 1566
unsigned blockDimX; 
# 1567
unsigned blockDimY; 
# 1568
unsigned blockDimZ; 
# 1569
unsigned sharedMemBytes; 
# 1570
void **kernelParams; 
# 1571
void **extra; 
# 1572
CUkernel kern; 
# 1573
CUcontext ctx; 
# 1574
} CUDA_KERNEL_NODE_PARAMS_v2; 
# 1575
typedef CUDA_KERNEL_NODE_PARAMS_v2 CUDA_KERNEL_NODE_PARAMS; 
# 1587
typedef 
# 1580
struct CUDA_MEMSET_NODE_PARAMS_st { 
# 1581
CUdeviceptr dst; 
# 1582
size_t pitch; 
# 1583
unsigned value; 
# 1584
unsigned elementSize; 
# 1585
size_t width; 
# 1586
size_t height; 
# 1587
} CUDA_MEMSET_NODE_PARAMS_v1; 
# 1588
typedef CUDA_MEMSET_NODE_PARAMS_v1 CUDA_MEMSET_NODE_PARAMS; 
# 1596
typedef 
# 1593
struct CUDA_HOST_NODE_PARAMS_st { 
# 1594
CUhostFn fn; 
# 1595
void *userData; 
# 1596
} CUDA_HOST_NODE_PARAMS_v1; 
# 1597
typedef CUDA_HOST_NODE_PARAMS_v1 CUDA_HOST_NODE_PARAMS; 
# 1616
typedef 
# 1602
enum CUgraphNodeType_enum { 
# 1603
CU_GRAPH_NODE_TYPE_KERNEL, 
# 1604
CU_GRAPH_NODE_TYPE_MEMCPY, 
# 1605
CU_GRAPH_NODE_TYPE_MEMSET, 
# 1606
CU_GRAPH_NODE_TYPE_HOST, 
# 1607
CU_GRAPH_NODE_TYPE_GRAPH, 
# 1608
CU_GRAPH_NODE_TYPE_EMPTY, 
# 1609
CU_GRAPH_NODE_TYPE_WAIT_EVENT, 
# 1610
CU_GRAPH_NODE_TYPE_EVENT_RECORD, 
# 1611
CU_GRAPH_NODE_TYPE_EXT_SEMAS_SIGNAL, 
# 1612
CU_GRAPH_NODE_TYPE_EXT_SEMAS_WAIT, 
# 1613
CU_GRAPH_NODE_TYPE_MEM_ALLOC, 
# 1614
CU_GRAPH_NODE_TYPE_MEM_FREE, 
# 1615
CU_GRAPH_NODE_TYPE_BATCH_MEM_OP
# 1616
} CUgraphNodeType; 
# 1628
typedef 
# 1621
enum CUgraphInstantiateResult_enum { 
# 1623
CUDA_GRAPH_INSTANTIATE_SUCCESS, 
# 1624
CUDA_GRAPH_INSTANTIATE_ERROR, 
# 1625
CUDA_GRAPH_INSTANTIATE_INVALID_STRUCTURE, 
# 1626
CUDA_GRAPH_INSTANTIATE_NODE_OPERATION_NOT_SUPPORTED, 
# 1627
CUDA_GRAPH_INSTANTIATE_MULTIPLE_CTXS_NOT_SUPPORTED
# 1628
} CUgraphInstantiateResult; 
# 1639
typedef 
# 1633
struct CUDA_GRAPH_INSTANTIATE_PARAMS_st { 
# 1635
cuuint64_t flags; 
# 1636
CUstream hUploadStream; 
# 1637
CUgraphNode hErrNode_out; 
# 1638
CUgraphInstantiateResult result_out; 
# 1639
} CUDA_GRAPH_INSTANTIATE_PARAMS; 
# 1646
typedef 
# 1641
enum CUsynchronizationPolicy_enum { 
# 1642
CU_SYNC_POLICY_AUTO = 1, 
# 1643
CU_SYNC_POLICY_SPIN, 
# 1644
CU_SYNC_POLICY_YIELD, 
# 1645
CU_SYNC_POLICY_BLOCKING_SYNC
# 1646
} CUsynchronizationPolicy; 
# 1655
typedef 
# 1651
enum CUclusterSchedulingPolicy_enum { 
# 1652
CU_CLUSTER_SCHEDULING_POLICY_DEFAULT, 
# 1653
CU_CLUSTER_SCHEDULING_POLICY_SPREAD, 
# 1654
CU_CLUSTER_SCHEDULING_POLICY_LOAD_BALANCING
# 1655
} CUclusterSchedulingPolicy; 
# 1660
typedef 
# 1657
enum CUlaunchMemSyncDomain_enum { 
# 1658
CU_LAUNCH_MEM_SYNC_DOMAIN_DEFAULT, 
# 1659
CU_LAUNCH_MEM_SYNC_DOMAIN_REMOTE
# 1660
} CUlaunchMemSyncDomain; 
# 1665
typedef 
# 1662
struct CUlaunchMemSyncDomainMap_st { 
# 1663
unsigned char default_; 
# 1664
unsigned char remote; 
# 1665
} CUlaunchMemSyncDomainMap; 
# 1714 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
typedef 
# 1667 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
enum CUlaunchAttributeID_enum { 
# 1668
CU_LAUNCH_ATTRIBUTE_IGNORE, 
# 1669
CU_LAUNCH_ATTRIBUTE_ACCESS_POLICY_WINDOW, 
# 1670
CU_LAUNCH_ATTRIBUTE_COOPERATIVE, 
# 1671
CU_LAUNCH_ATTRIBUTE_SYNCHRONIZATION_POLICY, 
# 1672
CU_LAUNCH_ATTRIBUTE_CLUSTER_DIMENSION, 
# 1673
CU_LAUNCH_ATTRIBUTE_CLUSTER_SCHEDULING_POLICY_PREFERENCE, 
# 1674
CU_LAUNCH_ATTRIBUTE_PROGRAMMATIC_STREAM_SERIALIZATION, 
# 1685 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_LAUNCH_ATTRIBUTE_PROGRAMMATIC_EVENT, 
# 1708 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_LAUNCH_ATTRIBUTE_PRIORITY, 
# 1709
CU_LAUNCH_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP, 
# 1710
CU_LAUNCH_ATTRIBUTE_MEM_SYNC_DOMAIN
# 1714
} CUlaunchAttributeID; 
# 1736
typedef 
# 1716
union CUlaunchAttributeValue_union { 
# 1717
char pad[64]; 
# 1718
CUaccessPolicyWindow accessPolicyWindow; 
# 1719
int cooperative; 
# 1720
CUsynchronizationPolicy syncPolicy; 
# 1721
struct { 
# 1722
unsigned x; 
# 1723
unsigned y; 
# 1724
unsigned z; 
# 1725
} clusterDim; 
# 1726
CUclusterSchedulingPolicy clusterSchedulingPolicyPreference; 
# 1727
int programmaticStreamSerializationAllowed; 
# 1728
struct { 
# 1729
CUevent event; 
# 1730
int flags; 
# 1731
int triggerAtBlockStart; 
# 1732
} programmaticEvent; 
# 1733
int priority; 
# 1734
CUlaunchMemSyncDomainMap memSyncDomainMap; 
# 1735
CUlaunchMemSyncDomain memSyncDomain; 
# 1736
} CUlaunchAttributeValue; 
# 1742
typedef 
# 1738
struct CUlaunchAttribute_st { 
# 1739
CUlaunchAttributeID id; 
# 1740
char pad[(8) - sizeof(CUlaunchAttributeID)]; 
# 1741
CUlaunchAttributeValue value; 
# 1742
} CUlaunchAttribute; 
# 1755
typedef 
# 1744
struct CUlaunchConfig_st { 
# 1745
unsigned gridDimX; 
# 1746
unsigned gridDimY; 
# 1747
unsigned gridDimZ; 
# 1748
unsigned blockDimX; 
# 1749
unsigned blockDimY; 
# 1750
unsigned blockDimZ; 
# 1751
unsigned sharedMemBytes; 
# 1752
CUstream hStream; 
# 1753
CUlaunchAttribute *attrs; 
# 1754
unsigned numAttrs; 
# 1755
} CUlaunchConfig; 
# 1757
typedef CUlaunchAttributeID CUkernelNodeAttrID; 
# 1766 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
typedef CUlaunchAttributeValue CUkernelNodeAttrValue_v1; 
# 1767
typedef CUkernelNodeAttrValue_v1 CUkernelNodeAttrValue; 
# 1777
typedef 
# 1772
enum CUstreamCaptureStatus_enum { 
# 1773
CU_STREAM_CAPTURE_STATUS_NONE, 
# 1774
CU_STREAM_CAPTURE_STATUS_ACTIVE, 
# 1775
CU_STREAM_CAPTURE_STATUS_INVALIDATED
# 1777
} CUstreamCaptureStatus; 
# 1787
typedef 
# 1783
enum CUstreamCaptureMode_enum { 
# 1784
CU_STREAM_CAPTURE_MODE_GLOBAL, 
# 1785
CU_STREAM_CAPTURE_MODE_THREAD_LOCAL, 
# 1786
CU_STREAM_CAPTURE_MODE_RELAXED
# 1787
} CUstreamCaptureMode; 
# 1789
typedef CUlaunchAttributeID CUstreamAttrID; 
# 1796
typedef CUlaunchAttributeValue CUstreamAttrValue_v1; 
# 1797
typedef CUstreamAttrValue_v1 CUstreamAttrValue; 
# 1806
typedef 
# 1802
enum CUdriverProcAddress_flags_enum { 
# 1803
CU_GET_PROC_ADDRESS_DEFAULT, 
# 1804
CU_GET_PROC_ADDRESS_LEGACY_STREAM, 
# 1805
CU_GET_PROC_ADDRESS_PER_THREAD_DEFAULT_STREAM
# 1806
} CUdriverProcAddress_flags; 
# 1815
typedef 
# 1811
enum CUdriverProcAddressQueryResult_enum { 
# 1812
CU_GET_PROC_ADDRESS_SUCCESS, 
# 1813
CU_GET_PROC_ADDRESS_SYMBOL_NOT_FOUND, 
# 1814
CU_GET_PROC_ADDRESS_VERSION_NOT_SUFFICIENT
# 1815
} CUdriverProcAddressQueryResult; 
# 1823
typedef 
# 1820
enum CUexecAffinityType_enum { 
# 1821
CU_EXEC_AFFINITY_TYPE_SM_COUNT, 
# 1822
CU_EXEC_AFFINITY_TYPE_MAX
# 1823
} CUexecAffinityType; 
# 1830
typedef 
# 1828
struct CUexecAffinitySmCount_st { 
# 1829
unsigned val; 
# 1830
} CUexecAffinitySmCount_v1; 
# 1831
typedef CUexecAffinitySmCount_v1 CUexecAffinitySmCount; 
# 1841
typedef 
# 1836
struct CUexecAffinityParam_st { 
# 1837
CUexecAffinityType type; 
# 1838
union { 
# 1839
CUexecAffinitySmCount smCount; 
# 1840
} param; 
# 1841
} CUexecAffinityParam_v1; 
# 1845
typedef CUexecAffinityParam_v1 CUexecAffinityParam; 
# 1866 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
typedef 
# 1850 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
enum CUlibraryOption_enum { 
# 1852
CU_LIBRARY_HOST_UNIVERSAL_FUNCTION_AND_DATA_TABLE, 
# 1863 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_LIBRARY_BINARY_IS_PRESERVED, 
# 1865
CU_LIBRARY_NUM_OPTIONS
# 1866
} CUlibraryOption; 
# 1874
typedef 
# 1868
struct CUlibraryHostUniversalFunctionAndDataTable_st { 
# 1870
void *functionTable; 
# 1871
size_t functionWindowSize; 
# 1872
void *dataTable; 
# 1873
size_t dataWindowSize; 
# 1874
} CUlibraryHostUniversalFunctionAndDataTable; 
# 2486 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
typedef 
# 1879 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
enum cudaError_enum { 
# 1885
CUDA_SUCCESS, 
# 1891
CUDA_ERROR_INVALID_VALUE, 
# 1897
CUDA_ERROR_OUT_OF_MEMORY, 
# 1903
CUDA_ERROR_NOT_INITIALIZED, 
# 1908
CUDA_ERROR_DEINITIALIZED, 
# 1915
CUDA_ERROR_PROFILER_DISABLED, 
# 1923
CUDA_ERROR_PROFILER_NOT_INITIALIZED, 
# 1930
CUDA_ERROR_PROFILER_ALREADY_STARTED, 
# 1937
CUDA_ERROR_PROFILER_ALREADY_STOPPED, 
# 1944
CUDA_ERROR_STUB_LIBRARY = 34, 
# 1951
CUDA_ERROR_DEVICE_UNAVAILABLE = 46, 
# 1957
CUDA_ERROR_NO_DEVICE = 100, 
# 1964
CUDA_ERROR_INVALID_DEVICE, 
# 1969
CUDA_ERROR_DEVICE_NOT_LICENSED, 
# 1975
CUDA_ERROR_INVALID_IMAGE = 200, 
# 1985 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUDA_ERROR_INVALID_CONTEXT, 
# 1994 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUDA_ERROR_CONTEXT_ALREADY_CURRENT, 
# 1999
CUDA_ERROR_MAP_FAILED = 205, 
# 2004
CUDA_ERROR_UNMAP_FAILED, 
# 2010
CUDA_ERROR_ARRAY_IS_MAPPED, 
# 2015
CUDA_ERROR_ALREADY_MAPPED, 
# 2023
CUDA_ERROR_NO_BINARY_FOR_GPU, 
# 2028
CUDA_ERROR_ALREADY_ACQUIRED, 
# 2033
CUDA_ERROR_NOT_MAPPED, 
# 2039
CUDA_ERROR_NOT_MAPPED_AS_ARRAY, 
# 2045
CUDA_ERROR_NOT_MAPPED_AS_POINTER, 
# 2051
CUDA_ERROR_ECC_UNCORRECTABLE, 
# 2057
CUDA_ERROR_UNSUPPORTED_LIMIT, 
# 2064
CUDA_ERROR_CONTEXT_ALREADY_IN_USE, 
# 2070
CUDA_ERROR_PEER_ACCESS_UNSUPPORTED, 
# 2075
CUDA_ERROR_INVALID_PTX, 
# 2080
CUDA_ERROR_INVALID_GRAPHICS_CONTEXT, 
# 2086
CUDA_ERROR_NVLINK_UNCORRECTABLE, 
# 2091
CUDA_ERROR_JIT_COMPILER_NOT_FOUND, 
# 2097
CUDA_ERROR_UNSUPPORTED_PTX_VERSION, 
# 2102
CUDA_ERROR_JIT_COMPILATION_DISABLED, 
# 2108
CUDA_ERROR_UNSUPPORTED_EXEC_AFFINITY, 
# 2114
CUDA_ERROR_UNSUPPORTED_DEVSIDE_SYNC, 
# 2120
CUDA_ERROR_INVALID_SOURCE = 300, 
# 2125
CUDA_ERROR_FILE_NOT_FOUND, 
# 2130
CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND, 
# 2135
CUDA_ERROR_SHARED_OBJECT_INIT_FAILED, 
# 2140
CUDA_ERROR_OPERATING_SYSTEM, 
# 2146
CUDA_ERROR_INVALID_HANDLE = 400, 
# 2152
CUDA_ERROR_ILLEGAL_STATE, 
# 2159
CUDA_ERROR_NOT_FOUND = 500, 
# 2167
CUDA_ERROR_NOT_READY = 600, 
# 2176 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUDA_ERROR_ILLEGAL_ADDRESS = 700, 
# 2187 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES, 
# 2197 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUDA_ERROR_LAUNCH_TIMEOUT, 
# 2203
CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING, 
# 2210
CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED, 
# 2217
CUDA_ERROR_PEER_ACCESS_NOT_ENABLED, 
# 2223
CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE = 708, 
# 2230
CUDA_ERROR_CONTEXT_IS_DESTROYED, 
# 2238
CUDA_ERROR_ASSERT, 
# 2245
CUDA_ERROR_TOO_MANY_PEERS, 
# 2251
CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED, 
# 2257
CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED, 
# 2266 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUDA_ERROR_HARDWARE_STACK_ERROR, 
# 2274
CUDA_ERROR_ILLEGAL_INSTRUCTION, 
# 2283 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUDA_ERROR_MISALIGNED_ADDRESS, 
# 2294 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUDA_ERROR_INVALID_ADDRESS_SPACE, 
# 2302
CUDA_ERROR_INVALID_PC, 
# 2313 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUDA_ERROR_LAUNCH_FAILED, 
# 2322 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUDA_ERROR_COOPERATIVE_LAUNCH_TOO_LARGE, 
# 2327
CUDA_ERROR_NOT_PERMITTED = 800, 
# 2333
CUDA_ERROR_NOT_SUPPORTED, 
# 2342 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUDA_ERROR_SYSTEM_NOT_READY, 
# 2349
CUDA_ERROR_SYSTEM_DRIVER_MISMATCH, 
# 2358 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUDA_ERROR_COMPAT_NOT_SUPPORTED_ON_DEVICE, 
# 2363
CUDA_ERROR_MPS_CONNECTION_FAILED, 
# 2368
CUDA_ERROR_MPS_RPC_FAILURE, 
# 2374
CUDA_ERROR_MPS_SERVER_NOT_READY, 
# 2379
CUDA_ERROR_MPS_MAX_CLIENTS_REACHED, 
# 2384
CUDA_ERROR_MPS_MAX_CONNECTIONS_REACHED, 
# 2389
CUDA_ERROR_MPS_CLIENT_TERMINATED, 
# 2394
CUDA_ERROR_CDP_NOT_SUPPORTED, 
# 2399
CUDA_ERROR_CDP_VERSION_MISMATCH, 
# 2405
CUDA_ERROR_STREAM_CAPTURE_UNSUPPORTED = 900, 
# 2411
CUDA_ERROR_STREAM_CAPTURE_INVALIDATED, 
# 2417
CUDA_ERROR_STREAM_CAPTURE_MERGE, 
# 2422
CUDA_ERROR_STREAM_CAPTURE_UNMATCHED, 
# 2428
CUDA_ERROR_STREAM_CAPTURE_UNJOINED, 
# 2435
CUDA_ERROR_STREAM_CAPTURE_ISOLATION, 
# 2441
CUDA_ERROR_STREAM_CAPTURE_IMPLICIT, 
# 2447
CUDA_ERROR_CAPTURED_EVENT, 
# 2454
CUDA_ERROR_STREAM_CAPTURE_WRONG_THREAD, 
# 2459
CUDA_ERROR_TIMEOUT, 
# 2465
CUDA_ERROR_GRAPH_EXEC_UPDATE_FAILURE, 
# 2475 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUDA_ERROR_EXTERNAL_DEVICE, 
# 2480
CUDA_ERROR_INVALID_CLUSTER_SIZE, 
# 2485
CUDA_ERROR_UNKNOWN = 999
# 2486
} CUresult; 
# 2497
typedef 
# 2491
enum CUdevice_P2PAttribute_enum { 
# 2492
CU_DEVICE_P2P_ATTRIBUTE_PERFORMANCE_RANK = 1, 
# 2493
CU_DEVICE_P2P_ATTRIBUTE_ACCESS_SUPPORTED, 
# 2494
CU_DEVICE_P2P_ATTRIBUTE_NATIVE_ATOMIC_SUPPORTED, 
# 2495
CU_DEVICE_P2P_ATTRIBUTE_ACCESS_ACCESS_SUPPORTED, 
# 2496
CU_DEVICE_P2P_ATTRIBUTE_CUDA_ARRAY_ACCESS_SUPPORTED = 4
# 2497
} CUdevice_P2PAttribute; 
# 2505
typedef void (*CUstreamCallback)(CUstream hStream, CUresult status, void * userData); 
# 2513
typedef size_t (*CUoccupancyB2DSize)(int blockSize); 
# 2599 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
typedef 
# 2578
struct CUDA_MEMCPY2D_st { 
# 2579
size_t srcXInBytes; 
# 2580
size_t srcY; 
# 2582
CUmemorytype srcMemoryType; 
# 2583
const void *srcHost; 
# 2584
CUdeviceptr srcDevice; 
# 2585
CUarray srcArray; 
# 2586
size_t srcPitch; 
# 2588
size_t dstXInBytes; 
# 2589
size_t dstY; 
# 2591
CUmemorytype dstMemoryType; 
# 2592
void *dstHost; 
# 2593
CUdeviceptr dstDevice; 
# 2594
CUarray dstArray; 
# 2595
size_t dstPitch; 
# 2597
size_t WidthInBytes; 
# 2598
size_t Height; 
# 2599
} CUDA_MEMCPY2D_v2; 
# 2600
typedef CUDA_MEMCPY2D_v2 CUDA_MEMCPY2D; 
# 2633
typedef 
# 2605
struct CUDA_MEMCPY3D_st { 
# 2606
size_t srcXInBytes; 
# 2607
size_t srcY; 
# 2608
size_t srcZ; 
# 2609
size_t srcLOD; 
# 2610
CUmemorytype srcMemoryType; 
# 2611
const void *srcHost; 
# 2612
CUdeviceptr srcDevice; 
# 2613
CUarray srcArray; 
# 2614
void *reserved0; 
# 2615
size_t srcPitch; 
# 2616
size_t srcHeight; 
# 2618
size_t dstXInBytes; 
# 2619
size_t dstY; 
# 2620
size_t dstZ; 
# 2621
size_t dstLOD; 
# 2622
CUmemorytype dstMemoryType; 
# 2623
void *dstHost; 
# 2624
CUdeviceptr dstDevice; 
# 2625
CUarray dstArray; 
# 2626
void *reserved1; 
# 2627
size_t dstPitch; 
# 2628
size_t dstHeight; 
# 2630
size_t WidthInBytes; 
# 2631
size_t Height; 
# 2632
size_t Depth; 
# 2633
} CUDA_MEMCPY3D_v2; 
# 2634
typedef CUDA_MEMCPY3D_v2 CUDA_MEMCPY3D; 
# 2667
typedef 
# 2639
struct CUDA_MEMCPY3D_PEER_st { 
# 2640
size_t srcXInBytes; 
# 2641
size_t srcY; 
# 2642
size_t srcZ; 
# 2643
size_t srcLOD; 
# 2644
CUmemorytype srcMemoryType; 
# 2645
const void *srcHost; 
# 2646
CUdeviceptr srcDevice; 
# 2647
CUarray srcArray; 
# 2648
CUcontext srcContext; 
# 2649
size_t srcPitch; 
# 2650
size_t srcHeight; 
# 2652
size_t dstXInBytes; 
# 2653
size_t dstY; 
# 2654
size_t dstZ; 
# 2655
size_t dstLOD; 
# 2656
CUmemorytype dstMemoryType; 
# 2657
void *dstHost; 
# 2658
CUdeviceptr dstDevice; 
# 2659
CUarray dstArray; 
# 2660
CUcontext dstContext; 
# 2661
size_t dstPitch; 
# 2662
size_t dstHeight; 
# 2664
size_t WidthInBytes; 
# 2665
size_t Height; 
# 2666
size_t Depth; 
# 2667
} CUDA_MEMCPY3D_PEER_v1; 
# 2668
typedef CUDA_MEMCPY3D_PEER_v1 CUDA_MEMCPY3D_PEER; 
# 2680
typedef 
# 2673
struct CUDA_ARRAY_DESCRIPTOR_st { 
# 2675
size_t Width; 
# 2676
size_t Height; 
# 2678
CUarray_format Format; 
# 2679
unsigned NumChannels; 
# 2680
} CUDA_ARRAY_DESCRIPTOR_v2; 
# 2681
typedef CUDA_ARRAY_DESCRIPTOR_v2 CUDA_ARRAY_DESCRIPTOR; 
# 2695
typedef 
# 2686
struct CUDA_ARRAY3D_DESCRIPTOR_st { 
# 2688
size_t Width; 
# 2689
size_t Height; 
# 2690
size_t Depth; 
# 2692
CUarray_format Format; 
# 2693
unsigned NumChannels; 
# 2694
unsigned Flags; 
# 2695
} CUDA_ARRAY3D_DESCRIPTOR_v2; 
# 2696
typedef CUDA_ARRAY3D_DESCRIPTOR_v2 CUDA_ARRAY3D_DESCRIPTOR; 
# 2726 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
typedef 
# 2706
struct CUDA_ARRAY_SPARSE_PROPERTIES_st { 
# 2707
struct { 
# 2708
unsigned width; 
# 2709
unsigned height; 
# 2710
unsigned depth; 
# 2711
} tileExtent; 
# 2716
unsigned miptailFirstLevel; 
# 2720
unsigned long long miptailSize; 
# 2724
unsigned flags; 
# 2725
unsigned reserved[4]; 
# 2726
} CUDA_ARRAY_SPARSE_PROPERTIES_v1; 
# 2727
typedef CUDA_ARRAY_SPARSE_PROPERTIES_v1 CUDA_ARRAY_SPARSE_PROPERTIES; 
# 2736
typedef 
# 2732
struct CUDA_ARRAY_MEMORY_REQUIREMENTS_st { 
# 2733
size_t size; 
# 2734
size_t alignment; 
# 2735
unsigned reserved[4]; 
# 2736
} CUDA_ARRAY_MEMORY_REQUIREMENTS_v1; 
# 2737
typedef CUDA_ARRAY_MEMORY_REQUIREMENTS_v1 CUDA_ARRAY_MEMORY_REQUIREMENTS; 
# 2773
typedef 
# 2742
struct CUDA_RESOURCE_DESC_st { 
# 2744
CUresourcetype resType; 
# 2746
union { 
# 2747
struct { 
# 2748
CUarray hArray; 
# 2749
} array; 
# 2750
struct { 
# 2751
CUmipmappedArray hMipmappedArray; 
# 2752
} mipmap; 
# 2753
struct { 
# 2754
CUdeviceptr devPtr; 
# 2755
CUarray_format format; 
# 2756
unsigned numChannels; 
# 2757
size_t sizeInBytes; 
# 2758
} linear; 
# 2759
struct { 
# 2760
CUdeviceptr devPtr; 
# 2761
CUarray_format format; 
# 2762
unsigned numChannels; 
# 2763
size_t width; 
# 2764
size_t height; 
# 2765
size_t pitchInBytes; 
# 2766
} pitch2D; 
# 2767
struct { 
# 2768
int reserved[32]; 
# 2769
} reserved; 
# 2770
} res; 
# 2772
unsigned flags; 
# 2773
} CUDA_RESOURCE_DESC_v1; 
# 2774
typedef CUDA_RESOURCE_DESC_v1 CUDA_RESOURCE_DESC; 
# 2790
typedef 
# 2779
struct CUDA_TEXTURE_DESC_st { 
# 2780
CUaddress_mode addressMode[3]; 
# 2781
CUfilter_mode filterMode; 
# 2782
unsigned flags; 
# 2783
unsigned maxAnisotropy; 
# 2784
CUfilter_mode mipmapFilterMode; 
# 2785
float mipmapLevelBias; 
# 2786
float minMipmapLevelClamp; 
# 2787
float maxMipmapLevelClamp; 
# 2788
float borderColor[4]; 
# 2789
int reserved[12]; 
# 2790
} CUDA_TEXTURE_DESC_v1; 
# 2791
typedef CUDA_TEXTURE_DESC_v1 CUDA_TEXTURE_DESC; 
# 2833
typedef 
# 2796
enum CUresourceViewFormat_enum { 
# 2798
CU_RES_VIEW_FORMAT_NONE, 
# 2799
CU_RES_VIEW_FORMAT_UINT_1X8, 
# 2800
CU_RES_VIEW_FORMAT_UINT_2X8, 
# 2801
CU_RES_VIEW_FORMAT_UINT_4X8, 
# 2802
CU_RES_VIEW_FORMAT_SINT_1X8, 
# 2803
CU_RES_VIEW_FORMAT_SINT_2X8, 
# 2804
CU_RES_VIEW_FORMAT_SINT_4X8, 
# 2805
CU_RES_VIEW_FORMAT_UINT_1X16, 
# 2806
CU_RES_VIEW_FORMAT_UINT_2X16, 
# 2807
CU_RES_VIEW_FORMAT_UINT_4X16, 
# 2808
CU_RES_VIEW_FORMAT_SINT_1X16, 
# 2809
CU_RES_VIEW_FORMAT_SINT_2X16, 
# 2810
CU_RES_VIEW_FORMAT_SINT_4X16, 
# 2811
CU_RES_VIEW_FORMAT_UINT_1X32, 
# 2812
CU_RES_VIEW_FORMAT_UINT_2X32, 
# 2813
CU_RES_VIEW_FORMAT_UINT_4X32, 
# 2814
CU_RES_VIEW_FORMAT_SINT_1X32, 
# 2815
CU_RES_VIEW_FORMAT_SINT_2X32, 
# 2816
CU_RES_VIEW_FORMAT_SINT_4X32, 
# 2817
CU_RES_VIEW_FORMAT_FLOAT_1X16, 
# 2818
CU_RES_VIEW_FORMAT_FLOAT_2X16, 
# 2819
CU_RES_VIEW_FORMAT_FLOAT_4X16, 
# 2820
CU_RES_VIEW_FORMAT_FLOAT_1X32, 
# 2821
CU_RES_VIEW_FORMAT_FLOAT_2X32, 
# 2822
CU_RES_VIEW_FORMAT_FLOAT_4X32, 
# 2823
CU_RES_VIEW_FORMAT_UNSIGNED_BC1, 
# 2824
CU_RES_VIEW_FORMAT_UNSIGNED_BC2, 
# 2825
CU_RES_VIEW_FORMAT_UNSIGNED_BC3, 
# 2826
CU_RES_VIEW_FORMAT_UNSIGNED_BC4, 
# 2827
CU_RES_VIEW_FORMAT_SIGNED_BC4, 
# 2828
CU_RES_VIEW_FORMAT_UNSIGNED_BC5, 
# 2829
CU_RES_VIEW_FORMAT_SIGNED_BC5, 
# 2830
CU_RES_VIEW_FORMAT_UNSIGNED_BC6H, 
# 2831
CU_RES_VIEW_FORMAT_SIGNED_BC6H, 
# 2832
CU_RES_VIEW_FORMAT_UNSIGNED_BC7
# 2833
} CUresourceViewFormat; 
# 2849
typedef 
# 2838
struct CUDA_RESOURCE_VIEW_DESC_st { 
# 2840
CUresourceViewFormat format; 
# 2841
size_t width; 
# 2842
size_t height; 
# 2843
size_t depth; 
# 2844
unsigned firstMipmapLevel; 
# 2845
unsigned lastMipmapLevel; 
# 2846
unsigned firstLayer; 
# 2847
unsigned lastLayer; 
# 2848
unsigned reserved[16]; 
# 2849
} CUDA_RESOURCE_VIEW_DESC_v1; 
# 2850
typedef CUDA_RESOURCE_VIEW_DESC_v1 CUDA_RESOURCE_VIEW_DESC; 
# 2867 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
typedef 
# 2860
struct CUtensorMap_st { 
# 2862
alignas(64) cuuint64_t 
# 2866
opaque[16]; 
# 2867
} CUtensorMap; 
# 2886
typedef 
# 2872
enum CUtensorMapDataType_enum { 
# 2873
CU_TENSOR_MAP_DATA_TYPE_UINT8, 
# 2874
CU_TENSOR_MAP_DATA_TYPE_UINT16, 
# 2875
CU_TENSOR_MAP_DATA_TYPE_UINT32, 
# 2876
CU_TENSOR_MAP_DATA_TYPE_INT32, 
# 2877
CU_TENSOR_MAP_DATA_TYPE_UINT64, 
# 2878
CU_TENSOR_MAP_DATA_TYPE_INT64, 
# 2879
CU_TENSOR_MAP_DATA_TYPE_FLOAT16, 
# 2880
CU_TENSOR_MAP_DATA_TYPE_FLOAT32, 
# 2881
CU_TENSOR_MAP_DATA_TYPE_FLOAT64, 
# 2882
CU_TENSOR_MAP_DATA_TYPE_BFLOAT16, 
# 2883
CU_TENSOR_MAP_DATA_TYPE_FLOAT32_FTZ, 
# 2884
CU_TENSOR_MAP_DATA_TYPE_TFLOAT32, 
# 2885
CU_TENSOR_MAP_DATA_TYPE_TFLOAT32_FTZ
# 2886
} CUtensorMapDataType; 
# 2895
typedef 
# 2891
enum CUtensorMapInterleave_enum { 
# 2892
CU_TENSOR_MAP_INTERLEAVE_NONE, 
# 2893
CU_TENSOR_MAP_INTERLEAVE_16B, 
# 2894
CU_TENSOR_MAP_INTERLEAVE_32B
# 2895
} CUtensorMapInterleave; 
# 2905
typedef 
# 2900
enum CUtensorMapSwizzle_enum { 
# 2901
CU_TENSOR_MAP_SWIZZLE_NONE, 
# 2902
CU_TENSOR_MAP_SWIZZLE_32B, 
# 2903
CU_TENSOR_MAP_SWIZZLE_64B, 
# 2904
CU_TENSOR_MAP_SWIZZLE_128B
# 2905
} CUtensorMapSwizzle; 
# 2915
typedef 
# 2910
enum CUtensorMapL2promotion_enum { 
# 2911
CU_TENSOR_MAP_L2_PROMOTION_NONE, 
# 2912
CU_TENSOR_MAP_L2_PROMOTION_L2_64B, 
# 2913
CU_TENSOR_MAP_L2_PROMOTION_L2_128B, 
# 2914
CU_TENSOR_MAP_L2_PROMOTION_L2_256B
# 2915
} CUtensorMapL2promotion; 
# 2923
typedef 
# 2920
enum CUtensorMapFloatOOBfill_enum { 
# 2921
CU_TENSOR_MAP_FLOAT_OOB_FILL_NONE, 
# 2922
CU_TENSOR_MAP_FLOAT_OOB_FILL_NAN_REQUEST_ZERO_FMA
# 2923
} CUtensorMapFloatOOBfill; 
# 2931
typedef 
# 2928
struct CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st { 
# 2929
unsigned long long p2pToken; 
# 2930
unsigned vaSpaceToken; 
# 2931
} CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1; 
# 2932
typedef CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_v1 CUDA_POINTER_ATTRIBUTE_P2P_TOKENS; 
# 2942
typedef 
# 2938
enum CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS_enum { 
# 2939
CU_POINTER_ATTRIBUTE_ACCESS_FLAG_NONE, 
# 2940
CU_POINTER_ATTRIBUTE_ACCESS_FLAG_READ, 
# 2941
CU_POINTER_ATTRIBUTE_ACCESS_FLAG_READWRITE = 3
# 2942
} CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS; 
# 2958
typedef 
# 2947
struct CUDA_LAUNCH_PARAMS_st { 
# 2948
CUfunction function; 
# 2949
unsigned gridDimX; 
# 2950
unsigned gridDimY; 
# 2951
unsigned gridDimZ; 
# 2952
unsigned blockDimX; 
# 2953
unsigned blockDimY; 
# 2954
unsigned blockDimZ; 
# 2955
unsigned sharedMemBytes; 
# 2956
CUstream hStream; 
# 2957
void **kernelParams; 
# 2958
} CUDA_LAUNCH_PARAMS_v1; 
# 2959
typedef CUDA_LAUNCH_PARAMS_v1 CUDA_LAUNCH_PARAMS; 
# 2997
typedef 
# 2964
enum CUexternalMemoryHandleType_enum { 
# 2968
CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD = 1, 
# 2972
CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32, 
# 2976
CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT, 
# 2980
CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP, 
# 2984
CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE, 
# 2988
CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE, 
# 2992
CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE_KMT, 
# 2996
CU_EXTERNAL_MEMORY_HANDLE_TYPE_NVSCIBUF
# 2997
} CUexternalMemoryHandleType; 
# 3091 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
typedef 
# 3038 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
struct CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st { 
# 3042
CUexternalMemoryHandleType type; 
# 3043
union { 
# 3049
int fd; 
# 3065 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
struct { 
# 3069
void *handle; 
# 3074
const void *name; 
# 3075
} win32; 
# 3080
const void *nvSciBufObject; 
# 3081
} handle; 
# 3085
unsigned long long size; 
# 3089
unsigned flags; 
# 3090
unsigned reserved[16]; 
# 3091
} CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1; 
# 3092
typedef CUDA_EXTERNAL_MEMORY_HANDLE_DESC_v1 CUDA_EXTERNAL_MEMORY_HANDLE_DESC; 
# 3111
typedef 
# 3097
struct CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st { 
# 3101
unsigned long long offset; 
# 3105
unsigned long long size; 
# 3109
unsigned flags; 
# 3110
unsigned reserved[16]; 
# 3111
} CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1; 
# 3112
typedef CUDA_EXTERNAL_MEMORY_BUFFER_DESC_v1 CUDA_EXTERNAL_MEMORY_BUFFER_DESC; 
# 3132
typedef 
# 3117
struct CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st { 
# 3122
unsigned long long offset; 
# 3126
CUDA_ARRAY3D_DESCRIPTOR arrayDesc; 
# 3130
unsigned numLevels; 
# 3131
unsigned reserved[16]; 
# 3132
} CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1; 
# 3133
typedef CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_v1 CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC; 
# 3179
typedef 
# 3138
enum CUexternalSemaphoreHandleType_enum { 
# 3142
CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD = 1, 
# 3146
CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32, 
# 3150
CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT, 
# 3154
CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE, 
# 3158
CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE, 
# 3162
CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_NVSCISYNC, 
# 3166
CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_KEYED_MUTEX, 
# 3170
CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_KEYED_MUTEX_KMT, 
# 3174
CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_FD, 
# 3178
CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_WIN32
# 3179
} CUexternalSemaphoreHandleType; 
# 3233 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
typedef 
# 3184 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
struct CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st { 
# 3188
CUexternalSemaphoreHandleType type; 
# 3189
union { 
# 3196
int fd; 
# 3212 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
struct { 
# 3216
void *handle; 
# 3221
const void *name; 
# 3222
} win32; 
# 3226
const void *nvSciSyncObj; 
# 3227
} handle; 
# 3231
unsigned flags; 
# 3232
unsigned reserved[16]; 
# 3233
} CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1; 
# 3234
typedef CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_v1 CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC; 
# 3281 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
typedef 
# 3239 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
struct CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st { 
# 3240
struct { 
# 3244
struct { 
# 3248
unsigned long long value; 
# 3249
} fence; 
# 3250
union { 
# 3255
void *fence; 
# 3256
unsigned long long reserved; 
# 3257
} nvSciSync; 
# 3261
struct { 
# 3265
unsigned long long key; 
# 3266
} keyedMutex; 
# 3267
unsigned reserved[12]; 
# 3268
} params; 
# 3279 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
unsigned flags; 
# 3280
unsigned reserved[16]; 
# 3281
} CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1; 
# 3282
typedef CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_v1 CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS; 
# 3332 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
typedef 
# 3287 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
struct CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st { 
# 3288
struct { 
# 3292
struct { 
# 3296
unsigned long long value; 
# 3297
} fence; 
# 3302
union { 
# 3303
void *fence; 
# 3304
unsigned long long reserved; 
# 3305
} nvSciSync; 
# 3309
struct { 
# 3313
unsigned long long key; 
# 3317
unsigned timeoutMs; 
# 3318
} keyedMutex; 
# 3319
unsigned reserved[10]; 
# 3320
} params; 
# 3330 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
unsigned flags; 
# 3331
unsigned reserved[16]; 
# 3332
} CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1; 
# 3333
typedef CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_v1 CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS; 
# 3342
typedef 
# 3338
struct CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st { 
# 3339
CUexternalSemaphore *extSemArray; 
# 3340
const CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS *paramsArray; 
# 3341
unsigned numExtSems; 
# 3342
} CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1; 
# 3343
typedef CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_v1 CUDA_EXT_SEM_SIGNAL_NODE_PARAMS; 
# 3352
typedef 
# 3348
struct CUDA_EXT_SEM_WAIT_NODE_PARAMS_st { 
# 3349
CUexternalSemaphore *extSemArray; 
# 3350
const CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS *paramsArray; 
# 3351
unsigned numExtSems; 
# 3352
} CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1; 
# 3353
typedef CUDA_EXT_SEM_WAIT_NODE_PARAMS_v1 CUDA_EXT_SEM_WAIT_NODE_PARAMS; 
# 3355
typedef unsigned long long CUmemGenericAllocationHandle_v1; 
# 3356
typedef CUmemGenericAllocationHandle_v1 CUmemGenericAllocationHandle; 
# 3367
typedef 
# 3361
enum CUmemAllocationHandleType_enum { 
# 3362
CU_MEM_HANDLE_TYPE_NONE, 
# 3363
CU_MEM_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR, 
# 3364
CU_MEM_HANDLE_TYPE_WIN32, 
# 3365
CU_MEM_HANDLE_TYPE_WIN32_KMT = 4, 
# 3366
CU_MEM_HANDLE_TYPE_MAX = 2147483647
# 3367
} CUmemAllocationHandleType; 
# 3377
typedef 
# 3372
enum CUmemAccess_flags_enum { 
# 3373
CU_MEM_ACCESS_FLAGS_PROT_NONE, 
# 3374
CU_MEM_ACCESS_FLAGS_PROT_READ, 
# 3375
CU_MEM_ACCESS_FLAGS_PROT_READWRITE = 3, 
# 3376
CU_MEM_ACCESS_FLAGS_PROT_MAX = 2147483647
# 3377
} CUmemAccess_flags; 
# 3386
typedef 
# 3382
enum CUmemLocationType_enum { 
# 3383
CU_MEM_LOCATION_TYPE_INVALID, 
# 3384
CU_MEM_LOCATION_TYPE_DEVICE, 
# 3385
CU_MEM_LOCATION_TYPE_MAX = 2147483647
# 3386
} CUmemLocationType; 
# 3399
typedef 
# 3391
enum CUmemAllocationType_enum { 
# 3392
CU_MEM_ALLOCATION_TYPE_INVALID, 
# 3397
CU_MEM_ALLOCATION_TYPE_PINNED, 
# 3398
CU_MEM_ALLOCATION_TYPE_MAX = 2147483647
# 3399
} CUmemAllocationType; 
# 3407
typedef 
# 3404
enum CUmemAllocationGranularity_flags_enum { 
# 3405
CU_MEM_ALLOC_GRANULARITY_MINIMUM, 
# 3406
CU_MEM_ALLOC_GRANULARITY_RECOMMENDED
# 3407
} CUmemAllocationGranularity_flags; 
# 3416
typedef 
# 3412
enum CUmemRangeHandleType_enum { 
# 3414
CU_MEM_RANGE_HANDLE_TYPE_DMA_BUF_FD = 1, 
# 3415
CU_MEM_RANGE_HANDLE_TYPE_MAX = 2147483647
# 3416
} CUmemRangeHandleType; 
# 3424
typedef 
# 3421
enum CUarraySparseSubresourceType_enum { 
# 3422
CU_ARRAY_SPARSE_SUBRESOURCE_TYPE_SPARSE_LEVEL, 
# 3423
CU_ARRAY_SPARSE_SUBRESOURCE_TYPE_MIPTAIL
# 3424
} CUarraySparseSubresourceType; 
# 3432
typedef 
# 3429
enum CUmemOperationType_enum { 
# 3430
CU_MEM_OPERATION_TYPE_MAP = 1, 
# 3431
CU_MEM_OPERATION_TYPE_UNMAP
# 3432
} CUmemOperationType; 
# 3439
typedef 
# 3437
enum CUmemHandleType_enum { 
# 3438
CU_MEM_HANDLE_TYPE_GENERIC
# 3439
} CUmemHandleType; 
# 3483
typedef 
# 3444
struct CUarrayMapInfo_st { 
# 3445
CUresourcetype resourceType; 
# 3447
union { 
# 3448
CUmipmappedArray mipmap; 
# 3449
CUarray array; 
# 3450
} resource; 
# 3452
CUarraySparseSubresourceType subresourceType; 
# 3454
union { 
# 3455
struct { 
# 3456
unsigned level; 
# 3457
unsigned layer; 
# 3458
unsigned offsetX; 
# 3459
unsigned offsetY; 
# 3460
unsigned offsetZ; 
# 3461
unsigned extentWidth; 
# 3462
unsigned extentHeight; 
# 3463
unsigned extentDepth; 
# 3464
} sparseLevel; 
# 3465
struct { 
# 3466
unsigned layer; 
# 3467
unsigned long long offset; 
# 3468
unsigned long long size; 
# 3469
} miptail; 
# 3470
} subresource; 
# 3472
CUmemOperationType memOperationType; 
# 3473
CUmemHandleType memHandleType; 
# 3475
union { 
# 3476
CUmemGenericAllocationHandle memHandle; 
# 3477
} memHandle; 
# 3479
unsigned long long offset; 
# 3480
unsigned deviceBitMask; 
# 3481
unsigned flags; 
# 3482
unsigned reserved[2]; 
# 3483
} CUarrayMapInfo_v1; 
# 3484
typedef CUarrayMapInfo_v1 CUarrayMapInfo; 
# 3492
typedef 
# 3489
struct CUmemLocation_st { 
# 3490
CUmemLocationType type; 
# 3491
int id; 
# 3492
} CUmemLocation_v1; 
# 3493
typedef CUmemLocation_v1 CUmemLocation; 
# 3501
typedef 
# 3498
enum CUmemAllocationCompType_enum { 
# 3499
CU_MEM_ALLOCATION_COMP_NONE, 
# 3500
CU_MEM_ALLOCATION_COMP_GENERIC
# 3501
} CUmemAllocationCompType; 
# 3543 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
typedef 
# 3511 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
struct CUmemAllocationProp_st { 
# 3513
CUmemAllocationType type; 
# 3515
CUmemAllocationHandleType requestedHandleTypes; 
# 3517
CUmemLocation location; 
# 3525
void *win32HandleMetaData; 
# 3526
struct { 
# 3537 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
unsigned char compressionType; 
# 3538
unsigned char gpuDirectRDMACapable; 
# 3540
unsigned short usage; 
# 3541
unsigned char reserved[4]; 
# 3542
} allocFlags; 
# 3543
} CUmemAllocationProp_v1; 
# 3544
typedef CUmemAllocationProp_v1 CUmemAllocationProp; 
# 3552
typedef 
# 3549
enum CUmulticastGranularity_flags_enum { 
# 3550
CU_MULTICAST_GRANULARITY_MINIMUM, 
# 3551
CU_MULTICAST_GRANULARITY_RECOMMENDED
# 3552
} CUmulticastGranularity_flags; 
# 3577
typedef 
# 3557
struct CUmulticastObjectProp_st { 
# 3562
unsigned numDevices; 
# 3567
size_t size; 
# 3572
unsigned long long handleTypes; 
# 3576
unsigned long long flags; 
# 3577
} CUmulticastObjectProp_v1; 
# 3578
typedef CUmulticastObjectProp_v1 CUmulticastObjectProp; 
# 3586
typedef 
# 3583
struct CUmemAccessDesc_st { 
# 3584
CUmemLocation location; 
# 3585
CUmemAccess_flags flags; 
# 3586
} CUmemAccessDesc_v1; 
# 3587
typedef CUmemAccessDesc_v1 CUmemAccessDesc; 
# 3602
typedef 
# 3592
enum CUgraphExecUpdateResult_enum { 
# 3593
CU_GRAPH_EXEC_UPDATE_SUCCESS, 
# 3594
CU_GRAPH_EXEC_UPDATE_ERROR, 
# 3595
CU_GRAPH_EXEC_UPDATE_ERROR_TOPOLOGY_CHANGED, 
# 3596
CU_GRAPH_EXEC_UPDATE_ERROR_NODE_TYPE_CHANGED, 
# 3597
CU_GRAPH_EXEC_UPDATE_ERROR_FUNCTION_CHANGED, 
# 3598
CU_GRAPH_EXEC_UPDATE_ERROR_PARAMETERS_CHANGED, 
# 3599
CU_GRAPH_EXEC_UPDATE_ERROR_NOT_SUPPORTED, 
# 3600
CU_GRAPH_EXEC_UPDATE_ERROR_UNSUPPORTED_FUNCTION_CHANGE, 
# 3601
CU_GRAPH_EXEC_UPDATE_ERROR_ATTRIBUTES_CHANGED
# 3602
} CUgraphExecUpdateResult; 
# 3624
typedef 
# 3607
struct CUgraphExecUpdateResultInfo_st { 
# 3611
CUgraphExecUpdateResult result; 
# 3618
CUgraphNode errorNode; 
# 3623
CUgraphNode errorFromNode; 
# 3624
} CUgraphExecUpdateResultInfo_v1; 
# 3625
typedef CUgraphExecUpdateResultInfo_v1 CUgraphExecUpdateResultInfo; 
# 3691 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
typedef 
# 3630 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
enum CUmemPool_attribute_enum { 
# 3639 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_MEMPOOL_ATTR_REUSE_FOLLOW_EVENT_DEPENDENCIES = 1, 
# 3646
CU_MEMPOOL_ATTR_REUSE_ALLOW_OPPORTUNISTIC, 
# 3654
CU_MEMPOOL_ATTR_REUSE_ALLOW_INTERNAL_DEPENDENCIES, 
# 3664 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CU_MEMPOOL_ATTR_RELEASE_THRESHOLD, 
# 3670
CU_MEMPOOL_ATTR_RESERVED_MEM_CURRENT, 
# 3677
CU_MEMPOOL_ATTR_RESERVED_MEM_HIGH, 
# 3683
CU_MEMPOOL_ATTR_USED_MEM_CURRENT, 
# 3690
CU_MEMPOOL_ATTR_USED_MEM_HIGH
# 3691
} CUmemPool_attribute; 
# 3708
typedef 
# 3696
struct CUmemPoolProps_st { 
# 3697
CUmemAllocationType allocType; 
# 3698
CUmemAllocationHandleType handleTypes; 
# 3699
CUmemLocation location; 
# 3706
void *win32SecurityAttributes; 
# 3707
unsigned char reserved[64]; 
# 3708
} CUmemPoolProps_v1; 
# 3709
typedef CUmemPoolProps_v1 CUmemPoolProps; 
# 3716
typedef 
# 3714
struct CUmemPoolPtrExportData_st { 
# 3715
unsigned char reserved[64]; 
# 3716
} CUmemPoolPtrExportData_v1; 
# 3717
typedef CUmemPoolPtrExportData_v1 CUmemPoolPtrExportData; 
# 3732
typedef 
# 3722
struct CUDA_MEM_ALLOC_NODE_PARAMS_st { 
# 3727
CUmemPoolProps poolProps; 
# 3728
const CUmemAccessDesc *accessDescs; 
# 3729
size_t accessDescCount; 
# 3730
size_t bytesize; 
# 3731
CUdeviceptr dptr; 
# 3732
} CUDA_MEM_ALLOC_NODE_PARAMS; 
# 3761
typedef 
# 3734
enum CUgraphMem_attribute_enum { 
# 3739
CU_GRAPH_MEM_ATTR_USED_MEM_CURRENT, 
# 3746
CU_GRAPH_MEM_ATTR_USED_MEM_HIGH, 
# 3753
CU_GRAPH_MEM_ATTR_RESERVED_MEM_CURRENT, 
# 3760
CU_GRAPH_MEM_ATTR_RESERVED_MEM_HIGH
# 3761
} CUgraphMem_attribute; 
# 3934 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
typedef 
# 3931
enum CUflushGPUDirectRDMAWritesOptions_enum { 
# 3932
CU_FLUSH_GPU_DIRECT_RDMA_WRITES_OPTION_HOST = (1 << 0), 
# 3933
CU_FLUSH_GPU_DIRECT_RDMA_WRITES_OPTION_MEMOPS
# 3934
} CUflushGPUDirectRDMAWritesOptions; 
# 3943
typedef 
# 3939
enum CUGPUDirectRDMAWritesOrdering_enum { 
# 3940
CU_GPU_DIRECT_RDMA_WRITES_ORDERING_NONE, 
# 3941
CU_GPU_DIRECT_RDMA_WRITES_ORDERING_OWNER = 100, 
# 3942
CU_GPU_DIRECT_RDMA_WRITES_ORDERING_ALL_DEVICES = 200
# 3943
} CUGPUDirectRDMAWritesOrdering; 
# 3951
typedef 
# 3948
enum CUflushGPUDirectRDMAWritesScope_enum { 
# 3949
CU_FLUSH_GPU_DIRECT_RDMA_WRITES_TO_OWNER = 100, 
# 3950
CU_FLUSH_GPU_DIRECT_RDMA_WRITES_TO_ALL_DEVICES = 200
# 3951
} CUflushGPUDirectRDMAWritesScope; 
# 3958
typedef 
# 3956
enum CUflushGPUDirectRDMAWritesTarget_enum { 
# 3957
CU_FLUSH_GPU_DIRECT_RDMA_WRITES_TARGET_CURRENT_CTX
# 3958
} CUflushGPUDirectRDMAWritesTarget; 
# 3979
typedef 
# 3963
enum CUgraphDebugDot_flags_enum { 
# 3964
CU_GRAPH_DEBUG_DOT_FLAGS_VERBOSE = (1 << 0), 
# 3965
CU_GRAPH_DEBUG_DOT_FLAGS_RUNTIME_TYPES, 
# 3966
CU_GRAPH_DEBUG_DOT_FLAGS_KERNEL_NODE_PARAMS = (1 << 2), 
# 3967
CU_GRAPH_DEBUG_DOT_FLAGS_MEMCPY_NODE_PARAMS = (1 << 3), 
# 3968
CU_GRAPH_DEBUG_DOT_FLAGS_MEMSET_NODE_PARAMS = (1 << 4), 
# 3969
CU_GRAPH_DEBUG_DOT_FLAGS_HOST_NODE_PARAMS = (1 << 5), 
# 3970
CU_GRAPH_DEBUG_DOT_FLAGS_EVENT_NODE_PARAMS = (1 << 6), 
# 3971
CU_GRAPH_DEBUG_DOT_FLAGS_EXT_SEMAS_SIGNAL_NODE_PARAMS = (1 << 7), 
# 3972
CU_GRAPH_DEBUG_DOT_FLAGS_EXT_SEMAS_WAIT_NODE_PARAMS = (1 << 8), 
# 3973
CU_GRAPH_DEBUG_DOT_FLAGS_KERNEL_NODE_ATTRIBUTES = (1 << 9), 
# 3974
CU_GRAPH_DEBUG_DOT_FLAGS_HANDLES = (1 << 10), 
# 3975
CU_GRAPH_DEBUG_DOT_FLAGS_MEM_ALLOC_NODE_PARAMS = (1 << 11), 
# 3976
CU_GRAPH_DEBUG_DOT_FLAGS_MEM_FREE_NODE_PARAMS = (1 << 12), 
# 3977
CU_GRAPH_DEBUG_DOT_FLAGS_BATCH_MEM_OP_NODE_PARAMS = (1 << 13), 
# 3978
CU_GRAPH_DEBUG_DOT_FLAGS_EXTRA_TOPO_INFO = (1 << 14)
# 3979
} CUgraphDebugDot_flags; 
# 3986
typedef 
# 3984
enum CUuserObject_flags_enum { 
# 3985
CU_USER_OBJECT_NO_DESTRUCTOR_SYNC = 1
# 3986
} CUuserObject_flags; 
# 3993
typedef 
# 3991
enum CUuserObjectRetain_flags_enum { 
# 3992
CU_GRAPH_USER_OBJECT_MOVE = 1
# 3993
} CUuserObjectRetain_flags; 
# 4004
typedef 
# 3998
enum CUgraphInstantiate_flags_enum { 
# 3999
CUDA_GRAPH_INSTANTIATE_FLAG_AUTO_FREE_ON_LAUNCH = 1, 
# 4000
CUDA_GRAPH_INSTANTIATE_FLAG_UPLOAD, 
# 4001
CUDA_GRAPH_INSTANTIATE_FLAG_DEVICE_LAUNCH = 4, 
# 4002
CUDA_GRAPH_INSTANTIATE_FLAG_USE_NODE_PRIORITY = 8
# 4004
} CUgraphInstantiate_flags; 
# 4051 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGetErrorString(CUresult error, const char ** pStr); 
# 4072 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGetErrorName(CUresult error, const char ** pStr); 
# 4105 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuInit(unsigned Flags); 
# 4143 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDriverGetVersion(int * driverVersion); 
# 4186 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGet(CUdevice * device, int ordinal); 
# 4215 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGetCount(int * count); 
# 4247 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGetName(char * name, int len, CUdevice dev); 
# 4280 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGetUuid(CUuuid * uuid, CUdevice dev); 
# 4309 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGetUuid_v2(CUuuid * uuid, CUdevice dev); 
# 4338 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGetLuid(char * luid, unsigned * deviceNodeMask, CUdevice dev); 
# 4367 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceTotalMem_v2(size_t * bytes, CUdevice dev); 
# 4398 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGetTexture1DLinearMaxWidth(size_t * maxWidthInElements, CUarray_format format, unsigned numChannels, CUdevice dev); 
# 4621 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGetAttribute(int * pi, CUdevice_attribute attrib, CUdevice dev); 
# 4684 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGetNvSciSyncAttributes(void * nvSciSyncAttrList, CUdevice dev, int flags); 
# 4702 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceSetMemPool(CUdevice dev, CUmemoryPool pool); 
# 4718 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGetMemPool(CUmemoryPool * pool, CUdevice dev); 
# 4736 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGetDefaultMemPool(CUmemoryPool * pool_out, CUdevice dev); 
# 4767 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGetExecAffinitySupport(int * pi, CUexecAffinityType type, CUdevice dev); 
# 4798 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuFlushGPUDirectRDMAWrites(CUflushGPUDirectRDMAWritesTarget target, CUflushGPUDirectRDMAWritesScope scope); 
# 4876 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuDeviceGetProperties(CUdevprop * prop, CUdevice dev); 
# 4910 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuDeviceComputeCapability(int * major, int * minor, CUdevice dev); 
# 4977 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDevicePrimaryCtxRetain(CUcontext * pctx, CUdevice dev); 
# 5018 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDevicePrimaryCtxRelease_v2(CUdevice dev); 
# 5109 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDevicePrimaryCtxSetFlags_v2(CUdevice dev, unsigned flags); 
# 5136 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDevicePrimaryCtxGetState(CUdevice dev, unsigned * flags, int * active); 
# 5176 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDevicePrimaryCtxReset_v2(CUdevice dev); 
# 5316 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxCreate_v2(CUcontext * pctx, unsigned flags, CUdevice dev); 
# 5452 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxCreate_v3(CUcontext * pctx, CUexecAffinityParam * paramsArray, int numParams, unsigned flags, CUdevice dev); 
# 5497 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxDestroy_v2(CUcontext ctx); 
# 5531 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxPushCurrent_v2(CUcontext ctx); 
# 5565 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxPopCurrent_v2(CUcontext * pctx); 
# 5595 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxSetCurrent(CUcontext ctx); 
# 5618 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxGetCurrent(CUcontext * pctx); 
# 5648 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxGetDevice(CUdevice * device); 
# 5677 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxGetFlags(unsigned * flags); 
# 5704 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxSetFlags(unsigned flags); 
# 5735 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxGetId(CUcontext ctx, unsigned long long * ctxId); 
# 5765 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxSynchronize(); 
# 5864 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxSetLimit(CUlimit limit, size_t value); 
# 5906 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxGetLimit(size_t * pvalue, CUlimit limit); 
# 5950 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxGetCacheConfig(CUfunc_cache * pconfig); 
# 6002 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxSetCacheConfig(CUfunc_cache config); 
# 6044 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxGetSharedMemConfig(CUsharedconfig * pConfig); 
# 6097 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxSetSharedMemConfig(CUsharedconfig config); 
# 6135 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxGetApiVersion(CUcontext ctx, unsigned * version); 
# 6175 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxGetStreamPriorityRange(int * leastPriority, int * greatestPriority); 
# 6191 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxResetPersistingL2Cache(); 
# 6215 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxGetExecAffinity(CUexecAffinityParam * pExecAffinity, CUexecAffinityType type); 
# 6271 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuCtxAttach(CUcontext * pctx, unsigned flags); 
# 6307 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuCtxDetach(CUcontext ctx); 
# 6363 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuModuleLoad(CUmodule * module, const char * fname); 
# 6401 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuModuleLoadData(CUmodule * module, const void * image); 
# 6445 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuModuleLoadDataEx(CUmodule * module, const void * image, unsigned numOptions, CUjit_option * options, void ** optionValues); 
# 6488 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuModuleLoadFatBinary(CUmodule * module, const void * fatCubin); 
# 6514 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuModuleUnload(CUmodule hmod); 
# 6522
typedef 
# 6519
enum CUmoduleLoadingMode_enum { 
# 6520
CU_MODULE_EAGER_LOADING = 1, 
# 6521
CU_MODULE_LAZY_LOADING
# 6522
} CUmoduleLoadingMode; 
# 6540 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuModuleGetLoadingMode(CUmoduleLoadingMode * mode); 
# 6570 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuModuleGetFunction(CUfunction * hfunc, CUmodule hmod, const char * name); 
# 6605 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuModuleGetGlobal_v2(CUdeviceptr * dptr, size_t * bytes, CUmodule hmod, const char * name); 
# 6648 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuLinkCreate_v2(unsigned numOptions, CUjit_option * options, void ** optionValues, CUlinkState * stateOut); 
# 6688 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuLinkAddData_v2(CUlinkState state, CUjitInputType type, void * data, size_t size, const char * name, unsigned numOptions, CUjit_option * options, void ** optionValues); 
# 6730 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuLinkAddFile_v2(CUlinkState state, CUjitInputType type, const char * path, unsigned numOptions, CUjit_option * options, void ** optionValues); 
# 6757 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuLinkComplete(CUlinkState state, void ** cubinOut, size_t * sizeOut); 
# 6771 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuLinkDestroy(CUlinkState state); 
# 6821 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuModuleGetTexRef(CUtexref * pTexRef, CUmodule hmod, const char * name); 
# 6855 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuModuleGetSurfRef(CUsurfref * pSurfRef, CUmodule hmod, const char * name); 
# 6918 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuLibraryLoadData(CUlibrary * library, const void * code, CUjit_option * jitOptions, void ** jitOptionsValues, unsigned numJitOptions, CUlibraryOption * libraryOptions, void ** libraryOptionValues, unsigned numLibraryOptions); 
# 6968 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuLibraryLoadFromFile(CUlibrary * library, const char * fileName, CUjit_option * jitOptions, void ** jitOptionsValues, unsigned numJitOptions, CUlibraryOption * libraryOptions, void ** libraryOptionValues, unsigned numLibraryOptions); 
# 6989 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuLibraryUnload(CUlibrary library); 
# 7016 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuLibraryGetKernel(CUkernel * pKernel, CUlibrary library, const char * name); 
# 7042 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuLibraryGetModule(CUmodule * pMod, CUlibrary library); 
# 7070 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuKernelGetFunction(CUfunction * pFunc, CUkernel kernel); 
# 7102 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuLibraryGetGlobal(CUdeviceptr * dptr, size_t * bytes, CUlibrary library, const char * name); 
# 7134 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuLibraryGetManaged(CUdeviceptr * dptr, size_t * bytes, CUlibrary library, const char * name); 
# 7160 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuLibraryGetUnifiedFunction(void ** fptr, CUlibrary library, const char * symbol); 
# 7248 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuKernelGetAttribute(int * pi, CUfunction_attribute attrib, CUkernel kernel, CUdevice dev); 
# 7326 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuKernelSetAttribute(CUfunction_attribute attrib, int val, CUkernel kernel, CUdevice dev); 
# 7385 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuKernelSetCacheConfig(CUkernel kernel, CUfunc_cache config, CUdevice dev); 
# 7442 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemGetInfo_v2(size_t * free, size_t * total); 
# 7476 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemAlloc_v2(CUdeviceptr * dptr, size_t bytesize); 
# 7538 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemAllocPitch_v2(CUdeviceptr * dptr, size_t * pPitch, size_t WidthInBytes, size_t Height, unsigned ElementSizeBytes); 
# 7574 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemFree_v2(CUdeviceptr dptr); 
# 7608 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemGetAddressRange_v2(CUdeviceptr * pbase, size_t * psize, CUdeviceptr dptr); 
# 7655 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemAllocHost_v2(void ** pp, size_t bytesize); 
# 7685 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemFreeHost(void * p); 
# 7764 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemHostAlloc(void ** pp, size_t bytesize, unsigned Flags); 
# 7817 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemHostGetDevicePointer_v2(CUdeviceptr * pdptr, void * p, unsigned Flags); 
# 7844 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemHostGetFlags(unsigned * pFlags, void * p); 
# 7954 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemAllocManaged(CUdeviceptr * dptr, size_t bytesize, unsigned flags); 
# 7983 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGetByPCIBusId(CUdevice * dev, const char * pciBusId); 
# 8015 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGetPCIBusId(char * pciBusId, int len, CUdevice dev); 
# 8062 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuIpcGetEventHandle(CUipcEventHandle * pHandle, CUevent event); 
# 8104 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuIpcOpenEventHandle(CUevent * phEvent, CUipcEventHandle handle); 
# 8147 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuIpcGetMemHandle(CUipcMemHandle * pHandle, CUdeviceptr dptr); 
# 8207 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuIpcOpenMemHandle_v2(CUdeviceptr * pdptr, CUipcMemHandle handle, unsigned Flags); 
# 8243 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuIpcCloseMemHandle(CUdeviceptr dptr); 
# 8334 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemHostRegister_v2(void * p, size_t bytesize, unsigned Flags); 
# 8360 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemHostUnregister(void * p); 
# 8400 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpy(CUdeviceptr dst, CUdeviceptr src, size_t ByteCount); 
# 8430 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyPeer(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount); 
# 8466 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyHtoD_v2(CUdeviceptr dstDevice, const void * srcHost, size_t ByteCount); 
# 8502 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyDtoH_v2(void * dstHost, CUdeviceptr srcDevice, size_t ByteCount); 
# 8538 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyDtoD_v2(CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount); 
# 8574 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyDtoA_v2(CUarray dstArray, size_t dstOffset, CUdeviceptr srcDevice, size_t ByteCount); 
# 8612 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyAtoD_v2(CUdeviceptr dstDevice, CUarray srcArray, size_t srcOffset, size_t ByteCount); 
# 8649 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyHtoA_v2(CUarray dstArray, size_t dstOffset, const void * srcHost, size_t ByteCount); 
# 8686 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyAtoH_v2(void * dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount); 
# 8726 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyAtoA_v2(CUarray dstArray, size_t dstOffset, CUarray srcArray, size_t srcOffset, size_t ByteCount); 
# 8890 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpy2D_v2(const CUDA_MEMCPY2D * pCopy); 
# 9052 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpy2DUnaligned_v2(const CUDA_MEMCPY2D * pCopy); 
# 9221 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpy3D_v2(const CUDA_MEMCPY3D * pCopy); 
# 9245 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpy3DPeer(const CUDA_MEMCPY3D_PEER * pCopy); 
# 9290 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyAsync(CUdeviceptr dst, CUdeviceptr src, size_t ByteCount, CUstream hStream); 
# 9323 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyPeerAsync(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount, CUstream hStream); 
# 9364 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyHtoDAsync_v2(CUdeviceptr dstDevice, const void * srcHost, size_t ByteCount, CUstream hStream); 
# 9405 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyDtoHAsync_v2(void * dstHost, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream); 
# 9446 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyDtoDAsync_v2(CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream); 
# 9488 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyHtoAAsync_v2(CUarray dstArray, size_t dstOffset, const void * srcHost, size_t ByteCount, CUstream hStream); 
# 9530 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyAtoHAsync_v2(void * dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount, CUstream hStream); 
# 9699 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpy2DAsync_v2(const CUDA_MEMCPY2D * pCopy, CUstream hStream); 
# 9873 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpy3DAsync_v2(const CUDA_MEMCPY3D * pCopy, CUstream hStream); 
# 9899 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpy3DPeerAsync(const CUDA_MEMCPY3D_PEER * pCopy, CUstream hStream); 
# 9934 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD8_v2(CUdeviceptr dstDevice, unsigned char uc, size_t N); 
# 9969 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD16_v2(CUdeviceptr dstDevice, unsigned short us, size_t N); 
# 10004 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD32_v2(CUdeviceptr dstDevice, unsigned ui, size_t N); 
# 10044 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD2D8_v2(CUdeviceptr dstDevice, size_t dstPitch, unsigned char uc, size_t Width, size_t Height); 
# 10085 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD2D16_v2(CUdeviceptr dstDevice, size_t dstPitch, unsigned short us, size_t Width, size_t Height); 
# 10126 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD2D32_v2(CUdeviceptr dstDevice, size_t dstPitch, unsigned ui, size_t Width, size_t Height); 
# 10163 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD8Async(CUdeviceptr dstDevice, unsigned char uc, size_t N, CUstream hStream); 
# 10200 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD16Async(CUdeviceptr dstDevice, unsigned short us, size_t N, CUstream hStream); 
# 10236 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD32Async(CUdeviceptr dstDevice, unsigned ui, size_t N, CUstream hStream); 
# 10278 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD2D8Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned char uc, size_t Width, size_t Height, CUstream hStream); 
# 10321 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD2D16Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned short us, size_t Width, size_t Height, CUstream hStream); 
# 10364 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD2D32Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned ui, size_t Width, size_t Height, CUstream hStream); 
# 10468 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuArrayCreate_v2(CUarray * pHandle, const CUDA_ARRAY_DESCRIPTOR * pAllocateArray); 
# 10502 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuArrayGetDescriptor_v2(CUDA_ARRAY_DESCRIPTOR * pArrayDescriptor, CUarray hArray); 
# 10526 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuArrayGetSparseProperties(CUDA_ARRAY_SPARSE_PROPERTIES * sparseProperties, CUarray array); 
# 10551 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMipmappedArrayGetSparseProperties(CUDA_ARRAY_SPARSE_PROPERTIES * sparseProperties, CUmipmappedArray mipmap); 
# 10574 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuArrayGetMemoryRequirements(CUDA_ARRAY_MEMORY_REQUIREMENTS * memoryRequirements, CUarray array, CUdevice device); 
# 10598 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMipmappedArrayGetMemoryRequirements(CUDA_ARRAY_MEMORY_REQUIREMENTS * memoryRequirements, CUmipmappedArray mipmap, CUdevice device); 
# 10631 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuArrayGetPlane(CUarray * pPlaneArray, CUarray hArray, unsigned planeIdx); 
# 10662 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuArrayDestroy(CUarray hArray); 
# 10842 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuArray3DCreate_v2(CUarray * pHandle, const CUDA_ARRAY3D_DESCRIPTOR * pAllocateArray); 
# 10880 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuArray3DGetDescriptor_v2(CUDA_ARRAY3D_DESCRIPTOR * pArrayDescriptor, CUarray hArray); 
# 11022 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMipmappedArrayCreate(CUmipmappedArray * pHandle, const CUDA_ARRAY3D_DESCRIPTOR * pMipmappedArrayDesc, unsigned numMipmapLevels); 
# 11052 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMipmappedArrayGetLevel(CUarray * pLevelArray, CUmipmappedArray hMipmappedArray, unsigned level); 
# 11077 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMipmappedArrayDestroy(CUmipmappedArray hMipmappedArray); 
# 11110 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemGetHandleForAddressRange(void * handle, CUdeviceptr dptr, size_t size, CUmemRangeHandleType handleType, unsigned long long flags); 
# 11151 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemAddressReserve(CUdeviceptr * ptr, size_t size, size_t alignment, CUdeviceptr addr, unsigned long long flags); 
# 11172 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemAddressFree(CUdeviceptr ptr, size_t size); 
# 11211 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemCreate(CUmemGenericAllocationHandle * handle, size_t size, const CUmemAllocationProp * prop, unsigned long long flags); 
# 11238 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemRelease(CUmemGenericAllocationHandle handle); 
# 11288 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemMap(CUdeviceptr ptr, size_t size, size_t offset, CUmemGenericAllocationHandle handle, unsigned long long flags); 
# 11423 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemMapArrayAsync(CUarrayMapInfo * mapInfoList, unsigned count, CUstream hStream); 
# 11452 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemUnmap(CUdeviceptr ptr, size_t size); 
# 11483 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemSetAccess(CUdeviceptr ptr, size_t size, const CUmemAccessDesc * desc, size_t count); 
# 11502 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemGetAccess(unsigned long long * flags, const CUmemLocation * location, CUdeviceptr ptr); 
# 11535 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemExportToShareableHandle(void * shareableHandle, CUmemGenericAllocationHandle handle, CUmemAllocationHandleType handleType, unsigned long long flags); 
# 11562 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemImportFromShareableHandle(CUmemGenericAllocationHandle * handle, void * osHandle, CUmemAllocationHandleType shHandleType); 
# 11584 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemGetAllocationGranularity(size_t * granularity, const CUmemAllocationProp * prop, CUmemAllocationGranularity_flags option); 
# 11601 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemGetAllocationPropertiesFromHandle(CUmemAllocationProp * prop, CUmemGenericAllocationHandle handle); 
# 11625 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemRetainAllocationHandle(CUmemGenericAllocationHandle * handle, void * addr); 
# 11682 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemFreeAsync(CUdeviceptr dptr, CUstream hStream); 
# 11715 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemAllocAsync(CUdeviceptr * dptr, size_t bytesize, CUstream hStream); 
# 11741 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemPoolTrimTo(CUmemoryPool pool, size_t minBytesToKeep); 
# 11784 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemPoolSetAttribute(CUmemoryPool pool, CUmemPool_attribute attr, void * value); 
# 11831 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemPoolGetAttribute(CUmemoryPool pool, CUmemPool_attribute attr, void * value); 
# 11848 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemPoolSetAccess(CUmemoryPool pool, const CUmemAccessDesc * map, size_t count); 
# 11862 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemPoolGetAccess(CUmemAccess_flags * flags, CUmemoryPool memPool, CUmemLocation * location); 
# 11884 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemPoolCreate(CUmemoryPool * pool, const CUmemPoolProps * poolProps); 
# 11907 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemPoolDestroy(CUmemoryPool pool); 
# 11945 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemAllocFromPoolAsync(CUdeviceptr * dptr, size_t bytesize, CUmemoryPool pool, CUstream hStream); 
# 11974 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemPoolExportToShareableHandle(void * handle_out, CUmemoryPool pool, CUmemAllocationHandleType handleType, unsigned long long flags); 
# 11998 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemPoolImportFromShareableHandle(CUmemoryPool * pool_out, void * handle, CUmemAllocationHandleType handleType, unsigned long long flags); 
# 12022 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemPoolExportPointer(CUmemPoolPtrExportData * shareData_out, CUdeviceptr ptr); 
# 12051 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemPoolImportPointer(CUdeviceptr * ptr_out, CUmemoryPool pool, CUmemPoolPtrExportData * shareData); 
# 12122 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMulticastCreate(CUmemGenericAllocationHandle * mcHandle, const CUmulticastObjectProp * prop); 
# 12155 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMulticastAddDevice(CUmemGenericAllocationHandle mcHandle, CUdevice dev); 
# 12204 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMulticastBindMem(CUmemGenericAllocationHandle mcHandle, size_t mcOffset, CUmemGenericAllocationHandle memHandle, size_t memOffset, size_t size, unsigned long long flags); 
# 12251 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMulticastBindAddr(CUmemGenericAllocationHandle mcHandle, size_t mcOffset, CUdeviceptr memptr, size_t size, unsigned long long flags); 
# 12285 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMulticastUnbind(CUmemGenericAllocationHandle mcHandle, CUdevice dev, size_t mcOffset, size_t size); 
# 12309 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMulticastGetGranularity(size_t * granularity, const CUmulticastObjectProp * prop, CUmulticastGranularity_flags option); 
# 12594 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuPointerGetAttribute(void * data, CUpointer_attribute attribute, CUdeviceptr ptr); 
# 12662 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemPrefetchAsync(CUdeviceptr devPtr, size_t count, CUdevice dstDevice, CUstream hStream); 
# 12776 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemAdvise(CUdeviceptr devPtr, size_t count, CUmem_advise advice, CUdevice device); 
# 12834 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemRangeGetAttribute(void * data, size_t dataSize, CUmem_range_attribute attribute, CUdeviceptr devPtr, size_t count); 
# 12874 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemRangeGetAttributes(void ** data, size_t * dataSizes, CUmem_range_attribute * attributes, size_t numAttributes, CUdeviceptr devPtr, size_t count); 
# 12916 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuPointerSetAttribute(const void * value, CUpointer_attribute attribute, CUdeviceptr ptr); 
# 12965 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuPointerGetAttributes(unsigned numAttributes, CUpointer_attribute * attributes, void ** data, CUdeviceptr ptr); 
# 13016 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamCreate(CUstream * phStream, unsigned Flags); 
# 13065 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamCreateWithPriority(CUstream * phStream, unsigned flags, int priority); 
# 13096 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamGetPriority(CUstream hStream, int * priority); 
# 13124 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamGetFlags(CUstream hStream, unsigned * flags); 
# 13157 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamGetId(CUstream hStream, unsigned long long * streamId); 
# 13201 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamGetCtx(CUstream hStream, CUcontext * pctx); 
# 13238 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamWaitEvent(CUstream hStream, CUevent hEvent, unsigned Flags); 
# 13313 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamAddCallback(CUstream hStream, CUstreamCallback callback, void * userData, unsigned flags); 
# 13351 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamBeginCapture_v2(CUstream hStream, CUstreamCaptureMode mode); 
# 13404 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuThreadExchangeStreamCaptureMode(CUstreamCaptureMode * mode); 
# 13434 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamEndCapture(CUstream hStream, CUgraph * phGraph); 
# 13474 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamIsCapturing(CUstream hStream, CUstreamCaptureStatus * captureStatus); 
# 13522 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamGetCaptureInfo_v2(CUstream hStream, CUstreamCaptureStatus * captureStatus_out, cuuint64_t * id_out, CUgraph * graph_out, const CUgraphNode ** dependencies_out, size_t * numDependencies_out); 
# 13554 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamUpdateCaptureDependencies(CUstream hStream, CUgraphNode * dependencies, size_t numDependencies, unsigned flags); 
# 13642 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamAttachMemAsync(CUstream hStream, CUdeviceptr dptr, size_t length, unsigned flags); 
# 13672 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamQuery(CUstream hStream); 
# 13701 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamSynchronize(CUstream hStream); 
# 13731 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamDestroy_v2(CUstream hStream); 
# 13751 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamCopyAttributes(CUstream dst, CUstream src); 
# 13772 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamGetAttribute(CUstream hStream, CUstreamAttrID attr, CUstreamAttrValue * value_out); 
# 13795 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamSetAttribute(CUstream hStream, CUstreamAttrID attr, const CUstreamAttrValue * value); 
# 13852 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuEventCreate(CUevent * phEvent, unsigned Flags); 
# 13894 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuEventRecord(CUevent hEvent, CUstream hStream); 
# 13943 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuEventRecordWithFlags(CUevent hEvent, CUstream hStream, unsigned flags); 
# 13975 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuEventQuery(CUevent hEvent); 
# 14006 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuEventSynchronize(CUevent hEvent); 
# 14035 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuEventDestroy_v2(CUevent hEvent); 
# 14080 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuEventElapsedTime(float * pMilliseconds, CUevent hStart, CUevent hEnd); 
# 14259 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuImportExternalMemory(CUexternalMemory * extMem_out, const CUDA_EXTERNAL_MEMORY_HANDLE_DESC * memHandleDesc); 
# 14313 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuExternalMemoryGetMappedBuffer(CUdeviceptr * devPtr, CUexternalMemory extMem, const CUDA_EXTERNAL_MEMORY_BUFFER_DESC * bufferDesc); 
# 14366 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuExternalMemoryGetMappedMipmappedArray(CUmipmappedArray * mipmap, CUexternalMemory extMem, const CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC * mipmapDesc); 
# 14388 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDestroyExternalMemory(CUexternalMemory extMem); 
# 14546 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuImportExternalSemaphore(CUexternalSemaphore * extSem_out, const CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC * semHandleDesc); 
# 14628 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuSignalExternalSemaphoresAsync(const CUexternalSemaphore * extSemArray, const CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS * paramsArray, unsigned numExtSems, CUstream stream); 
# 14704 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuWaitExternalSemaphoresAsync(const CUexternalSemaphore * extSemArray, const CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS * paramsArray, unsigned numExtSems, CUstream stream); 
# 14725 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDestroyExternalSemaphore(CUexternalSemaphore extSem); 
# 14811 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamWaitValue32_v2(CUstream stream, CUdeviceptr addr, cuuint32_t value, unsigned flags); 
# 14854 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamWaitValue64_v2(CUstream stream, CUdeviceptr addr, cuuint64_t value, unsigned flags); 
# 14883 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamWriteValue32_v2(CUstream stream, CUdeviceptr addr, cuuint32_t value, unsigned flags); 
# 14914 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamWriteValue64_v2(CUstream stream, CUdeviceptr addr, cuuint64_t value, unsigned flags); 
# 14957 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamBatchMemOp_v2(CUstream stream, unsigned count, CUstreamBatchMemOpParams * paramArray, unsigned flags); 
# 15053 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuFuncGetAttribute(int * pi, CUfunction_attribute attrib, CUfunction hfunc); 
# 15117 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuFuncSetAttribute(CUfunction hfunc, CUfunction_attribute attrib, int value); 
# 15162 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuFuncSetCacheConfig(CUfunction hfunc, CUfunc_cache config); 
# 15214 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuFuncSetSharedMemConfig(CUfunction hfunc, CUsharedconfig config); 
# 15240 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuFuncGetModule(CUmodule * hmod, CUfunction hfunc); 
# 15361 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuLaunchKernel(CUfunction f, unsigned gridDimX, unsigned gridDimY, unsigned gridDimZ, unsigned blockDimX, unsigned blockDimY, unsigned blockDimZ, unsigned sharedMemBytes, CUstream hStream, void ** kernelParams, void ** extra); 
# 15555 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuLaunchKernelEx(const CUlaunchConfig * config, CUfunction f, void ** kernelParams, void ** extra); 
# 15654 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuLaunchCooperativeKernel(CUfunction f, unsigned gridDimX, unsigned gridDimY, unsigned gridDimZ, unsigned blockDimX, unsigned blockDimY, unsigned blockDimZ, unsigned sharedMemBytes, CUstream hStream, void ** kernelParams); 
# 15803 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuLaunchCooperativeKernelMultiDevice(CUDA_LAUNCH_PARAMS * launchParamsList, unsigned numDevices, unsigned flags); 
# 15868 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuLaunchHostFunc(CUstream hStream, CUhostFn fn, void * userData); 
# 15918 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuFuncSetBlockShape(CUfunction hfunc, int x, int y, int z); 
# 15952 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuFuncSetSharedSize(CUfunction hfunc, unsigned bytes); 
# 15984 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuParamSetSize(CUfunction hfunc, unsigned numbytes); 
# 16017 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuParamSeti(CUfunction hfunc, int offset, unsigned value); 
# 16050 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuParamSetf(CUfunction hfunc, int offset, float value); 
# 16085 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuParamSetv(CUfunction hfunc, int offset, void * ptr, unsigned numbytes); 
# 16137 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuLaunch(CUfunction f); 
# 16191 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuLaunchGrid(CUfunction f, int grid_width, int grid_height); 
# 16253 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuLaunchGridAsync(CUfunction f, int grid_width, int grid_height, CUstream hStream); 
# 16278 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuParamSetTexRef(CUfunction hfunc, int texunit, CUtexref hTexRef); 
# 16324 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphCreate(CUgraph * phGraph, unsigned flags); 
# 16424 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphAddKernelNode_v2(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, size_t numDependencies, const CUDA_KERNEL_NODE_PARAMS * nodeParams); 
# 16456 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphKernelNodeGetParams_v2(CUgraphNode hNode, CUDA_KERNEL_NODE_PARAMS * nodeParams); 
# 16479 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphKernelNodeSetParams_v2(CUgraphNode hNode, const CUDA_KERNEL_NODE_PARAMS * nodeParams); 
# 16527 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphAddMemcpyNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, size_t numDependencies, const CUDA_MEMCPY3D * copyParams, CUcontext ctx); 
# 16550 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphMemcpyNodeGetParams(CUgraphNode hNode, CUDA_MEMCPY3D * nodeParams); 
# 16573 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphMemcpyNodeSetParams(CUgraphNode hNode, const CUDA_MEMCPY3D * nodeParams); 
# 16615 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphAddMemsetNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, size_t numDependencies, const CUDA_MEMSET_NODE_PARAMS * memsetParams, CUcontext ctx); 
# 16638 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphMemsetNodeGetParams(CUgraphNode hNode, CUDA_MEMSET_NODE_PARAMS * nodeParams); 
# 16661 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphMemsetNodeSetParams(CUgraphNode hNode, const CUDA_MEMSET_NODE_PARAMS * nodeParams); 
# 16702 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphAddHostNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, size_t numDependencies, const CUDA_HOST_NODE_PARAMS * nodeParams); 
# 16725 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphHostNodeGetParams(CUgraphNode hNode, CUDA_HOST_NODE_PARAMS * nodeParams); 
# 16748 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphHostNodeSetParams(CUgraphNode hNode, const CUDA_HOST_NODE_PARAMS * nodeParams); 
# 16788 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphAddChildGraphNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, size_t numDependencies, CUgraph childGraph); 
# 16815 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphChildGraphNodeGetGraph(CUgraphNode hNode, CUgraph * phGraph); 
# 16853 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphAddEmptyNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, size_t numDependencies); 
# 16894 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphAddEventRecordNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, size_t numDependencies, CUevent event); 
# 16919 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphEventRecordNodeGetEvent(CUgraphNode hNode, CUevent * event_out); 
# 16944 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphEventRecordNodeSetEvent(CUgraphNode hNode, CUevent event); 
# 16986 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphAddEventWaitNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, size_t numDependencies, CUevent event); 
# 17011 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphEventWaitNodeGetEvent(CUgraphNode hNode, CUevent * event_out); 
# 17036 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphEventWaitNodeSetEvent(CUgraphNode hNode, CUevent event); 
# 17084 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphAddExternalSemaphoresSignalNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, size_t numDependencies, const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS * nodeParams); 
# 17115 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphExternalSemaphoresSignalNodeGetParams(CUgraphNode hNode, CUDA_EXT_SEM_SIGNAL_NODE_PARAMS * params_out); 
# 17140 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphExternalSemaphoresSignalNodeSetParams(CUgraphNode hNode, const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS * nodeParams); 
# 17188 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphAddExternalSemaphoresWaitNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, size_t numDependencies, const CUDA_EXT_SEM_WAIT_NODE_PARAMS * nodeParams); 
# 17219 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphExternalSemaphoresWaitNodeGetParams(CUgraphNode hNode, CUDA_EXT_SEM_WAIT_NODE_PARAMS * params_out); 
# 17244 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphExternalSemaphoresWaitNodeSetParams(CUgraphNode hNode, const CUDA_EXT_SEM_WAIT_NODE_PARAMS * nodeParams); 
# 17299 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphAddBatchMemOpNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, size_t numDependencies, const CUDA_BATCH_MEM_OP_NODE_PARAMS * nodeParams); 
# 17327 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphBatchMemOpNodeGetParams(CUgraphNode hNode, CUDA_BATCH_MEM_OP_NODE_PARAMS * nodeParams_out); 
# 17353 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphBatchMemOpNodeSetParams(CUgraphNode hNode, const CUDA_BATCH_MEM_OP_NODE_PARAMS * nodeParams); 
# 17399 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphExecBatchMemOpNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_BATCH_MEM_OP_NODE_PARAMS * nodeParams); 
# 17473 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphAddMemAllocNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, size_t numDependencies, CUDA_MEM_ALLOC_NODE_PARAMS * nodeParams); 
# 17498 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphMemAllocNodeGetParams(CUgraphNode hNode, CUDA_MEM_ALLOC_NODE_PARAMS * params_out); 
# 17555 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphAddMemFreeNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, size_t numDependencies, CUdeviceptr dptr); 
# 17577 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphMemFreeNodeGetParams(CUgraphNode hNode, CUdeviceptr * dptr_out); 
# 17597 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGraphMemTrim(CUdevice device); 
# 17625 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGetGraphMemAttribute(CUdevice device, CUgraphMem_attribute attr, void * value); 
# 17650 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceSetGraphMemAttribute(CUdevice device, CUgraphMem_attribute attr, void * value); 
# 17675 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphClone(CUgraph * phGraphClone, CUgraph originalGraph); 
# 17701 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphNodeFindInClone(CUgraphNode * phNode, CUgraphNode hOriginalNode, CUgraph hClonedGraph); 
# 17732 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphNodeGetType(CUgraphNode hNode, CUgraphNodeType * type); 
# 17763 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphGetNodes(CUgraph hGraph, CUgraphNode * nodes, size_t * numNodes); 
# 17794 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphGetRootNodes(CUgraph hGraph, CUgraphNode * rootNodes, size_t * numRootNodes); 
# 17828 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphGetEdges(CUgraph hGraph, CUgraphNode * from, CUgraphNode * to, size_t * numEdges); 
# 17859 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphNodeGetDependencies(CUgraphNode hNode, CUgraphNode * dependencies, size_t * numDependencies); 
# 17891 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphNodeGetDependentNodes(CUgraphNode hNode, CUgraphNode * dependentNodes, size_t * numDependentNodes); 
# 17920 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphAddDependencies(CUgraph hGraph, const CUgraphNode * from, const CUgraphNode * to, size_t numDependencies); 
# 17952 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphRemoveDependencies(CUgraph hGraph, const CUgraphNode * from, const CUgraphNode * to, size_t numDependencies); 
# 17979 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphDestroyNode(CUgraphNode hNode); 
# 18049 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphInstantiateWithFlags(CUgraphExec * phGraphExec, CUgraph hGraph, unsigned long long flags); 
# 18150 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphInstantiateWithParams(CUgraphExec * phGraphExec, CUgraph hGraph, CUDA_GRAPH_INSTANTIATE_PARAMS * instantiateParams); 
# 18172 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphExecGetFlags(CUgraphExec hGraphExec, cuuint64_t * flags); 
# 18221 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphExecKernelNodeSetParams_v2(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_KERNEL_NODE_PARAMS * nodeParams); 
# 18267 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphExecMemcpyNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_MEMCPY3D * copyParams, CUcontext ctx); 
# 18313 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphExecMemsetNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_MEMSET_NODE_PARAMS * memsetParams, CUcontext ctx); 
# 18350 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphExecHostNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_HOST_NODE_PARAMS * nodeParams); 
# 18393 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphExecChildGraphNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, CUgraph childGraph); 
# 18433 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphExecEventRecordNodeSetEvent(CUgraphExec hGraphExec, CUgraphNode hNode, CUevent event); 
# 18473 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphExecEventWaitNodeSetEvent(CUgraphExec hGraphExec, CUgraphNode hNode, CUevent event); 
# 18516 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphExecExternalSemaphoresSignalNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS * nodeParams); 
# 18559 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphExecExternalSemaphoresWaitNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_EXT_SEM_WAIT_NODE_PARAMS * nodeParams); 
# 18595 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphNodeSetEnabled(CUgraphExec hGraphExec, CUgraphNode hNode, unsigned isEnabled); 
# 18625 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphNodeGetEnabled(CUgraphExec hGraphExec, CUgraphNode hNode, unsigned * isEnabled); 
# 18651 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphUpload(CUgraphExec hGraphExec, CUstream hStream); 
# 18681 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphLaunch(CUgraphExec hGraphExec, CUstream hStream); 
# 18706 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphExecDestroy(CUgraphExec hGraphExec); 
# 18726 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphDestroy(CUgraph hGraph); 
# 18809 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphExecUpdate_v2(CUgraphExec hGraphExec, CUgraph hGraph, CUgraphExecUpdateResultInfo * resultInfo); 
# 18829 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphKernelNodeCopyAttributes(CUgraphNode dst, CUgraphNode src); 
# 18850 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphKernelNodeGetAttribute(CUgraphNode hNode, CUkernelNodeAttrID attr, CUkernelNodeAttrValue * value_out); 
# 18872 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphKernelNodeSetAttribute(CUgraphNode hNode, CUkernelNodeAttrID attr, const CUkernelNodeAttrValue * value); 
# 18892 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphDebugDotPrint(CUgraph hGraph, const char * path, unsigned flags); 
# 18928 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuUserObjectCreate(CUuserObject * object_out, void * ptr, CUhostFn destroy, unsigned initialRefcount, unsigned flags); 
# 18953 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuUserObjectRetain(CUuserObject object, unsigned count); 
# 18981 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuUserObjectRelease(CUuserObject object, unsigned count); 
# 19009 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphRetainUserObject(CUgraph graph, CUuserObject object, unsigned count, unsigned flags); 
# 19034 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphReleaseUserObject(CUgraph graph, CUuserObject object, unsigned count); 
# 19073 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, CUfunction func, int blockSize, size_t dynamicSMemSize); 
# 19115 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, CUfunction func, int blockSize, size_t dynamicSMemSize, unsigned flags); 
# 19167 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuOccupancyMaxPotentialBlockSize(int * minGridSize, int * blockSize, CUfunction func, CUoccupancyB2DSize blockSizeToDynamicSMemSize, size_t dynamicSMemSize, int blockSizeLimit); 
# 19213 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuOccupancyMaxPotentialBlockSizeWithFlags(int * minGridSize, int * blockSize, CUfunction func, CUoccupancyB2DSize blockSizeToDynamicSMemSize, size_t dynamicSMemSize, int blockSizeLimit, unsigned flags); 
# 19234 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuOccupancyAvailableDynamicSMemPerBlock(size_t * dynamicSmemSize, CUfunction func, int numBlocks, int blockSize); 
# 19269 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuOccupancyMaxPotentialClusterSize(int * clusterSize, CUfunction func, const CUlaunchConfig * config); 
# 19306 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuOccupancyMaxActiveClusters(int * numClusters, CUfunction func, const CUlaunchConfig * config); 
# 19350 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefSetArray(CUtexref hTexRef, CUarray hArray, unsigned Flags); 
# 19380 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefSetMipmappedArray(CUtexref hTexRef, CUmipmappedArray hMipmappedArray, unsigned Flags); 
# 19426 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefSetAddress_v2(size_t * ByteOffset, CUtexref hTexRef, CUdeviceptr dptr, size_t bytes); 
# 19481 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefSetAddress2D_v3(CUtexref hTexRef, const CUDA_ARRAY_DESCRIPTOR * desc, CUdeviceptr dptr, size_t Pitch); 
# 19513 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefSetFormat(CUtexref hTexRef, CUarray_format fmt, int NumPackedComponents); 
# 19556 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefSetAddressMode(CUtexref hTexRef, int dim, CUaddress_mode am); 
# 19592 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefSetFilterMode(CUtexref hTexRef, CUfilter_mode fm); 
# 19628 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefSetMipmapFilterMode(CUtexref hTexRef, CUfilter_mode fm); 
# 19657 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefSetMipmapLevelBias(CUtexref hTexRef, float bias); 
# 19688 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefSetMipmapLevelClamp(CUtexref hTexRef, float minMipmapLevelClamp, float maxMipmapLevelClamp); 
# 19717 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefSetMaxAnisotropy(CUtexref hTexRef, unsigned maxAniso); 
# 19750 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefSetBorderColor(CUtexref hTexRef, float * pBorderColor); 
# 19792 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefSetFlags(CUtexref hTexRef, unsigned Flags); 
# 19819 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefGetAddress_v2(CUdeviceptr * pdptr, CUtexref hTexRef); 
# 19846 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefGetArray(CUarray * phArray, CUtexref hTexRef); 
# 19873 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefGetMipmappedArray(CUmipmappedArray * phMipmappedArray, CUtexref hTexRef); 
# 19901 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefGetAddressMode(CUaddress_mode * pam, CUtexref hTexRef, int dim); 
# 19927 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefGetFilterMode(CUfilter_mode * pfm, CUtexref hTexRef); 
# 19955 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefGetFormat(CUarray_format * pFormat, int * pNumChannels, CUtexref hTexRef); 
# 19981 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefGetMipmapFilterMode(CUfilter_mode * pfm, CUtexref hTexRef); 
# 20007 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefGetMipmapLevelBias(float * pbias, CUtexref hTexRef); 
# 20034 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefGetMipmapLevelClamp(float * pminMipmapLevelClamp, float * pmaxMipmapLevelClamp, CUtexref hTexRef); 
# 20060 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefGetMaxAnisotropy(int * pmaxAniso, CUtexref hTexRef); 
# 20089 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefGetBorderColor(float * pBorderColor, CUtexref hTexRef); 
# 20114 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefGetFlags(unsigned * pFlags, CUtexref hTexRef); 
# 20139 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefCreate(CUtexref * pTexRef); 
# 20159 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuTexRefDestroy(CUtexref hTexRef); 
# 20202 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuSurfRefSetArray(CUsurfref hSurfRef, CUarray hArray, unsigned Flags); 
# 20225 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
__attribute((deprecated)) CUresult cuSurfRefGetArray(CUarray * phArray, CUsurfref hSurfRef); 
# 20465 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexObjectCreate(CUtexObject * pTexObject, const CUDA_RESOURCE_DESC * pResDesc, const CUDA_TEXTURE_DESC * pTexDesc, const CUDA_RESOURCE_VIEW_DESC * pResViewDesc); 
# 20485 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexObjectDestroy(CUtexObject texObject); 
# 20506 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexObjectGetResourceDesc(CUDA_RESOURCE_DESC * pResDesc, CUtexObject texObject); 
# 20527 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexObjectGetTextureDesc(CUDA_TEXTURE_DESC * pTexDesc, CUtexObject texObject); 
# 20549 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexObjectGetResourceViewDesc(CUDA_RESOURCE_VIEW_DESC * pResViewDesc, CUtexObject texObject); 
# 20592 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuSurfObjectCreate(CUsurfObject * pSurfObject, const CUDA_RESOURCE_DESC * pResDesc); 
# 20612 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuSurfObjectDestroy(CUsurfObject surfObject); 
# 20633 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuSurfObjectGetResourceDesc(CUDA_RESOURCE_DESC * pResDesc, CUsurfObject surfObject); 
# 20790 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTensorMapEncodeTiled(CUtensorMap * tensorMap, CUtensorMapDataType tensorDataType, cuuint32_t tensorRank, void * globalAddress, const cuuint64_t * globalDim, const cuuint64_t * globalStrides, const cuuint32_t * boxDim, const cuuint32_t * elementStrides, CUtensorMapInterleave interleave, CUtensorMapSwizzle swizzle, CUtensorMapL2promotion l2Promotion, CUtensorMapFloatOOBfill oobFill); 
# 20948 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTensorMapEncodeIm2col(CUtensorMap * tensorMap, CUtensorMapDataType tensorDataType, cuuint32_t tensorRank, void * globalAddress, const cuuint64_t * globalDim, const cuuint64_t * globalStrides, const int * pixelBoxLowerCorner, const int * pixelBoxUpperCorner, cuuint32_t channelsPerPixel, cuuint32_t pixelsPerColumn, const cuuint32_t * elementStrides, CUtensorMapInterleave interleave, CUtensorMapSwizzle swizzle, CUtensorMapL2promotion l2Promotion, CUtensorMapFloatOOBfill oobFill); 
# 20974 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTensorMapReplaceAddress(CUtensorMap * tensorMap, void * globalAddress); 
# 21017 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceCanAccessPeer(int * canAccessPeer, CUdevice dev, CUdevice peerDev); 
# 21070 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxEnablePeerAccess(CUcontext peerContext, unsigned Flags); 
# 21097 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxDisablePeerAccess(CUcontext peerContext); 
# 21137 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGetP2PAttribute(int * value, CUdevice_P2PAttribute attrib, CUdevice srcDevice, CUdevice dstDevice); 
# 21181 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphicsUnregisterResource(CUgraphicsResource resource); 
# 21221 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphicsSubResourceGetMappedArray(CUarray * pArray, CUgraphicsResource resource, unsigned arrayIndex, unsigned mipLevel); 
# 21252 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphicsResourceGetMappedMipmappedArray(CUmipmappedArray * pMipmappedArray, CUgraphicsResource resource); 
# 21286 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphicsResourceGetMappedPointer_v2(CUdeviceptr * pDevPtr, size_t * pSize, CUgraphicsResource resource); 
# 21327 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphicsResourceSetMapFlags_v2(CUgraphicsResource resource, unsigned flags); 
# 21367 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphicsMapResources(unsigned count, CUgraphicsResource * resources, CUstream hStream); 
# 21404 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphicsUnmapResources(unsigned count, CUgraphicsResource * resources, CUstream hStream); 
# 21481 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGetProcAddress_v2(const char * symbol, void ** pfn, int cudaVersion, cuuint64_t flags, CUdriverProcAddressQueryResult * symbolStatus); 
# 21509 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
typedef 
# 21501
enum CUcoredumpSettings_enum { 
# 21502
CU_COREDUMP_ENABLE_ON_EXCEPTION = 1, 
# 21503
CU_COREDUMP_TRIGGER_HOST, 
# 21504
CU_COREDUMP_LIGHTWEIGHT, 
# 21505
CU_COREDUMP_ENABLE_USER_TRIGGER, 
# 21506
CU_COREDUMP_FILE, 
# 21507
CU_COREDUMP_PIPE, 
# 21508
CU_COREDUMP_MAX
# 21509
} CUcoredumpSettings; 
# 21561 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCoredumpGetAttribute(CUcoredumpSettings attrib, void * value, size_t * size); 
# 21606 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCoredumpGetAttributeGlobal(CUcoredumpSettings attrib, void * value, size_t * size); 
# 21664 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCoredumpSetAttribute(CUcoredumpSettings attrib, void * value, size_t * size); 
# 21719 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCoredumpSetAttributeGlobal(CUcoredumpSettings attrib, void * value, size_t * size); 
# 21723
CUresult cuGetExportTable(const void ** ppExportTable, const CUuuid * pExportTableId); 
# 22108 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda.h"
}
# 42 "/usr/include/c++/9/bits/stringfwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 52
template< class _CharT> struct char_traits; 
# 55
template<> struct char_traits< char> ; 
# 58
template<> struct char_traits< wchar_t> ; 
# 66
template<> struct char_traits< char16_t> ; 
# 67
template<> struct char_traits< char32_t> ; 
# 70
inline namespace __cxx11 { 
# 72
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 73
_Alloc = allocator< _CharT> > class basic_string; 
# 76
}
# 79
typedef __cxx11::basic_string< char>  string; 
# 83
typedef __cxx11::basic_string< wchar_t>  wstring; 
# 93 "/usr/include/c++/9/bits/stringfwd.h" 3
typedef __cxx11::basic_string< char16_t>  u16string; 
# 96
typedef __cxx11::basic_string< char32_t>  u32string; 
# 102
}
# 40 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h" 3
typedef __builtin_va_list __gnuc_va_list; 
# 20 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h" 3
typedef unsigned wint_t; 
# 21 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3
typedef 
# 14
struct { 
# 15
int __count; 
# 17
union { 
# 18
unsigned __wch; 
# 19
char __wchb[4]; 
# 20
} __value; 
# 21
} __mbstate_t; 
# 6 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h" 3
typedef __mbstate_t mbstate_t; 
# 4 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 3
struct _IO_FILE; 
# 5
typedef _IO_FILE __FILE; 
# 4 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 3
struct _IO_FILE; 
# 7
typedef _IO_FILE FILE; 
# 79 "/usr/include/wchar.h" 3
extern "C" {
# 83
struct tm; 
# 87
extern wchar_t *wcscpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw()
# 89
 __attribute((__nonnull__(1, 2))); 
# 92
extern wchar_t *wcsncpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __n) throw()
# 94
 __attribute((__nonnull__(1, 2))); 
# 97
extern wchar_t *wcscat(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw()
# 99
 __attribute((__nonnull__(1, 2))); 
# 101
extern wchar_t *wcsncat(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __n) throw()
# 103
 __attribute((__nonnull__(1, 2))); 
# 106
extern int wcscmp(const wchar_t * __s1, const wchar_t * __s2) throw()
# 107
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 109
extern int wcsncmp(const wchar_t * __s1, const wchar_t * __s2, size_t __n) throw()
# 110
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 114
extern int wcscasecmp(const wchar_t * __s1, const wchar_t * __s2) throw(); 
# 117
extern int wcsncasecmp(const wchar_t * __s1, const wchar_t * __s2, size_t __n) throw(); 
# 122
extern int wcscasecmp_l(const wchar_t * __s1, const wchar_t * __s2, locale_t __loc) throw(); 
# 125
extern int wcsncasecmp_l(const wchar_t * __s1, const wchar_t * __s2, size_t __n, locale_t __loc) throw(); 
# 131
extern int wcscoll(const wchar_t * __s1, const wchar_t * __s2) throw(); 
# 135
extern size_t wcsxfrm(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, size_t __n) throw(); 
# 144
extern int wcscoll_l(const wchar_t * __s1, const wchar_t * __s2, locale_t __loc) throw(); 
# 150
extern size_t wcsxfrm_l(wchar_t * __s1, const wchar_t * __s2, size_t __n, locale_t __loc) throw(); 
# 154
extern wchar_t *wcsdup(const wchar_t * __s) throw() __attribute((__malloc__)); 
# 159
extern "C++" wchar_t *wcschr(wchar_t * __wcs, wchar_t __wc) throw() __asm__("wcschr")
# 160
 __attribute((__pure__)); 
# 161
extern "C++" const wchar_t *wcschr(const wchar_t * __wcs, wchar_t __wc) throw() __asm__("wcschr")
# 162
 __attribute((__pure__)); 
# 169
extern "C++" wchar_t *wcsrchr(wchar_t * __wcs, wchar_t __wc) throw() __asm__("wcsrchr")
# 170
 __attribute((__pure__)); 
# 171
extern "C++" const wchar_t *wcsrchr(const wchar_t * __wcs, wchar_t __wc) throw() __asm__("wcsrchr")
# 172
 __attribute((__pure__)); 
# 181 "/usr/include/wchar.h" 3
extern wchar_t *wcschrnul(const wchar_t * __s, wchar_t __wc) throw()
# 182
 __attribute((__pure__)); 
# 187
extern size_t wcscspn(const wchar_t * __wcs, const wchar_t * __reject) throw()
# 188
 __attribute((__pure__)); 
# 191
extern size_t wcsspn(const wchar_t * __wcs, const wchar_t * __accept) throw()
# 192
 __attribute((__pure__)); 
# 195
extern "C++" wchar_t *wcspbrk(wchar_t * __wcs, const wchar_t * __accept) throw() __asm__("wcspbrk")
# 196
 __attribute((__pure__)); 
# 197
extern "C++" const wchar_t *wcspbrk(const wchar_t * __wcs, const wchar_t * __accept) throw() __asm__("wcspbrk")
# 199
 __attribute((__pure__)); 
# 206
extern "C++" wchar_t *wcsstr(wchar_t * __haystack, const wchar_t * __needle) throw() __asm__("wcsstr")
# 207
 __attribute((__pure__)); 
# 208
extern "C++" const wchar_t *wcsstr(const wchar_t * __haystack, const wchar_t * __needle) throw() __asm__("wcsstr")
# 210
 __attribute((__pure__)); 
# 217
extern wchar_t *wcstok(wchar_t *__restrict__ __s, const wchar_t *__restrict__ __delim, wchar_t **__restrict__ __ptr) throw(); 
# 222
extern size_t wcslen(const wchar_t * __s) throw() __attribute((__pure__)); 
# 227
extern "C++" wchar_t *wcswcs(wchar_t * __haystack, const wchar_t * __needle) throw() __asm__("wcswcs")
# 228
 __attribute((__pure__)); 
# 229
extern "C++" const wchar_t *wcswcs(const wchar_t * __haystack, const wchar_t * __needle) throw() __asm__("wcswcs")
# 231
 __attribute((__pure__)); 
# 240 "/usr/include/wchar.h" 3
extern size_t wcsnlen(const wchar_t * __s, size_t __maxlen) throw()
# 241
 __attribute((__pure__)); 
# 247
extern "C++" wchar_t *wmemchr(wchar_t * __s, wchar_t __c, size_t __n) throw() __asm__("wmemchr")
# 248
 __attribute((__pure__)); 
# 249
extern "C++" const wchar_t *wmemchr(const wchar_t * __s, wchar_t __c, size_t __n) throw() __asm__("wmemchr")
# 251
 __attribute((__pure__)); 
# 258
extern int wmemcmp(const wchar_t * __s1, const wchar_t * __s2, size_t __n) throw()
# 259
 __attribute((__pure__)); 
# 262
extern wchar_t *wmemcpy(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, size_t __n) throw(); 
# 267
extern wchar_t *wmemmove(wchar_t * __s1, const wchar_t * __s2, size_t __n) throw(); 
# 271
extern wchar_t *wmemset(wchar_t * __s, wchar_t __c, size_t __n) throw(); 
# 276
extern wchar_t *wmempcpy(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, size_t __n) throw(); 
# 284
extern wint_t btowc(int __c) throw(); 
# 288
extern int wctob(wint_t __c) throw(); 
# 292
extern int mbsinit(const mbstate_t * __ps) throw() __attribute((__pure__)); 
# 296
extern size_t mbrtowc(wchar_t *__restrict__ __pwc, const char *__restrict__ __s, size_t __n, mbstate_t *__restrict__ __p) throw(); 
# 301
extern size_t wcrtomb(char *__restrict__ __s, wchar_t __wc, mbstate_t *__restrict__ __ps) throw(); 
# 305
extern size_t __mbrlen(const char *__restrict__ __s, size_t __n, mbstate_t *__restrict__ __ps) throw(); 
# 307
extern size_t mbrlen(const char *__restrict__ __s, size_t __n, mbstate_t *__restrict__ __ps) throw(); 
# 337 "/usr/include/wchar.h" 3
extern size_t mbsrtowcs(wchar_t *__restrict__ __dst, const char **__restrict__ __src, size_t __len, mbstate_t *__restrict__ __ps) throw(); 
# 343
extern size_t wcsrtombs(char *__restrict__ __dst, const wchar_t **__restrict__ __src, size_t __len, mbstate_t *__restrict__ __ps) throw(); 
# 351
extern size_t mbsnrtowcs(wchar_t *__restrict__ __dst, const char **__restrict__ __src, size_t __nmc, size_t __len, mbstate_t *__restrict__ __ps) throw(); 
# 357
extern size_t wcsnrtombs(char *__restrict__ __dst, const wchar_t **__restrict__ __src, size_t __nwc, size_t __len, mbstate_t *__restrict__ __ps) throw(); 
# 367
extern int wcwidth(wchar_t __c) throw(); 
# 371
extern int wcswidth(const wchar_t * __s, size_t __n) throw(); 
# 377
extern double wcstod(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 382
extern float wcstof(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 384
extern long double wcstold(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 396 "/usr/include/wchar.h" 3
extern _Float32 wcstof32(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 401
extern _Float64 wcstof64(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 411 "/usr/include/wchar.h" 3
extern _Float32x wcstof32x(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 416
extern _Float64x wcstof64x(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 428 "/usr/include/wchar.h" 3
extern long wcstol(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 433
extern unsigned long wcstoul(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 441
__extension__ extern long long wcstoll(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 448
__extension__ extern unsigned long long wcstoull(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 457
__extension__ extern long long wcstoq(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 464
__extension__ extern unsigned long long wcstouq(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 473
extern long wcstol_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, locale_t __loc) throw(); 
# 477
extern unsigned long wcstoul_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, locale_t __loc) throw(); 
# 482
__extension__ extern long long wcstoll_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, locale_t __loc) throw(); 
# 487
__extension__ extern unsigned long long wcstoull_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, locale_t __loc) throw(); 
# 492
extern double wcstod_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 496
extern float wcstof_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 500
extern long double wcstold_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 511 "/usr/include/wchar.h" 3
extern _Float32 wcstof32_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 517
extern _Float64 wcstof64_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 529 "/usr/include/wchar.h" 3
extern _Float32x wcstof32x_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 535
extern _Float64x wcstof64x_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) throw(); 
# 551 "/usr/include/wchar.h" 3
extern wchar_t *wcpcpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw(); 
# 556
extern wchar_t *wcpncpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __n) throw(); 
# 567 "/usr/include/wchar.h" 3
extern __FILE *open_wmemstream(wchar_t ** __bufloc, size_t * __sizeloc) throw(); 
# 573
extern int fwide(__FILE * __fp, int __mode) throw(); 
# 580
extern int fwprintf(__FILE *__restrict__ __stream, const wchar_t *__restrict__ __format, ...); 
# 587
extern int wprintf(const wchar_t *__restrict__ __format, ...); 
# 590
extern int swprintf(wchar_t *__restrict__ __s, size_t __n, const wchar_t *__restrict__ __format, ...) throw(); 
# 598
extern int vfwprintf(__FILE *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg); 
# 606
extern int vwprintf(const wchar_t *__restrict__ __format, __gnuc_va_list __arg); 
# 611
extern int vswprintf(wchar_t *__restrict__ __s, size_t __n, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) throw(); 
# 621
extern int fwscanf(__FILE *__restrict__ __stream, const wchar_t *__restrict__ __format, ...) __asm__("__isoc99_fwscanf"); 
# 628
extern int wscanf(const wchar_t *__restrict__ __format, ...) __asm__("__isoc99_wscanf"); 
# 631
extern int swscanf(const wchar_t *__restrict__ __s, const wchar_t *__restrict__ __format, ...) throw() __asm__("__isoc99_swscanf"); 
# 640
extern int fwscanf(__FILE *__restrict__ __stream, const wchar_t *__restrict__ __format, ...) __asm__("__isoc99_fwscanf"); 
# 644
extern int wscanf(const wchar_t *__restrict__ __format, ...) __asm__("__isoc99_wscanf"); 
# 647
extern int swscanf(const wchar_t *__restrict__ __s, const wchar_t *__restrict__ __format, ...) throw() __asm__("__isoc99_swscanf"); 
# 671 "/usr/include/wchar.h" 3
extern int vfwscanf(__FILE *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vfwscanf"); 
# 679
extern int vwscanf(const wchar_t *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vwscanf"); 
# 683
extern int vswscanf(const wchar_t *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) throw() __asm__("__isoc99_vswscanf"); 
# 693
extern int vfwscanf(__FILE *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vfwscanf"); 
# 697
extern int vwscanf(const wchar_t *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vwscanf"); 
# 700
extern int vswscanf(const wchar_t *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) throw() __asm__("__isoc99_vswscanf"); 
# 726 "/usr/include/wchar.h" 3
extern wint_t fgetwc(__FILE * __stream); 
# 727
extern wint_t getwc(__FILE * __stream); 
# 733
extern wint_t getwchar(); 
# 740
extern wint_t fputwc(wchar_t __wc, __FILE * __stream); 
# 741
extern wint_t putwc(wchar_t __wc, __FILE * __stream); 
# 747
extern wint_t putwchar(wchar_t __wc); 
# 755
extern wchar_t *fgetws(wchar_t *__restrict__ __ws, int __n, __FILE *__restrict__ __stream); 
# 762
extern int fputws(const wchar_t *__restrict__ __ws, __FILE *__restrict__ __stream); 
# 770
extern wint_t ungetwc(wint_t __wc, __FILE * __stream); 
# 781 "/usr/include/wchar.h" 3
extern wint_t getwc_unlocked(__FILE * __stream); 
# 782
extern wint_t getwchar_unlocked(); 
# 790
extern wint_t fgetwc_unlocked(__FILE * __stream); 
# 798
extern wint_t fputwc_unlocked(wchar_t __wc, __FILE * __stream); 
# 807 "/usr/include/wchar.h" 3
extern wint_t putwc_unlocked(wchar_t __wc, __FILE * __stream); 
# 808
extern wint_t putwchar_unlocked(wchar_t __wc); 
# 817 "/usr/include/wchar.h" 3
extern wchar_t *fgetws_unlocked(wchar_t *__restrict__ __ws, int __n, __FILE *__restrict__ __stream); 
# 826
extern int fputws_unlocked(const wchar_t *__restrict__ __ws, __FILE *__restrict__ __stream); 
# 834
extern size_t wcsftime(wchar_t *__restrict__ __s, size_t __maxsize, const wchar_t *__restrict__ __format, const tm *__restrict__ __tp) throw(); 
# 841
extern size_t wcsftime_l(wchar_t *__restrict__ __s, size_t __maxsize, const wchar_t *__restrict__ __format, const tm *__restrict__ __tp, locale_t __loc) throw(); 
# 856 "/usr/include/wchar.h" 3
}
# 62 "/usr/include/c++/9/cwchar" 3
namespace std { 
# 64
using ::mbstate_t;
# 65
}
# 135 "/usr/include/c++/9/cwchar" 3
extern "C++" {
# 137
namespace std __attribute((__visibility__("default"))) { 
# 141
using ::wint_t;
# 143
using ::btowc;
# 144
using ::fgetwc;
# 145
using ::fgetws;
# 146
using ::fputwc;
# 147
using ::fputws;
# 148
using ::fwide;
# 149
using ::fwprintf;
# 150
using ::fwscanf;
# 151
using ::getwc;
# 152
using ::getwchar;
# 153
using ::mbrlen;
# 154
using ::mbrtowc;
# 155
using ::mbsinit;
# 156
using ::mbsrtowcs;
# 157
using ::putwc;
# 158
using ::putwchar;
# 160
using ::swprintf;
# 162
using ::swscanf;
# 163
using ::ungetwc;
# 164
using ::vfwprintf;
# 166
using ::vfwscanf;
# 169
using ::vswprintf;
# 172
using ::vswscanf;
# 174
using ::vwprintf;
# 176
using ::vwscanf;
# 178
using ::wcrtomb;
# 179
using ::wcscat;
# 180
using ::wcscmp;
# 181
using ::wcscoll;
# 182
using ::wcscpy;
# 183
using ::wcscspn;
# 184
using ::wcsftime;
# 185
using ::wcslen;
# 186
using ::wcsncat;
# 187
using ::wcsncmp;
# 188
using ::wcsncpy;
# 189
using ::wcsrtombs;
# 190
using ::wcsspn;
# 191
using ::wcstod;
# 193
using ::wcstof;
# 195
using ::wcstok;
# 196
using ::wcstol;
# 197
using ::wcstoul;
# 198
using ::wcsxfrm;
# 199
using ::wctob;
# 200
using ::wmemcmp;
# 201
using ::wmemcpy;
# 202
using ::wmemmove;
# 203
using ::wmemset;
# 204
using ::wprintf;
# 205
using ::wscanf;
# 206
using ::wcschr;
# 207
using ::wcspbrk;
# 208
using ::wcsrchr;
# 209
using ::wcsstr;
# 210
using ::wmemchr;
# 235 "/usr/include/c++/9/cwchar" 3
}
# 236
}
# 244
namespace __gnu_cxx { 
# 251
using ::wcstold;
# 260 "/usr/include/c++/9/cwchar" 3
using ::wcstoll;
# 261
using ::wcstoull;
# 263
}
# 265
namespace std { 
# 267
using __gnu_cxx::wcstold;
# 268
using __gnu_cxx::wcstoll;
# 269
using __gnu_cxx::wcstoull;
# 270
}
# 280 "/usr/include/c++/9/cwchar" 3
namespace std { 
# 300
}
# 68 "/usr/include/c++/9/bits/postypes.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 88 "/usr/include/c++/9/bits/postypes.h" 3
typedef long streamoff; 
# 98 "/usr/include/c++/9/bits/postypes.h" 3
typedef ptrdiff_t streamsize; 
# 111 "/usr/include/c++/9/bits/postypes.h" 3
template< class _StateT> 
# 112
class fpos { 
# 115
streamoff _M_off; 
# 116
_StateT _M_state; 
# 123
public: fpos() : _M_off((0)), _M_state() 
# 124
{ } 
# 133 "/usr/include/c++/9/bits/postypes.h" 3
fpos(streamoff __off) : _M_off(__off), _M_state() 
# 134
{ } 
# 137
fpos(const fpos &) = default;
# 138
fpos &operator=(const fpos &) = default;
# 139
~fpos() = default;
# 143
operator streamoff() const { return _M_off; } 
# 147
void state(_StateT __st) 
# 148
{ (_M_state) = __st; } 
# 152
_StateT state() const 
# 153
{ return _M_state; } 
# 160
fpos &operator+=(streamoff __off) 
# 161
{ 
# 162
(_M_off) += __off; 
# 163
return *this; 
# 164
} 
# 171
fpos &operator-=(streamoff __off) 
# 172
{ 
# 173
(_M_off) -= __off; 
# 174
return *this; 
# 175
} 
# 184
fpos operator+(streamoff __off) const 
# 185
{ 
# 186
fpos __pos(*this); 
# 187
__pos += __off; 
# 188
return __pos; 
# 189
} 
# 198
fpos operator-(streamoff __off) const 
# 199
{ 
# 200
fpos __pos(*this); 
# 201
__pos -= __off; 
# 202
return __pos; 
# 203
} 
# 211
streamoff operator-(const fpos &__other) const 
# 212
{ return (_M_off) - (__other._M_off); } 
# 213
}; 
# 220
template< class _StateT> inline bool 
# 222
operator==(const fpos< _StateT>  &__lhs, const fpos< _StateT>  &__rhs) 
# 223
{ return ((streamoff)__lhs) == ((streamoff)__rhs); } 
# 225
template< class _StateT> inline bool 
# 227
operator!=(const fpos< _StateT>  &__lhs, const fpos< _StateT>  &__rhs) 
# 228
{ return ((streamoff)__lhs) != ((streamoff)__rhs); } 
# 234
typedef fpos< __mbstate_t>  streampos; 
# 236
typedef fpos< __mbstate_t>  wstreampos; 
# 245 "/usr/include/c++/9/bits/postypes.h" 3
typedef fpos< __mbstate_t>  u16streampos; 
# 247
typedef fpos< __mbstate_t>  u32streampos; 
# 251
}
# 42 "/usr/include/c++/9/iosfwd" 3
namespace std __attribute((__visibility__("default"))) { 
# 74 "/usr/include/c++/9/iosfwd" 3
class ios_base; 
# 76
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ios; 
# 79
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_streambuf; 
# 82
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_istream; 
# 85
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ostream; 
# 88
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_iostream; 
# 92
inline namespace __cxx11 { 
# 94
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 95
_Alloc = allocator< _CharT> > class basic_stringbuf; 
# 98
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 99
_Alloc = allocator< _CharT> > class basic_istringstream; 
# 102
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 103
_Alloc = allocator< _CharT> > class basic_ostringstream; 
# 106
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 107
_Alloc = allocator< _CharT> > class basic_stringstream; 
# 110
}
# 112
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_filebuf; 
# 115
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ifstream; 
# 118
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ofstream; 
# 121
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_fstream; 
# 124
template< class _CharT, class _Traits = char_traits< _CharT> > class istreambuf_iterator; 
# 127
template< class _CharT, class _Traits = char_traits< _CharT> > class ostreambuf_iterator; 
# 132
typedef basic_ios< char>  ios; 
# 135
typedef basic_streambuf< char>  streambuf; 
# 138
typedef basic_istream< char>  istream; 
# 141
typedef basic_ostream< char>  ostream; 
# 144
typedef basic_iostream< char>  iostream; 
# 147
typedef __cxx11::basic_stringbuf< char>  stringbuf; 
# 150
typedef __cxx11::basic_istringstream< char>  istringstream; 
# 153
typedef __cxx11::basic_ostringstream< char>  ostringstream; 
# 156
typedef __cxx11::basic_stringstream< char>  stringstream; 
# 159
typedef basic_filebuf< char>  filebuf; 
# 162
typedef basic_ifstream< char>  ifstream; 
# 165
typedef basic_ofstream< char>  ofstream; 
# 168
typedef basic_fstream< char>  fstream; 
# 172
typedef basic_ios< wchar_t>  wios; 
# 175
typedef basic_streambuf< wchar_t>  wstreambuf; 
# 178
typedef basic_istream< wchar_t>  wistream; 
# 181
typedef basic_ostream< wchar_t>  wostream; 
# 184
typedef basic_iostream< wchar_t>  wiostream; 
# 187
typedef __cxx11::basic_stringbuf< wchar_t>  wstringbuf; 
# 190
typedef __cxx11::basic_istringstream< wchar_t>  wistringstream; 
# 193
typedef __cxx11::basic_ostringstream< wchar_t>  wostringstream; 
# 196
typedef __cxx11::basic_stringstream< wchar_t>  wstringstream; 
# 199
typedef basic_filebuf< wchar_t>  wfilebuf; 
# 202
typedef basic_ifstream< wchar_t>  wifstream; 
# 205
typedef basic_ofstream< wchar_t>  wofstream; 
# 208
typedef basic_fstream< wchar_t>  wfstream; 
# 213
}
# 47 "/usr/include/c++/9/bits/char_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 61 "/usr/include/c++/9/bits/char_traits.h" 3
template< class _CharT> 
# 62
struct _Char_types { 
# 64
typedef unsigned long int_type; 
# 65
typedef std::streampos pos_type; 
# 66
typedef std::streamoff off_type; 
# 67
typedef mbstate_t state_type; 
# 68
}; 
# 86 "/usr/include/c++/9/bits/char_traits.h" 3
template< class _CharT> 
# 87
struct char_traits { 
# 89
typedef _CharT char_type; 
# 90
typedef typename _Char_types< _CharT> ::int_type int_type; 
# 91
typedef typename _Char_types< _CharT> ::pos_type pos_type; 
# 92
typedef typename _Char_types< _CharT> ::off_type off_type; 
# 93
typedef typename _Char_types< _CharT> ::state_type state_type; 
# 96
static constexpr void assign(char_type &__c1, const char_type &__c2) 
# 97
{ __c1 = __c2; } 
# 100
static constexpr bool eq(const char_type &__c1, const char_type &__c2) 
# 101
{ return __c1 == __c2; } 
# 104
static constexpr bool lt(const char_type &__c1, const char_type &__c2) 
# 105
{ return __c1 < __c2; } 
# 108
static constexpr int compare(const char_type * __s1, const char_type * __s2, std::size_t __n); 
# 111
static constexpr std::size_t length(const char_type * __s); 
# 114
static constexpr const char_type *find(const char_type * __s, std::size_t __n, const char_type & __a); 
# 117
static char_type *move(char_type * __s1, const char_type * __s2, std::size_t __n); 
# 120
static char_type *copy(char_type * __s1, const char_type * __s2, std::size_t __n); 
# 123
static char_type *assign(char_type * __s, std::size_t __n, char_type __a); 
# 126
static constexpr char_type to_char_type(const int_type &__c) 
# 127
{ return static_cast< char_type>(__c); } 
# 130
static constexpr int_type to_int_type(const char_type &__c) 
# 131
{ return static_cast< int_type>(__c); } 
# 134
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) 
# 135
{ return __c1 == __c2; } 
# 138
static constexpr int_type eof() 
# 139
{ return static_cast< int_type>(-1); } 
# 142
static constexpr int_type not_eof(const int_type &__c) 
# 143
{ return (!(eq_int_type)(__c, (eof)())) ? __c : (to_int_type)(char_type()); } 
# 144
}; 
# 146
template< class _CharT> constexpr int 
# 149
char_traits< _CharT> ::compare(const char_type *__s1, const char_type *__s2, std::size_t __n) 
# 150
{ 
# 151
for (std::size_t __i = (0); __i < __n; ++__i) { 
# 152
if ((lt)(__s1[__i], __s2[__i])) { 
# 153
return -1; } else { 
# 154
if ((lt)(__s2[__i], __s1[__i])) { 
# 155
return 1; }  }  }  
# 156
return 0; 
# 157
} 
# 159
template< class _CharT> constexpr std::size_t 
# 162
char_traits< _CharT> ::length(const char_type *__p) 
# 163
{ 
# 164
std::size_t __i = (0); 
# 165
while (!(eq)(__p[__i], char_type())) { 
# 166
++__i; }  
# 167
return __i; 
# 168
} 
# 170
template< class _CharT> constexpr const typename char_traits< _CharT> ::char_type *
# 173
char_traits< _CharT> ::find(const char_type *__s, std::size_t __n, const char_type &__a) 
# 174
{ 
# 175
for (std::size_t __i = (0); __i < __n; ++__i) { 
# 176
if ((eq)(__s[__i], __a)) { 
# 177
return __s + __i; }  }  
# 178
return 0; 
# 179
} 
# 181
template< class _CharT> typename char_traits< _CharT> ::char_type *
# 184
char_traits< _CharT> ::move(char_type *__s1, const char_type *__s2, std::size_t __n) 
# 185
{ 
# 186
if (__n == (0)) { 
# 187
return __s1; }  
# 188
return static_cast< _CharT *>(__builtin_memmove(__s1, __s2, __n * sizeof(char_type))); 
# 190
} 
# 192
template< class _CharT> typename char_traits< _CharT> ::char_type *
# 195
char_traits< _CharT> ::copy(char_type *__s1, const char_type *__s2, std::size_t __n) 
# 196
{ 
# 198
std::copy(__s2, __s2 + __n, __s1); 
# 199
return __s1; 
# 200
} 
# 202
template< class _CharT> typename char_traits< _CharT> ::char_type *
# 205
char_traits< _CharT> ::assign(char_type *__s, std::size_t __n, char_type __a) 
# 206
{ 
# 208
std::fill_n(__s, __n, __a); 
# 209
return __s; 
# 210
} 
# 213
}
# 215
namespace std __attribute((__visibility__("default"))) { 
# 283 "/usr/include/c++/9/bits/char_traits.h" 3
template< class _CharT> 
# 284
struct char_traits : public __gnu_cxx::char_traits< _CharT>  { 
# 285
}; 
# 290
template<> struct char_traits< char>  { 
# 292
typedef char char_type; 
# 293
typedef int int_type; 
# 294
typedef streampos pos_type; 
# 295
typedef streamoff off_type; 
# 296
typedef mbstate_t state_type; 
# 299
static void assign(char_type &__c1, const char_type &__c2) noexcept 
# 300
{ __c1 = __c2; } 
# 303
static constexpr bool eq(const char_type &__c1, const char_type &__c2) noexcept 
# 304
{ return __c1 == __c2; } 
# 307
static constexpr bool lt(const char_type &__c1, const char_type &__c2) noexcept 
# 308
{ 
# 310
return ((static_cast< unsigned char>(__c1)) < (static_cast< unsigned char>(__c2))); 
# 312
} 
# 315
static int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 316
{ 
# 317
if (__n == (0)) { 
# 318
return 0; }  
# 332 "/usr/include/c++/9/bits/char_traits.h" 3
return __builtin_memcmp(__s1, __s2, __n); 
# 333
} 
# 336
static size_t length(const char_type *__s) 
# 337
{ 
# 342
return __builtin_strlen(__s); 
# 343
} 
# 346
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 347
{ 
# 348
if (__n == (0)) { 
# 349
return 0; }  
# 356
return static_cast< const char_type *>(__builtin_memchr(__s, __a, __n)); 
# 357
} 
# 360
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 361
{ 
# 362
if (__n == (0)) { 
# 363
return __s1; }  
# 364
return static_cast< char_type *>(__builtin_memmove(__s1, __s2, __n)); 
# 365
} 
# 368
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 369
{ 
# 370
if (__n == (0)) { 
# 371
return __s1; }  
# 372
return static_cast< char_type *>(__builtin_memcpy(__s1, __s2, __n)); 
# 373
} 
# 376
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 377
{ 
# 378
if (__n == (0)) { 
# 379
return __s; }  
# 380
return static_cast< char_type *>(__builtin_memset(__s, __a, __n)); 
# 381
} 
# 384
static constexpr char_type to_char_type(const int_type &__c) noexcept 
# 385
{ return static_cast< char_type>(__c); } 
# 390
static constexpr int_type to_int_type(const char_type &__c) noexcept 
# 391
{ return static_cast< int_type>(static_cast< unsigned char>(__c)); } 
# 394
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) noexcept 
# 395
{ return __c1 == __c2; } 
# 398
static constexpr int_type eof() noexcept 
# 399
{ return static_cast< int_type>(-1); } 
# 402
static constexpr int_type not_eof(const int_type &__c) noexcept 
# 403
{ return (__c == eof()) ? 0 : __c; } 
# 404
}; 
# 410
template<> struct char_traits< wchar_t>  { 
# 412
typedef wchar_t char_type; 
# 413
typedef wint_t int_type; 
# 414
typedef streamoff off_type; 
# 415
typedef wstreampos pos_type; 
# 416
typedef mbstate_t state_type; 
# 419
static void assign(char_type &__c1, const char_type &__c2) noexcept 
# 420
{ __c1 = __c2; } 
# 423
static constexpr bool eq(const char_type &__c1, const char_type &__c2) noexcept 
# 424
{ return __c1 == __c2; } 
# 427
static constexpr bool lt(const char_type &__c1, const char_type &__c2) noexcept 
# 428
{ return __c1 < __c2; } 
# 431
static int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 432
{ 
# 433
if (__n == (0)) { 
# 434
return 0; }  
# 441
return wmemcmp(__s1, __s2, __n); 
# 442
} 
# 445
static size_t length(const char_type *__s) 
# 446
{ 
# 451
return wcslen(__s); 
# 452
} 
# 455
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 456
{ 
# 457
if (__n == (0)) { 
# 458
return 0; }  
# 465
return wmemchr(__s, __a, __n); 
# 466
} 
# 469
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 470
{ 
# 471
if (__n == (0)) { 
# 472
return __s1; }  
# 473
return wmemmove(__s1, __s2, __n); 
# 474
} 
# 477
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 478
{ 
# 479
if (__n == (0)) { 
# 480
return __s1; }  
# 481
return wmemcpy(__s1, __s2, __n); 
# 482
} 
# 485
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 486
{ 
# 487
if (__n == (0)) { 
# 488
return __s; }  
# 489
return wmemset(__s, __a, __n); 
# 490
} 
# 493
static constexpr char_type to_char_type(const int_type &__c) noexcept 
# 494
{ return (char_type)__c; } 
# 497
static constexpr int_type to_int_type(const char_type &__c) noexcept 
# 498
{ return (int_type)__c; } 
# 501
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) noexcept 
# 502
{ return __c1 == __c2; } 
# 505
static constexpr int_type eof() noexcept 
# 506
{ return static_cast< int_type>(4294967295U); } 
# 509
static constexpr int_type not_eof(const int_type &__c) noexcept 
# 510
{ return eq_int_type(__c, eof()) ? 0 : __c; } 
# 511
}; 
# 624 "/usr/include/c++/9/bits/char_traits.h" 3
}
# 44 "/usr/include/c++/9/cstdint" 3
namespace std { 
# 47
using ::int8_t;
# 48
using ::int16_t;
# 49
using ::int32_t;
# 50
using ::int64_t;
# 52
using ::int_fast8_t;
# 53
using ::int_fast16_t;
# 54
using ::int_fast32_t;
# 55
using ::int_fast64_t;
# 57
using ::int_least8_t;
# 58
using ::int_least16_t;
# 59
using ::int_least32_t;
# 60
using ::int_least64_t;
# 62
using ::intmax_t;
# 63
using ::intptr_t;
# 65
using ::uint8_t;
# 66
using ::uint16_t;
# 67
using ::uint32_t;
# 68
using ::uint64_t;
# 70
using ::uint_fast8_t;
# 71
using ::uint_fast16_t;
# 72
using ::uint_fast32_t;
# 73
using ::uint_fast64_t;
# 75
using ::uint_least8_t;
# 76
using ::uint_least16_t;
# 77
using ::uint_least32_t;
# 78
using ::uint_least64_t;
# 80
using ::uintmax_t;
# 81
using ::uintptr_t;
# 87
}
# 630 "/usr/include/c++/9/bits/char_traits.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 635
template<> struct char_traits< char16_t>  { 
# 637
typedef char16_t char_type; 
# 639
typedef uint_least16_t int_type; 
# 645
typedef streamoff off_type; 
# 646
typedef u16streampos pos_type; 
# 647
typedef mbstate_t state_type; 
# 650
static void assign(char_type &__c1, const char_type &__c2) noexcept 
# 651
{ __c1 = __c2; } 
# 654
static constexpr bool eq(const char_type &__c1, const char_type &__c2) noexcept 
# 655
{ return __c1 == __c2; } 
# 658
static constexpr bool lt(const char_type &__c1, const char_type &__c2) noexcept 
# 659
{ return __c1 < __c2; } 
# 662
static int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 663
{ 
# 664
for (size_t __i = (0); __i < __n; ++__i) { 
# 665
if (lt(__s1[__i], __s2[__i])) { 
# 666
return -1; } else { 
# 667
if (lt(__s2[__i], __s1[__i])) { 
# 668
return 1; }  }  }  
# 669
return 0; 
# 670
} 
# 673
static size_t length(const char_type *__s) 
# 674
{ 
# 675
size_t __i = (0); 
# 676
while (!eq(__s[__i], char_type())) { 
# 677
++__i; }  
# 678
return __i; 
# 679
} 
# 682
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 683
{ 
# 684
for (size_t __i = (0); __i < __n; ++__i) { 
# 685
if (eq(__s[__i], __a)) { 
# 686
return __s + __i; }  }  
# 687
return 0; 
# 688
} 
# 691
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 692
{ 
# 693
if (__n == (0)) { 
# 694
return __s1; }  
# 695
return (static_cast< char_type *>(__builtin_memmove(__s1, __s2, __n * sizeof(char_type)))); 
# 697
} 
# 700
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 701
{ 
# 702
if (__n == (0)) { 
# 703
return __s1; }  
# 704
return (static_cast< char_type *>(__builtin_memcpy(__s1, __s2, __n * sizeof(char_type)))); 
# 706
} 
# 709
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 710
{ 
# 711
for (size_t __i = (0); __i < __n; ++__i) { 
# 712
assign(__s[__i], __a); }  
# 713
return __s; 
# 714
} 
# 717
static constexpr char_type to_char_type(const int_type &__c) noexcept 
# 718
{ return (char_type)__c; } 
# 721
static constexpr int_type to_int_type(const char_type &__c) noexcept 
# 722
{ return (__c == (eof())) ? (int_type)65533 : ((int_type)__c); } 
# 725
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) noexcept 
# 726
{ return __c1 == __c2; } 
# 729
static constexpr int_type eof() noexcept 
# 730
{ return static_cast< int_type>(-1); } 
# 733
static constexpr int_type not_eof(const int_type &__c) noexcept 
# 734
{ return eq_int_type(__c, eof()) ? 0 : __c; } 
# 735
}; 
# 738
template<> struct char_traits< char32_t>  { 
# 740
typedef char32_t char_type; 
# 742
typedef uint_least32_t int_type; 
# 748
typedef streamoff off_type; 
# 749
typedef u32streampos pos_type; 
# 750
typedef mbstate_t state_type; 
# 753
static void assign(char_type &__c1, const char_type &__c2) noexcept 
# 754
{ __c1 = __c2; } 
# 757
static constexpr bool eq(const char_type &__c1, const char_type &__c2) noexcept 
# 758
{ return __c1 == __c2; } 
# 761
static constexpr bool lt(const char_type &__c1, const char_type &__c2) noexcept 
# 762
{ return __c1 < __c2; } 
# 765
static int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 766
{ 
# 767
for (size_t __i = (0); __i < __n; ++__i) { 
# 768
if (lt(__s1[__i], __s2[__i])) { 
# 769
return -1; } else { 
# 770
if (lt(__s2[__i], __s1[__i])) { 
# 771
return 1; }  }  }  
# 772
return 0; 
# 773
} 
# 776
static size_t length(const char_type *__s) 
# 777
{ 
# 778
size_t __i = (0); 
# 779
while (!eq(__s[__i], char_type())) { 
# 780
++__i; }  
# 781
return __i; 
# 782
} 
# 785
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 786
{ 
# 787
for (size_t __i = (0); __i < __n; ++__i) { 
# 788
if (eq(__s[__i], __a)) { 
# 789
return __s + __i; }  }  
# 790
return 0; 
# 791
} 
# 794
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 795
{ 
# 796
if (__n == (0)) { 
# 797
return __s1; }  
# 798
return (static_cast< char_type *>(__builtin_memmove(__s1, __s2, __n * sizeof(char_type)))); 
# 800
} 
# 803
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 804
{ 
# 805
if (__n == (0)) { 
# 806
return __s1; }  
# 807
return (static_cast< char_type *>(__builtin_memcpy(__s1, __s2, __n * sizeof(char_type)))); 
# 809
} 
# 812
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 813
{ 
# 814
for (size_t __i = (0); __i < __n; ++__i) { 
# 815
assign(__s[__i], __a); }  
# 816
return __s; 
# 817
} 
# 820
static constexpr char_type to_char_type(const int_type &__c) noexcept 
# 821
{ return (char_type)__c; } 
# 824
static constexpr int_type to_int_type(const char_type &__c) noexcept 
# 825
{ return (int_type)__c; } 
# 828
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) noexcept 
# 829
{ return __c1 == __c2; } 
# 832
static constexpr int_type eof() noexcept 
# 833
{ return static_cast< int_type>(-1); } 
# 836
static constexpr int_type not_eof(const int_type &__c) noexcept 
# 837
{ return eq_int_type(__c, eof()) ? 0 : __c; } 
# 838
}; 
# 841
}
# 31 "/usr/include/locale.h" 3
extern "C" {
# 51 "/usr/include/locale.h" 3
struct lconv { 
# 55
char *decimal_point; 
# 56
char *thousands_sep; 
# 62
char *grouping; 
# 68
char *int_curr_symbol; 
# 69
char *currency_symbol; 
# 70
char *mon_decimal_point; 
# 71
char *mon_thousands_sep; 
# 72
char *mon_grouping; 
# 73
char *positive_sign; 
# 74
char *negative_sign; 
# 75
char int_frac_digits; 
# 76
char frac_digits; 
# 78
char p_cs_precedes; 
# 80
char p_sep_by_space; 
# 82
char n_cs_precedes; 
# 84
char n_sep_by_space; 
# 91
char p_sign_posn; 
# 92
char n_sign_posn; 
# 95
char int_p_cs_precedes; 
# 97
char int_p_sep_by_space; 
# 99
char int_n_cs_precedes; 
# 101
char int_n_sep_by_space; 
# 108
char int_p_sign_posn; 
# 109
char int_n_sign_posn; 
# 118 "/usr/include/locale.h" 3
}; 
# 122
extern char *setlocale(int __category, const char * __locale) throw(); 
# 125
extern lconv *localeconv() throw(); 
# 141 "/usr/include/locale.h" 3
extern locale_t newlocale(int __category_mask, const char * __locale, locale_t __base) throw(); 
# 176 "/usr/include/locale.h" 3
extern locale_t duplocale(locale_t __dataset) throw(); 
# 180
extern void freelocale(locale_t __dataset) throw(); 
# 187
extern locale_t uselocale(locale_t __dataset) throw(); 
# 195
}
# 51 "/usr/include/c++/9/clocale" 3
namespace std { 
# 53
using ::lconv;
# 54
using ::setlocale;
# 55
using ::localeconv;
# 56
}
# 48 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++locale.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 52
extern "C" __typeof__(uselocale) __uselocale; 
# 55
}
# 58
namespace std __attribute((__visibility__("default"))) { 
# 62
typedef __locale_t __c_locale; 
# 69
inline int __convert_from_v(const __c_locale &__cloc __attribute((__unused__)), char *
# 70
__out, const int 
# 71
__size __attribute((__unused__)), const char *
# 72
__fmt, ...) 
# 73
{ 
# 75
__c_locale __old = __gnu_cxx::__uselocale(__cloc); 
# 88 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++locale.h" 3
__builtin_va_list __args; 
# 89
__builtin_va_start((__args),__fmt); 
# 92
const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args); 
# 97
__builtin_va_end(__args); 
# 100
__gnu_cxx::__uselocale(__old); 
# 108
return __ret; 
# 109
} 
# 112
}
# 28 "/usr/include/ctype.h" 3
extern "C" {
# 47 "/usr/include/ctype.h" 3
enum { 
# 48
_ISupper = ((0 < 8) ? (1 << 0) << 8 : ((1 << 0) >> 8)), 
# 49
_ISlower = ((1 < 8) ? (1 << 1) << 8 : ((1 << 1) >> 8)), 
# 50
_ISalpha = ((2 < 8) ? (1 << 2) << 8 : ((1 << 2) >> 8)), 
# 51
_ISdigit = ((3 < 8) ? (1 << 3) << 8 : ((1 << 3) >> 8)), 
# 52
_ISxdigit = ((4 < 8) ? (1 << 4) << 8 : ((1 << 4) >> 8)), 
# 53
_ISspace = ((5 < 8) ? (1 << 5) << 8 : ((1 << 5) >> 8)), 
# 54
_ISprint = ((6 < 8) ? (1 << 6) << 8 : ((1 << 6) >> 8)), 
# 55
_ISgraph = ((7 < 8) ? (1 << 7) << 8 : ((1 << 7) >> 8)), 
# 56
_ISblank = ((8 < 8) ? (1 << 8) << 8 : ((1 << 8) >> 8)), 
# 57
_IScntrl, 
# 58
_ISpunct = ((10 < 8) ? (1 << 10) << 8 : ((1 << 10) >> 8)), 
# 59
_ISalnum = ((11 < 8) ? (1 << 11) << 8 : ((1 << 11) >> 8))
# 60
}; 
# 79 "/usr/include/ctype.h" 3
extern const unsigned short **__ctype_b_loc() throw()
# 80
 __attribute((const)); 
# 81
extern const __int32_t **__ctype_tolower_loc() throw()
# 82
 __attribute((const)); 
# 83
extern const __int32_t **__ctype_toupper_loc() throw()
# 84
 __attribute((const)); 
# 108 "/usr/include/ctype.h" 3
extern int isalnum(int) throw(); 
# 109
extern int isalpha(int) throw(); 
# 110
extern int iscntrl(int) throw(); 
# 111
extern int isdigit(int) throw(); 
# 112
extern int islower(int) throw(); 
# 113
extern int isgraph(int) throw(); 
# 114
extern int isprint(int) throw(); 
# 115
extern int ispunct(int) throw(); 
# 116
extern int isspace(int) throw(); 
# 117
extern int isupper(int) throw(); 
# 118
extern int isxdigit(int) throw(); 
# 122
extern int tolower(int __c) throw(); 
# 125
extern int toupper(int __c) throw(); 
# 130
extern int isblank(int) throw(); 
# 135
extern int isctype(int __c, int __mask) throw(); 
# 142
extern int isascii(int __c) throw(); 
# 146
extern int toascii(int __c) throw(); 
# 150
extern int _toupper(int) throw(); 
# 151
extern int _tolower(int) throw(); 
# 251 "/usr/include/ctype.h" 3
extern int isalnum_l(int, locale_t) throw(); 
# 252
extern int isalpha_l(int, locale_t) throw(); 
# 253
extern int iscntrl_l(int, locale_t) throw(); 
# 254
extern int isdigit_l(int, locale_t) throw(); 
# 255
extern int islower_l(int, locale_t) throw(); 
# 256
extern int isgraph_l(int, locale_t) throw(); 
# 257
extern int isprint_l(int, locale_t) throw(); 
# 258
extern int ispunct_l(int, locale_t) throw(); 
# 259
extern int isspace_l(int, locale_t) throw(); 
# 260
extern int isupper_l(int, locale_t) throw(); 
# 261
extern int isxdigit_l(int, locale_t) throw(); 
# 263
extern int isblank_l(int, locale_t) throw(); 
# 267
extern int __tolower_l(int __c, locale_t __l) throw(); 
# 268
extern int tolower_l(int __c, locale_t __l) throw(); 
# 271
extern int __toupper_l(int __c, locale_t __l) throw(); 
# 272
extern int toupper_l(int __c, locale_t __l) throw(); 
# 327 "/usr/include/ctype.h" 3
}
# 62 "/usr/include/c++/9/cctype" 3
namespace std { 
# 64
using ::isalnum;
# 65
using ::isalpha;
# 66
using ::iscntrl;
# 67
using ::isdigit;
# 68
using ::isgraph;
# 69
using ::islower;
# 70
using ::isprint;
# 71
using ::ispunct;
# 72
using ::isspace;
# 73
using ::isupper;
# 74
using ::isxdigit;
# 75
using ::tolower;
# 76
using ::toupper;
# 77
}
# 85
namespace std { 
# 87
using ::isblank;
# 88
}
# 44 "/usr/include/c++/9/bits/localefwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 55 "/usr/include/c++/9/bits/localefwd.h" 3
class locale; 
# 57
template< class _Facet> bool has_facet(const locale &) throw(); 
# 61
template< class _Facet> const _Facet &use_facet(const locale &); 
# 66
template< class _CharT> inline bool isspace(_CharT, const locale &); 
# 70
template< class _CharT> inline bool isprint(_CharT, const locale &); 
# 74
template< class _CharT> inline bool iscntrl(_CharT, const locale &); 
# 78
template< class _CharT> inline bool isupper(_CharT, const locale &); 
# 82
template< class _CharT> inline bool islower(_CharT, const locale &); 
# 86
template< class _CharT> inline bool isalpha(_CharT, const locale &); 
# 90
template< class _CharT> inline bool isdigit(_CharT, const locale &); 
# 94
template< class _CharT> inline bool ispunct(_CharT, const locale &); 
# 98
template< class _CharT> inline bool isxdigit(_CharT, const locale &); 
# 102
template< class _CharT> inline bool isalnum(_CharT, const locale &); 
# 106
template< class _CharT> inline bool isgraph(_CharT, const locale &); 
# 111
template< class _CharT> inline bool isblank(_CharT, const locale &); 
# 116
template< class _CharT> inline _CharT toupper(_CharT, const locale &); 
# 120
template< class _CharT> inline _CharT tolower(_CharT, const locale &); 
# 125
struct ctype_base; 
# 126
template< class _CharT> class ctype; 
# 128
template<> class ctype< char> ; 
# 130
template<> class ctype< wchar_t> ; 
# 132
template< class _CharT> class ctype_byname; 
# 136
class codecvt_base; 
# 137
template< class _InternT, class _ExternT, class _StateT> class codecvt; 
# 139
template<> class codecvt< char, char, __mbstate_t> ; 
# 141
template<> class codecvt< wchar_t, char, __mbstate_t> ; 
# 144
template<> class codecvt< char16_t, char, __mbstate_t> ; 
# 145
template<> class codecvt< char32_t, char, __mbstate_t> ; 
# 151
template< class _InternT, class _ExternT, class _StateT> class codecvt_byname; 
# 156
template< class _CharT, class _InIter = istreambuf_iterator< _CharT> > class num_get; 
# 158
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT> > class num_put; 
# 161
inline namespace __cxx11 { 
# 162
template< class _CharT> class numpunct; 
# 163
template< class _CharT> class numpunct_byname; 
# 164
}
# 166
inline namespace __cxx11 { 
# 168
template< class _CharT> class collate; 
# 170
template< class _CharT> class collate_byname; 
# 172
}
# 175
class time_base; 
# 176
inline namespace __cxx11 { 
# 177
template< class _CharT, class _InIter = istreambuf_iterator< _CharT> > class time_get; 
# 179
template< class _CharT, class _InIter = istreambuf_iterator< _CharT> > class time_get_byname; 
# 181
}
# 182
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT> > class time_put; 
# 184
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT> > class time_put_byname; 
# 188
class money_base; 
# 189
inline namespace __cxx11 { 
# 190
template< class _CharT, class _InIter = istreambuf_iterator< _CharT> > class money_get; 
# 192
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT> > class money_put; 
# 194
}
# 195
inline namespace __cxx11 { 
# 196
template< class _CharT, bool _Intl = false> class moneypunct; 
# 198
template< class _CharT, bool _Intl = false> class moneypunct_byname; 
# 200
}
# 203
class messages_base; 
# 204
inline namespace __cxx11 { 
# 205
template< class _CharT> class messages; 
# 207
template< class _CharT> class messages_byname; 
# 209
}
# 212
}
# 30 "/usr/include/x86_64-linux-gnu/c++/9/bits/gthr.h" 3
#pragma GCC visibility push ( default )
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 3
struct sched_param { 
# 25
int sched_priority; 
# 26
}; 
# 78 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3
extern "C" {
# 82
extern int clone(int (* __fn)(void * __arg), void * __child_stack, int __flags, void * __arg, ...) throw(); 
# 86
extern int unshare(int __flags) throw(); 
# 89
extern int sched_getcpu() throw(); 
# 92
extern int getcpu(unsigned *, unsigned *) throw(); 
# 95
extern int setns(int __fd, int __nstype) throw(); 
# 98
}
# 32 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3
typedef unsigned long __cpu_mask; 
# 42
typedef 
# 40
struct { 
# 41
__cpu_mask __bits[(1024) / ((8) * sizeof(__cpu_mask))]; 
# 42
} cpu_set_t; 
# 115 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3
extern "C" {
# 117
extern int __sched_cpucount(size_t __setsize, const cpu_set_t * __setp) throw(); 
# 119
extern cpu_set_t *__sched_cpualloc(size_t __count) throw(); 
# 120
extern void __sched_cpufree(cpu_set_t * __set) throw(); 
# 122
}
# 51 "/usr/include/sched.h" 3
extern "C" {
# 54
extern int sched_setparam(__pid_t __pid, const sched_param * __param) throw(); 
# 58
extern int sched_getparam(__pid_t __pid, sched_param * __param) throw(); 
# 61
extern int sched_setscheduler(__pid_t __pid, int __policy, const sched_param * __param) throw(); 
# 65
extern int sched_getscheduler(__pid_t __pid) throw(); 
# 68
extern int sched_yield() throw(); 
# 71
extern int sched_get_priority_max(int __algorithm) throw(); 
# 74
extern int sched_get_priority_min(int __algorithm) throw(); 
# 77
extern int sched_rr_get_interval(__pid_t __pid, timespec * __t) throw(); 
# 121 "/usr/include/sched.h" 3
extern int sched_setaffinity(__pid_t __pid, size_t __cpusetsize, const cpu_set_t * __cpuset) throw(); 
# 125
extern int sched_getaffinity(__pid_t __pid, size_t __cpusetsize, cpu_set_t * __cpuset) throw(); 
# 129
}
# 31 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3
typedef long __jmp_buf[8]; 
# 34 "/usr/include/pthread.h" 3
enum { 
# 35
PTHREAD_CREATE_JOINABLE, 
# 37
PTHREAD_CREATE_DETACHED
# 39
}; 
# 44
enum { 
# 45
PTHREAD_MUTEX_TIMED_NP, 
# 46
PTHREAD_MUTEX_RECURSIVE_NP, 
# 47
PTHREAD_MUTEX_ERRORCHECK_NP, 
# 48
PTHREAD_MUTEX_ADAPTIVE_NP, 
# 51
PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP, 
# 52
PTHREAD_MUTEX_RECURSIVE, 
# 53
PTHREAD_MUTEX_ERRORCHECK, 
# 54
PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL, 
# 58
PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP
# 60
}; 
# 66
enum { 
# 67
PTHREAD_MUTEX_STALLED, 
# 68
PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED, 
# 69
PTHREAD_MUTEX_ROBUST, 
# 70
PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
# 71
}; 
# 78
enum { 
# 79
PTHREAD_PRIO_NONE, 
# 80
PTHREAD_PRIO_INHERIT, 
# 81
PTHREAD_PRIO_PROTECT
# 82
}; 
# 101 "/usr/include/pthread.h" 3
enum { 
# 102
PTHREAD_RWLOCK_PREFER_READER_NP, 
# 103
PTHREAD_RWLOCK_PREFER_WRITER_NP, 
# 104
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP, 
# 105
PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
# 106
}; 
# 121 "/usr/include/pthread.h" 3
enum { 
# 122
PTHREAD_INHERIT_SCHED, 
# 124
PTHREAD_EXPLICIT_SCHED
# 126
}; 
# 131
enum { 
# 132
PTHREAD_SCOPE_SYSTEM, 
# 134
PTHREAD_SCOPE_PROCESS
# 136
}; 
# 141
enum { 
# 142
PTHREAD_PROCESS_PRIVATE, 
# 144
PTHREAD_PROCESS_SHARED
# 146
}; 
# 155 "/usr/include/pthread.h" 3
struct _pthread_cleanup_buffer { 
# 157
void (*__routine)(void *); 
# 158
void *__arg; 
# 159
int __canceltype; 
# 160
_pthread_cleanup_buffer *__prev; 
# 161
}; 
# 165
enum { 
# 166
PTHREAD_CANCEL_ENABLE, 
# 168
PTHREAD_CANCEL_DISABLE
# 170
}; 
# 172
enum { 
# 173
PTHREAD_CANCEL_DEFERRED, 
# 175
PTHREAD_CANCEL_ASYNCHRONOUS
# 177
}; 
# 193 "/usr/include/pthread.h" 3
extern "C" {
# 198
extern int pthread_create(pthread_t *__restrict__ __newthread, const pthread_attr_t *__restrict__ __attr, void *(* __start_routine)(void *), void *__restrict__ __arg) throw()
# 201
 __attribute((__nonnull__(1, 3))); 
# 207
extern void pthread_exit(void * __retval) __attribute((__noreturn__)); 
# 215
extern int pthread_join(pthread_t __th, void ** __thread_return); 
# 220
extern int pthread_tryjoin_np(pthread_t __th, void ** __thread_return) throw(); 
# 228
extern int pthread_timedjoin_np(pthread_t __th, void ** __thread_return, const timespec * __abstime); 
# 238 "/usr/include/pthread.h" 3
extern int pthread_clockjoin_np(pthread_t __th, void ** __thread_return, clockid_t __clockid, const timespec * __abstime); 
# 247
extern int pthread_detach(pthread_t __th) throw(); 
# 251
extern pthread_t pthread_self() throw() __attribute((const)); 
# 254
extern int pthread_equal(pthread_t __thread1, pthread_t __thread2) throw()
# 255
 __attribute((const)); 
# 263
extern int pthread_attr_init(pthread_attr_t * __attr) throw() __attribute((__nonnull__(1))); 
# 266
extern int pthread_attr_destroy(pthread_attr_t * __attr) throw()
# 267
 __attribute((__nonnull__(1))); 
# 270
extern int pthread_attr_getdetachstate(const pthread_attr_t * __attr, int * __detachstate) throw()
# 272
 __attribute((__nonnull__(1, 2))); 
# 275
extern int pthread_attr_setdetachstate(pthread_attr_t * __attr, int __detachstate) throw()
# 277
 __attribute((__nonnull__(1))); 
# 281
extern int pthread_attr_getguardsize(const pthread_attr_t * __attr, size_t * __guardsize) throw()
# 283
 __attribute((__nonnull__(1, 2))); 
# 286
extern int pthread_attr_setguardsize(pthread_attr_t * __attr, size_t __guardsize) throw()
# 288
 __attribute((__nonnull__(1))); 
# 292
extern int pthread_attr_getschedparam(const pthread_attr_t *__restrict__ __attr, sched_param *__restrict__ __param) throw()
# 294
 __attribute((__nonnull__(1, 2))); 
# 297
extern int pthread_attr_setschedparam(pthread_attr_t *__restrict__ __attr, const sched_param *__restrict__ __param) throw()
# 299
 __attribute((__nonnull__(1, 2))); 
# 302
extern int pthread_attr_getschedpolicy(const pthread_attr_t *__restrict__ __attr, int *__restrict__ __policy) throw()
# 304
 __attribute((__nonnull__(1, 2))); 
# 307
extern int pthread_attr_setschedpolicy(pthread_attr_t * __attr, int __policy) throw()
# 308
 __attribute((__nonnull__(1))); 
# 311
extern int pthread_attr_getinheritsched(const pthread_attr_t *__restrict__ __attr, int *__restrict__ __inherit) throw()
# 313
 __attribute((__nonnull__(1, 2))); 
# 316
extern int pthread_attr_setinheritsched(pthread_attr_t * __attr, int __inherit) throw()
# 318
 __attribute((__nonnull__(1))); 
# 322
extern int pthread_attr_getscope(const pthread_attr_t *__restrict__ __attr, int *__restrict__ __scope) throw()
# 324
 __attribute((__nonnull__(1, 2))); 
# 327
extern int pthread_attr_setscope(pthread_attr_t * __attr, int __scope) throw()
# 328
 __attribute((__nonnull__(1))); 
# 331
extern int pthread_attr_getstackaddr(const pthread_attr_t *__restrict__ __attr, void **__restrict__ __stackaddr) throw()
# 333
 __attribute((__nonnull__(1, 2))) __attribute((__deprecated__)); 
# 339
extern int pthread_attr_setstackaddr(pthread_attr_t * __attr, void * __stackaddr) throw()
# 341
 __attribute((__nonnull__(1))) __attribute((__deprecated__)); 
# 344
extern int pthread_attr_getstacksize(const pthread_attr_t *__restrict__ __attr, size_t *__restrict__ __stacksize) throw()
# 346
 __attribute((__nonnull__(1, 2))); 
# 351
extern int pthread_attr_setstacksize(pthread_attr_t * __attr, size_t __stacksize) throw()
# 353
 __attribute((__nonnull__(1))); 
# 357
extern int pthread_attr_getstack(const pthread_attr_t *__restrict__ __attr, void **__restrict__ __stackaddr, size_t *__restrict__ __stacksize) throw()
# 360
 __attribute((__nonnull__(1, 2, 3))); 
# 365
extern int pthread_attr_setstack(pthread_attr_t * __attr, void * __stackaddr, size_t __stacksize) throw()
# 366
 __attribute((__nonnull__(1))); 
# 372
extern int pthread_attr_setaffinity_np(pthread_attr_t * __attr, size_t __cpusetsize, const cpu_set_t * __cpuset) throw()
# 375
 __attribute((__nonnull__(1, 3))); 
# 379
extern int pthread_attr_getaffinity_np(const pthread_attr_t * __attr, size_t __cpusetsize, cpu_set_t * __cpuset) throw()
# 382
 __attribute((__nonnull__(1, 3))); 
# 385
extern int pthread_getattr_default_np(pthread_attr_t * __attr) throw()
# 386
 __attribute((__nonnull__(1))); 
# 390
extern int pthread_setattr_default_np(const pthread_attr_t * __attr) throw()
# 391
 __attribute((__nonnull__(1))); 
# 396
extern int pthread_getattr_np(pthread_t __th, pthread_attr_t * __attr) throw()
# 397
 __attribute((__nonnull__(2))); 
# 405
extern int pthread_setschedparam(pthread_t __target_thread, int __policy, const sched_param * __param) throw()
# 407
 __attribute((__nonnull__(3))); 
# 410
extern int pthread_getschedparam(pthread_t __target_thread, int *__restrict__ __policy, sched_param *__restrict__ __param) throw()
# 413
 __attribute((__nonnull__(2, 3))); 
# 416
extern int pthread_setschedprio(pthread_t __target_thread, int __prio) throw(); 
# 422
extern int pthread_getname_np(pthread_t __target_thread, char * __buf, size_t __buflen) throw()
# 424
 __attribute((__nonnull__(2))); 
# 427
extern int pthread_setname_np(pthread_t __target_thread, const char * __name) throw()
# 428
 __attribute((__nonnull__(2))); 
# 434
extern int pthread_getconcurrency() throw(); 
# 437
extern int pthread_setconcurrency(int __level) throw(); 
# 445
extern int pthread_yield() throw(); 
# 450
extern int pthread_setaffinity_np(pthread_t __th, size_t __cpusetsize, const cpu_set_t * __cpuset) throw()
# 452
 __attribute((__nonnull__(3))); 
# 455
extern int pthread_getaffinity_np(pthread_t __th, size_t __cpusetsize, cpu_set_t * __cpuset) throw()
# 457
 __attribute((__nonnull__(3))); 
# 470 "/usr/include/pthread.h" 3
extern int pthread_once(pthread_once_t * __once_control, void (* __init_routine)(void))
# 471
 __attribute((__nonnull__(1, 2))); 
# 482 "/usr/include/pthread.h" 3
extern int pthread_setcancelstate(int __state, int * __oldstate); 
# 486
extern int pthread_setcanceltype(int __type, int * __oldtype); 
# 489
extern int pthread_cancel(pthread_t __th); 
# 494
extern void pthread_testcancel(); 
# 507
typedef 
# 500
struct { 
# 502
struct { 
# 503
__jmp_buf __cancel_jmp_buf; 
# 504
int __mask_was_saved; 
# 505
} __cancel_jmp_buf[1]; 
# 506
void *__pad[4]; 
# 507
} __pthread_unwind_buf_t __attribute((__aligned__)); 
# 516 "/usr/include/pthread.h" 3
struct __pthread_cleanup_frame { 
# 518
void (*__cancel_routine)(void *); 
# 519
void *__cancel_arg; 
# 520
int __do_it; 
# 521
int __cancel_type; 
# 522
}; 
# 527
class __pthread_cleanup_class { 
# 529
void (*__cancel_routine)(void *); 
# 530
void *__cancel_arg; 
# 531
int __do_it; 
# 532
int __cancel_type; 
# 535
public: __pthread_cleanup_class(void (*__fct)(void *), void *__arg) : __cancel_routine(__fct), __cancel_arg(__arg), __do_it(1) 
# 536
{ } 
# 537
~__pthread_cleanup_class() { if (__do_it) { (__cancel_routine)(__cancel_arg); }  } 
# 538
void __setdoit(int __newval) { (__do_it) = __newval; } 
# 539
void __defer() { pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &(__cancel_type)); 
# 540
} 
# 541
void __restore() const { pthread_setcanceltype(__cancel_type, 0); } 
# 542
}; 
# 718 "/usr/include/pthread.h" 3
struct __jmp_buf_tag; 
# 719
extern int __sigsetjmp(__jmp_buf_tag * __env, int __savemask) throw(); 
# 725
extern int pthread_mutex_init(pthread_mutex_t * __mutex, const pthread_mutexattr_t * __mutexattr) throw()
# 727
 __attribute((__nonnull__(1))); 
# 730
extern int pthread_mutex_destroy(pthread_mutex_t * __mutex) throw()
# 731
 __attribute((__nonnull__(1))); 
# 734
extern int pthread_mutex_trylock(pthread_mutex_t * __mutex) throw()
# 735
 __attribute((__nonnull__(1))); 
# 738
extern int pthread_mutex_lock(pthread_mutex_t * __mutex) throw()
# 739
 __attribute((__nonnull__(1))); 
# 743
extern int pthread_mutex_timedlock(pthread_mutex_t *__restrict__ __mutex, const timespec *__restrict__ __abstime) throw()
# 745
 __attribute((__nonnull__(1, 2))); 
# 749
extern int pthread_mutex_clocklock(pthread_mutex_t *__restrict__ __mutex, clockid_t __clockid, const timespec *__restrict__ __abstime) throw()
# 752
 __attribute((__nonnull__(1, 3))); 
# 756
extern int pthread_mutex_unlock(pthread_mutex_t * __mutex) throw()
# 757
 __attribute((__nonnull__(1))); 
# 761
extern int pthread_mutex_getprioceiling(const pthread_mutex_t *__restrict__ __mutex, int *__restrict__ __prioceiling) throw()
# 764
 __attribute((__nonnull__(1, 2))); 
# 768
extern int pthread_mutex_setprioceiling(pthread_mutex_t *__restrict__ __mutex, int __prioceiling, int *__restrict__ __old_ceiling) throw()
# 771
 __attribute((__nonnull__(1, 3))); 
# 776
extern int pthread_mutex_consistent(pthread_mutex_t * __mutex) throw()
# 777
 __attribute((__nonnull__(1))); 
# 779
extern int pthread_mutex_consistent_np(pthread_mutex_t * __mutex) throw()
# 780
 __attribute((__nonnull__(1))); 
# 789 "/usr/include/pthread.h" 3
extern int pthread_mutexattr_init(pthread_mutexattr_t * __attr) throw()
# 790
 __attribute((__nonnull__(1))); 
# 793
extern int pthread_mutexattr_destroy(pthread_mutexattr_t * __attr) throw()
# 794
 __attribute((__nonnull__(1))); 
# 797
extern int pthread_mutexattr_getpshared(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __pshared) throw()
# 800
 __attribute((__nonnull__(1, 2))); 
# 803
extern int pthread_mutexattr_setpshared(pthread_mutexattr_t * __attr, int __pshared) throw()
# 805
 __attribute((__nonnull__(1))); 
# 809
extern int pthread_mutexattr_gettype(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __kind) throw()
# 811
 __attribute((__nonnull__(1, 2))); 
# 816
extern int pthread_mutexattr_settype(pthread_mutexattr_t * __attr, int __kind) throw()
# 817
 __attribute((__nonnull__(1))); 
# 821
extern int pthread_mutexattr_getprotocol(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __protocol) throw()
# 824
 __attribute((__nonnull__(1, 2))); 
# 828
extern int pthread_mutexattr_setprotocol(pthread_mutexattr_t * __attr, int __protocol) throw()
# 830
 __attribute((__nonnull__(1))); 
# 833
extern int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __prioceiling) throw()
# 836
 __attribute((__nonnull__(1, 2))); 
# 839
extern int pthread_mutexattr_setprioceiling(pthread_mutexattr_t * __attr, int __prioceiling) throw()
# 841
 __attribute((__nonnull__(1))); 
# 845
extern int pthread_mutexattr_getrobust(const pthread_mutexattr_t * __attr, int * __robustness) throw()
# 847
 __attribute((__nonnull__(1, 2))); 
# 849
extern int pthread_mutexattr_getrobust_np(const pthread_mutexattr_t * __attr, int * __robustness) throw()
# 851
 __attribute((__nonnull__(1, 2))); 
# 855
extern int pthread_mutexattr_setrobust(pthread_mutexattr_t * __attr, int __robustness) throw()
# 857
 __attribute((__nonnull__(1))); 
# 859
extern int pthread_mutexattr_setrobust_np(pthread_mutexattr_t * __attr, int __robustness) throw()
# 861
 __attribute((__nonnull__(1))); 
# 871 "/usr/include/pthread.h" 3
extern int pthread_rwlock_init(pthread_rwlock_t *__restrict__ __rwlock, const pthread_rwlockattr_t *__restrict__ __attr) throw()
# 873
 __attribute((__nonnull__(1))); 
# 876
extern int pthread_rwlock_destroy(pthread_rwlock_t * __rwlock) throw()
# 877
 __attribute((__nonnull__(1))); 
# 880
extern int pthread_rwlock_rdlock(pthread_rwlock_t * __rwlock) throw()
# 881
 __attribute((__nonnull__(1))); 
# 884
extern int pthread_rwlock_tryrdlock(pthread_rwlock_t * __rwlock) throw()
# 885
 __attribute((__nonnull__(1))); 
# 889
extern int pthread_rwlock_timedrdlock(pthread_rwlock_t *__restrict__ __rwlock, const timespec *__restrict__ __abstime) throw()
# 891
 __attribute((__nonnull__(1, 2))); 
# 895
extern int pthread_rwlock_clockrdlock(pthread_rwlock_t *__restrict__ __rwlock, clockid_t __clockid, const timespec *__restrict__ __abstime) throw()
# 898
 __attribute((__nonnull__(1, 3))); 
# 902
extern int pthread_rwlock_wrlock(pthread_rwlock_t * __rwlock) throw()
# 903
 __attribute((__nonnull__(1))); 
# 906
extern int pthread_rwlock_trywrlock(pthread_rwlock_t * __rwlock) throw()
# 907
 __attribute((__nonnull__(1))); 
# 911
extern int pthread_rwlock_timedwrlock(pthread_rwlock_t *__restrict__ __rwlock, const timespec *__restrict__ __abstime) throw()
# 913
 __attribute((__nonnull__(1, 2))); 
# 917
extern int pthread_rwlock_clockwrlock(pthread_rwlock_t *__restrict__ __rwlock, clockid_t __clockid, const timespec *__restrict__ __abstime) throw()
# 920
 __attribute((__nonnull__(1, 3))); 
# 924
extern int pthread_rwlock_unlock(pthread_rwlock_t * __rwlock) throw()
# 925
 __attribute((__nonnull__(1))); 
# 931
extern int pthread_rwlockattr_init(pthread_rwlockattr_t * __attr) throw()
# 932
 __attribute((__nonnull__(1))); 
# 935
extern int pthread_rwlockattr_destroy(pthread_rwlockattr_t * __attr) throw()
# 936
 __attribute((__nonnull__(1))); 
# 939
extern int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *__restrict__ __attr, int *__restrict__ __pshared) throw()
# 942
 __attribute((__nonnull__(1, 2))); 
# 945
extern int pthread_rwlockattr_setpshared(pthread_rwlockattr_t * __attr, int __pshared) throw()
# 947
 __attribute((__nonnull__(1))); 
# 950
extern int pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t *__restrict__ __attr, int *__restrict__ __pref) throw()
# 953
 __attribute((__nonnull__(1, 2))); 
# 956
extern int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t * __attr, int __pref) throw()
# 957
 __attribute((__nonnull__(1))); 
# 965
extern int pthread_cond_init(pthread_cond_t *__restrict__ __cond, const pthread_condattr_t *__restrict__ __cond_attr) throw()
# 967
 __attribute((__nonnull__(1))); 
# 970
extern int pthread_cond_destroy(pthread_cond_t * __cond) throw()
# 971
 __attribute((__nonnull__(1))); 
# 974
extern int pthread_cond_signal(pthread_cond_t * __cond) throw()
# 975
 __attribute((__nonnull__(1))); 
# 978
extern int pthread_cond_broadcast(pthread_cond_t * __cond) throw()
# 979
 __attribute((__nonnull__(1))); 
# 986
extern int pthread_cond_wait(pthread_cond_t *__restrict__ __cond, pthread_mutex_t *__restrict__ __mutex)
# 988
 __attribute((__nonnull__(1, 2))); 
# 997 "/usr/include/pthread.h" 3
extern int pthread_cond_timedwait(pthread_cond_t *__restrict__ __cond, pthread_mutex_t *__restrict__ __mutex, const timespec *__restrict__ __abstime)
# 1000
 __attribute((__nonnull__(1, 2, 3))); 
# 1010 "/usr/include/pthread.h" 3
extern int pthread_cond_clockwait(pthread_cond_t *__restrict__ __cond, pthread_mutex_t *__restrict__ __mutex, __clockid_t __clock_id, const timespec *__restrict__ __abstime)
# 1014
 __attribute((__nonnull__(1, 2, 4))); 
# 1020
extern int pthread_condattr_init(pthread_condattr_t * __attr) throw()
# 1021
 __attribute((__nonnull__(1))); 
# 1024
extern int pthread_condattr_destroy(pthread_condattr_t * __attr) throw()
# 1025
 __attribute((__nonnull__(1))); 
# 1028
extern int pthread_condattr_getpshared(const pthread_condattr_t *__restrict__ __attr, int *__restrict__ __pshared) throw()
# 1031
 __attribute((__nonnull__(1, 2))); 
# 1034
extern int pthread_condattr_setpshared(pthread_condattr_t * __attr, int __pshared) throw()
# 1035
 __attribute((__nonnull__(1))); 
# 1039
extern int pthread_condattr_getclock(const pthread_condattr_t *__restrict__ __attr, __clockid_t *__restrict__ __clock_id) throw()
# 1042
 __attribute((__nonnull__(1, 2))); 
# 1045
extern int pthread_condattr_setclock(pthread_condattr_t * __attr, __clockid_t __clock_id) throw()
# 1047
 __attribute((__nonnull__(1))); 
# 1056 "/usr/include/pthread.h" 3
extern int pthread_spin_init(pthread_spinlock_t * __lock, int __pshared) throw()
# 1057
 __attribute((__nonnull__(1))); 
# 1060
extern int pthread_spin_destroy(pthread_spinlock_t * __lock) throw()
# 1061
 __attribute((__nonnull__(1))); 
# 1064
extern int pthread_spin_lock(pthread_spinlock_t * __lock) throw()
# 1065
 __attribute((__nonnull__(1))); 
# 1068
extern int pthread_spin_trylock(pthread_spinlock_t * __lock) throw()
# 1069
 __attribute((__nonnull__(1))); 
# 1072
extern int pthread_spin_unlock(pthread_spinlock_t * __lock) throw()
# 1073
 __attribute((__nonnull__(1))); 
# 1080
extern int pthread_barrier_init(pthread_barrier_t *__restrict__ __barrier, const pthread_barrierattr_t *__restrict__ __attr, unsigned __count) throw()
# 1083
 __attribute((__nonnull__(1))); 
# 1086
extern int pthread_barrier_destroy(pthread_barrier_t * __barrier) throw()
# 1087
 __attribute((__nonnull__(1))); 
# 1090
extern int pthread_barrier_wait(pthread_barrier_t * __barrier) throw()
# 1091
 __attribute((__nonnull__(1))); 
# 1095
extern int pthread_barrierattr_init(pthread_barrierattr_t * __attr) throw()
# 1096
 __attribute((__nonnull__(1))); 
# 1099
extern int pthread_barrierattr_destroy(pthread_barrierattr_t * __attr) throw()
# 1100
 __attribute((__nonnull__(1))); 
# 1103
extern int pthread_barrierattr_getpshared(const pthread_barrierattr_t *__restrict__ __attr, int *__restrict__ __pshared) throw()
# 1106
 __attribute((__nonnull__(1, 2))); 
# 1109
extern int pthread_barrierattr_setpshared(pthread_barrierattr_t * __attr, int __pshared) throw()
# 1111
 __attribute((__nonnull__(1))); 
# 1123 "/usr/include/pthread.h" 3
extern int pthread_key_create(pthread_key_t * __key, void (* __destr_function)(void *)) throw()
# 1125
 __attribute((__nonnull__(1))); 
# 1128
extern int pthread_key_delete(pthread_key_t __key) throw(); 
# 1131
extern void *pthread_getspecific(pthread_key_t __key) throw(); 
# 1134
extern int pthread_setspecific(pthread_key_t __key, const void * __pointer) throw(); 
# 1140
extern int pthread_getcpuclockid(pthread_t __thread_id, __clockid_t * __clock_id) throw()
# 1142
 __attribute((__nonnull__(2))); 
# 1157 "/usr/include/pthread.h" 3
extern int pthread_atfork(void (* __prepare)(void), void (* __parent)(void), void (* __child)(void)) throw(); 
# 1171 "/usr/include/pthread.h" 3
}
# 47 "/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h" 3
typedef pthread_t __gthread_t; 
# 48
typedef pthread_key_t __gthread_key_t; 
# 49
typedef pthread_once_t __gthread_once_t; 
# 50
typedef pthread_mutex_t __gthread_mutex_t; 
# 51
typedef pthread_mutex_t __gthread_recursive_mutex_t; 
# 52
typedef pthread_cond_t __gthread_cond_t; 
# 53
typedef timespec __gthread_time_t; 
# 102 "/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h" 3
static __typeof__(pthread_once) __gthrw_pthread_once __attribute((__weakref__("pthread_once"), __copy__(pthread_once ))); 
# 103
static __typeof__(pthread_getspecific) __gthrw_pthread_getspecific __attribute((__weakref__("pthread_getspecific"), __copy__(pthread_getspecific ))); 
# 104
static __typeof__(pthread_setspecific) __gthrw_pthread_setspecific __attribute((__weakref__("pthread_setspecific"), __copy__(pthread_setspecific ))); 
# 106
static __typeof__(pthread_create) __gthrw_pthread_create __attribute((__weakref__("pthread_create"), __copy__(pthread_create ))); 
# 107
static __typeof__(pthread_join) __gthrw_pthread_join __attribute((__weakref__("pthread_join"), __copy__(pthread_join ))); 
# 108
static __typeof__(pthread_equal) __gthrw_pthread_equal __attribute((__weakref__("pthread_equal"), __copy__(pthread_equal ))); 
# 109
static __typeof__(pthread_self) __gthrw_pthread_self __attribute((__weakref__("pthread_self"), __copy__(pthread_self ))); 
# 110
static __typeof__(pthread_detach) __gthrw_pthread_detach __attribute((__weakref__("pthread_detach"), __copy__(pthread_detach ))); 
# 112
static __typeof__(pthread_cancel) __gthrw_pthread_cancel __attribute((__weakref__("pthread_cancel"), __copy__(pthread_cancel ))); 
# 114
static __typeof__(sched_yield) __gthrw_sched_yield __attribute((__weakref__("sched_yield"), __copy__(sched_yield ))); 
# 116
static __typeof__(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute((__weakref__("pthread_mutex_lock"), __copy__(pthread_mutex_lock ))); 
# 117
static __typeof__(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute((__weakref__("pthread_mutex_trylock"), __copy__(pthread_mutex_trylock ))); 
# 119
static __typeof__(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute((__weakref__("pthread_mutex_timedlock"), __copy__(pthread_mutex_timedlock ))); 
# 121
static __typeof__(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute((__weakref__("pthread_mutex_unlock"), __copy__(pthread_mutex_unlock ))); 
# 122
static __typeof__(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute((__weakref__("pthread_mutex_init"), __copy__(pthread_mutex_init ))); 
# 123
static __typeof__(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute((__weakref__("pthread_mutex_destroy"), __copy__(pthread_mutex_destroy ))); 
# 125
static __typeof__(pthread_cond_init) __gthrw_pthread_cond_init __attribute((__weakref__("pthread_cond_init"), __copy__(pthread_cond_init ))); 
# 126
static __typeof__(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute((__weakref__("pthread_cond_broadcast"), __copy__(pthread_cond_broadcast ))); 
# 127
static __typeof__(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute((__weakref__("pthread_cond_signal"), __copy__(pthread_cond_signal ))); 
# 128
static __typeof__(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute((__weakref__("pthread_cond_wait"), __copy__(pthread_cond_wait ))); 
# 129
static __typeof__(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute((__weakref__("pthread_cond_timedwait"), __copy__(pthread_cond_timedwait ))); 
# 130
static __typeof__(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute((__weakref__("pthread_cond_destroy"), __copy__(pthread_cond_destroy ))); 
# 132
static __typeof__(pthread_key_create) __gthrw_pthread_key_create __attribute((__weakref__("pthread_key_create"), __copy__(pthread_key_create ))); 
# 133
static __typeof__(pthread_key_delete) __gthrw_pthread_key_delete __attribute((__weakref__("pthread_key_delete"), __copy__(pthread_key_delete ))); 
# 134
static __typeof__(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute((__weakref__("pthread_mutexattr_init"), __copy__(pthread_mutexattr_init ))); 
# 135
static __typeof__(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute((__weakref__("pthread_mutexattr_settype"), __copy__(pthread_mutexattr_settype ))); 
# 136
static __typeof__(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute((__weakref__("pthread_mutexattr_destroy"), __copy__(pthread_mutexattr_destroy ))); 
# 237 "/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h" 3
static __typeof__(pthread_key_create) __gthrw___pthread_key_create __attribute((__weakref__("__pthread_key_create"), __copy__(pthread_key_create ))); 
# 248 "/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h" 3
static inline int __gthread_active_p() 
# 249
{ 
# 250
static void *const __gthread_active_ptr = __extension__ ((void *)(&__gthrw___pthread_key_create)); 
# 252
return __gthread_active_ptr != (0); 
# 253
} 
# 660 "/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h" 3
static inline int __gthread_create(__gthread_t *__threadid, void *(*__func)(void *), void *
# 661
__args) 
# 662
{ 
# 663
return __gthrw_pthread_create(__threadid, __null, __func, __args); 
# 664
} 
# 667
static inline int __gthread_join(__gthread_t __threadid, void **__value_ptr) 
# 668
{ 
# 669
return __gthrw_pthread_join(__threadid, __value_ptr); 
# 670
} 
# 673
static inline int __gthread_detach(__gthread_t __threadid) 
# 674
{ 
# 675
return __gthrw_pthread_detach(__threadid); 
# 676
} 
# 679
static inline int __gthread_equal(__gthread_t __t1, __gthread_t __t2) 
# 680
{ 
# 681
return __gthrw_pthread_equal(__t1, __t2); 
# 682
} 
# 685
static inline __gthread_t __gthread_self() 
# 686
{ 
# 687
return __gthrw_pthread_self(); 
# 688
} 
# 691
static inline int __gthread_yield() 
# 692
{ 
# 693
return __gthrw_sched_yield(); 
# 694
} 
# 697
static inline int __gthread_once(__gthread_once_t *__once, void (*__func)(void)) 
# 698
{ 
# 699
if (__gthread_active_p()) { 
# 700
return __gthrw_pthread_once(__once, __func); } else { 
# 702
return -1; }  
# 703
} 
# 706
static inline int __gthread_key_create(__gthread_key_t *__key, void (*__dtor)(void *)) 
# 707
{ 
# 708
return __gthrw_pthread_key_create(__key, __dtor); 
# 709
} 
# 712
static inline int __gthread_key_delete(__gthread_key_t __key) 
# 713
{ 
# 714
return __gthrw_pthread_key_delete(__key); 
# 715
} 
# 718
static inline void *__gthread_getspecific(__gthread_key_t __key) 
# 719
{ 
# 720
return __gthrw_pthread_getspecific(__key); 
# 721
} 
# 724
static inline int __gthread_setspecific(__gthread_key_t __key, const void *__ptr) 
# 725
{ 
# 726
return __gthrw_pthread_setspecific(__key, __ptr); 
# 727
} 
# 730
static inline void __gthread_mutex_init_function(__gthread_mutex_t *__mutex) 
# 731
{ 
# 732
if (__gthread_active_p()) { 
# 733
__gthrw_pthread_mutex_init(__mutex, __null); }  
# 734
} 
# 737
static inline int __gthread_mutex_destroy(__gthread_mutex_t *__mutex) 
# 738
{ 
# 739
if (__gthread_active_p()) { 
# 740
return __gthrw_pthread_mutex_destroy(__mutex); } else { 
# 742
return 0; }  
# 743
} 
# 746
static inline int __gthread_mutex_lock(__gthread_mutex_t *__mutex) 
# 747
{ 
# 748
if (__gthread_active_p()) { 
# 749
return __gthrw_pthread_mutex_lock(__mutex); } else { 
# 751
return 0; }  
# 752
} 
# 755
static inline int __gthread_mutex_trylock(__gthread_mutex_t *__mutex) 
# 756
{ 
# 757
if (__gthread_active_p()) { 
# 758
return __gthrw_pthread_mutex_trylock(__mutex); } else { 
# 760
return 0; }  
# 761
} 
# 765
static inline int __gthread_mutex_timedlock(__gthread_mutex_t *__mutex, const __gthread_time_t *
# 766
__abs_timeout) 
# 767
{ 
# 768
if (__gthread_active_p()) { 
# 769
return __gthrw_pthread_mutex_timedlock(__mutex, __abs_timeout); } else { 
# 771
return 0; }  
# 772
} 
# 776
static inline int __gthread_mutex_unlock(__gthread_mutex_t *__mutex) 
# 777
{ 
# 778
if (__gthread_active_p()) { 
# 779
return __gthrw_pthread_mutex_unlock(__mutex); } else { 
# 781
return 0; }  
# 782
} 
# 809 "/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h" 3
static inline int __gthread_recursive_mutex_lock(__gthread_recursive_mutex_t *__mutex) 
# 810
{ 
# 811
return __gthread_mutex_lock(__mutex); 
# 812
} 
# 815
static inline int __gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t *__mutex) 
# 816
{ 
# 817
return __gthread_mutex_trylock(__mutex); 
# 818
} 
# 822
static inline int __gthread_recursive_mutex_timedlock(__gthread_recursive_mutex_t *__mutex, const __gthread_time_t *
# 823
__abs_timeout) 
# 824
{ 
# 825
return __gthread_mutex_timedlock(__mutex, __abs_timeout); 
# 826
} 
# 830
static inline int __gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t *__mutex) 
# 831
{ 
# 832
return __gthread_mutex_unlock(__mutex); 
# 833
} 
# 836
static inline int __gthread_recursive_mutex_destroy(__gthread_recursive_mutex_t *__mutex) 
# 837
{ 
# 838
return __gthread_mutex_destroy(__mutex); 
# 839
} 
# 851 "/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h" 3
static inline int __gthread_cond_broadcast(__gthread_cond_t *__cond) 
# 852
{ 
# 853
return __gthrw_pthread_cond_broadcast(__cond); 
# 854
} 
# 857
static inline int __gthread_cond_signal(__gthread_cond_t *__cond) 
# 858
{ 
# 859
return __gthrw_pthread_cond_signal(__cond); 
# 860
} 
# 863
static inline int __gthread_cond_wait(__gthread_cond_t *__cond, __gthread_mutex_t *__mutex) 
# 864
{ 
# 865
return __gthrw_pthread_cond_wait(__cond, __mutex); 
# 866
} 
# 869
static inline int __gthread_cond_timedwait(__gthread_cond_t *__cond, __gthread_mutex_t *__mutex, const __gthread_time_t *
# 870
__abs_timeout) 
# 871
{ 
# 872
return __gthrw_pthread_cond_timedwait(__cond, __mutex, __abs_timeout); 
# 873
} 
# 876
static inline int __gthread_cond_wait_recursive(__gthread_cond_t *__cond, __gthread_recursive_mutex_t *
# 877
__mutex) 
# 878
{ 
# 879
return __gthread_cond_wait(__cond, __mutex); 
# 880
} 
# 883
static inline int __gthread_cond_destroy(__gthread_cond_t *__cond) 
# 884
{ 
# 885
return __gthrw_pthread_cond_destroy(__cond); 
# 886
} 
# 151 "/usr/include/x86_64-linux-gnu/c++/9/bits/gthr.h" 3
#pragma GCC visibility pop
# 32 "/usr/include/x86_64-linux-gnu/c++/9/bits/atomic_word.h" 3
typedef int _Atomic_word; 
# 38 "/usr/include/c++/9/ext/atomicity.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 48
static inline _Atomic_word __exchange_and_add(volatile _Atomic_word *__mem, int __val) 
# 49
{ return __atomic_fetch_add(__mem, __val, 4); } 
# 52
static inline void __atomic_add(volatile _Atomic_word *__mem, int __val) 
# 53
{ __atomic_fetch_add(__mem, __val, 4); } 
# 65 "/usr/include/c++/9/ext/atomicity.h" 3
static inline _Atomic_word __exchange_and_add_single(_Atomic_word *__mem, int __val) 
# 66
{ 
# 67
_Atomic_word __result = *__mem; 
# 68
(*__mem) += __val; 
# 69
return __result; 
# 70
} 
# 73
static inline void __atomic_add_single(_Atomic_word *__mem, int __val) 
# 74
{ (*__mem) += __val; } 
# 77
__attribute((__unused__)) static inline _Atomic_word 
# 78
__exchange_and_add_dispatch(_Atomic_word *__mem, int __val) 
# 79
{ 
# 81
if (__gthread_active_p()) { 
# 82
return __exchange_and_add(__mem, __val); } else { 
# 84
return __exchange_and_add_single(__mem, __val); }  
# 88
} 
# 91
__attribute((__unused__)) static inline void 
# 92
__atomic_add_dispatch(_Atomic_word *__mem, int __val) 
# 93
{ 
# 95
if (__gthread_active_p()) { 
# 96
__atomic_add(__mem, __val); } else { 
# 98
__atomic_add_single(__mem, __val); }  
# 102
} 
# 105
}
# 40 "/usr/include/c++/9/ext/new_allocator.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 44
using std::size_t;
# 45
using std::ptrdiff_t;
# 57 "/usr/include/c++/9/ext/new_allocator.h" 3
template< class _Tp> 
# 58
class new_allocator { 
# 61
public: typedef std::size_t size_type; 
# 62
typedef std::ptrdiff_t difference_type; 
# 63
typedef _Tp *pointer; 
# 64
typedef const _Tp *const_pointer; 
# 65
typedef _Tp &reference; 
# 66
typedef const _Tp &const_reference; 
# 67
typedef _Tp value_type; 
# 69
template< class _Tp1> 
# 70
struct rebind { 
# 71
typedef new_allocator< _Tp1>  other; }; 
# 76
typedef std::true_type propagate_on_container_move_assignment; 
# 80
new_allocator() noexcept { } 
# 83
new_allocator(const new_allocator &) noexcept { } 
# 85
template< class _Tp1> 
# 87
new_allocator(const new_allocator< _Tp1>  &) noexcept { } 
# 89
~new_allocator() noexcept { } 
# 92
pointer address(reference __x) const noexcept 
# 93
{ return std::__addressof(__x); } 
# 96
const_pointer address(const_reference __x) const noexcept 
# 97
{ return std::__addressof(__x); } 
# 102
pointer allocate(size_type __n, const void * = 0) 
# 103
{ 
# 104
if (__n > max_size()) { 
# 105
std::__throw_bad_alloc(); }  
# 114 "/usr/include/c++/9/ext/new_allocator.h" 3
return static_cast< _Tp *>(::operator new(__n * sizeof(_Tp))); 
# 115
} 
# 119
void deallocate(pointer __p, size_type) 
# 120
{ 
# 128
::operator delete(__p); 
# 129
} 
# 132
size_type max_size() const noexcept 
# 133
{ 
# 135
return ((std::size_t)9223372036854775807L) / sizeof(_Tp); 
# 139
} 
# 142
template< class _Up, class ..._Args> void 
# 144
construct(_Up *__p, _Args &&...__args) noexcept(std::template is_nothrow_constructible< _Up, _Args...> ::value) 
# 146
{ ::new ((void *)__p) _Up(std::forward< _Args> (__args)...); } 
# 148
template< class _Up> void 
# 150
destroy(_Up *__p) noexcept(std::template is_nothrow_destructible< _Up> ::value) 
# 152
{ __p->~_Up(); } 
# 164 "/usr/include/c++/9/ext/new_allocator.h" 3
template< class _Up> friend inline bool 
# 166
operator==(const new_allocator< _Tp>  &, const __gnu_cxx::new_allocator< _Up>  &) noexcept 
# 168
{ return true; } 
# 170
template< class _Up> friend inline bool 
# 172
operator!=(const new_allocator< _Tp>  &, const __gnu_cxx::new_allocator< _Up>  &) noexcept 
# 174
{ return false; } 
# 175
}; 
# 178
}
# 36 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h" 3
namespace std { 
# 47 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h" 3
template< class _Tp> using __allocator_base = __gnu_cxx::new_allocator< _Tp> ; 
# 49
}
# 57 "/usr/include/c++/9/bits/allocator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 68
template<> class allocator< void>  { 
# 71
public: typedef size_t size_type; 
# 72
typedef ptrdiff_t difference_type; 
# 73
typedef void *pointer; 
# 74
typedef const void *const_pointer; 
# 75
typedef void value_type; 
# 77
template< class _Tp1> 
# 78
struct rebind { 
# 79
typedef std::allocator< _Tp1>  other; }; 
# 84
typedef true_type propagate_on_container_move_assignment; 
# 86
typedef true_type is_always_equal; 
# 88
template< class _Up, class ..._Args> void 
# 90
construct(_Up *__p, _Args &&...__args) noexcept(std::template is_nothrow_constructible< _Up, _Args...> ::value) 
# 92
{ ::new ((void *)__p) _Up(std::forward< _Args> (__args)...); } 
# 94
template< class _Up> void 
# 96
destroy(_Up *__p) noexcept(std::template is_nothrow_destructible< _Up> ::value) 
# 98
{ __p->~_Up(); } 
# 100
}; 
# 110 "/usr/include/c++/9/bits/allocator.h" 3
template< class _Tp> 
# 111
class allocator : public __allocator_base< _Tp>  { 
# 114
public: typedef std::size_t size_type; 
# 115
typedef std::ptrdiff_t difference_type; 
# 116
typedef _Tp *pointer; 
# 117
typedef const _Tp *const_pointer; 
# 118
typedef _Tp &reference; 
# 119
typedef const _Tp &const_reference; 
# 120
typedef _Tp value_type; 
# 122
template< class _Tp1> 
# 123
struct rebind { 
# 124
typedef allocator< _Tp1>  other; }; 
# 129
typedef std::true_type propagate_on_container_move_assignment; 
# 131
typedef std::true_type is_always_equal; 
# 137
allocator() noexcept { } 
# 140
allocator(const allocator &__a) noexcept : std::__allocator_base< _Tp> (__a) 
# 141
{ } 
# 145
allocator &operator=(const allocator &) = default;
# 148
template< class _Tp1> 
# 150
allocator(const allocator< _Tp1>  &) noexcept { } 
# 152
~allocator() noexcept { } 
# 155
friend inline bool operator==(const allocator< _Tp>  &, const allocator< _Tp>  &) noexcept 
# 156
{ return true; } 
# 159
friend inline bool operator!=(const allocator< _Tp>  &, const allocator< _Tp>  &) noexcept 
# 160
{ return false; } 
# 163
}; 
# 165
template< class _T1, class _T2> inline bool 
# 167
operator==(const allocator< _T1>  &, const allocator< _T2>  &) noexcept 
# 169
{ return true; } 
# 171
template< class _T1, class _T2> inline bool 
# 173
operator!=(const allocator< _T1>  &, const allocator< _T2>  &) noexcept 
# 175
{ return false; } 
# 179
template< class _Tp> 
# 180
class allocator< const _Tp>  { 
# 183
public: typedef _Tp value_type; 
# 184
template< class _Up> allocator(const std::allocator< _Up>  &) { } 
# 185
}; 
# 187
template< class _Tp> 
# 188
class allocator< volatile _Tp>  { 
# 191
public: typedef _Tp value_type; 
# 192
template< class _Up> allocator(const std::allocator< _Up>  &) { } 
# 193
}; 
# 195
template< class _Tp> 
# 196
class allocator< const volatile _Tp>  { 
# 199
public: typedef _Tp value_type; 
# 200
template< class _Up> allocator(const std::allocator< _Up>  &) { } 
# 201
}; 
# 208
extern template class allocator< char> ;
# 209
extern template class allocator< wchar_t> ;
# 216
template< class _Alloc, bool  = __is_empty(_Alloc)> 
# 217
struct __alloc_swap { 
# 218
static void _S_do_it(_Alloc &, _Alloc &) noexcept { } }; 
# 220
template< class _Alloc> 
# 221
struct __alloc_swap< _Alloc, false>  { 
# 224
static void _S_do_it(_Alloc &__one, _Alloc &__two) noexcept 
# 225
{ 
# 227
if (__one != __two) { 
# 228
swap(__one, __two); }  
# 229
} 
# 230
}; 
# 233
template< class _Alloc, bool  = __is_empty(_Alloc)> 
# 234
struct __alloc_neq { 
# 237
static bool _S_do_it(const _Alloc &, const _Alloc &) 
# 238
{ return false; } 
# 239
}; 
# 241
template< class _Alloc> 
# 242
struct __alloc_neq< _Alloc, false>  { 
# 245
static bool _S_do_it(const _Alloc &__one, const _Alloc &__two) 
# 246
{ return __one != __two; } 
# 247
}; 
# 250
template< class _Tp, bool 
# 251
 = __or_< is_copy_constructible< typename _Tp::value_type> , is_nothrow_move_constructible< typename _Tp::value_type> > ::value> 
# 253
struct __shrink_to_fit_aux { 
# 254
static bool _S_do_it(_Tp &) noexcept { return false; } }; 
# 256
template< class _Tp> 
# 257
struct __shrink_to_fit_aux< _Tp, true>  { 
# 260
static bool _S_do_it(_Tp &__c) noexcept 
# 261
{ 
# 263
try 
# 264
{ 
# 265
_Tp(__make_move_if_noexcept_iterator(__c.begin()), __make_move_if_noexcept_iterator(__c.end()), __c.get_allocator()).swap(__c); 
# 268
return true; 
# 269
} 
# 270
catch (...) 
# 271
{ return false; }  
# 275
} 
# 276
}; 
# 280
}
# 36 "/usr/include/c++/9/bits/cxxabi_forced.h" 3
#pragma GCC visibility push ( default )
# 39
namespace __cxxabiv1 { 
# 48
class __forced_unwind { 
# 50
virtual ~__forced_unwind() throw(); 
# 53
virtual void __pure_dummy() = 0; 
# 54
}; 
# 55
}
# 58
#pragma GCC visibility pop
# 38 "/usr/include/c++/9/bits/ostream_insert.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 42
template< class _CharT, class _Traits> inline void 
# 44
__ostream_write(basic_ostream< _CharT, _Traits>  &__out, const _CharT *
# 45
__s, streamsize __n) 
# 46
{ 
# 47
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 48
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 50
const streamsize __put = __out.rdbuf()->sputn(__s, __n); 
# 51
if (__put != __n) { 
# 52
__out.setstate(__ios_base::badbit); }  
# 53
} 
# 55
template< class _CharT, class _Traits> inline void 
# 57
__ostream_fill(basic_ostream< _CharT, _Traits>  &__out, streamsize __n) 
# 58
{ 
# 59
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 60
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 62
const _CharT __c = __out.fill(); 
# 63
for (; __n > (0); --__n) 
# 64
{ 
# 65
const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c); 
# 66
if (_Traits::eq_int_type(__put, _Traits::eof())) 
# 67
{ 
# 68
__out.setstate(__ios_base::badbit); 
# 69
break; 
# 70
}  
# 71
}  
# 72
} 
# 74
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 76
__ostream_insert(basic_ostream< _CharT, _Traits>  &__out, const _CharT *
# 77
__s, streamsize __n) 
# 78
{ 
# 79
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 80
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 82
typename basic_ostream< _CharT, _Traits> ::sentry __cerb(__out); 
# 83
if (__cerb) 
# 84
{ 
# 85
try 
# 86
{ 
# 87
const streamsize __w = __out.width(); 
# 88
if (__w > __n) 
# 89
{ 
# 90
const bool __left = (__out.flags() & __ios_base::adjustfield) == __ios_base::left; 
# 93
if (!__left) { 
# 94
__ostream_fill(__out, __w - __n); }  
# 95
if (__out.good()) { 
# 96
__ostream_write(__out, __s, __n); }  
# 97
if (__left && __out.good()) { 
# 98
__ostream_fill(__out, __w - __n); }  
# 99
} else { 
# 101
__ostream_write(__out, __s, __n); }  
# 102
__out.width(0); 
# 103
} 
# 104
catch (__cxxabiv1::__forced_unwind &) 
# 105
{ 
# 106
__out._M_setstate(__ios_base::badbit); 
# 107
throw; 
# 108
} 
# 109
catch (...) 
# 110
{ __out._M_setstate(__ios_base::badbit); }  
# 111
}  
# 112
return __out; 
# 113
} 
# 118
extern template basic_ostream< char>  &__ostream_insert(basic_ostream< char>  & __out, const char * __s, streamsize __n);
# 121
extern template basic_ostream< wchar_t>  &__ostream_insert(basic_ostream< wchar_t>  & __out, const wchar_t * __s, streamsize __n);
# 127
}
# 63 "/usr/include/c++/9/bits/stl_function.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 104 "/usr/include/c++/9/bits/stl_function.h" 3
template< class _Arg, class _Result> 
# 105
struct unary_function { 
# 108
typedef _Arg argument_type; 
# 111
typedef _Result result_type; 
# 112
}; 
# 117
template< class _Arg1, class _Arg2, class _Result> 
# 118
struct binary_function { 
# 121
typedef _Arg1 first_argument_type; 
# 124
typedef _Arg2 second_argument_type; 
# 127
typedef _Result result_type; 
# 128
}; 
# 144 "/usr/include/c++/9/bits/stl_function.h" 3
struct __is_transparent; 
# 146
template< class _Tp = void> struct plus; 
# 149
template< class _Tp = void> struct minus; 
# 152
template< class _Tp = void> struct multiplies; 
# 155
template< class _Tp = void> struct divides; 
# 158
template< class _Tp = void> struct modulus; 
# 161
template< class _Tp = void> struct negate; 
# 166
template< class _Tp> 
# 167
struct plus : public binary_function< _Tp, _Tp, _Tp>  { 
# 171
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 172
{ return __x + __y; } 
# 173
}; 
# 176
template< class _Tp> 
# 177
struct minus : public binary_function< _Tp, _Tp, _Tp>  { 
# 181
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 182
{ return __x - __y; } 
# 183
}; 
# 186
template< class _Tp> 
# 187
struct multiplies : public binary_function< _Tp, _Tp, _Tp>  { 
# 191
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 192
{ return __x * __y; } 
# 193
}; 
# 196
template< class _Tp> 
# 197
struct divides : public binary_function< _Tp, _Tp, _Tp>  { 
# 201
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 202
{ return __x / __y; } 
# 203
}; 
# 206
template< class _Tp> 
# 207
struct modulus : public binary_function< _Tp, _Tp, _Tp>  { 
# 211
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 212
{ return __x % __y; } 
# 213
}; 
# 216
template< class _Tp> 
# 217
struct negate : public unary_function< _Tp, _Tp>  { 
# 221
constexpr _Tp operator()(const _Tp &__x) const 
# 222
{ return -__x; } 
# 223
}; 
# 230
template<> struct plus< void>  { 
# 232
template< class _Tp, class _Up> constexpr auto 
# 235
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) + std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) + std::forward< _Up> (__u))) 
# 238
{ return std::forward< _Tp> (__t) + std::forward< _Up> (__u); } 
# 240
typedef __is_transparent is_transparent; 
# 241
}; 
# 245
template<> struct minus< void>  { 
# 247
template< class _Tp, class _Up> constexpr auto 
# 250
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) - std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) - std::forward< _Up> (__u))) 
# 253
{ return std::forward< _Tp> (__t) - std::forward< _Up> (__u); } 
# 255
typedef __is_transparent is_transparent; 
# 256
}; 
# 260
template<> struct multiplies< void>  { 
# 262
template< class _Tp, class _Up> constexpr auto 
# 265
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) * std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) * std::forward< _Up> (__u))) 
# 268
{ return std::forward< _Tp> (__t) * std::forward< _Up> (__u); } 
# 270
typedef __is_transparent is_transparent; 
# 271
}; 
# 275
template<> struct divides< void>  { 
# 277
template< class _Tp, class _Up> constexpr auto 
# 280
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) / std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) / std::forward< _Up> (__u))) 
# 283
{ return std::forward< _Tp> (__t) / std::forward< _Up> (__u); } 
# 285
typedef __is_transparent is_transparent; 
# 286
}; 
# 290
template<> struct modulus< void>  { 
# 292
template< class _Tp, class _Up> constexpr auto 
# 295
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) % std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) % std::forward< _Up> (__u))) 
# 298
{ return std::forward< _Tp> (__t) % std::forward< _Up> (__u); } 
# 300
typedef __is_transparent is_transparent; 
# 301
}; 
# 305
template<> struct negate< void>  { 
# 307
template< class _Tp> constexpr auto 
# 310
operator()(_Tp &&__t) const noexcept(noexcept((-std::forward< _Tp> (__t))))->__decltype((-std::forward< _Tp> (__t))) 
# 313
{ return -std::forward< _Tp> (__t); } 
# 315
typedef __is_transparent is_transparent; 
# 316
}; 
# 330 "/usr/include/c++/9/bits/stl_function.h" 3
template< class _Tp = void> struct equal_to; 
# 333
template< class _Tp = void> struct not_equal_to; 
# 336
template< class _Tp = void> struct greater; 
# 339
template< class _Tp = void> struct less; 
# 342
template< class _Tp = void> struct greater_equal; 
# 345
template< class _Tp = void> struct less_equal; 
# 350
template< class _Tp> 
# 351
struct equal_to : public binary_function< _Tp, _Tp, bool>  { 
# 355
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 356
{ return __x == __y; } 
# 357
}; 
# 360
template< class _Tp> 
# 361
struct not_equal_to : public binary_function< _Tp, _Tp, bool>  { 
# 365
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 366
{ return __x != __y; } 
# 367
}; 
# 370
template< class _Tp> 
# 371
struct greater : public binary_function< _Tp, _Tp, bool>  { 
# 375
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 376
{ return __x > __y; } 
# 377
}; 
# 380
template< class _Tp> 
# 381
struct less : public binary_function< _Tp, _Tp, bool>  { 
# 385
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 386
{ return __x < __y; } 
# 387
}; 
# 390
template< class _Tp> 
# 391
struct greater_equal : public binary_function< _Tp, _Tp, bool>  { 
# 395
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 396
{ return __x >= __y; } 
# 397
}; 
# 400
template< class _Tp> 
# 401
struct less_equal : public binary_function< _Tp, _Tp, bool>  { 
# 405
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 406
{ return __x <= __y; } 
# 407
}; 
# 410
template< class _Tp> 
# 411
struct greater< _Tp *>  : public binary_function< _Tp *, _Tp *, bool>  { 
# 414
constexpr bool operator()(_Tp *__x, _Tp *__y) const noexcept 
# 415
{ 
# 418
if (__builtin_is_constant_evaluated()) { 
# 422
return __x > __y; }  
# 424
return ((unsigned long)__x) > ((unsigned long)__y); 
# 425
} 
# 426
}; 
# 429
template< class _Tp> 
# 430
struct less< _Tp *>  : public binary_function< _Tp *, _Tp *, bool>  { 
# 433
constexpr bool operator()(_Tp *__x, _Tp *__y) const noexcept 
# 434
{ 
# 437
if (__builtin_is_constant_evaluated()) { 
# 441
return __x < __y; }  
# 443
return ((unsigned long)__x) < ((unsigned long)__y); 
# 444
} 
# 445
}; 
# 448
template< class _Tp> 
# 449
struct greater_equal< _Tp *>  : public binary_function< _Tp *, _Tp *, bool>  { 
# 452
constexpr bool operator()(_Tp *__x, _Tp *__y) const noexcept 
# 453
{ 
# 456
if (__builtin_is_constant_evaluated()) { 
# 460
return __x >= __y; }  
# 462
return ((unsigned long)__x) >= ((unsigned long)__y); 
# 463
} 
# 464
}; 
# 467
template< class _Tp> 
# 468
struct less_equal< _Tp *>  : public binary_function< _Tp *, _Tp *, bool>  { 
# 471
constexpr bool operator()(_Tp *__x, _Tp *__y) const noexcept 
# 472
{ 
# 475
if (__builtin_is_constant_evaluated()) { 
# 479
return __x <= __y; }  
# 481
return ((unsigned long)__x) <= ((unsigned long)__y); 
# 482
} 
# 483
}; 
# 488
template<> struct equal_to< void>  { 
# 490
template< class _Tp, class _Up> constexpr auto 
# 492
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) == std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) == std::forward< _Up> (__u))) 
# 495
{ return std::forward< _Tp> (__t) == std::forward< _Up> (__u); } 
# 497
typedef __is_transparent is_transparent; 
# 498
}; 
# 502
template<> struct not_equal_to< void>  { 
# 504
template< class _Tp, class _Up> constexpr auto 
# 506
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) != std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) != std::forward< _Up> (__u))) 
# 509
{ return std::forward< _Tp> (__t) != std::forward< _Up> (__u); } 
# 511
typedef __is_transparent is_transparent; 
# 512
}; 
# 516
template<> struct greater< void>  { 
# 518
template< class _Tp, class _Up> constexpr auto 
# 520
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) > std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) > std::forward< _Up> (__u))) 
# 523
{ 
# 524
return _S_cmp(std::forward< _Tp> (__t), std::forward< _Up> (__u), __ptr_cmp< _Tp, _Up> {}); 
# 526
} 
# 528
template< class _Tp, class _Up> constexpr bool 
# 530
operator()(_Tp *__t, _Up *__u) const noexcept 
# 531
{ return std::greater< common_type_t< _Tp *, _Up *> > {}(__t, __u); } 
# 533
typedef __is_transparent is_transparent; 
# 538
private: 
# 536
template< class _Tp, class _Up> static constexpr decltype(auto) 
# 538
_S_cmp(_Tp &&__t, _Up &&__u, false_type) 
# 539
{ return std::forward< _Tp> (__t) > std::forward< _Up> (__u); } 
# 541
template< class _Tp, class _Up> static constexpr bool 
# 543
_S_cmp(_Tp &&__t, _Up &&__u, true_type) noexcept 
# 544
{ 
# 545
return std::greater< const volatile void *> {}(static_cast< const volatile void *>(std::forward< _Tp> (__t)), static_cast< const volatile void *>(std::forward< _Up> (__u))); 
# 548
} 
# 551
template< class _Tp, class _Up, class  = void> 
# 552
struct __not_overloaded2 : public true_type { }; 
# 555
template< class _Tp, class _Up> 
# 556
struct __not_overloaded2< _Tp, _Up, __void_t< __decltype((std::declval< _Tp> ().operator>(std::declval< _Up> ())))> >  : public false_type { 
# 558
}; 
# 561
template< class _Tp, class _Up, class  = void> 
# 562
struct __not_overloaded : public __not_overloaded2< _Tp, _Up>  { }; 
# 565
template< class _Tp, class _Up> 
# 566
struct __not_overloaded< _Tp, _Up, __void_t< __decltype((operator>(std::declval< _Tp> (), std::declval< _Up> ())))> >  : public false_type { 
# 568
}; 
# 570
template< class _Tp, class _Up> using __ptr_cmp = __and_< __not_overloaded< _Tp, _Up> , is_convertible< _Tp, const volatile void *> , is_convertible< _Up, const volatile void *> > ; 
# 574
}; 
# 578
template<> struct less< void>  { 
# 580
template< class _Tp, class _Up> constexpr auto 
# 582
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) < std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) < std::forward< _Up> (__u))) 
# 585
{ 
# 586
return _S_cmp(std::forward< _Tp> (__t), std::forward< _Up> (__u), __ptr_cmp< _Tp, _Up> {}); 
# 588
} 
# 590
template< class _Tp, class _Up> constexpr bool 
# 592
operator()(_Tp *__t, _Up *__u) const noexcept 
# 593
{ return std::less< common_type_t< _Tp *, _Up *> > {}(__t, __u); } 
# 595
typedef __is_transparent is_transparent; 
# 600
private: 
# 598
template< class _Tp, class _Up> static constexpr decltype(auto) 
# 600
_S_cmp(_Tp &&__t, _Up &&__u, false_type) 
# 601
{ return std::forward< _Tp> (__t) < std::forward< _Up> (__u); } 
# 603
template< class _Tp, class _Up> static constexpr bool 
# 605
_S_cmp(_Tp &&__t, _Up &&__u, true_type) noexcept 
# 606
{ 
# 607
return std::less< const volatile void *> {}(static_cast< const volatile void *>(std::forward< _Tp> (__t)), static_cast< const volatile void *>(std::forward< _Up> (__u))); 
# 610
} 
# 613
template< class _Tp, class _Up, class  = void> 
# 614
struct __not_overloaded2 : public true_type { }; 
# 617
template< class _Tp, class _Up> 
# 618
struct __not_overloaded2< _Tp, _Up, __void_t< __decltype((std::declval< _Tp> ().operator< (std::declval< _Up> ())))> >  : public false_type { 
# 620
}; 
# 623
template< class _Tp, class _Up, class  = void> 
# 624
struct __not_overloaded : public __not_overloaded2< _Tp, _Up>  { }; 
# 627
template< class _Tp, class _Up> 
# 628
struct __not_overloaded< _Tp, _Up, __void_t< __decltype((operator< (std::declval< _Tp> (), std::declval< _Up> ())))> >  : public false_type { 
# 630
}; 
# 632
template< class _Tp, class _Up> using __ptr_cmp = __and_< __not_overloaded< _Tp, _Up> , is_convertible< _Tp, const volatile void *> , is_convertible< _Up, const volatile void *> > ; 
# 636
}; 
# 640
template<> struct greater_equal< void>  { 
# 642
template< class _Tp, class _Up> constexpr auto 
# 644
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) >= std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) >= std::forward< _Up> (__u))) 
# 647
{ 
# 648
return _S_cmp(std::forward< _Tp> (__t), std::forward< _Up> (__u), __ptr_cmp< _Tp, _Up> {}); 
# 650
} 
# 652
template< class _Tp, class _Up> constexpr bool 
# 654
operator()(_Tp *__t, _Up *__u) const noexcept 
# 655
{ return std::greater_equal< common_type_t< _Tp *, _Up *> > {}(__t, __u); } 
# 657
typedef __is_transparent is_transparent; 
# 662
private: 
# 660
template< class _Tp, class _Up> static constexpr decltype(auto) 
# 662
_S_cmp(_Tp &&__t, _Up &&__u, false_type) 
# 663
{ return std::forward< _Tp> (__t) >= std::forward< _Up> (__u); } 
# 665
template< class _Tp, class _Up> static constexpr bool 
# 667
_S_cmp(_Tp &&__t, _Up &&__u, true_type) noexcept 
# 668
{ 
# 669
return std::greater_equal< const volatile void *> {}(static_cast< const volatile void *>(std::forward< _Tp> (__t)), static_cast< const volatile void *>(std::forward< _Up> (__u))); 
# 672
} 
# 675
template< class _Tp, class _Up, class  = void> 
# 676
struct __not_overloaded2 : public true_type { }; 
# 679
template< class _Tp, class _Up> 
# 680
struct __not_overloaded2< _Tp, _Up, __void_t< __decltype((std::declval< _Tp> ().operator>=(std::declval< _Up> ())))> >  : public false_type { 
# 682
}; 
# 685
template< class _Tp, class _Up, class  = void> 
# 686
struct __not_overloaded : public __not_overloaded2< _Tp, _Up>  { }; 
# 689
template< class _Tp, class _Up> 
# 690
struct __not_overloaded< _Tp, _Up, __void_t< __decltype((operator>=(std::declval< _Tp> (), std::declval< _Up> ())))> >  : public false_type { 
# 692
}; 
# 694
template< class _Tp, class _Up> using __ptr_cmp = __and_< __not_overloaded< _Tp, _Up> , is_convertible< _Tp, const volatile void *> , is_convertible< _Up, const volatile void *> > ; 
# 698
}; 
# 702
template<> struct less_equal< void>  { 
# 704
template< class _Tp, class _Up> constexpr auto 
# 706
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) <= std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) <= std::forward< _Up> (__u))) 
# 709
{ 
# 710
return _S_cmp(std::forward< _Tp> (__t), std::forward< _Up> (__u), __ptr_cmp< _Tp, _Up> {}); 
# 712
} 
# 714
template< class _Tp, class _Up> constexpr bool 
# 716
operator()(_Tp *__t, _Up *__u) const noexcept 
# 717
{ return std::less_equal< common_type_t< _Tp *, _Up *> > {}(__t, __u); } 
# 719
typedef __is_transparent is_transparent; 
# 724
private: 
# 722
template< class _Tp, class _Up> static constexpr decltype(auto) 
# 724
_S_cmp(_Tp &&__t, _Up &&__u, false_type) 
# 725
{ return std::forward< _Tp> (__t) <= std::forward< _Up> (__u); } 
# 727
template< class _Tp, class _Up> static constexpr bool 
# 729
_S_cmp(_Tp &&__t, _Up &&__u, true_type) noexcept 
# 730
{ 
# 731
return std::less_equal< const volatile void *> {}(static_cast< const volatile void *>(std::forward< _Tp> (__t)), static_cast< const volatile void *>(std::forward< _Up> (__u))); 
# 734
} 
# 737
template< class _Tp, class _Up, class  = void> 
# 738
struct __not_overloaded2 : public true_type { }; 
# 741
template< class _Tp, class _Up> 
# 742
struct __not_overloaded2< _Tp, _Up, __void_t< __decltype((std::declval< _Tp> ().operator<=(std::declval< _Up> ())))> >  : public false_type { 
# 744
}; 
# 747
template< class _Tp, class _Up, class  = void> 
# 748
struct __not_overloaded : public __not_overloaded2< _Tp, _Up>  { }; 
# 751
template< class _Tp, class _Up> 
# 752
struct __not_overloaded< _Tp, _Up, __void_t< __decltype((operator<=(std::declval< _Tp> (), std::declval< _Up> ())))> >  : public false_type { 
# 754
}; 
# 756
template< class _Tp, class _Up> using __ptr_cmp = __and_< __not_overloaded< _Tp, _Up> , is_convertible< _Tp, const volatile void *> , is_convertible< _Up, const volatile void *> > ; 
# 760
}; 
# 774 "/usr/include/c++/9/bits/stl_function.h" 3
template< class _Tp = void> struct logical_and; 
# 777
template< class _Tp = void> struct logical_or; 
# 780
template< class _Tp = void> struct logical_not; 
# 785
template< class _Tp> 
# 786
struct logical_and : public binary_function< _Tp, _Tp, bool>  { 
# 790
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 791
{ return __x && __y; } 
# 792
}; 
# 795
template< class _Tp> 
# 796
struct logical_or : public binary_function< _Tp, _Tp, bool>  { 
# 800
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 801
{ return __x || __y; } 
# 802
}; 
# 805
template< class _Tp> 
# 806
struct logical_not : public unary_function< _Tp, bool>  { 
# 810
constexpr bool operator()(const _Tp &__x) const 
# 811
{ return !__x; } 
# 812
}; 
# 817
template<> struct logical_and< void>  { 
# 819
template< class _Tp, class _Up> constexpr auto 
# 822
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) && std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) && std::forward< _Up> (__u))) 
# 825
{ return std::forward< _Tp> (__t) && std::forward< _Up> (__u); } 
# 827
typedef __is_transparent is_transparent; 
# 828
}; 
# 832
template<> struct logical_or< void>  { 
# 834
template< class _Tp, class _Up> constexpr auto 
# 837
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) || std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) || std::forward< _Up> (__u))) 
# 840
{ return std::forward< _Tp> (__t) || std::forward< _Up> (__u); } 
# 842
typedef __is_transparent is_transparent; 
# 843
}; 
# 847
template<> struct logical_not< void>  { 
# 849
template< class _Tp> constexpr auto 
# 852
operator()(_Tp &&__t) const noexcept(noexcept((!std::forward< _Tp> (__t))))->__decltype((!std::forward< _Tp> (__t))) 
# 855
{ return !std::forward< _Tp> (__t); } 
# 857
typedef __is_transparent is_transparent; 
# 858
}; 
# 863
template< class _Tp = void> struct bit_and; 
# 866
template< class _Tp = void> struct bit_or; 
# 869
template< class _Tp = void> struct bit_xor; 
# 872
template< class _Tp = void> struct bit_not; 
# 878
template< class _Tp> 
# 879
struct bit_and : public binary_function< _Tp, _Tp, _Tp>  { 
# 883
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 884
{ return __x & __y; } 
# 885
}; 
# 887
template< class _Tp> 
# 888
struct bit_or : public binary_function< _Tp, _Tp, _Tp>  { 
# 892
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 893
{ return __x | __y; } 
# 894
}; 
# 896
template< class _Tp> 
# 897
struct bit_xor : public binary_function< _Tp, _Tp, _Tp>  { 
# 901
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 902
{ return __x ^ __y; } 
# 903
}; 
# 905
template< class _Tp> 
# 906
struct bit_not : public unary_function< _Tp, _Tp>  { 
# 910
constexpr _Tp operator()(const _Tp &__x) const 
# 911
{ return ~__x; } 
# 912
}; 
# 916
template<> struct bit_and< void>  { 
# 918
template< class _Tp, class _Up> constexpr auto 
# 921
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) & std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) & std::forward< _Up> (__u))) 
# 924
{ return std::forward< _Tp> (__t) & std::forward< _Up> (__u); } 
# 926
typedef __is_transparent is_transparent; 
# 927
}; 
# 930
template<> struct bit_or< void>  { 
# 932
template< class _Tp, class _Up> constexpr auto 
# 935
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) | std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) | std::forward< _Up> (__u))) 
# 938
{ return std::forward< _Tp> (__t) | std::forward< _Up> (__u); } 
# 940
typedef __is_transparent is_transparent; 
# 941
}; 
# 944
template<> struct bit_xor< void>  { 
# 946
template< class _Tp, class _Up> constexpr auto 
# 949
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) ^ std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) ^ std::forward< _Up> (__u))) 
# 952
{ return std::forward< _Tp> (__t) ^ std::forward< _Up> (__u); } 
# 954
typedef __is_transparent is_transparent; 
# 955
}; 
# 958
template<> struct bit_not< void>  { 
# 960
template< class _Tp> constexpr auto 
# 963
operator()(_Tp &&__t) const noexcept(noexcept((~std::forward< _Tp> (__t))))->__decltype((~std::forward< _Tp> (__t))) 
# 966
{ return ~std::forward< _Tp> (__t); } 
# 968
typedef __is_transparent is_transparent; 
# 969
}; 
# 1002 "/usr/include/c++/9/bits/stl_function.h" 3
template< class _Predicate> 
# 1003
class unary_negate : public unary_function< typename _Predicate::argument_type, bool>  { 
# 1007
protected: _Predicate _M_pred; 
# 1012
public: constexpr explicit unary_negate(const _Predicate &__x) : _M_pred(__x) { } 
# 1016
constexpr bool operator()(const typename _Predicate::argument_type &__x) const 
# 1017
{ return !(_M_pred)(__x); } 
# 1018
}; 
# 1021
template< class _Predicate> constexpr unary_negate< _Predicate>  
# 1024
not1(const _Predicate &__pred) 
# 1025
{ return ((unary_negate< _Predicate> )(__pred)); } 
# 1028
template< class _Predicate> 
# 1029
class binary_negate : public binary_function< typename _Predicate::first_argument_type, typename _Predicate::second_argument_type, bool>  { 
# 1034
protected: _Predicate _M_pred; 
# 1039
public: constexpr explicit binary_negate(const _Predicate &__x) : _M_pred(__x) { } 
# 1043
constexpr bool operator()(const typename _Predicate::first_argument_type &__x, const typename _Predicate::second_argument_type &
# 1044
__y) const 
# 1045
{ return !(_M_pred)(__x, __y); } 
# 1046
}; 
# 1049
template< class _Predicate> constexpr binary_negate< _Predicate>  
# 1052
not2(const _Predicate &__pred) 
# 1053
{ return ((binary_negate< _Predicate> )(__pred)); } 
# 1079 "/usr/include/c++/9/bits/stl_function.h" 3
template< class _Arg, class _Result> 
# 1080
class pointer_to_unary_function : public unary_function< _Arg, _Result>  { 
# 1083
protected: _Result (*_M_ptr)(_Arg); 
# 1086
public: pointer_to_unary_function() { } 
# 1089
explicit pointer_to_unary_function(_Result (*__x)(_Arg)) : _M_ptr(__x) 
# 1090
{ } 
# 1093
_Result operator()(_Arg __x) const 
# 1094
{ return (_M_ptr)(__x); } 
# 1095
}; 
# 1098
template< class _Arg, class _Result> inline pointer_to_unary_function< _Arg, _Result>  
# 1100
ptr_fun(_Result (*__x)(_Arg)) 
# 1101
{ return ((pointer_to_unary_function< _Arg, _Result> )(__x)); } 
# 1104
template< class _Arg1, class _Arg2, class _Result> 
# 1105
class pointer_to_binary_function : public binary_function< _Arg1, _Arg2, _Result>  { 
# 1109
protected: _Result (*_M_ptr)(_Arg1, _Arg2); 
# 1112
public: pointer_to_binary_function() { } 
# 1115
explicit pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2)) : _M_ptr(__x) 
# 1116
{ } 
# 1119
_Result operator()(_Arg1 __x, _Arg2 __y) const 
# 1120
{ return (_M_ptr)(__x, __y); } 
# 1121
}; 
# 1124
template< class _Arg1, class _Arg2, class _Result> inline pointer_to_binary_function< _Arg1, _Arg2, _Result>  
# 1126
ptr_fun(_Result (*__x)(_Arg1, _Arg2)) 
# 1127
{ return ((pointer_to_binary_function< _Arg1, _Arg2, _Result> )(__x)); } 
# 1130
template< class _Tp> 
# 1131
struct _Identity : public unary_function< _Tp, _Tp>  { 
# 1135
_Tp &operator()(_Tp &__x) const 
# 1136
{ return __x; } 
# 1139
const _Tp &operator()(const _Tp &__x) const 
# 1140
{ return __x; } 
# 1141
}; 
# 1144
template< class _Tp> struct _Identity< const _Tp>  : public std::_Identity< _Tp>  { }; 
# 1146
template< class _Pair> 
# 1147
struct _Select1st : public unary_function< _Pair, typename _Pair::first_type>  { 
# 1151
typename _Pair::first_type &operator()(_Pair &__x) const 
# 1152
{ return __x.first; } 
# 1155
const typename _Pair::first_type &operator()(const _Pair &__x) const 
# 1156
{ return __x.first; } 
# 1159
template< class _Pair2> typename _Pair2::first_type &
# 1161
operator()(_Pair2 &__x) const 
# 1162
{ return __x.first; } 
# 1164
template< class _Pair2> const typename _Pair2::first_type &
# 1166
operator()(const _Pair2 &__x) const 
# 1167
{ return __x.first; } 
# 1169
}; 
# 1171
template< class _Pair> 
# 1172
struct _Select2nd : public unary_function< _Pair, typename _Pair::second_type>  { 
# 1176
typename _Pair::second_type &operator()(_Pair &__x) const 
# 1177
{ return __x.second; } 
# 1180
const typename _Pair::second_type &operator()(const _Pair &__x) const 
# 1181
{ return __x.second; } 
# 1182
}; 
# 1202 "/usr/include/c++/9/bits/stl_function.h" 3
template< class _Ret, class _Tp> 
# 1203
class mem_fun_t : public unary_function< _Tp *, _Ret>  { 
# 1207
public: explicit mem_fun_t(_Ret (_Tp::*__pf)(void)) : _M_f(__pf) 
# 1208
{ } 
# 1211
_Ret operator()(_Tp *__p) const 
# 1212
{ return (__p->*(_M_f))(); } 
# 1215
private: _Ret (_Tp::*_M_f)(void); 
# 1216
}; 
# 1220
template< class _Ret, class _Tp> 
# 1221
class const_mem_fun_t : public unary_function< const _Tp *, _Ret>  { 
# 1225
public: explicit const_mem_fun_t(_Ret (_Tp::*__pf)(void) const) : _M_f(__pf) 
# 1226
{ } 
# 1229
_Ret operator()(const _Tp *__p) const 
# 1230
{ return (__p->*(_M_f))(); } 
# 1233
private: _Ret (_Tp::*_M_f)(void) const; 
# 1234
}; 
# 1238
template< class _Ret, class _Tp> 
# 1239
class mem_fun_ref_t : public unary_function< _Tp, _Ret>  { 
# 1243
public: explicit mem_fun_ref_t(_Ret (_Tp::*__pf)(void)) : _M_f(__pf) 
# 1244
{ } 
# 1247
_Ret operator()(_Tp &__r) const 
# 1248
{ return (__r.*(_M_f))(); } 
# 1251
private: _Ret (_Tp::*_M_f)(void); 
# 1252
}; 
# 1256
template< class _Ret, class _Tp> 
# 1257
class const_mem_fun_ref_t : public unary_function< _Tp, _Ret>  { 
# 1261
public: explicit const_mem_fun_ref_t(_Ret (_Tp::*__pf)(void) const) : _M_f(__pf) 
# 1262
{ } 
# 1265
_Ret operator()(const _Tp &__r) const 
# 1266
{ return (__r.*(_M_f))(); } 
# 1269
private: _Ret (_Tp::*_M_f)(void) const; 
# 1270
}; 
# 1274
template< class _Ret, class _Tp, class _Arg> 
# 1275
class mem_fun1_t : public binary_function< _Tp *, _Arg, _Ret>  { 
# 1279
public: explicit mem_fun1_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) 
# 1280
{ } 
# 1283
_Ret operator()(_Tp *__p, _Arg __x) const 
# 1284
{ return (__p->*(_M_f))(__x); } 
# 1287
private: _Ret (_Tp::*_M_f)(_Arg); 
# 1288
}; 
# 1292
template< class _Ret, class _Tp, class _Arg> 
# 1293
class const_mem_fun1_t : public binary_function< const _Tp *, _Arg, _Ret>  { 
# 1297
public: explicit const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) 
# 1298
{ } 
# 1301
_Ret operator()(const _Tp *__p, _Arg __x) const 
# 1302
{ return (__p->*(_M_f))(__x); } 
# 1305
private: _Ret (_Tp::*_M_f)(_Arg) const; 
# 1306
}; 
# 1310
template< class _Ret, class _Tp, class _Arg> 
# 1311
class mem_fun1_ref_t : public binary_function< _Tp, _Arg, _Ret>  { 
# 1315
public: explicit mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) 
# 1316
{ } 
# 1319
_Ret operator()(_Tp &__r, _Arg __x) const 
# 1320
{ return (__r.*(_M_f))(__x); } 
# 1323
private: _Ret (_Tp::*_M_f)(_Arg); 
# 1324
}; 
# 1328
template< class _Ret, class _Tp, class _Arg> 
# 1329
class const_mem_fun1_ref_t : public binary_function< _Tp, _Arg, _Ret>  { 
# 1333
public: explicit const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) 
# 1334
{ } 
# 1337
_Ret operator()(const _Tp &__r, _Arg __x) const 
# 1338
{ return (__r.*(_M_f))(__x); } 
# 1341
private: _Ret (_Tp::*_M_f)(_Arg) const; 
# 1342
}; 
# 1346
template< class _Ret, class _Tp> inline mem_fun_t< _Ret, _Tp>  
# 1348
mem_fun(_Ret (_Tp::*__f)(void)) 
# 1349
{ return ((mem_fun_t< _Ret, _Tp> )(__f)); } 
# 1351
template< class _Ret, class _Tp> inline const_mem_fun_t< _Ret, _Tp>  
# 1353
mem_fun(_Ret (_Tp::*__f)(void) const) 
# 1354
{ return ((const_mem_fun_t< _Ret, _Tp> )(__f)); } 
# 1356
template< class _Ret, class _Tp> inline mem_fun_ref_t< _Ret, _Tp>  
# 1358
mem_fun_ref(_Ret (_Tp::*__f)(void)) 
# 1359
{ return ((mem_fun_ref_t< _Ret, _Tp> )(__f)); } 
# 1361
template< class _Ret, class _Tp> inline const_mem_fun_ref_t< _Ret, _Tp>  
# 1363
mem_fun_ref(_Ret (_Tp::*__f)(void) const) 
# 1364
{ return ((const_mem_fun_ref_t< _Ret, _Tp> )(__f)); } 
# 1366
template< class _Ret, class _Tp, class _Arg> inline mem_fun1_t< _Ret, _Tp, _Arg>  
# 1368
mem_fun(_Ret (_Tp::*__f)(_Arg)) 
# 1369
{ return ((mem_fun1_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1371
template< class _Ret, class _Tp, class _Arg> inline const_mem_fun1_t< _Ret, _Tp, _Arg>  
# 1373
mem_fun(_Ret (_Tp::*__f)(_Arg) const) 
# 1374
{ return ((const_mem_fun1_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1376
template< class _Ret, class _Tp, class _Arg> inline mem_fun1_ref_t< _Ret, _Tp, _Arg>  
# 1378
mem_fun_ref(_Ret (_Tp::*__f)(_Arg)) 
# 1379
{ return ((mem_fun1_ref_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1381
template< class _Ret, class _Tp, class _Arg> inline const_mem_fun1_ref_t< _Ret, _Tp, _Arg>  
# 1383
mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const) 
# 1384
{ return ((const_mem_fun1_ref_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1389
}
# 60 "/usr/include/c++/9/backward/binders.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 63
namespace std __attribute((__visibility__("default"))) { 
# 107 "/usr/include/c++/9/backward/binders.h" 3
template< class _Operation> 
# 108
class binder1st : public unary_function< typename _Operation::second_argument_type, typename _Operation::result_type>  { 
# 113
protected: _Operation op; 
# 114
typename _Operation::first_argument_type value; 
# 117
public: binder1st(const _Operation &__x, const typename _Operation::first_argument_type &
# 118
__y) : op(__x), value(__y) 
# 119
{ } 
# 122
typename _Operation::result_type operator()(const typename _Operation::second_argument_type &__x) const 
# 123
{ return (op)(value, __x); } 
# 128
typename _Operation::result_type operator()(typename _Operation::second_argument_type &__x) const 
# 129
{ return (op)(value, __x); } 
# 130
} __attribute((__deprecated__)); 
# 133
template< class _Operation, class _Tp> inline binder1st< _Operation>  
# 135
bind1st(const _Operation &__fn, const _Tp &__x) 
# 136
{ 
# 137
typedef typename _Operation::first_argument_type _Arg1_type; 
# 138
return binder1st< _Operation> (__fn, (_Arg1_type)__x); 
# 139
} 
# 142
template< class _Operation> 
# 143
class binder2nd : public unary_function< typename _Operation::first_argument_type, typename _Operation::result_type>  { 
# 148
protected: _Operation op; 
# 149
typename _Operation::second_argument_type value; 
# 152
public: binder2nd(const _Operation &__x, const typename _Operation::second_argument_type &
# 153
__y) : op(__x), value(__y) 
# 154
{ } 
# 157
typename _Operation::result_type operator()(const typename _Operation::first_argument_type &__x) const 
# 158
{ return (op)(__x, value); } 
# 163
typename _Operation::result_type operator()(typename _Operation::first_argument_type &__x) const 
# 164
{ return (op)(__x, value); } 
# 165
} __attribute((__deprecated__)); 
# 168
template< class _Operation, class _Tp> inline binder2nd< _Operation>  
# 170
bind2nd(const _Operation &__fn, const _Tp &__x) 
# 171
{ 
# 172
typedef typename _Operation::second_argument_type _Arg2_type; 
# 173
return binder2nd< _Operation> (__fn, (_Arg2_type)__x); 
# 174
} 
# 178
}
# 180
#pragma GCC diagnostic pop
# 37 "/usr/include/c++/9/bits/range_access.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 46
template< class _Container> inline auto 
# 48
begin(_Container &__cont)->__decltype((__cont.begin())) 
# 49
{ return __cont.begin(); } 
# 56
template< class _Container> inline auto 
# 58
begin(const _Container &__cont)->__decltype((__cont.begin())) 
# 59
{ return __cont.begin(); } 
# 66
template< class _Container> inline auto 
# 68
end(_Container &__cont)->__decltype((__cont.end())) 
# 69
{ return __cont.end(); } 
# 76
template< class _Container> inline auto 
# 78
end(const _Container &__cont)->__decltype((__cont.end())) 
# 79
{ return __cont.end(); } 
# 85
template< class _Tp, size_t _Nm> constexpr _Tp *
# 87
begin(_Tp (&__arr)[_Nm]) noexcept 
# 88
{ return __arr; } 
# 95
template< class _Tp, size_t _Nm> constexpr _Tp *
# 97
end(_Tp (&__arr)[_Nm]) noexcept 
# 98
{ return __arr + _Nm; } 
# 102
template< class _Tp> class valarray; 
# 104
template< class _Tp> _Tp *begin(valarray< _Tp>  &); 
# 105
template< class _Tp> const _Tp *begin(const valarray< _Tp>  &); 
# 106
template< class _Tp> _Tp *end(valarray< _Tp>  &); 
# 107
template< class _Tp> const _Tp *end(const valarray< _Tp>  &); 
# 114
template< class _Container> constexpr auto 
# 116
cbegin(const _Container &__cont) noexcept(noexcept(std::begin(__cont)))->__decltype((std::begin(__cont))) 
# 118
{ return std::begin(__cont); } 
# 125
template< class _Container> constexpr auto 
# 127
cend(const _Container &__cont) noexcept(noexcept(std::end(__cont)))->__decltype((std::end(__cont))) 
# 129
{ return std::end(__cont); } 
# 136
template< class _Container> inline auto 
# 138
rbegin(_Container &__cont)->__decltype((__cont.rbegin())) 
# 139
{ return __cont.rbegin(); } 
# 146
template< class _Container> inline auto 
# 148
rbegin(const _Container &__cont)->__decltype((__cont.rbegin())) 
# 149
{ return __cont.rbegin(); } 
# 156
template< class _Container> inline auto 
# 158
rend(_Container &__cont)->__decltype((__cont.rend())) 
# 159
{ return __cont.rend(); } 
# 166
template< class _Container> inline auto 
# 168
rend(const _Container &__cont)->__decltype((__cont.rend())) 
# 169
{ return __cont.rend(); } 
# 176
template< class _Tp, size_t _Nm> inline reverse_iterator< _Tp *>  
# 178
rbegin(_Tp (&__arr)[_Nm]) noexcept 
# 179
{ return ((reverse_iterator< _Tp *> )(__arr + _Nm)); } 
# 186
template< class _Tp, size_t _Nm> inline reverse_iterator< _Tp *>  
# 188
rend(_Tp (&__arr)[_Nm]) noexcept 
# 189
{ return ((reverse_iterator< _Tp *> )(__arr)); } 
# 196
template< class _Tp> inline reverse_iterator< const _Tp *>  
# 198
rbegin(initializer_list< _Tp>  __il) noexcept 
# 199
{ return ((reverse_iterator< const _Tp *> )(__il.end())); } 
# 206
template< class _Tp> inline reverse_iterator< const _Tp *>  
# 208
rend(initializer_list< _Tp>  __il) noexcept 
# 209
{ return ((reverse_iterator< const _Tp *> )(__il.begin())); } 
# 216
template< class _Container> inline auto 
# 218
crbegin(const _Container &__cont)->__decltype((std::rbegin(__cont))) 
# 219
{ return std::rbegin(__cont); } 
# 226
template< class _Container> inline auto 
# 228
crend(const _Container &__cont)->__decltype((std::rend(__cont))) 
# 229
{ return std::rend(__cont); } 
# 324 "/usr/include/c++/9/bits/range_access.h" 3
}
# 51 "/usr/include/c++/9/bits/basic_string.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 61
inline namespace __cxx11 { 
# 80 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> 
# 81
class basic_string { 
# 84
typedef typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other _Char_alloc_type; 
# 85
typedef __gnu_cxx::__alloc_traits< _Char_alloc_type>  _Alloc_traits; 
# 89
public: typedef _Traits traits_type; 
# 90
typedef typename _Traits::char_type value_type; 
# 91
typedef _Char_alloc_type allocator_type; 
# 92
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::size_type size_type; 
# 93
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::difference_type difference_type; 
# 94
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::reference reference; 
# 95
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::const_reference const_reference; 
# 96
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::pointer pointer; 
# 97
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::const_pointer const_pointer; 
# 98
typedef __gnu_cxx::__normal_iterator< pointer, basic_string>  iterator; 
# 100
typedef __gnu_cxx::__normal_iterator< const_pointer, basic_string>  const_iterator; 
# 101
typedef std::reverse_iterator< const_iterator>  const_reverse_iterator; 
# 102
typedef std::reverse_iterator< iterator>  reverse_iterator; 
# 105
static const size_type npos = (static_cast< size_type>(-1)); 
# 112
protected: typedef const_iterator __const_iterator; 
# 154 "/usr/include/c++/9/bits/basic_string.h" 3
private: struct _Alloc_hider : public allocator_type { 
# 160
_Alloc_hider(typename basic_string< _CharT, _Traits, _Alloc> ::pointer __dat, const _Alloc &__a) : basic_string< _CharT, _Traits, _Alloc> ::allocator_type(__a), _M_p(__dat) 
# 161
{ } 
# 163
_Alloc_hider(typename basic_string< _CharT, _Traits, _Alloc> ::pointer __dat, _Alloc &&__a = _Alloc()) : basic_string< _CharT, _Traits, _Alloc> ::allocator_type(std::move(__a)), _M_p(__dat) 
# 164
{ } 
# 167
typename basic_string< _CharT, _Traits, _Alloc> ::pointer _M_p; 
# 168
}; 
# 170
_Alloc_hider _M_dataplus; 
# 171
size_type _M_string_length; 
# 173
enum { _S_local_capacity = (15) / sizeof(_CharT)}; 
# 176
union { 
# 177
_CharT _M_local_buf[_S_local_capacity + 1]; 
# 178
size_type _M_allocated_capacity; 
# 179
}; 
# 182
void _M_data(pointer __p) 
# 183
{ ((_M_dataplus)._M_p) = __p; } 
# 186
void _M_length(size_type __length) 
# 187
{ (_M_string_length) = __length; } 
# 190
pointer _M_data() const 
# 191
{ return (_M_dataplus)._M_p; } 
# 194
pointer _M_local_data() 
# 195
{ 
# 197
return std::template pointer_traits< pointer> ::pointer_to(*(_M_local_buf)); 
# 201
} 
# 204
const_pointer _M_local_data() const 
# 205
{ 
# 207
return std::template pointer_traits< const_pointer> ::pointer_to(*(_M_local_buf)); 
# 211
} 
# 214
void _M_capacity(size_type __capacity) 
# 215
{ (_M_allocated_capacity) = __capacity; } 
# 218
void _M_set_length(size_type __n) 
# 219
{ 
# 220
_M_length(__n); 
# 221
traits_type::assign(_M_data()[__n], _CharT()); 
# 222
} 
# 225
bool _M_is_local() const 
# 226
{ return _M_data() == _M_local_data(); } 
# 230
pointer _M_create(size_type &, size_type); 
# 233
void _M_dispose() 
# 234
{ 
# 235
if (!_M_is_local()) { 
# 236
_M_destroy(_M_allocated_capacity); }  
# 237
} 
# 240
void _M_destroy(size_type __size) throw() 
# 241
{ _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); } 
# 245
template< class _InIterator> void 
# 247
_M_construct_aux(_InIterator __beg, _InIterator __end, __false_type) 
# 249
{ 
# 250
typedef typename iterator_traits< _InIterator> ::iterator_category _Tag; 
# 251
_M_construct(__beg, __end, _Tag()); 
# 252
} 
# 256
template< class _Integer> void 
# 258
_M_construct_aux(_Integer __beg, _Integer __end, __true_type) 
# 259
{ _M_construct_aux_2(static_cast< size_type>(__beg), __end); } 
# 262
void _M_construct_aux_2(size_type __req, _CharT __c) 
# 263
{ _M_construct(__req, __c); } 
# 265
template< class _InIterator> void 
# 267
_M_construct(_InIterator __beg, _InIterator __end) 
# 268
{ 
# 269
typedef typename __is_integer< _InIterator> ::__type _Integral; 
# 270
_M_construct_aux(__beg, __end, _Integral()); 
# 271
} 
# 274
template< class _InIterator> void _M_construct(_InIterator __beg, _InIterator __end, input_iterator_tag); 
# 281
template< class _FwdIterator> void _M_construct(_FwdIterator __beg, _FwdIterator __end, forward_iterator_tag); 
# 287
void _M_construct(size_type __req, _CharT __c); 
# 290
allocator_type &_M_get_allocator() 
# 291
{ return _M_dataplus; } 
# 294
const allocator_type &_M_get_allocator() const 
# 295
{ return _M_dataplus; } 
# 314 "/usr/include/c++/9/bits/basic_string.h" 3
size_type _M_check(size_type __pos, const char *__s) const 
# 315
{ 
# 316
if (__pos > size()) { 
# 317
__throw_out_of_range_fmt("%s: __pos (which is %zu) > this->size() (which is %zu)", __s, __pos, size()); }  
# 320
return __pos; 
# 321
} 
# 324
void _M_check_length(size_type __n1, size_type __n2, const char *__s) const 
# 325
{ 
# 326
if ((max_size() - (size() - __n1)) < __n2) { 
# 327
__throw_length_error(__s); }  
# 328
} 
# 333
size_type _M_limit(size_type __pos, size_type __off) const noexcept 
# 334
{ 
# 335
const bool __testoff = __off < (size() - __pos); 
# 336
return __testoff ? __off : (size() - __pos); 
# 337
} 
# 341
bool _M_disjunct(const _CharT *__s) const noexcept 
# 342
{ 
# 343
return (less< const _CharT *> ()(__s, _M_data()) || less< const _CharT *> ()(_M_data() + size(), __s)); 
# 345
} 
# 350
static void _S_copy(_CharT *__d, const _CharT *__s, size_type __n) 
# 351
{ 
# 352
if (__n == 1) { 
# 353
traits_type::assign(*__d, *__s); } else { 
# 355
traits_type::copy(__d, __s, __n); }  
# 356
} 
# 359
static void _S_move(_CharT *__d, const _CharT *__s, size_type __n) 
# 360
{ 
# 361
if (__n == 1) { 
# 362
traits_type::assign(*__d, *__s); } else { 
# 364
traits_type::move(__d, __s, __n); }  
# 365
} 
# 368
static void _S_assign(_CharT *__d, size_type __n, _CharT __c) 
# 369
{ 
# 370
if (__n == 1) { 
# 371
traits_type::assign(*__d, __c); } else { 
# 373
traits_type::assign(__d, __n, __c); }  
# 374
} 
# 378
template< class _Iterator> static void 
# 380
_S_copy_chars(_CharT *__p, _Iterator __k1, _Iterator __k2) 
# 381
{ 
# 382
for (; __k1 != __k2; (++__k1), ((void)(++__p))) { 
# 383
traits_type::assign(*__p, *__k1); }  
# 384
} 
# 387
static void _S_copy_chars(_CharT *__p, iterator __k1, iterator __k2) noexcept 
# 388
{ _S_copy_chars(__p, __k1.base(), __k2.base()); } 
# 391
static void _S_copy_chars(_CharT *__p, const_iterator __k1, const_iterator __k2) noexcept 
# 393
{ _S_copy_chars(__p, __k1.base(), __k2.base()); } 
# 396
static void _S_copy_chars(_CharT *__p, _CharT *__k1, _CharT *__k2) noexcept 
# 397
{ (_S_copy)(__p, __k1, __k2 - __k1); } 
# 400
static void _S_copy_chars(_CharT *__p, const _CharT *__k1, const _CharT *__k2) noexcept 
# 402
{ (_S_copy)(__p, __k1, __k2 - __k1); } 
# 405
static int _S_compare(size_type __n1, size_type __n2) noexcept 
# 406
{ 
# 407
const difference_type __d = (difference_type)(__n1 - __n2); 
# 409
if (__d > __gnu_cxx::__numeric_traits< int> ::__max) { 
# 410
return __gnu_cxx::__numeric_traits< int> ::__max; } else { 
# 411
if (__d < __gnu_cxx::__numeric_traits< int> ::__min) { 
# 412
return __gnu_cxx::__numeric_traits< int> ::__min; } else { 
# 414
return (int)__d; }  }  
# 415
} 
# 418
void _M_assign(const basic_string &); 
# 421
void _M_mutate(size_type __pos, size_type __len1, const _CharT * __s, size_type __len2); 
# 425
void _M_erase(size_type __pos, size_type __n); 
# 435
public: basic_string() noexcept(is_nothrow_default_constructible< _Alloc> ::value) : _M_dataplus(_M_local_data()) 
# 438
{ _M_set_length(0); } 
# 444
explicit basic_string(const _Alloc &__a) noexcept : _M_dataplus(_M_local_data(), __a) 
# 446
{ _M_set_length(0); } 
# 452
basic_string(const basic_string &__str) : _M_dataplus(_M_local_data(), _Alloc_traits::_S_select_on_copy(__str._M_get_allocator())) 
# 455
{ _M_construct(__str._M_data(), __str._M_data() + __str.length()); } 
# 465 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string(const basic_string &__str, size_type __pos, const _Alloc &
# 466
__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 468
{ 
# 469
const _CharT *__start = __str._M_data() + __str._M_check(__pos, "basic_string::basic_string"); 
# 471
_M_construct(__start, __start + __str._M_limit(__pos, npos)); 
# 472
} 
# 480
basic_string(const basic_string &__str, size_type __pos, size_type 
# 481
__n) : _M_dataplus(_M_local_data()) 
# 483
{ 
# 484
const _CharT *__start = __str._M_data() + __str._M_check(__pos, "basic_string::basic_string"); 
# 486
_M_construct(__start, __start + __str._M_limit(__pos, __n)); 
# 487
} 
# 496 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string(const basic_string &__str, size_type __pos, size_type 
# 497
__n, const _Alloc &__a) : _M_dataplus(_M_local_data(), __a) 
# 499
{ 
# 500
const _CharT *__start = __str._M_data() + __str._M_check(__pos, "string::string"); 
# 502
_M_construct(__start, __start + __str._M_limit(__pos, __n)); 
# 503
} 
# 514 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string(const _CharT *__s, size_type __n, const _Alloc &
# 515
__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 517
{ _M_construct(__s, __s + __n); } 
# 529 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string(const _CharT *__s, const _Alloc &__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 531
{ _M_construct(__s, (__s) ? __s + traits_type::length(__s) : (__s + npos)); } 
# 544 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string(size_type __n, _CharT __c, const _Alloc &__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 546
{ _M_construct(__n, __c); } 
# 556 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string(basic_string &&__str) noexcept : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator())) 
# 558
{ 
# 559
if (__str._M_is_local()) 
# 560
{ 
# 561
traits_type::copy(_M_local_buf, __str._M_local_buf, _S_local_capacity + 1); 
# 563
} else 
# 565
{ 
# 566
_M_data(__str._M_data()); 
# 567
_M_capacity(__str._M_allocated_capacity); 
# 568
}  
# 573
_M_length(__str.length()); 
# 574
__str._M_data(__str._M_local_data()); 
# 575
__str._M_set_length(0); 
# 576
} 
# 583
basic_string(initializer_list< _CharT>  __l, const _Alloc &__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 585
{ _M_construct(__l.begin(), __l.end()); } 
# 587
basic_string(const basic_string &__str, const _Alloc &__a) : _M_dataplus(_M_local_data(), __a) 
# 589
{ _M_construct(__str.begin(), __str.end()); } 
# 591
basic_string(basic_string &&__str, const _Alloc &__a) noexcept(_Alloc_traits::_S_always_equal()) : _M_dataplus(_M_local_data(), __a) 
# 594
{ 
# 595
if (__str._M_is_local()) 
# 596
{ 
# 597
traits_type::copy(_M_local_buf, __str._M_local_buf, _S_local_capacity + 1); 
# 599
_M_length(__str.length()); 
# 600
__str._M_set_length(0); 
# 601
} else { 
# 602
if (_Alloc_traits::_S_always_equal() || (__str.get_allocator() == __a)) 
# 604
{ 
# 605
_M_data(__str._M_data()); 
# 606
_M_length(__str.length()); 
# 607
_M_capacity(__str._M_allocated_capacity); 
# 608
__str._M_data(__str._M_local_buf); 
# 609
__str._M_set_length(0); 
# 610
} else { 
# 612
_M_construct(__str.begin(), __str.end()); }  }  
# 613
} 
# 624 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _InputIterator, class 
# 625
 = _RequireInputIter< _InputIterator> > 
# 629
basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc &
# 630
__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 632
{ _M_construct(__beg, __end); } 
# 661 "/usr/include/c++/9/bits/basic_string.h" 3
~basic_string() 
# 662
{ _M_dispose(); } 
# 669
basic_string &operator=(const basic_string &__str) 
# 670
{ 
# 672
if (_Alloc_traits::_S_propagate_on_copy_assign()) 
# 673
{ 
# 674
if ((!_Alloc_traits::_S_always_equal()) && (!_M_is_local()) && (_M_get_allocator() != __str._M_get_allocator())) 
# 676
{ 
# 679
if (__str.size() <= _S_local_capacity) 
# 680
{ 
# 681
_M_destroy(_M_allocated_capacity); 
# 682
_M_data(_M_local_data()); 
# 683
_M_set_length(0); 
# 684
} else 
# 686
{ 
# 687
const auto __len = __str.size(); 
# 688
auto __alloc = __str._M_get_allocator(); 
# 690
auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1); 
# 691
_M_destroy(_M_allocated_capacity); 
# 692
_M_data(__ptr); 
# 693
_M_capacity(__len); 
# 694
_M_set_length(__len); 
# 695
}  
# 696
}  
# 697
std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator()); 
# 698
}  
# 700
return this->assign(__str); 
# 701
} 
# 708
basic_string &operator=(const _CharT *__s) 
# 709
{ return this->assign(__s); } 
# 719 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &operator=(_CharT __c) 
# 720
{ 
# 721
this->assign(1, __c); 
# 722
return *this; 
# 723
} 
# 736 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &operator=(basic_string &&__str) noexcept(_Alloc_traits::_S_nothrow_move()) 
# 738
{ 
# 739
if ((!_M_is_local()) && _Alloc_traits::_S_propagate_on_move_assign() && (!_Alloc_traits::_S_always_equal()) && (_M_get_allocator() != __str._M_get_allocator())) 
# 742
{ 
# 744
_M_destroy(_M_allocated_capacity); 
# 745
_M_data(_M_local_data()); 
# 746
_M_set_length(0); 
# 747
}  
# 749
std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator()); 
# 751
if (__str._M_is_local()) 
# 752
{ 
# 754
if (__str.size()) { 
# 755
this->_S_copy(_M_data(), __str._M_data(), __str.size()); }  
# 756
_M_set_length(__str.size()); 
# 757
} else { 
# 758
if ((_Alloc_traits::_S_propagate_on_move_assign() || _Alloc_traits::_S_always_equal()) || (_M_get_allocator() == __str._M_get_allocator())) 
# 761
{ 
# 763
pointer __data = (nullptr); 
# 764
size_type __capacity; 
# 765
if (!_M_is_local()) 
# 766
{ 
# 767
if (_Alloc_traits::_S_always_equal()) 
# 768
{ 
# 770
__data = _M_data(); 
# 771
__capacity = (_M_allocated_capacity); 
# 772
} else { 
# 774
_M_destroy(_M_allocated_capacity); }  
# 775
}  
# 777
_M_data(__str._M_data()); 
# 778
_M_length(__str.length()); 
# 779
_M_capacity(__str._M_allocated_capacity); 
# 780
if (__data) 
# 781
{ 
# 782
__str._M_data(__data); 
# 783
__str._M_capacity(__capacity); 
# 784
} else { 
# 786
__str._M_data(__str._M_local_buf); }  
# 787
} else { 
# 789
assign(__str); }  }  
# 790
__str.clear(); 
# 791
return *this; 
# 792
} 
# 799
basic_string &operator=(initializer_list< _CharT>  __l) 
# 800
{ 
# 801
this->assign(__l.begin(), __l.size()); 
# 802
return *this; 
# 803
} 
# 830 "/usr/include/c++/9/bits/basic_string.h" 3
iterator begin() noexcept 
# 831
{ return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(_M_data())); } 
# 838
const_iterator begin() const noexcept 
# 839
{ return ((__gnu_cxx::__normal_iterator< const_pointer, basic_string> )(_M_data())); } 
# 846
iterator end() noexcept 
# 847
{ return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(_M_data() + size())); } 
# 854
const_iterator end() const noexcept 
# 855
{ return ((__gnu_cxx::__normal_iterator< const_pointer, basic_string> )(_M_data() + size())); } 
# 863
reverse_iterator rbegin() noexcept 
# 864
{ return ((std::reverse_iterator< iterator> )(end())); } 
# 872
const_reverse_iterator rbegin() const noexcept 
# 873
{ return ((std::reverse_iterator< const_iterator> )(end())); } 
# 881
reverse_iterator rend() noexcept 
# 882
{ return ((std::reverse_iterator< iterator> )(begin())); } 
# 890
const_reverse_iterator rend() const noexcept 
# 891
{ return ((std::reverse_iterator< const_iterator> )(begin())); } 
# 899
const_iterator cbegin() const noexcept 
# 900
{ return ((__gnu_cxx::__normal_iterator< const_pointer, basic_string> )(this->_M_data())); } 
# 907
const_iterator cend() const noexcept 
# 908
{ return ((__gnu_cxx::__normal_iterator< const_pointer, basic_string> )(this->_M_data() + size())); } 
# 916
const_reverse_iterator crbegin() const noexcept 
# 917
{ return ((std::reverse_iterator< const_iterator> )(end())); } 
# 925
const_reverse_iterator crend() const noexcept 
# 926
{ return ((std::reverse_iterator< const_iterator> )(begin())); } 
# 934
size_type size() const noexcept 
# 935
{ return _M_string_length; } 
# 940
size_type length() const noexcept 
# 941
{ return _M_string_length; } 
# 945
size_type max_size() const noexcept 
# 946
{ return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; } 
# 959 "/usr/include/c++/9/bits/basic_string.h" 3
void resize(size_type __n, _CharT __c); 
# 972 "/usr/include/c++/9/bits/basic_string.h" 3
void resize(size_type __n) 
# 973
{ this->resize(__n, _CharT()); } 
# 978
void shrink_to_fit() noexcept 
# 979
{ 
# 981
if (capacity() > size()) 
# 982
{ 
# 983
try 
# 984
{ reserve(0); } 
# 985
catch (...) 
# 986
{ }  
# 987
}  
# 989
} 
# 997
size_type capacity() const noexcept 
# 998
{ 
# 999
return (_M_is_local()) ? (size_type)_S_local_capacity : (_M_allocated_capacity); 
# 1001
} 
# 1021 "/usr/include/c++/9/bits/basic_string.h" 3
void reserve(size_type __res_arg = 0); 
# 1027
void clear() noexcept 
# 1028
{ _M_set_length(0); } 
# 1035
bool empty() const noexcept 
# 1036
{ return size() == 0; } 
# 1050 "/usr/include/c++/9/bits/basic_string.h" 3
const_reference operator[](size_type __pos) const noexcept 
# 1051
{ 
# 1052
; 
# 1053
return _M_data()[__pos]; 
# 1054
} 
# 1067 "/usr/include/c++/9/bits/basic_string.h" 3
reference operator[](size_type __pos) 
# 1068
{ 
# 1071
; 
# 1073
; 
# 1074
return _M_data()[__pos]; 
# 1075
} 
# 1088 "/usr/include/c++/9/bits/basic_string.h" 3
const_reference at(size_type __n) const 
# 1089
{ 
# 1090
if (__n >= size()) { 
# 1091
__throw_out_of_range_fmt("basic_string::at: __n (which is %zu) >= this->size() (which is %zu)", __n, size()); }  
# 1095
return _M_data()[__n]; 
# 1096
} 
# 1109 "/usr/include/c++/9/bits/basic_string.h" 3
reference at(size_type __n) 
# 1110
{ 
# 1111
if (__n >= size()) { 
# 1112
__throw_out_of_range_fmt("basic_string::at: __n (which is %zu) >= this->size() (which is %zu)", __n, size()); }  
# 1116
return _M_data()[__n]; 
# 1117
} 
# 1125
reference front() noexcept 
# 1126
{ 
# 1127
; 
# 1128
return operator[](0); 
# 1129
} 
# 1136
const_reference front() const noexcept 
# 1137
{ 
# 1138
; 
# 1139
return operator[](0); 
# 1140
} 
# 1147
reference back() noexcept 
# 1148
{ 
# 1149
; 
# 1150
return operator[](size() - 1); 
# 1151
} 
# 1158
const_reference back() const noexcept 
# 1159
{ 
# 1160
; 
# 1161
return operator[](size() - 1); 
# 1162
} 
# 1172 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &operator+=(const basic_string &__str) 
# 1173
{ return this->append(__str); } 
# 1181
basic_string &operator+=(const _CharT *__s) 
# 1182
{ return this->append(__s); } 
# 1190
basic_string &operator+=(_CharT __c) 
# 1191
{ 
# 1192
push_back(__c); 
# 1193
return *this; 
# 1194
} 
# 1203
basic_string &operator+=(initializer_list< _CharT>  __l) 
# 1204
{ return this->append(__l.begin(), __l.size()); } 
# 1225 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &append(const basic_string &__str) 
# 1226
{ return _M_append(__str._M_data(), __str.size()); } 
# 1242 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &append(const basic_string &__str, size_type __pos, size_type __n = npos) 
# 1243
{ return _M_append(__str._M_data() + __str._M_check(__pos, "basic_string::append"), __str._M_limit(__pos, __n)); 
# 1245
} 
# 1254
basic_string &append(const _CharT *__s, size_type __n) 
# 1255
{ 
# 1256
; 
# 1257
_M_check_length((size_type)0, __n, "basic_string::append"); 
# 1258
return _M_append(__s, __n); 
# 1259
} 
# 1267
basic_string &append(const _CharT *__s) 
# 1268
{ 
# 1269
; 
# 1270
const size_type __n = traits_type::length(__s); 
# 1271
_M_check_length((size_type)0, __n, "basic_string::append"); 
# 1272
return _M_append(__s, __n); 
# 1273
} 
# 1284 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &append(size_type __n, _CharT __c) 
# 1285
{ return _M_replace_aux(size(), (size_type)0, __n, __c); } 
# 1294
basic_string &append(initializer_list< _CharT>  __l) 
# 1295
{ return this->append(__l.begin(), __l.size()); } 
# 1307 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _InputIterator, class 
# 1308
 = _RequireInputIter< _InputIterator> > basic_string &
# 1313
append(_InputIterator __first, _InputIterator __last) 
# 1314
{ return this->replace(end(), end(), __first, __last); } 
# 1353 "/usr/include/c++/9/bits/basic_string.h" 3
void push_back(_CharT __c) 
# 1354
{ 
# 1355
const size_type __size = size(); 
# 1356
if ((__size + 1) > capacity()) { 
# 1357
_M_mutate(__size, (size_type)0, 0, (size_type)1); }  
# 1358
traits_type::assign(this->_M_data()[__size], __c); 
# 1359
_M_set_length(__size + 1); 
# 1360
} 
# 1368
basic_string &assign(const basic_string &__str) 
# 1369
{ 
# 1370
_M_assign(__str); 
# 1371
return *this; 
# 1372
} 
# 1384 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &assign(basic_string &&__str) noexcept(_Alloc_traits::_S_nothrow_move()) 
# 1386
{ 
# 1389
return (*this) = std::move(__str); 
# 1390
} 
# 1407 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &assign(const basic_string &__str, size_type __pos, size_type __n = npos) 
# 1408
{ return _M_replace((size_type)0, size(), __str._M_data() + __str._M_check(__pos, "basic_string::assign"), __str._M_limit(__pos, __n)); 
# 1410
} 
# 1423 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &assign(const _CharT *__s, size_type __n) 
# 1424
{ 
# 1425
; 
# 1426
return _M_replace((size_type)0, size(), __s, __n); 
# 1427
} 
# 1439 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &assign(const _CharT *__s) 
# 1440
{ 
# 1441
; 
# 1442
return _M_replace((size_type)0, size(), __s, traits_type::length(__s)); 
# 1444
} 
# 1456 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &assign(size_type __n, _CharT __c) 
# 1457
{ return _M_replace_aux((size_type)0, size(), __n, __c); } 
# 1468 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _InputIterator, class 
# 1469
 = _RequireInputIter< _InputIterator> > basic_string &
# 1474
assign(_InputIterator __first, _InputIterator __last) 
# 1475
{ return this->replace(begin(), end(), __first, __last); } 
# 1484
basic_string &assign(initializer_list< _CharT>  __l) 
# 1485
{ return this->assign(__l.begin(), __l.size()); } 
# 1538 "/usr/include/c++/9/bits/basic_string.h" 3
iterator insert(const_iterator __p, size_type __n, _CharT __c) 
# 1539
{ 
# 1540
; 
# 1541
const size_type __pos = __p - begin(); 
# 1542
this->replace(__p, __p, __n, __c); 
# 1543
return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(this->_M_data() + __pos)); 
# 1544
} 
# 1579 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _InputIterator, class 
# 1580
 = _RequireInputIter< _InputIterator> > iterator 
# 1582
insert(const_iterator __p, _InputIterator __beg, _InputIterator __end) 
# 1583
{ 
# 1584
; 
# 1585
const size_type __pos = __p - begin(); 
# 1586
this->replace(__p, __p, __beg, __end); 
# 1587
return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(this->_M_data() + __pos)); 
# 1588
} 
# 1616 "/usr/include/c++/9/bits/basic_string.h" 3
iterator insert(const_iterator __p, initializer_list< _CharT>  __l) 
# 1617
{ return this->insert(__p, __l.begin(), __l.end()); } 
# 1643 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &insert(size_type __pos1, const basic_string &__str) 
# 1644
{ return this->replace(__pos1, (size_type)0, __str._M_data(), __str.size()); 
# 1645
} 
# 1666 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &insert(size_type __pos1, const basic_string &__str, size_type 
# 1667
__pos2, size_type __n = npos) 
# 1668
{ return this->replace(__pos1, (size_type)0, __str._M_data() + __str._M_check(__pos2, "basic_string::insert"), __str._M_limit(__pos2, __n)); 
# 1670
} 
# 1689 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &insert(size_type __pos, const _CharT *__s, size_type __n) 
# 1690
{ return this->replace(__pos, (size_type)0, __s, __n); } 
# 1708 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &insert(size_type __pos, const _CharT *__s) 
# 1709
{ 
# 1710
; 
# 1711
return this->replace(__pos, (size_type)0, __s, traits_type::length(__s)); 
# 1713
} 
# 1732 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &insert(size_type __pos, size_type __n, _CharT __c) 
# 1733
{ return _M_replace_aux(_M_check(__pos, "basic_string::insert"), (size_type)0, __n, __c); 
# 1734
} 
# 1750 "/usr/include/c++/9/bits/basic_string.h" 3
iterator insert(__const_iterator __p, _CharT __c) 
# 1751
{ 
# 1752
; 
# 1753
const size_type __pos = __p - begin(); 
# 1754
_M_replace_aux(__pos, (size_type)0, (size_type)1, __c); 
# 1755
return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(_M_data() + __pos)); 
# 1756
} 
# 1811 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &erase(size_type __pos = 0, size_type __n = npos) 
# 1812
{ 
# 1813
_M_check(__pos, "basic_string::erase"); 
# 1814
if (__n == npos) { 
# 1815
_M_set_length(__pos); } else { 
# 1816
if (__n != 0) { 
# 1817
_M_erase(__pos, _M_limit(__pos, __n)); }  }  
# 1818
return *this; 
# 1819
} 
# 1830 "/usr/include/c++/9/bits/basic_string.h" 3
iterator erase(__const_iterator __position) 
# 1831
{ 
# 1833
; 
# 1834
const size_type __pos = __position - begin(); 
# 1835
_M_erase(__pos, (size_type)1); 
# 1836
return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(_M_data() + __pos)); 
# 1837
} 
# 1849 "/usr/include/c++/9/bits/basic_string.h" 3
iterator erase(__const_iterator __first, __const_iterator __last) 
# 1850
{ 
# 1852
; 
# 1853
const size_type __pos = __first - begin(); 
# 1854
if (__last == end()) { 
# 1855
_M_set_length(__pos); } else { 
# 1857
_M_erase(__pos, __last - __first); }  
# 1858
return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(this->_M_data() + __pos)); 
# 1859
} 
# 1868
void pop_back() noexcept 
# 1869
{ 
# 1870
; 
# 1871
_M_erase(size() - 1, 1); 
# 1872
} 
# 1893 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &replace(size_type __pos, size_type __n, const basic_string &__str) 
# 1894
{ return this->replace(__pos, __n, __str._M_data(), __str.size()); } 
# 1915 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &replace(size_type __pos1, size_type __n1, const basic_string &__str, size_type 
# 1916
__pos2, size_type __n2 = npos) 
# 1917
{ return this->replace(__pos1, __n1, __str._M_data() + __str._M_check(__pos2, "basic_string::replace"), __str._M_limit(__pos2, __n2)); 
# 1919
} 
# 1940 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &replace(size_type __pos, size_type __n1, const _CharT *__s, size_type 
# 1941
__n2) 
# 1942
{ 
# 1943
; 
# 1944
return _M_replace(_M_check(__pos, "basic_string::replace"), _M_limit(__pos, __n1), __s, __n2); 
# 1946
} 
# 1965 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &replace(size_type __pos, size_type __n1, const _CharT *__s) 
# 1966
{ 
# 1967
; 
# 1968
return this->replace(__pos, __n1, __s, traits_type::length(__s)); 
# 1969
} 
# 1989 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c) 
# 1990
{ return _M_replace_aux(_M_check(__pos, "basic_string::replace"), _M_limit(__pos, __n1), __n2, __c); 
# 1991
} 
# 2007 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const basic_string &
# 2008
__str) 
# 2009
{ return this->replace(__i1, __i2, __str._M_data(), __str.size()); } 
# 2027 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const _CharT *
# 2028
__s, size_type __n) 
# 2029
{ 
# 2031
; 
# 2032
return this->replace(__i1 - begin(), __i2 - __i1, __s, __n); 
# 2033
} 
# 2049 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const _CharT *__s) 
# 2050
{ 
# 2051
; 
# 2052
return this->replace(__i1, __i2, __s, traits_type::length(__s)); 
# 2053
} 
# 2070 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, size_type __n, _CharT 
# 2071
__c) 
# 2072
{ 
# 2074
; 
# 2075
return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c); 
# 2076
} 
# 2094 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _InputIterator, class 
# 2095
 = _RequireInputIter< _InputIterator> > basic_string &
# 2097
replace(const_iterator __i1, const_iterator __i2, _InputIterator 
# 2098
__k1, _InputIterator __k2) 
# 2099
{ 
# 2101
; 
# 2102
; 
# 2103
return this->_M_replace_dispatch(__i1, __i2, __k1, __k2, __false_type()); 
# 2105
} 
# 2127 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, _CharT *
# 2128
__k1, _CharT *__k2) 
# 2129
{ 
# 2131
; 
# 2132
; 
# 2133
return this->replace(__i1 - begin(), __i2 - __i1, __k1, __k2 - __k1); 
# 2135
} 
# 2138
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const _CharT *
# 2139
__k1, const _CharT *__k2) 
# 2140
{ 
# 2142
; 
# 2143
; 
# 2144
return this->replace(__i1 - begin(), __i2 - __i1, __k1, __k2 - __k1); 
# 2146
} 
# 2149
basic_string &replace(__const_iterator __i1, __const_iterator __i2, iterator 
# 2150
__k1, iterator __k2) 
# 2151
{ 
# 2153
; 
# 2154
; 
# 2155
return this->replace(__i1 - begin(), __i2 - __i1, __k1.base(), __k2 - __k1); 
# 2157
} 
# 2160
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const_iterator 
# 2161
__k1, const_iterator __k2) 
# 2162
{ 
# 2164
; 
# 2165
; 
# 2166
return this->replace(__i1 - begin(), __i2 - __i1, __k1.base(), __k2 - __k1); 
# 2168
} 
# 2185 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string &replace(const_iterator __i1, const_iterator __i2, initializer_list< _CharT>  
# 2186
__l) 
# 2187
{ return this->replace(__i1, __i2, __l.begin(), __l.size()); } 
# 2248 "/usr/include/c++/9/bits/basic_string.h" 3
private: 
# 2246
template< class _Integer> basic_string &
# 2248
_M_replace_dispatch(const_iterator __i1, const_iterator __i2, _Integer 
# 2249
__n, _Integer __val, __true_type) 
# 2250
{ return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); } 
# 2252
template< class _InputIterator> basic_string &_M_replace_dispatch(const_iterator __i1, const_iterator __i2, _InputIterator __k1, _InputIterator __k2, __false_type); 
# 2259
basic_string &_M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, _CharT __c); 
# 2263
basic_string &_M_replace(size_type __pos, size_type __len1, const _CharT * __s, const size_type __len2); 
# 2267
basic_string &_M_append(const _CharT * __s, size_type __n); 
# 2284 "/usr/include/c++/9/bits/basic_string.h" 3
public: size_type copy(_CharT * __s, size_type __n, size_type __pos = 0) const; 
# 2294 "/usr/include/c++/9/bits/basic_string.h" 3
void swap(basic_string & __s) noexcept; 
# 2304 "/usr/include/c++/9/bits/basic_string.h" 3
const _CharT *c_str() const noexcept 
# 2305
{ return _M_data(); } 
# 2316 "/usr/include/c++/9/bits/basic_string.h" 3
const _CharT *data() const noexcept 
# 2317
{ return _M_data(); } 
# 2335 "/usr/include/c++/9/bits/basic_string.h" 3
allocator_type get_allocator() const noexcept 
# 2336
{ return _M_get_allocator(); } 
# 2351 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2365 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find(const basic_string &__str, size_type __pos = 0) const noexcept 
# 2367
{ return this->find(__str.data(), __pos, __str.size()); } 
# 2397 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find(const _CharT *__s, size_type __pos = 0) const noexcept 
# 2398
{ 
# 2399
; 
# 2400
return this->find(__s, __pos, traits_type::length(__s)); 
# 2401
} 
# 2414 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find(_CharT __c, size_type __pos = 0) const noexcept; 
# 2427 "/usr/include/c++/9/bits/basic_string.h" 3
size_type rfind(const basic_string &__str, size_type __pos = npos) const noexcept 
# 2429
{ return this->rfind(__str.data(), __pos, __str.size()); } 
# 2461 "/usr/include/c++/9/bits/basic_string.h" 3
size_type rfind(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2475 "/usr/include/c++/9/bits/basic_string.h" 3
size_type rfind(const _CharT *__s, size_type __pos = npos) const 
# 2476
{ 
# 2477
; 
# 2478
return this->rfind(__s, __pos, traits_type::length(__s)); 
# 2479
} 
# 2492 "/usr/include/c++/9/bits/basic_string.h" 3
size_type rfind(_CharT __c, size_type __pos = npos) const noexcept; 
# 2506 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_first_of(const basic_string &__str, size_type __pos = 0) const noexcept 
# 2508
{ return this->find_first_of(__str.data(), __pos, __str.size()); } 
# 2541 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_first_of(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2555 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_first_of(const _CharT *__s, size_type __pos = 0) const noexcept 
# 2557
{ 
# 2558
; 
# 2559
return this->find_first_of(__s, __pos, traits_type::length(__s)); 
# 2560
} 
# 2575 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_first_of(_CharT __c, size_type __pos = 0) const noexcept 
# 2576
{ return this->find(__c, __pos); } 
# 2590 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_last_of(const basic_string &__str, size_type __pos = npos) const noexcept 
# 2592
{ return this->find_last_of(__str.data(), __pos, __str.size()); } 
# 2625 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_last_of(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2639 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_last_of(const _CharT *__s, size_type __pos = npos) const noexcept 
# 2641
{ 
# 2642
; 
# 2643
return this->find_last_of(__s, __pos, traits_type::length(__s)); 
# 2644
} 
# 2659 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_last_of(_CharT __c, size_type __pos = npos) const noexcept 
# 2660
{ return this->rfind(__c, __pos); } 
# 2673 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_first_not_of(const basic_string &__str, size_type __pos = 0) const noexcept 
# 2675
{ return this->find_first_not_of(__str.data(), __pos, __str.size()); } 
# 2708 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_first_not_of(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2722 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_first_not_of(const _CharT *__s, size_type __pos = 0) const noexcept 
# 2724
{ 
# 2725
; 
# 2726
return this->find_first_not_of(__s, __pos, traits_type::length(__s)); 
# 2727
} 
# 2740 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_first_not_of(_CharT __c, size_type __pos = 0) const noexcept; 
# 2755 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_last_not_of(const basic_string &__str, size_type __pos = npos) const noexcept 
# 2757
{ return this->find_last_not_of(__str.data(), __pos, __str.size()); } 
# 2790 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_last_not_of(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2804 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_last_not_of(const _CharT *__s, size_type __pos = npos) const noexcept 
# 2806
{ 
# 2807
; 
# 2808
return this->find_last_not_of(__s, __pos, traits_type::length(__s)); 
# 2809
} 
# 2822 "/usr/include/c++/9/bits/basic_string.h" 3
size_type find_last_not_of(_CharT __c, size_type __pos = npos) const noexcept; 
# 2838 "/usr/include/c++/9/bits/basic_string.h" 3
basic_string substr(size_type __pos = 0, size_type __n = npos) const 
# 2839
{ return basic_string(*this, _M_check(__pos, "basic_string::substr"), __n); 
# 2840
} 
# 2857 "/usr/include/c++/9/bits/basic_string.h" 3
int compare(const basic_string &__str) const 
# 2858
{ 
# 2859
const size_type __size = size(); 
# 2860
const size_type __osize = __str.size(); 
# 2861
const size_type __len = std::min(__size, __osize); 
# 2863
int __r = traits_type::compare(_M_data(), __str.data(), __len); 
# 2864
if (!__r) { 
# 2865
__r = (_S_compare)(__size, __osize); }  
# 2866
return __r; 
# 2867
} 
# 2950 "/usr/include/c++/9/bits/basic_string.h" 3
int compare(size_type __pos, size_type __n, const basic_string & __str) const; 
# 2976 "/usr/include/c++/9/bits/basic_string.h" 3
int compare(size_type __pos1, size_type __n1, const basic_string & __str, size_type __pos2, size_type __n2 = npos) const; 
# 2994 "/usr/include/c++/9/bits/basic_string.h" 3
int compare(const _CharT * __s) const noexcept; 
# 3018 "/usr/include/c++/9/bits/basic_string.h" 3
int compare(size_type __pos, size_type __n1, const _CharT * __s) const; 
# 3045 "/usr/include/c++/9/bits/basic_string.h" 3
int compare(size_type __pos, size_type __n1, const _CharT * __s, size_type __n2) const; 
# 3075 "/usr/include/c++/9/bits/basic_string.h" 3
template< class , class , class > friend class basic_stringbuf; 
# 3076
}; 
# 3077
}
# 6021 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6023
operator+(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6024
__rhs) 
# 6025
{ 
# 6026
__cxx11::basic_string< _CharT, _Traits, _Alloc>  __str(__lhs); 
# 6027
__str.append(__rhs); 
# 6028
return __str; 
# 6029
} 
# 6037
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  operator+(const _CharT * __lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  & __rhs); 
# 6048
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  operator+(_CharT __lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  & __rhs); 
# 6058
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6060
operator+(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6061
__rhs) 
# 6062
{ 
# 6063
__cxx11::basic_string< _CharT, _Traits, _Alloc>  __str(__lhs); 
# 6064
__str.append(__rhs); 
# 6065
return __str; 
# 6066
} 
# 6074
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6076
operator+(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, _CharT __rhs) 
# 6077
{ 
# 6078
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 6079
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 6080
__string_type __str(__lhs); 
# 6081
__str.append((__size_type)1, __rhs); 
# 6082
return __str; 
# 6083
} 
# 6086
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6088
operator+(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &&__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6089
__rhs) 
# 6090
{ return std::move(__lhs.append(__rhs)); } 
# 6092
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6094
operator+(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &&
# 6095
__rhs) 
# 6096
{ return std::move(__rhs.insert(0, __lhs)); } 
# 6098
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6100
operator+(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &&__lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &&
# 6101
__rhs) 
# 6102
{ 
# 6103
const auto __size = __lhs.size() + __rhs.size(); 
# 6104
const bool __cond = (__size > __lhs.capacity()) && (__size <= __rhs.capacity()); 
# 6106
return __cond ? std::move(__rhs.insert(0, __lhs)) : std::move(__lhs.append(__rhs)); 
# 6108
} 
# 6110
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6112
operator+(const _CharT *__lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &&
# 6113
__rhs) 
# 6114
{ return std::move(__rhs.insert(0, __lhs)); } 
# 6116
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6118
operator+(_CharT __lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &&
# 6119
__rhs) 
# 6120
{ return std::move(__rhs.insert(0, 1, __lhs)); } 
# 6122
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6124
operator+(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &&__lhs, const _CharT *
# 6125
__rhs) 
# 6126
{ return std::move(__lhs.append(__rhs)); } 
# 6128
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6130
operator+(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &&__lhs, _CharT 
# 6131
__rhs) 
# 6132
{ return std::move(__lhs.append(1, __rhs)); } 
# 6142 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6144
operator==(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6145
__rhs) noexcept 
# 6147
{ return __lhs.compare(__rhs) == 0; } 
# 6149
template< class _CharT> inline typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, bool> ::__type 
# 6152
operator==(const __cxx11::basic_string< _CharT>  &__lhs, const __cxx11::basic_string< _CharT>  &
# 6153
__rhs) noexcept 
# 6154
{ return ((__lhs.size() == __rhs.size()) && (!std::template char_traits< _CharT> ::compare(__lhs.data(), __rhs.data(), __lhs.size()))); 
# 6156
} 
# 6164
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6166
operator==(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6167
__rhs) 
# 6168
{ return __rhs.compare(__lhs) == 0; } 
# 6176
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6178
operator==(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6179
__rhs) 
# 6180
{ return __lhs.compare(__rhs) == 0; } 
# 6189 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6191
operator!=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6192
__rhs) noexcept 
# 6194
{ return !(__lhs == __rhs); } 
# 6202
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6204
operator!=(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6205
__rhs) 
# 6206
{ return !(__lhs == __rhs); } 
# 6214
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6216
operator!=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6217
__rhs) 
# 6218
{ return !(__lhs == __rhs); } 
# 6227 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6229
operator<(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6230
__rhs) noexcept 
# 6232
{ return __lhs.compare(__rhs) < 0; } 
# 6240
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6242
operator<(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6243
__rhs) 
# 6244
{ return __lhs.compare(__rhs) < 0; } 
# 6252
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6254
operator<(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6255
__rhs) 
# 6256
{ return __rhs.compare(__lhs) > 0; } 
# 6265 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6267
operator>(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6268
__rhs) noexcept 
# 6270
{ return __lhs.compare(__rhs) > 0; } 
# 6278
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6280
operator>(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6281
__rhs) 
# 6282
{ return __lhs.compare(__rhs) > 0; } 
# 6290
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6292
operator>(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6293
__rhs) 
# 6294
{ return __rhs.compare(__lhs) < 0; } 
# 6303 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6305
operator<=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6306
__rhs) noexcept 
# 6308
{ return __lhs.compare(__rhs) <= 0; } 
# 6316
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6318
operator<=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6319
__rhs) 
# 6320
{ return __lhs.compare(__rhs) <= 0; } 
# 6328
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6330
operator<=(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6331
__rhs) 
# 6332
{ return __rhs.compare(__lhs) >= 0; } 
# 6341 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6343
operator>=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6344
__rhs) noexcept 
# 6346
{ return __lhs.compare(__rhs) >= 0; } 
# 6354
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6356
operator>=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6357
__rhs) 
# 6358
{ return __lhs.compare(__rhs) >= 0; } 
# 6366
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6368
operator>=(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6369
__rhs) 
# 6370
{ return __rhs.compare(__lhs) <= 0; } 
# 6379 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline void 
# 6381
swap(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6382
__rhs) noexcept(noexcept(__lhs.swap(__rhs))) 
# 6384
{ __lhs.swap(__rhs); } 
# 6399 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  & __str); 
# 6406
template<> basic_istream< char>  &operator>>(basic_istream< char>  & __is, __cxx11::basic_string< char>  & __str); 
# 6417 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline basic_ostream< _CharT, _Traits>  &
# 6419
operator<<(basic_ostream< _CharT, _Traits>  &__os, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6420
__str) 
# 6421
{ 
# 6424
return __ostream_insert(__os, __str.data(), __str.size()); 
# 6425
} 
# 6440 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &getline(basic_istream< _CharT, _Traits>  & __is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  & __str, _CharT __delim); 
# 6457 "/usr/include/c++/9/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline basic_istream< _CharT, _Traits>  &
# 6459
getline(basic_istream< _CharT, _Traits>  &__is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6460
__str) 
# 6461
{ return std::getline(__is, __str, __is.widen('\n')); } 
# 6465
template< class _CharT, class _Traits, class _Alloc> inline basic_istream< _CharT, _Traits>  &
# 6467
getline(basic_istream< _CharT, _Traits>  &&__is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6468
__str, _CharT __delim) 
# 6469
{ return std::getline(__is, __str, __delim); } 
# 6472
template< class _CharT, class _Traits, class _Alloc> inline basic_istream< _CharT, _Traits>  &
# 6474
getline(basic_istream< _CharT, _Traits>  &&__is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6475
__str) 
# 6476
{ return std::getline(__is, __str); } 
# 6481
template<> basic_istream< char>  &getline(basic_istream< char>  & __in, __cxx11::basic_string< char>  & __str, char __delim); 
# 6487
template<> basic_istream< wchar_t>  &getline(basic_istream< wchar_t>  & __in, __cxx11::basic_string< wchar_t>  & __str, wchar_t __delim); 
# 6492
}
# 29 "/usr/include/stdio.h" 3
extern "C" {
# 14 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 3
typedef 
# 10
struct _G_fpos_t { 
# 12
__off_t __pos; 
# 13
__mbstate_t __state; 
# 14
} __fpos_t; 
# 14 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3
typedef 
# 10
struct _G_fpos64_t { 
# 12
__off64_t __pos; 
# 13
__mbstate_t __state; 
# 14
} __fpos64_t; 
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3
struct _IO_FILE; 
# 36
struct _IO_marker; 
# 37
struct _IO_codecvt; 
# 38
struct _IO_wide_data; 
# 43
typedef void _IO_lock_t; 
# 49
struct _IO_FILE { 
# 51
int _flags; 
# 54
char *_IO_read_ptr; 
# 55
char *_IO_read_end; 
# 56
char *_IO_read_base; 
# 57
char *_IO_write_base; 
# 58
char *_IO_write_ptr; 
# 59
char *_IO_write_end; 
# 60
char *_IO_buf_base; 
# 61
char *_IO_buf_end; 
# 64
char *_IO_save_base; 
# 65
char *_IO_backup_base; 
# 66
char *_IO_save_end; 
# 68
_IO_marker *_markers; 
# 70
_IO_FILE *_chain; 
# 72
int _fileno; 
# 73
int _flags2; 
# 74
__off_t _old_offset; 
# 77
unsigned short _cur_column; 
# 78
signed char _vtable_offset; 
# 79
char _shortbuf[1]; 
# 81
_IO_lock_t *_lock; 
# 89
__off64_t _offset; 
# 91
_IO_codecvt *_codecvt; 
# 92
_IO_wide_data *_wide_data; 
# 93
_IO_FILE *_freeres_list; 
# 94
void *_freeres_buf; 
# 95
size_t __pad5; 
# 96
int _mode; 
# 98
char _unused2[(((15) * sizeof(int)) - ((4) * sizeof(void *))) - sizeof(size_t)]; 
# 99
}; 
# 27 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 3
typedef __ssize_t cookie_read_function_t(void * __cookie, char * __buf, size_t __nbytes); 
# 36
typedef __ssize_t cookie_write_function_t(void * __cookie, const char * __buf, size_t __nbytes); 
# 45
typedef int cookie_seek_function_t(void * __cookie, __off64_t * __pos, int __w); 
# 48
typedef int cookie_close_function_t(void * __cookie); 
# 61
typedef 
# 55
struct _IO_cookie_io_functions_t { 
# 57
cookie_read_function_t *read; 
# 58
cookie_write_function_t *write; 
# 59
cookie_seek_function_t *seek; 
# 60
cookie_close_function_t *close; 
# 61
} cookie_io_functions_t; 
# 52 "/usr/include/stdio.h" 3
typedef __gnuc_va_list va_list; 
# 84 "/usr/include/stdio.h" 3
typedef __fpos_t fpos_t; 
# 89
typedef __fpos64_t fpos64_t; 
# 137 "/usr/include/stdio.h" 3
extern FILE *stdin; 
# 138
extern FILE *stdout; 
# 139
extern FILE *stderr; 
# 146
extern int remove(const char * __filename) throw(); 
# 148
extern int rename(const char * __old, const char * __new) throw(); 
# 152
extern int renameat(int __oldfd, const char * __old, int __newfd, const char * __new) throw(); 
# 164 "/usr/include/stdio.h" 3
extern int renameat2(int __oldfd, const char * __old, int __newfd, const char * __new, unsigned __flags) throw(); 
# 173
extern FILE *tmpfile(); 
# 183 "/usr/include/stdio.h" 3
extern FILE *tmpfile64(); 
# 187
extern char *tmpnam(char * __s) throw(); 
# 192
extern char *tmpnam_r(char * __s) throw(); 
# 204 "/usr/include/stdio.h" 3
extern char *tempnam(const char * __dir, const char * __pfx) throw()
# 205
 __attribute((__malloc__)); 
# 213
extern int fclose(FILE * __stream); 
# 218
extern int fflush(FILE * __stream); 
# 227 "/usr/include/stdio.h" 3
extern int fflush_unlocked(FILE * __stream); 
# 237 "/usr/include/stdio.h" 3
extern int fcloseall(); 
# 246 "/usr/include/stdio.h" 3
extern FILE *fopen(const char *__restrict__ __filename, const char *__restrict__ __modes); 
# 252
extern FILE *freopen(const char *__restrict__ __filename, const char *__restrict__ __modes, FILE *__restrict__ __stream); 
# 270 "/usr/include/stdio.h" 3
extern FILE *fopen64(const char *__restrict__ __filename, const char *__restrict__ __modes); 
# 272
extern FILE *freopen64(const char *__restrict__ __filename, const char *__restrict__ __modes, FILE *__restrict__ __stream); 
# 279
extern FILE *fdopen(int __fd, const char * __modes) throw(); 
# 285
extern FILE *fopencookie(void *__restrict__ __magic_cookie, const char *__restrict__ __modes, cookie_io_functions_t __io_funcs) throw(); 
# 292
extern FILE *fmemopen(void * __s, size_t __len, const char * __modes) throw(); 
# 298
extern FILE *open_memstream(char ** __bufloc, size_t * __sizeloc) throw(); 
# 304
extern void setbuf(FILE *__restrict__ __stream, char *__restrict__ __buf) throw(); 
# 308
extern int setvbuf(FILE *__restrict__ __stream, char *__restrict__ __buf, int __modes, size_t __n) throw(); 
# 314
extern void setbuffer(FILE *__restrict__ __stream, char *__restrict__ __buf, size_t __size) throw(); 
# 318
extern void setlinebuf(FILE * __stream) throw(); 
# 326
extern int fprintf(FILE *__restrict__ __stream, const char *__restrict__ __format, ...); 
# 332
extern int printf(const char *__restrict__ __format, ...); 
# 334
extern int sprintf(char *__restrict__ __s, const char *__restrict__ __format, ...) throw(); 
# 341
extern int vfprintf(FILE *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg); 
# 347
extern int vprintf(const char *__restrict__ __format, __gnuc_va_list __arg); 
# 349
extern int vsprintf(char *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) throw(); 
# 354
extern int snprintf(char *__restrict__ __s, size_t __maxlen, const char *__restrict__ __format, ...) throw()
# 356
 __attribute((__format__(__printf__, 3, 4))); 
# 358
extern int vsnprintf(char *__restrict__ __s, size_t __maxlen, const char *__restrict__ __format, __gnuc_va_list __arg) throw()
# 360
 __attribute((__format__(__printf__, 3, 0))); 
# 366
extern int vasprintf(char **__restrict__ __ptr, const char *__restrict__ __f, __gnuc_va_list __arg) throw()
# 368
 __attribute((__format__(__printf__, 2, 0))); 
# 369
extern int __asprintf(char **__restrict__ __ptr, const char *__restrict__ __fmt, ...) throw()
# 371
 __attribute((__format__(__printf__, 2, 3))); 
# 372
extern int asprintf(char **__restrict__ __ptr, const char *__restrict__ __fmt, ...) throw()
# 374
 __attribute((__format__(__printf__, 2, 3))); 
# 379
extern int vdprintf(int __fd, const char *__restrict__ __fmt, __gnuc_va_list __arg)
# 381
 __attribute((__format__(__printf__, 2, 0))); 
# 382
extern int dprintf(int __fd, const char *__restrict__ __fmt, ...)
# 383
 __attribute((__format__(__printf__, 2, 3))); 
# 391
extern int fscanf(FILE *__restrict__ __stream, const char *__restrict__ __format, ...) __asm__("__isoc99_fscanf"); 
# 397
extern int scanf(const char *__restrict__ __format, ...) __asm__("__isoc99_scanf"); 
# 399
extern int sscanf(const char *__restrict__ __s, const char *__restrict__ __format, ...) throw() __asm__("__isoc99_sscanf"); 
# 407
extern int fscanf(FILE *__restrict__ __stream, const char *__restrict__ __format, ...) __asm__("__isoc99_fscanf"); 
# 410
extern int scanf(const char *__restrict__ __format, ...) __asm__("__isoc99_scanf"); 
# 412
extern int sscanf(const char *__restrict__ __s, const char *__restrict__ __format, ...) throw() __asm__("__isoc99_sscanf"); 
# 432 "/usr/include/stdio.h" 3
extern int vfscanf(FILE *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vfscanf")
# 434
 __attribute((__format__(__scanf__, 2, 0))); 
# 440
extern int vscanf(const char *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vscanf")
# 441
 __attribute((__format__(__scanf__, 1, 0))); 
# 444
extern int vsscanf(const char *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) throw() __asm__("__isoc99_vsscanf")
# 446
 __attribute((__format__(__scanf__, 2, 0))); 
# 451
extern int vfscanf(FILE *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vfscanf")
# 455
 __attribute((__format__(__scanf__, 2, 0))); 
# 456
extern int vscanf(const char *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vscanf")
# 458
 __attribute((__format__(__scanf__, 1, 0))); 
# 459
extern int vsscanf(const char *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) throw() __asm__("__isoc99_vsscanf")
# 463
 __attribute((__format__(__scanf__, 2, 0))); 
# 485 "/usr/include/stdio.h" 3
extern int fgetc(FILE * __stream); 
# 486
extern int getc(FILE * __stream); 
# 492
extern int getchar(); 
# 499
extern int getc_unlocked(FILE * __stream); 
# 500
extern int getchar_unlocked(); 
# 510 "/usr/include/stdio.h" 3
extern int fgetc_unlocked(FILE * __stream); 
# 521 "/usr/include/stdio.h" 3
extern int fputc(int __c, FILE * __stream); 
# 522
extern int putc(int __c, FILE * __stream); 
# 528
extern int putchar(int __c); 
# 537 "/usr/include/stdio.h" 3
extern int fputc_unlocked(int __c, FILE * __stream); 
# 545
extern int putc_unlocked(int __c, FILE * __stream); 
# 546
extern int putchar_unlocked(int __c); 
# 553
extern int getw(FILE * __stream); 
# 556
extern int putw(int __w, FILE * __stream); 
# 564
extern char *fgets(char *__restrict__ __s, int __n, FILE *__restrict__ __stream); 
# 587 "/usr/include/stdio.h" 3
extern char *fgets_unlocked(char *__restrict__ __s, int __n, FILE *__restrict__ __stream); 
# 603 "/usr/include/stdio.h" 3
extern __ssize_t __getdelim(char **__restrict__ __lineptr, size_t *__restrict__ __n, int __delimiter, FILE *__restrict__ __stream); 
# 606
extern __ssize_t getdelim(char **__restrict__ __lineptr, size_t *__restrict__ __n, int __delimiter, FILE *__restrict__ __stream); 
# 616
extern __ssize_t getline(char **__restrict__ __lineptr, size_t *__restrict__ __n, FILE *__restrict__ __stream); 
# 626
extern int fputs(const char *__restrict__ __s, FILE *__restrict__ __stream); 
# 632
extern int puts(const char * __s); 
# 639
extern int ungetc(int __c, FILE * __stream); 
# 646
extern size_t fread(void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __stream); 
# 652
extern size_t fwrite(const void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __s); 
# 662 "/usr/include/stdio.h" 3
extern int fputs_unlocked(const char *__restrict__ __s, FILE *__restrict__ __stream); 
# 673 "/usr/include/stdio.h" 3
extern size_t fread_unlocked(void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __stream); 
# 675
extern size_t fwrite_unlocked(const void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __stream); 
# 684
extern int fseek(FILE * __stream, long __off, int __whence); 
# 689
extern long ftell(FILE * __stream); 
# 694
extern void rewind(FILE * __stream); 
# 707 "/usr/include/stdio.h" 3
extern int fseeko(FILE * __stream, __off_t __off, int __whence); 
# 712
extern __off_t ftello(FILE * __stream); 
# 731 "/usr/include/stdio.h" 3
extern int fgetpos(FILE *__restrict__ __stream, fpos_t *__restrict__ __pos); 
# 736
extern int fsetpos(FILE * __stream, const fpos_t * __pos); 
# 750 "/usr/include/stdio.h" 3
extern int fseeko64(FILE * __stream, __off64_t __off, int __whence); 
# 751
extern __off64_t ftello64(FILE * __stream); 
# 752
extern int fgetpos64(FILE *__restrict__ __stream, fpos64_t *__restrict__ __pos); 
# 753
extern int fsetpos64(FILE * __stream, const fpos64_t * __pos); 
# 757
extern void clearerr(FILE * __stream) throw(); 
# 759
extern int feof(FILE * __stream) throw(); 
# 761
extern int ferror(FILE * __stream) throw(); 
# 765
extern void clearerr_unlocked(FILE * __stream) throw(); 
# 766
extern int feof_unlocked(FILE * __stream) throw(); 
# 767
extern int ferror_unlocked(FILE * __stream) throw(); 
# 775
extern void perror(const char * __s); 
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3
extern int sys_nerr; 
# 27
extern const char *const sys_errlist[]; 
# 30
extern int _sys_nerr; 
# 31
extern const char *const _sys_errlist[]; 
# 786 "/usr/include/stdio.h" 3
extern int fileno(FILE * __stream) throw(); 
# 791
extern int fileno_unlocked(FILE * __stream) throw(); 
# 800 "/usr/include/stdio.h" 3
extern FILE *popen(const char * __command, const char * __modes); 
# 806
extern int pclose(FILE * __stream); 
# 812
extern char *ctermid(char * __s) throw(); 
# 818
extern char *cuserid(char * __s); 
# 823
struct obstack; 
# 826
extern int obstack_printf(obstack *__restrict__ __obstack, const char *__restrict__ __format, ...) throw()
# 828
 __attribute((__format__(__printf__, 2, 3))); 
# 829
extern int obstack_vprintf(obstack *__restrict__ __obstack, const char *__restrict__ __format, __gnuc_va_list __args) throw()
# 832
 __attribute((__format__(__printf__, 2, 0))); 
# 840
extern void flockfile(FILE * __stream) throw(); 
# 844
extern int ftrylockfile(FILE * __stream) throw(); 
# 847
extern void funlockfile(FILE * __stream) throw(); 
# 858 "/usr/include/stdio.h" 3
extern int __uflow(FILE *); 
# 859
extern int __overflow(FILE *, int); 
# 873 "/usr/include/stdio.h" 3
}
# 96 "/usr/include/c++/9/cstdio" 3
namespace std { 
# 98
using ::FILE;
# 99
using ::fpos_t;
# 101
using ::clearerr;
# 102
using ::fclose;
# 103
using ::feof;
# 104
using ::ferror;
# 105
using ::fflush;
# 106
using ::fgetc;
# 107
using ::fgetpos;
# 108
using ::fgets;
# 109
using ::fopen;
# 110
using ::fprintf;
# 111
using ::fputc;
# 112
using ::fputs;
# 113
using ::fread;
# 114
using ::freopen;
# 115
using ::fscanf;
# 116
using ::fseek;
# 117
using ::fsetpos;
# 118
using ::ftell;
# 119
using ::fwrite;
# 120
using ::getc;
# 121
using ::getchar;
# 126
using ::perror;
# 127
using ::printf;
# 128
using ::putc;
# 129
using ::putchar;
# 130
using ::puts;
# 131
using ::remove;
# 132
using ::rename;
# 133
using ::rewind;
# 134
using ::scanf;
# 135
using ::setbuf;
# 136
using ::setvbuf;
# 137
using ::sprintf;
# 138
using ::sscanf;
# 139
using ::tmpfile;
# 141
using ::tmpnam;
# 143
using ::ungetc;
# 144
using ::vfprintf;
# 145
using ::vprintf;
# 146
using ::vsprintf;
# 147
}
# 157 "/usr/include/c++/9/cstdio" 3
namespace __gnu_cxx { 
# 175 "/usr/include/c++/9/cstdio" 3
using ::snprintf;
# 176
using ::vfscanf;
# 177
using ::vscanf;
# 178
using ::vsnprintf;
# 179
using ::vsscanf;
# 181
}
# 183
namespace std { 
# 185
using __gnu_cxx::snprintf;
# 186
using __gnu_cxx::vfscanf;
# 187
using __gnu_cxx::vscanf;
# 188
using __gnu_cxx::vsnprintf;
# 189
using __gnu_cxx::vsscanf;
# 190
}
# 34 "/usr/include/errno.h" 3
extern "C" {
# 37
extern int *__errno_location() throw() __attribute((const)); 
# 45
extern char *program_invocation_name; 
# 46
extern char *program_invocation_short_name; 
# 22 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 3
typedef int error_t; 
# 52 "/usr/include/errno.h" 3
}
# 46 "/usr/include/c++/9/ext/string_conversions.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 51
template< class _TRet, class _Ret = _TRet, class _CharT, class ...
# 52
_Base> _Ret 
# 54
__stoa(_TRet (*__convf)(const _CharT *, _CharT **, _Base ...), const char *
# 55
__name, const _CharT *__str, std::size_t *__idx, _Base ...
# 56
__base) 
# 57
{ 
# 58
_Ret __ret; 
# 60
_CharT *__endptr; 
# 66
const 
# 62
struct _Save_errno { 
# 63
_Save_errno() : _M_errno(*__errno_location()) { (*__errno_location()) = 0; } 
# 64
~_Save_errno() { if ((*__errno_location()) == 0) { (*__errno_location()) = (_M_errno); }  } 
# 65
int _M_errno; 
# 66
} __save_errno; 
# 68
struct _Range_chk { 
# 70
static bool _S_chk(_TRet, std::false_type) { return false; } 
# 73
static bool _S_chk(_TRet __val, std::true_type) 
# 74
{ 
# 75
return (__val < ((_TRet)__numeric_traits< int> ::__min)) || (__val > ((_TRet)__numeric_traits< int> ::__max)); 
# 77
} 
# 78
}; 
# 80
const _TRet __tmp = __convf(__str, &__endptr, __base...); 
# 82
if (__endptr == __str) { 
# 83
std::__throw_invalid_argument(__name); } else { 
# 84
if (((*__errno_location()) == 34) || _Range_chk::_S_chk(__tmp, std::is_same< _Ret, int> {})) { 
# 86
std::__throw_out_of_range(__name); } else { 
# 88
__ret = __tmp; }  }  
# 90
if (__idx) { 
# 91
(*__idx) = (__endptr - __str); }  
# 93
return __ret; 
# 94
} 
# 97
template< class _String, class _CharT = typename _String::value_type> _String 
# 99
__to_xstring(int (*__convf)(_CharT *, std::size_t, const _CharT *, __builtin_va_list), std::size_t 
# 100
__n, const _CharT *
# 101
__fmt, ...) 
# 102
{ 
# 105
_CharT *__s = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __n)); 
# 108
__builtin_va_list __args; 
# 109
__builtin_va_start((__args),__fmt); 
# 111
const int __len = __convf(__s, __n, __fmt, __args); 
# 113
__builtin_va_end(__args); 
# 115
return _String(__s, __s + __len); 
# 116
} 
# 119
}
# 6498 "/usr/include/c++/9/bits/basic_string.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 6501
inline namespace __cxx11 { 
# 6506
inline int stoi(const string &__str, size_t *__idx = 0, int __base = 10) 
# 6507
{ return __gnu_cxx::__stoa< long, int> (&std::strtol, "stoi", __str.c_str(), __idx, __base); 
# 6508
} 
# 6511
inline long stol(const string &__str, size_t *__idx = 0, int __base = 10) 
# 6512
{ return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(), __idx, __base); 
# 6513
} 
# 6516
inline unsigned long stoul(const string &__str, size_t *__idx = 0, int __base = 10) 
# 6517
{ return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(), __idx, __base); 
# 6518
} 
# 6521
inline long long stoll(const string &__str, size_t *__idx = 0, int __base = 10) 
# 6522
{ return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(), __idx, __base); 
# 6523
} 
# 6526
inline unsigned long long stoull(const string &__str, size_t *__idx = 0, int __base = 10) 
# 6527
{ return __gnu_cxx::__stoa(&std::strtoull, "stoull", __str.c_str(), __idx, __base); 
# 6528
} 
# 6532
inline float stof(const string &__str, size_t *__idx = 0) 
# 6533
{ return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); } 
# 6536
inline double stod(const string &__str, size_t *__idx = 0) 
# 6537
{ return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); } 
# 6540
inline long double stold(const string &__str, size_t *__idx = 0) 
# 6541
{ return __gnu_cxx::__stoa(&std::strtold, "stold", __str.c_str(), __idx); } 
# 6549
inline string to_string(int __val) 
# 6550
{ return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, (4) * sizeof(int), "%d", __val); 
# 6551
} 
# 6554
inline string to_string(unsigned __val) 
# 6555
{ return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, (4) * sizeof(unsigned), "%u", __val); 
# 6557
} 
# 6560
inline string to_string(long __val) 
# 6561
{ return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, (4) * sizeof(long), "%ld", __val); 
# 6562
} 
# 6565
inline string to_string(unsigned long __val) 
# 6566
{ return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, (4) * sizeof(unsigned long), "%lu", __val); 
# 6568
} 
# 6571
inline string to_string(long long __val) 
# 6572
{ return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, (4) * sizeof(long long), "%lld", __val); 
# 6574
} 
# 6577
inline string to_string(unsigned long long __val) 
# 6578
{ return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, (4) * sizeof(unsigned long long), "%llu", __val); 
# 6580
} 
# 6583
inline string to_string(float __val) 
# 6584
{ 
# 6585
const int __n = (__gnu_cxx::__numeric_traits_floating< float> ::__max_exponent10 + 20); 
# 6587
return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, __n, "%f", __val); 
# 6589
} 
# 6592
inline string to_string(double __val) 
# 6593
{ 
# 6594
const int __n = (__gnu_cxx::__numeric_traits_floating< double> ::__max_exponent10 + 20); 
# 6596
return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, __n, "%f", __val); 
# 6598
} 
# 6601
inline string to_string(long double __val) 
# 6602
{ 
# 6603
const int __n = (__gnu_cxx::__numeric_traits_floating< long double> ::__max_exponent10 + 20); 
# 6605
return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, __n, "%Lf", __val); 
# 6607
} 
# 6612
inline int stoi(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 6613
{ return __gnu_cxx::__stoa< long, int> (&std::wcstol, "stoi", __str.c_str(), __idx, __base); 
# 6614
} 
# 6617
inline long stol(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 6618
{ return __gnu_cxx::__stoa(&std::wcstol, "stol", __str.c_str(), __idx, __base); 
# 6619
} 
# 6622
inline unsigned long stoul(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 6623
{ return __gnu_cxx::__stoa(&std::wcstoul, "stoul", __str.c_str(), __idx, __base); 
# 6624
} 
# 6627
inline long long stoll(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 6628
{ return __gnu_cxx::__stoa(&std::wcstoll, "stoll", __str.c_str(), __idx, __base); 
# 6629
} 
# 6632
inline unsigned long long stoull(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 6633
{ return __gnu_cxx::__stoa(&std::wcstoull, "stoull", __str.c_str(), __idx, __base); 
# 6634
} 
# 6638
inline float stof(const wstring &__str, size_t *__idx = 0) 
# 6639
{ return __gnu_cxx::__stoa(&std::wcstof, "stof", __str.c_str(), __idx); } 
# 6642
inline double stod(const wstring &__str, size_t *__idx = 0) 
# 6643
{ return __gnu_cxx::__stoa(&std::wcstod, "stod", __str.c_str(), __idx); } 
# 6646
inline long double stold(const wstring &__str, size_t *__idx = 0) 
# 6647
{ return __gnu_cxx::__stoa(&std::wcstold, "stold", __str.c_str(), __idx); } 
# 6652
inline wstring to_wstring(int __val) 
# 6653
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(int), L"\x25\x64", __val); 
# 6654
} 
# 6657
inline wstring to_wstring(unsigned __val) 
# 6658
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(unsigned), L"\x25\x75", __val); 
# 6660
} 
# 6663
inline wstring to_wstring(long __val) 
# 6664
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(long), L"\x25\x6c\x64", __val); 
# 6665
} 
# 6668
inline wstring to_wstring(unsigned long __val) 
# 6669
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(unsigned long), L"\x25\x6c\x75", __val); 
# 6671
} 
# 6674
inline wstring to_wstring(long long __val) 
# 6675
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(long long), L"\x25\x6c\x6c\x64", __val); 
# 6677
} 
# 6680
inline wstring to_wstring(unsigned long long __val) 
# 6681
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(unsigned long long), L"\x25\x6c\x6c\x75", __val); 
# 6683
} 
# 6686
inline wstring to_wstring(float __val) 
# 6687
{ 
# 6688
const int __n = (__gnu_cxx::__numeric_traits_floating< float> ::__max_exponent10 + 20); 
# 6690
return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, __n, L"\x25\x66", __val); 
# 6692
} 
# 6695
inline wstring to_wstring(double __val) 
# 6696
{ 
# 6697
const int __n = (__gnu_cxx::__numeric_traits_floating< double> ::__max_exponent10 + 20); 
# 6699
return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, __n, L"\x25\x66", __val); 
# 6701
} 
# 6704
inline wstring to_wstring(long double __val) 
# 6705
{ 
# 6706
const int __n = (__gnu_cxx::__numeric_traits_floating< long double> ::__max_exponent10 + 20); 
# 6708
return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, __n, L"\x25\x4c\x66", __val); 
# 6710
} 
# 6714
}
# 6716
}
# 37 "/usr/include/c++/9/bits/functional_hash.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 49 "/usr/include/c++/9/bits/functional_hash.h" 3
template< class _Result, class _Arg> 
# 50
struct __hash_base { 
# 52
typedef _Result result_type; 
# 53
typedef _Arg argument_type; 
# 54
}; 
# 57
template< class _Tp> struct hash; 
# 60
template< class _Tp, class  = void> 
# 61
struct __poison_hash { 
# 63
static constexpr bool __enable_hash_call = false; 
# 66
private: __poison_hash(__poison_hash &&); 
# 67
~__poison_hash(); 
# 68
}; 
# 70
template< class _Tp> 
# 71
struct __poison_hash< _Tp, __void_t< __decltype((hash< _Tp> ()(declval< _Tp> ())))> >  { 
# 73
static constexpr bool __enable_hash_call = true; 
# 74
}; 
# 77
template< class _Tp, bool  = is_enum< _Tp> ::value> 
# 78
struct __hash_enum { 
# 82
private: __hash_enum(__hash_enum &&); 
# 83
~__hash_enum(); 
# 84
}; 
# 87
template< class _Tp> 
# 88
struct __hash_enum< _Tp, true>  : public __hash_base< unsigned long, _Tp>  { 
# 91
std::size_t operator()(_Tp __val) const noexcept 
# 92
{ 
# 93
using __type = typename underlying_type< _Tp> ::type; 
# 94
return hash< typename underlying_type< _Tp> ::type> {}(static_cast< __type>(__val)); 
# 95
} 
# 96
}; 
# 100
template< class _Tp> 
# 101
struct hash : public __hash_enum< _Tp>  { 
# 102
}; 
# 105
template< class _Tp> 
# 106
struct hash< _Tp *>  : public __hash_base< unsigned long, _Tp *>  { 
# 109
std::size_t operator()(_Tp *__p) const noexcept 
# 110
{ return reinterpret_cast< std::size_t>(__p); } 
# 111
}; 
# 124 "/usr/include/c++/9/bits/functional_hash.h" 3
template<> struct hash< bool>  : public __hash_base< unsigned long, bool>  { size_t operator()(bool __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 127
template<> struct hash< char>  : public __hash_base< unsigned long, char>  { size_t operator()(char __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 130
template<> struct hash< signed char>  : public __hash_base< unsigned long, signed char>  { size_t operator()(signed char __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 133
template<> struct hash< unsigned char>  : public __hash_base< unsigned long, unsigned char>  { size_t operator()(unsigned char __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 136
template<> struct hash< wchar_t>  : public __hash_base< unsigned long, wchar_t>  { size_t operator()(wchar_t __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 144
template<> struct hash< char16_t>  : public __hash_base< unsigned long, char16_t>  { size_t operator()(char16_t __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 147
template<> struct hash< char32_t>  : public __hash_base< unsigned long, char32_t>  { size_t operator()(char32_t __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 150
template<> struct hash< short>  : public __hash_base< unsigned long, short>  { size_t operator()(short __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 153
template<> struct hash< int>  : public __hash_base< unsigned long, int>  { size_t operator()(int __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 156
template<> struct hash< long>  : public __hash_base< unsigned long, long>  { size_t operator()(long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 159
template<> struct hash< long long>  : public __hash_base< unsigned long, long long>  { size_t operator()(long long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 162
template<> struct hash< unsigned short>  : public __hash_base< unsigned long, unsigned short>  { size_t operator()(unsigned short __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 165
template<> struct hash< unsigned>  : public __hash_base< unsigned long, unsigned>  { size_t operator()(unsigned __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 168
template<> struct hash< unsigned long>  : public __hash_base< unsigned long, unsigned long>  { size_t operator()(unsigned long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 171
template<> struct hash< unsigned long long>  : public __hash_base< unsigned long, unsigned long long>  { size_t operator()(unsigned long long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 174
template<> struct hash< __int128>  : public __hash_base< unsigned long, __int128>  { size_t operator()(__int128 __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 175
template<> struct hash< unsigned __int128>  : public __hash_base< unsigned long, unsigned __int128>  { size_t operator()(unsigned __int128 __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 192 "/usr/include/c++/9/bits/functional_hash.h" 3
struct _Hash_impl { 
# 195
static size_t hash(const void *__ptr, size_t __clength, size_t 
# 196
__seed = static_cast< size_t>(3339675911UL)) 
# 197
{ return _Hash_bytes(__ptr, __clength, __seed); } 
# 199
template< class _Tp> static size_t 
# 201
hash(const _Tp &__val) 
# 202
{ return hash(&__val, sizeof(__val)); } 
# 204
template< class _Tp> static size_t 
# 206
__hash_combine(const _Tp &__val, size_t __hash) 
# 207
{ return hash(&__val, sizeof(__val), __hash); } 
# 208
}; 
# 211
struct _Fnv_hash_impl { 
# 214
static size_t hash(const void *__ptr, size_t __clength, size_t 
# 215
__seed = static_cast< size_t>(2166136261UL)) 
# 216
{ return _Fnv_hash_bytes(__ptr, __clength, __seed); } 
# 218
template< class _Tp> static size_t 
# 220
hash(const _Tp &__val) 
# 221
{ return hash(&__val, sizeof(__val)); } 
# 223
template< class _Tp> static size_t 
# 225
__hash_combine(const _Tp &__val, size_t __hash) 
# 226
{ return hash(&__val, sizeof(__val), __hash); } 
# 227
}; 
# 231
template<> struct hash< float>  : public __hash_base< unsigned long, float>  { 
# 234
size_t operator()(float __val) const noexcept 
# 235
{ 
# 237
return (__val != (0.0F)) ? std::_Hash_impl::hash(__val) : (0); 
# 238
} 
# 239
}; 
# 243
template<> struct hash< double>  : public __hash_base< unsigned long, double>  { 
# 246
size_t operator()(double __val) const noexcept 
# 247
{ 
# 249
return (__val != (0.0)) ? std::_Hash_impl::hash(__val) : (0); 
# 250
} 
# 251
}; 
# 255
template<> struct hash< long double>  : public __hash_base< unsigned long, long double>  { 
# 258
__attribute((__pure__)) size_t 
# 259
operator()(long double __val) const noexcept; 
# 260
}; 
# 278 "/usr/include/c++/9/bits/functional_hash.h" 3
template< class _Hash> 
# 279
struct __is_fast_hash : public true_type { 
# 280
}; 
# 283
template<> struct __is_fast_hash< hash< long double> >  : public false_type { 
# 284
}; 
# 287
}
# 6724 "/usr/include/c++/9/bits/basic_string.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 6733
template<> struct hash< __cxx11::basic_string< char> >  : public __hash_base< unsigned long, __cxx11::basic_string< char> >  { 
# 6737
size_t operator()(const string &__s) const noexcept 
# 6738
{ return std::_Hash_impl::hash(__s.data(), __s.length()); } 
# 6739
}; 
# 6742
template<> struct __is_fast_hash< hash< __cxx11::basic_string< char> > >  : public false_type { 
# 6743
}; 
# 6748
template<> struct hash< __cxx11::basic_string< wchar_t> >  : public __hash_base< unsigned long, __cxx11::basic_string< wchar_t> >  { 
# 6752
size_t operator()(const wstring &__s) const noexcept 
# 6753
{ return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(wchar_t)); 
# 6754
} 
# 6755
}; 
# 6758
template<> struct __is_fast_hash< hash< __cxx11::basic_string< wchar_t> > >  : public false_type { 
# 6759
}; 
# 6782 "/usr/include/c++/9/bits/basic_string.h" 3
template<> struct hash< __cxx11::basic_string< char16_t> >  : public __hash_base< unsigned long, __cxx11::basic_string< char16_t> >  { 
# 6786
size_t operator()(const u16string &__s) const noexcept 
# 6787
{ return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(char16_t)); 
# 6788
} 
# 6789
}; 
# 6792
template<> struct __is_fast_hash< hash< __cxx11::basic_string< char16_t> > >  : public false_type { 
# 6793
}; 
# 6797
template<> struct hash< __cxx11::basic_string< char32_t> >  : public __hash_base< unsigned long, __cxx11::basic_string< char32_t> >  { 
# 6801
size_t operator()(const u32string &__s) const noexcept 
# 6802
{ return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(char32_t)); 
# 6803
} 
# 6804
}; 
# 6807
template<> struct __is_fast_hash< hash< __cxx11::basic_string< char32_t> > >  : public false_type { 
# 6808
}; 
# 6814
inline namespace literals { 
# 6816
inline namespace string_literals { 
# 6818
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wliteral-suffix"
__attribute((__abi_tag__("cxx11"))) inline __cxx11::basic_string< char>  
# 6822
operator ""s(const char *__str, size_t __len) 
# 6823
{ return __cxx11::basic_string< char> {__str, __len}; } 
# 6826
__attribute((__abi_tag__("cxx11"))) inline __cxx11::basic_string< wchar_t>  
# 6828
operator ""s(const wchar_t *__str, size_t __len) 
# 6829
{ return __cxx11::basic_string< wchar_t> {__str, __len}; } 
# 6839 "/usr/include/c++/9/bits/basic_string.h" 3
__attribute((__abi_tag__("cxx11"))) inline __cxx11::basic_string< char16_t>  
# 6841
operator ""s(const char16_t *__str, size_t __len) 
# 6842
{ return __cxx11::basic_string< char16_t> {__str, __len}; } 
# 6844
__attribute((__abi_tag__("cxx11"))) inline __cxx11::basic_string< char32_t>  
# 6846
operator ""s(const char32_t *__str, size_t __len) 
# 6847
{ return __cxx11::basic_string< char32_t> {__str, __len}; } 
# 6849
#pragma GCC diagnostic pop
}
# 6851
}
# 6872 "/usr/include/c++/9/bits/basic_string.h" 3
}
# 46 "/usr/include/c++/9/bits/basic_string.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 52
template< class _CharT, class _Traits, class _Alloc> const typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __cxx11::basic_string< _CharT, _Traits, _Alloc> ::npos; 
# 56
template< class _CharT, class _Traits, class _Alloc> void 
# 59
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::swap(basic_string &__s) noexcept 
# 60
{ 
# 61
if (this == (&__s)) { 
# 62
return; }  
# 64
_Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator()); 
# 66
if (_M_is_local()) { 
# 67
if (__s._M_is_local()) 
# 68
{ 
# 69
if (length() && __s.length()) 
# 70
{ 
# 71
_CharT __tmp_data[_S_local_capacity + 1]; 
# 72
traits_type::copy(__tmp_data, __s._M_local_buf, _S_local_capacity + 1); 
# 74
traits_type::copy(__s._M_local_buf, _M_local_buf, _S_local_capacity + 1); 
# 76
traits_type::copy(_M_local_buf, __tmp_data, _S_local_capacity + 1); 
# 78
} else { 
# 79
if (__s.length()) 
# 80
{ 
# 81
traits_type::copy(_M_local_buf, __s._M_local_buf, _S_local_capacity + 1); 
# 83
_M_length(__s.length()); 
# 84
__s._M_set_length(0); 
# 85
return; 
# 86
} else { 
# 87
if (length()) 
# 88
{ 
# 89
traits_type::copy(__s._M_local_buf, _M_local_buf, _S_local_capacity + 1); 
# 91
__s._M_length(length()); 
# 92
_M_set_length(0); 
# 93
return; 
# 94
}  }  }  
# 95
} else 
# 97
{ 
# 98
const size_type __tmp_capacity = __s._M_allocated_capacity; 
# 99
traits_type::copy(__s._M_local_buf, _M_local_buf, _S_local_capacity + 1); 
# 101
_M_data(__s._M_data()); 
# 102
__s._M_data(__s._M_local_buf); 
# 103
_M_capacity(__tmp_capacity); 
# 104
}  } else 
# 106
{ 
# 107
const size_type __tmp_capacity = _M_allocated_capacity; 
# 108
if (__s._M_is_local()) 
# 109
{ 
# 110
traits_type::copy(_M_local_buf, __s._M_local_buf, _S_local_capacity + 1); 
# 112
__s._M_data(_M_data()); 
# 113
_M_data(_M_local_buf); 
# 114
} else 
# 116
{ 
# 117
pointer __tmp_ptr = _M_data(); 
# 118
_M_data(__s._M_data()); 
# 119
__s._M_data(__tmp_ptr); 
# 120
_M_capacity(__s._M_allocated_capacity); 
# 121
}  
# 122
__s._M_capacity(__tmp_capacity); 
# 123
}  
# 125
const size_type __tmp_length = length(); 
# 126
_M_length(__s.length()); 
# 127
__s._M_length(__tmp_length); 
# 128
} 
# 130
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::pointer 
# 133
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_create(size_type &__capacity, size_type __old_capacity) 
# 134
{ 
# 137
if (__capacity > max_size()) { 
# 138
std::__throw_length_error("basic_string::_M_create"); }  
# 143
if ((__capacity > __old_capacity) && (__capacity < (2 * __old_capacity))) 
# 144
{ 
# 145
__capacity = (2 * __old_capacity); 
# 147
if (__capacity > max_size()) { 
# 148
__capacity = max_size(); }  
# 149
}  
# 153
return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1); 
# 154
} 
# 160
template< class _CharT, class _Traits, class _Alloc> 
# 161
template< class _InIterator> void 
# 164
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_construct(_InIterator __beg, _InIterator __end, input_iterator_tag) 
# 166
{ 
# 167
size_type __len = (0); 
# 168
size_type __capacity = ((size_type)_S_local_capacity); 
# 170
while ((__beg != __end) && (__len < __capacity)) 
# 171
{ 
# 172
(_M_data()[__len++]) = (*__beg); 
# 173
++__beg; 
# 174
}  
# 176
try 
# 177
{ 
# 178
while (__beg != __end) 
# 179
{ 
# 180
if (__len == __capacity) 
# 181
{ 
# 183
__capacity = (__len + 1); 
# 184
pointer __another = _M_create(__capacity, __len); 
# 185
this->_S_copy(__another, _M_data(), __len); 
# 186
_M_dispose(); 
# 187
_M_data(__another); 
# 188
_M_capacity(__capacity); 
# 189
}  
# 190
(_M_data()[__len++]) = (*__beg); 
# 191
++__beg; 
# 192
}  
# 193
} 
# 194
catch (...) 
# 195
{ 
# 196
_M_dispose(); 
# 197
throw; 
# 198
}  
# 200
_M_set_length(__len); 
# 201
} 
# 203
template< class _CharT, class _Traits, class _Alloc> 
# 204
template< class _InIterator> void 
# 207
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_construct(_InIterator __beg, _InIterator __end, forward_iterator_tag) 
# 209
{ 
# 211
if (__gnu_cxx::__is_null_pointer(__beg) && (__beg != __end)) { 
# 212
std::__throw_logic_error("basic_string::_M_construct null not valid"); }  
# 215
size_type __dnew = static_cast< size_type>(std::distance(__beg, __end)); 
# 217
if (__dnew > ((size_type)_S_local_capacity)) 
# 218
{ 
# 219
_M_data(_M_create(__dnew, (size_type)0)); 
# 220
_M_capacity(__dnew); 
# 221
}  
# 224
try 
# 225
{ this->_S_copy_chars(_M_data(), __beg, __end); } 
# 226
catch (...) 
# 227
{ 
# 228
_M_dispose(); 
# 229
throw; 
# 230
}  
# 232
_M_set_length(__dnew); 
# 233
} 
# 235
template< class _CharT, class _Traits, class _Alloc> void 
# 238
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_construct(size_type __n, _CharT __c) 
# 239
{ 
# 240
if (__n > ((size_type)_S_local_capacity)) 
# 241
{ 
# 242
_M_data(_M_create(__n, (size_type)0)); 
# 243
_M_capacity(__n); 
# 244
}  
# 246
if (__n) { 
# 247
this->_S_assign(_M_data(), __n, __c); }  
# 249
_M_set_length(__n); 
# 250
} 
# 252
template< class _CharT, class _Traits, class _Alloc> void 
# 255
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_assign(const basic_string &__str) 
# 256
{ 
# 257
if (this != (&__str)) 
# 258
{ 
# 259
const size_type __rsize = __str.length(); 
# 260
const size_type __capacity = capacity(); 
# 262
if (__rsize > __capacity) 
# 263
{ 
# 264
size_type __new_capacity = __rsize; 
# 265
pointer __tmp = _M_create(__new_capacity, __capacity); 
# 266
_M_dispose(); 
# 267
_M_data(__tmp); 
# 268
_M_capacity(__new_capacity); 
# 269
}  
# 271
if (__rsize) { 
# 272
this->_S_copy(_M_data(), __str._M_data(), __rsize); }  
# 274
_M_set_length(__rsize); 
# 275
}  
# 276
} 
# 278
template< class _CharT, class _Traits, class _Alloc> void 
# 281
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::reserve(size_type __res) 
# 282
{ 
# 284
if (__res < length()) { 
# 285
__res = length(); }  
# 287
const size_type __capacity = capacity(); 
# 288
if (__res != __capacity) 
# 289
{ 
# 290
if ((__res > __capacity) || (__res > ((size_type)_S_local_capacity))) 
# 292
{ 
# 293
pointer __tmp = _M_create(__res, __capacity); 
# 294
this->_S_copy(__tmp, _M_data(), length() + 1); 
# 295
_M_dispose(); 
# 296
_M_data(__tmp); 
# 297
_M_capacity(__res); 
# 298
} else { 
# 299
if (!_M_is_local()) 
# 300
{ 
# 301
this->_S_copy(_M_local_data(), _M_data(), length() + 1); 
# 302
_M_destroy(__capacity); 
# 303
_M_data(_M_local_data()); 
# 304
}  }  
# 305
}  
# 306
} 
# 308
template< class _CharT, class _Traits, class _Alloc> void 
# 311
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_mutate(size_type __pos, size_type __len1, const _CharT *__s, size_type 
# 312
__len2) 
# 313
{ 
# 314
const size_type __how_much = (length() - __pos) - __len1; 
# 316
size_type __new_capacity = (length() + __len2) - __len1; 
# 317
pointer __r = _M_create(__new_capacity, capacity()); 
# 319
if (__pos) { 
# 320
this->_S_copy(__r, _M_data(), __pos); }  
# 321
if (__s && __len2) { 
# 322
this->_S_copy(__r + __pos, __s, __len2); }  
# 323
if (__how_much) { 
# 324
this->_S_copy((__r + __pos) + __len2, (_M_data() + __pos) + __len1, __how_much); }  
# 327
_M_dispose(); 
# 328
_M_data(__r); 
# 329
_M_capacity(__new_capacity); 
# 330
} 
# 332
template< class _CharT, class _Traits, class _Alloc> void 
# 335
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_erase(size_type __pos, size_type __n) 
# 336
{ 
# 337
const size_type __how_much = (length() - __pos) - __n; 
# 339
if (__how_much && __n) { 
# 340
this->_S_move(_M_data() + __pos, (_M_data() + __pos) + __n, __how_much); }  
# 342
_M_set_length(length() - __n); 
# 343
} 
# 345
template< class _CharT, class _Traits, class _Alloc> void 
# 348
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::resize(size_type __n, _CharT __c) 
# 349
{ 
# 350
const size_type __size = size(); 
# 351
if (__size < __n) { 
# 352
this->append(__n - __size, __c); } else { 
# 353
if (__n < __size) { 
# 354
_M_set_length(__n); }  }  
# 355
} 
# 357
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 360
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_append(const _CharT *__s, size_type __n) 
# 361
{ 
# 362
const size_type __len = __n + size(); 
# 364
if (__len <= capacity()) 
# 365
{ 
# 366
if (__n) { 
# 367
this->_S_copy(this->_M_data() + size(), __s, __n); }  
# 368
} else { 
# 370
_M_mutate(size(), (size_type)0, __s, __n); }  
# 372
_M_set_length(__len); 
# 373
return *this; 
# 374
} 
# 376
template< class _CharT, class _Traits, class _Alloc> 
# 377
template< class _InputIterator> __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 380
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_replace_dispatch(const_iterator __i1, const_iterator __i2, _InputIterator 
# 381
__k1, _InputIterator __k2, __false_type) 
# 383
{ 
# 384
const basic_string __s(__k1, __k2); 
# 385
const size_type __n1 = __i2 - __i1; 
# 386
return _M_replace(__i1 - begin(), __n1, __s._M_data(), __s.size()); 
# 388
} 
# 390
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 393
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, _CharT 
# 394
__c) 
# 395
{ 
# 396
_M_check_length(__n1, __n2, "basic_string::_M_replace_aux"); 
# 398
const size_type __old_size = size(); 
# 399
const size_type __new_size = (__old_size + __n2) - __n1; 
# 401
if (__new_size <= capacity()) 
# 402
{ 
# 403
pointer __p = this->_M_data() + __pos1; 
# 405
const size_type __how_much = (__old_size - __pos1) - __n1; 
# 406
if (__how_much && (__n1 != __n2)) { 
# 407
this->_S_move(__p + __n2, __p + __n1, __how_much); }  
# 408
} else { 
# 410
_M_mutate(__pos1, __n1, 0, __n2); }  
# 412
if (__n2) { 
# 413
this->_S_assign(this->_M_data() + __pos1, __n2, __c); }  
# 415
_M_set_length(__new_size); 
# 416
return *this; 
# 417
} 
# 419
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 422
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_replace(size_type __pos, size_type __len1, const _CharT *__s, const size_type 
# 423
__len2) 
# 424
{ 
# 425
_M_check_length(__len1, __len2, "basic_string::_M_replace"); 
# 427
const size_type __old_size = size(); 
# 428
const size_type __new_size = (__old_size + __len2) - __len1; 
# 430
if (__new_size <= capacity()) 
# 431
{ 
# 432
pointer __p = this->_M_data() + __pos; 
# 434
const size_type __how_much = (__old_size - __pos) - __len1; 
# 435
if (_M_disjunct(__s)) 
# 436
{ 
# 437
if (__how_much && (__len1 != __len2)) { 
# 438
this->_S_move(__p + __len2, __p + __len1, __how_much); }  
# 439
if (__len2) { 
# 440
this->_S_copy(__p, __s, __len2); }  
# 441
} else 
# 443
{ 
# 445
if (__len2 && (__len2 <= __len1)) { 
# 446
this->_S_move(__p, __s, __len2); }  
# 447
if (__how_much && (__len1 != __len2)) { 
# 448
this->_S_move(__p + __len2, __p + __len1, __how_much); }  
# 449
if (__len2 > __len1) 
# 450
{ 
# 451
if ((__s + __len2) <= (__p + __len1)) { 
# 452
this->_S_move(__p, __s, __len2); } else { 
# 453
if (__s >= (__p + __len1)) { 
# 454
this->_S_copy(__p, (__s + __len2) - __len1, __len2); } else 
# 456
{ 
# 457
const size_type __nleft = (__p + __len1) - __s; 
# 458
this->_S_move(__p, __s, __nleft); 
# 459
this->_S_copy(__p + __nleft, __p + __len2, __len2 - __nleft); 
# 461
}  }  
# 462
}  
# 463
}  
# 464
} else { 
# 466
_M_mutate(__pos, __len1, __s, __len2); }  
# 468
_M_set_length(__new_size); 
# 469
return *this; 
# 470
} 
# 472
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 475
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::copy(_CharT *__s, size_type __n, size_type __pos) const 
# 476
{ 
# 477
_M_check(__pos, "basic_string::copy"); 
# 478
__n = _M_limit(__pos, __n); 
# 479
; 
# 480
if (__n) { 
# 481
(_S_copy)(__s, _M_data() + __pos, __n); }  
# 483
return __n; 
# 484
} 
# 1156 "/usr/include/c++/9/bits/basic_string.tcc" 3
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 1158
operator+(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 1159
__rhs) 
# 1160
{ 
# 1161
; 
# 1162
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 1163
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 1164
const __size_type __len = _Traits::length(__lhs); 
# 1165
__string_type __str; 
# 1166
__str.reserve(__len + __rhs.size()); 
# 1167
__str.append(__lhs, __len); 
# 1168
__str.append(__rhs); 
# 1169
return __str; 
# 1170
} 
# 1172
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 1174
operator+(_CharT __lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__rhs) 
# 1175
{ 
# 1176
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 1177
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 1178
__string_type __str; 
# 1179
const __size_type __len = __rhs.size(); 
# 1180
__str.reserve(__len + 1); 
# 1181
__str.append((__size_type)1, __lhs); 
# 1182
__str.append(__rhs); 
# 1183
return __str; 
# 1184
} 
# 1186
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1189
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1191
{ 
# 1192
; 
# 1193
const size_type __size = size(); 
# 1195
if (__n == 0) { 
# 1196
return (__pos <= __size) ? __pos : npos; }  
# 1197
if (__pos >= __size) { 
# 1198
return npos; }  
# 1200
const _CharT __elem0 = __s[0]; 
# 1201
const _CharT *const __data = data(); 
# 1202
const _CharT *__first = __data + __pos; 
# 1203
const _CharT *const __last = __data + __size; 
# 1204
size_type __len = __size - __pos; 
# 1206
while (__len >= __n) 
# 1207
{ 
# 1209
__first = traits_type::find(__first, (__len - __n) + 1, __elem0); 
# 1210
if (!__first) { 
# 1211
return npos; }  
# 1215
if (traits_type::compare(__first, __s, __n) == 0) { 
# 1216
return __first - __data; }  
# 1217
__len = (__last - (++__first)); 
# 1218
}  
# 1219
return npos; 
# 1220
} 
# 1222
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1225
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find(_CharT __c, size_type __pos) const noexcept 
# 1226
{ 
# 1227
size_type __ret = npos; 
# 1228
const size_type __size = size(); 
# 1229
if (__pos < __size) 
# 1230
{ 
# 1231
const _CharT *__data = _M_data(); 
# 1232
const size_type __n = __size - __pos; 
# 1233
const _CharT *__p = traits_type::find(__data + __pos, __n, __c); 
# 1234
if (__p) { 
# 1235
__ret = (__p - __data); }  
# 1236
}  
# 1237
return __ret; 
# 1238
} 
# 1240
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1243
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::rfind(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1245
{ 
# 1246
; 
# 1247
const size_type __size = size(); 
# 1248
if (__n <= __size) 
# 1249
{ 
# 1250
__pos = std::min((size_type)(__size - __n), __pos); 
# 1251
const _CharT *__data = _M_data(); 
# 1252
do 
# 1253
{ 
# 1254
if (traits_type::compare(__data + __pos, __s, __n) == 0) { 
# 1255
return __pos; }  
# 1256
} 
# 1257
while ((__pos--) > 0); 
# 1258
}  
# 1259
return npos; 
# 1260
} 
# 1262
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1265
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::rfind(_CharT __c, size_type __pos) const noexcept 
# 1266
{ 
# 1267
size_type __size = size(); 
# 1268
if (__size) 
# 1269
{ 
# 1270
if ((--__size) > __pos) { 
# 1271
__size = __pos; }  
# 1272
for (++__size; (__size--) > 0;) { 
# 1273
if (traits_type::eq(_M_data()[__size], __c)) { 
# 1274
return __size; }  }  
# 1275
}  
# 1276
return npos; 
# 1277
} 
# 1279
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1282
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_first_of(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1284
{ 
# 1285
; 
# 1286
for (; __n && (__pos < size()); ++__pos) 
# 1287
{ 
# 1288
const _CharT *__p = traits_type::find(__s, __n, _M_data()[__pos]); 
# 1289
if (__p) { 
# 1290
return __pos; }  
# 1291
}  
# 1292
return npos; 
# 1293
} 
# 1295
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1298
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_last_of(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1300
{ 
# 1301
; 
# 1302
size_type __size = size(); 
# 1303
if (__size && __n) 
# 1304
{ 
# 1305
if ((--__size) > __pos) { 
# 1306
__size = __pos; }  
# 1307
do 
# 1308
{ 
# 1309
if (traits_type::find(__s, __n, _M_data()[__size])) { 
# 1310
return __size; }  
# 1311
} 
# 1312
while ((__size--) != 0); 
# 1313
}  
# 1314
return npos; 
# 1315
} 
# 1317
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1320
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_first_not_of(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1322
{ 
# 1323
; 
# 1324
for (; __pos < size(); ++__pos) { 
# 1325
if (!traits_type::find(__s, __n, _M_data()[__pos])) { 
# 1326
return __pos; }  }  
# 1327
return npos; 
# 1328
} 
# 1330
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1333
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_first_not_of(_CharT __c, size_type __pos) const noexcept 
# 1334
{ 
# 1335
for (; __pos < size(); ++__pos) { 
# 1336
if (!traits_type::eq(_M_data()[__pos], __c)) { 
# 1337
return __pos; }  }  
# 1338
return npos; 
# 1339
} 
# 1341
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1344
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_last_not_of(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1346
{ 
# 1347
; 
# 1348
size_type __size = size(); 
# 1349
if (__size) 
# 1350
{ 
# 1351
if ((--__size) > __pos) { 
# 1352
__size = __pos; }  
# 1353
do 
# 1354
{ 
# 1355
if (!traits_type::find(__s, __n, _M_data()[__size])) { 
# 1356
return __size; }  
# 1357
} 
# 1358
while (__size--); 
# 1359
}  
# 1360
return npos; 
# 1361
} 
# 1363
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1366
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_last_not_of(_CharT __c, size_type __pos) const noexcept 
# 1367
{ 
# 1368
size_type __size = size(); 
# 1369
if (__size) 
# 1370
{ 
# 1371
if ((--__size) > __pos) { 
# 1372
__size = __pos; }  
# 1373
do 
# 1374
{ 
# 1375
if (!traits_type::eq(_M_data()[__size], __c)) { 
# 1376
return __size; }  
# 1377
} 
# 1378
while (__size--); 
# 1379
}  
# 1380
return npos; 
# 1381
} 
# 1383
template< class _CharT, class _Traits, class _Alloc> int 
# 1386
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos, size_type __n, const basic_string &__str) const 
# 1387
{ 
# 1388
_M_check(__pos, "basic_string::compare"); 
# 1389
__n = _M_limit(__pos, __n); 
# 1390
const size_type __osize = __str.size(); 
# 1391
const size_type __len = std::min(__n, __osize); 
# 1392
int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len); 
# 1393
if (!__r) { 
# 1394
__r = (_S_compare)(__n, __osize); }  
# 1395
return __r; 
# 1396
} 
# 1398
template< class _CharT, class _Traits, class _Alloc> int 
# 1401
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos1, size_type __n1, const basic_string &__str, size_type 
# 1402
__pos2, size_type __n2) const 
# 1403
{ 
# 1404
_M_check(__pos1, "basic_string::compare"); 
# 1405
__str._M_check(__pos2, "basic_string::compare"); 
# 1406
__n1 = _M_limit(__pos1, __n1); 
# 1407
__n2 = __str._M_limit(__pos2, __n2); 
# 1408
const size_type __len = std::min(__n1, __n2); 
# 1409
int __r = traits_type::compare(_M_data() + __pos1, __str.data() + __pos2, __len); 
# 1411
if (!__r) { 
# 1412
__r = (_S_compare)(__n1, __n2); }  
# 1413
return __r; 
# 1414
} 
# 1416
template< class _CharT, class _Traits, class _Alloc> int 
# 1419
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(const _CharT *__s) const noexcept 
# 1420
{ 
# 1421
; 
# 1422
const size_type __size = size(); 
# 1423
const size_type __osize = traits_type::length(__s); 
# 1424
const size_type __len = std::min(__size, __osize); 
# 1425
int __r = traits_type::compare(_M_data(), __s, __len); 
# 1426
if (!__r) { 
# 1427
__r = (_S_compare)(__size, __osize); }  
# 1428
return __r; 
# 1429
} 
# 1431
template< class _CharT, class _Traits, class _Alloc> int 
# 1434
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos, size_type __n1, const _CharT *__s) const 
# 1435
{ 
# 1436
; 
# 1437
_M_check(__pos, "basic_string::compare"); 
# 1438
__n1 = _M_limit(__pos, __n1); 
# 1439
const size_type __osize = traits_type::length(__s); 
# 1440
const size_type __len = std::min(__n1, __osize); 
# 1441
int __r = traits_type::compare(_M_data() + __pos, __s, __len); 
# 1442
if (!__r) { 
# 1443
__r = (_S_compare)(__n1, __osize); }  
# 1444
return __r; 
# 1445
} 
# 1447
template< class _CharT, class _Traits, class _Alloc> int 
# 1450
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos, size_type __n1, const _CharT *__s, size_type 
# 1451
__n2) const 
# 1452
{ 
# 1453
; 
# 1454
_M_check(__pos, "basic_string::compare"); 
# 1455
__n1 = _M_limit(__pos, __n1); 
# 1456
const size_type __len = std::min(__n1, __n2); 
# 1457
int __r = traits_type::compare(_M_data() + __pos, __s, __len); 
# 1458
if (!__r) { 
# 1459
__r = (_S_compare)(__n1, __n2); }  
# 1460
return __r; 
# 1461
} 
# 1464
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &
# 1466
operator>>(basic_istream< _CharT, _Traits>  &__in, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 1467
__str) 
# 1468
{ 
# 1469
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1470
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 1471
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1472
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 1473
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 1474
typedef ctype< _CharT>  __ctype_type; 
# 1475
typedef typename ctype< _CharT> ::ctype_base __ctype_base; 
# 1477
__size_type __extracted = (0); 
# 1478
typename basic_istream< _CharT, _Traits> ::ios_base::iostate __err = (__ios_base::goodbit); 
# 1479
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, false); 
# 1480
if (__cerb) 
# 1481
{ 
# 1482
try 
# 1483
{ 
# 1485
__str.erase(); 
# 1486
_CharT __buf[128]; 
# 1487
__size_type __len = (0); 
# 1488
const streamsize __w = __in.width(); 
# 1489
const __size_type __n = (__w > (0)) ? static_cast< __size_type>(__w) : __str.max_size(); 
# 1491
const __ctype_type &__ct = use_facet< ctype< _CharT> > (__in.getloc()); 
# 1492
const __int_type __eof = _Traits::eof(); 
# 1493
__int_type __c = __in.rdbuf()->sgetc(); 
# 1495
while ((__extracted < __n) && (!_Traits::eq_int_type(__c, __eof)) && (!__ct.is(__ctype_base::space, _Traits::to_char_type(__c)))) 
# 1499
{ 
# 1500
if (__len == (sizeof(__buf) / sizeof(_CharT))) 
# 1501
{ 
# 1502
__str.append(__buf, sizeof(__buf) / sizeof(_CharT)); 
# 1503
__len = 0; 
# 1504
}  
# 1505
(__buf[__len++]) = _Traits::to_char_type(__c); 
# 1506
++__extracted; 
# 1507
__c = __in.rdbuf()->snextc(); 
# 1508
}  
# 1509
__str.append(__buf, __len); 
# 1511
if (_Traits::eq_int_type(__c, __eof)) { 
# 1512
__err |= __ios_base::eofbit; }  
# 1513
__in.width(0); 
# 1514
} 
# 1515
catch (__cxxabiv1::__forced_unwind &) 
# 1516
{ 
# 1517
__in._M_setstate(__ios_base::badbit); 
# 1518
throw; 
# 1519
} 
# 1520
catch (...) 
# 1521
{ 
# 1525
__in._M_setstate(__ios_base::badbit); 
# 1526
}  
# 1527
}  
# 1529
if (!__extracted) { 
# 1530
__err |= __ios_base::failbit; }  
# 1531
if (__err) { 
# 1532
__in.setstate(__err); }  
# 1533
return __in; 
# 1534
} 
# 1536
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &
# 1538
getline(basic_istream< _CharT, _Traits>  &__in, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 1539
__str, _CharT __delim) 
# 1540
{ 
# 1541
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1542
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 1543
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1544
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 1545
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 1547
__size_type __extracted = (0); 
# 1548
const __size_type __n = __str.max_size(); 
# 1549
typename basic_istream< _CharT, _Traits> ::ios_base::iostate __err = (__ios_base::goodbit); 
# 1550
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, true); 
# 1551
if (__cerb) 
# 1552
{ 
# 1553
try 
# 1554
{ 
# 1555
__str.erase(); 
# 1556
const __int_type __idelim = _Traits::to_int_type(__delim); 
# 1557
const __int_type __eof = _Traits::eof(); 
# 1558
__int_type __c = __in.rdbuf()->sgetc(); 
# 1560
while ((__extracted < __n) && (!_Traits::eq_int_type(__c, __eof)) && (!_Traits::eq_int_type(__c, __idelim))) 
# 1563
{ 
# 1564
__str += _Traits::to_char_type(__c); 
# 1565
++__extracted; 
# 1566
__c = __in.rdbuf()->snextc(); 
# 1567
}  
# 1569
if (_Traits::eq_int_type(__c, __eof)) { 
# 1570
__err |= __ios_base::eofbit; } else { 
# 1571
if (_Traits::eq_int_type(__c, __idelim)) 
# 1572
{ 
# 1573
++__extracted; 
# 1574
__in.rdbuf()->sbumpc(); 
# 1575
} else { 
# 1577
__err |= __ios_base::failbit; }  }  
# 1578
} 
# 1579
catch (__cxxabiv1::__forced_unwind &) 
# 1580
{ 
# 1581
__in._M_setstate(__ios_base::badbit); 
# 1582
throw; 
# 1583
} 
# 1584
catch (...) 
# 1585
{ 
# 1589
__in._M_setstate(__ios_base::badbit); 
# 1590
}  
# 1591
}  
# 1592
if (!__extracted) { 
# 1593
__err |= __ios_base::failbit; }  
# 1594
if (__err) { 
# 1595
__in.setstate(__err); }  
# 1596
return __in; 
# 1597
} 
# 1608 "/usr/include/c++/9/bits/basic_string.tcc" 3
extern template class __cxx11::basic_string< char> ;
# 1616
extern template basic_istream< char>  &operator>>(basic_istream< char>  & __is, __cxx11::basic_string< char>  & __str);
# 1619
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __os, const __cxx11::basic_string< char>  & __str);
# 1622
extern template basic_istream< char>  &getline(basic_istream< char>  & __is, __cxx11::basic_string< char>  & __str, char __delim);
# 1625
extern template basic_istream< char>  &getline(basic_istream< char>  & __is, __cxx11::basic_string< char>  & __str);
# 1631
extern template class __cxx11::basic_string< wchar_t> ;
# 1637
extern template basic_istream< wchar_t>  &operator>>(basic_istream< wchar_t>  & __is, __cxx11::basic_string< wchar_t>  & __str);
# 1640
extern template basic_ostream< wchar_t>  &operator<<(basic_ostream< wchar_t>  & __os, const __cxx11::basic_string< wchar_t>  & __str);
# 1643
extern template basic_istream< wchar_t>  &getline(basic_istream< wchar_t>  & __is, __cxx11::basic_string< wchar_t>  & __str, wchar_t __delim);
# 1646
extern template basic_istream< wchar_t>  &getline(basic_istream< wchar_t>  & __is, __cxx11::basic_string< wchar_t>  & __str);
# 1653
}
# 43 "/usr/include/c++/9/bits/locale_classes.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 62 "/usr/include/c++/9/bits/locale_classes.h" 3
class locale { 
# 67
public: typedef int category; 
# 70
class facet; 
# 71
class id; 
# 72
class _Impl; 
# 74
friend class facet; 
# 75
friend class _Impl; 
# 77
template< class _Facet> friend bool has_facet(const locale &) throw(); 
# 81
template< class _Facet> friend const _Facet &use_facet(const locale &); 
# 85
template< class _Cache> friend struct __use_cache; 
# 98 "/usr/include/c++/9/bits/locale_classes.h" 3
static const category none = 0; 
# 99
static const category ctype = (1L << 0); 
# 100
static const category numeric = (1L << 1); 
# 101
static const category collate = (1L << 2); 
# 102
static const category time = (1L << 3); 
# 103
static const category monetary = (1L << 4); 
# 104
static const category messages = (1L << 5); 
# 105
static const category all = (((((ctype | numeric) | collate) | time) | monetary) | messages); 
# 117 "/usr/include/c++/9/bits/locale_classes.h" 3
locale() throw(); 
# 126 "/usr/include/c++/9/bits/locale_classes.h" 3
locale(const locale & __other) throw(); 
# 137 "/usr/include/c++/9/bits/locale_classes.h" 3
explicit locale(const char * __s); 
# 151 "/usr/include/c++/9/bits/locale_classes.h" 3
locale(const locale & __base, const char * __s, category __cat); 
# 163 "/usr/include/c++/9/bits/locale_classes.h" 3
explicit locale(const string &__s) : locale(__s.c_str()) { } 
# 177 "/usr/include/c++/9/bits/locale_classes.h" 3
locale(const locale &__base, const string &__s, category __cat) : locale(__base, __s.c_str(), __cat) 
# 178
{ } 
# 192 "/usr/include/c++/9/bits/locale_classes.h" 3
locale(const locale & __base, const locale & __add, category __cat); 
# 205 "/usr/include/c++/9/bits/locale_classes.h" 3
template< class _Facet> locale(const locale & __other, _Facet * __f); 
# 209
~locale() throw(); 
# 220 "/usr/include/c++/9/bits/locale_classes.h" 3
const locale &operator=(const locale & __other) throw(); 
# 234 "/usr/include/c++/9/bits/locale_classes.h" 3
template< class _Facet> locale combine(const locale & __other) const; 
# 243
__attribute((__abi_tag__("cxx11"))) string 
# 245
name() const; 
# 255 "/usr/include/c++/9/bits/locale_classes.h" 3
bool operator==(const locale & __other) const throw(); 
# 264
bool operator!=(const locale &__other) const throw() 
# 265
{ return !this->operator==(__other); } 
# 282 "/usr/include/c++/9/bits/locale_classes.h" 3
template< class _Char, class _Traits, class _Alloc> bool operator()(const __cxx11::basic_string< _Char, _Traits, _Alloc>  & __s1, const __cxx11::basic_string< _Char, _Traits, _Alloc>  & __s2) const; 
# 299 "/usr/include/c++/9/bits/locale_classes.h" 3
static locale global(const locale & __loc); 
# 305
static const locale &classic(); 
# 309
private: _Impl *_M_impl; 
# 312
static _Impl *_S_classic; 
# 315
static _Impl *_S_global; 
# 321
static const char *const *const _S_categories; 
# 333 "/usr/include/c++/9/bits/locale_classes.h" 3
enum { _S_categories_size = (6 + 6)}; 
# 336
static __gthread_once_t _S_once; 
# 340
explicit locale(_Impl *) throw(); 
# 343
static void _S_initialize(); 
# 346
static void _S_initialize_once() throw(); 
# 349
static category _S_normalize_category(category); 
# 352
void _M_coalesce(const locale & __base, const locale & __add, category __cat); 
# 355
static const id *const _S_twinned_facets[]; 
# 357
}; 
# 371 "/usr/include/c++/9/bits/locale_classes.h" 3
class locale::facet { 
# 374
friend class locale; 
# 375
friend class _Impl; 
# 377
mutable _Atomic_word _M_refcount; 
# 380
static __c_locale _S_c_locale; 
# 383
static const char _S_c_name[2]; 
# 386
static __gthread_once_t _S_once; 
# 390
static void _S_initialize_once(); 
# 403 "/usr/include/c++/9/bits/locale_classes.h" 3
protected: explicit facet(size_t __refs = 0) throw() : _M_refcount((__refs) ? 1 : 0) 
# 404
{ } 
# 408
virtual ~facet(); 
# 411
static void _S_create_c_locale(__c_locale & __cloc, const char * __s, __c_locale __old = 0); 
# 415
static __c_locale _S_clone_c_locale(__c_locale & __cloc) throw(); 
# 418
static void _S_destroy_c_locale(__c_locale & __cloc); 
# 421
static __c_locale _S_lc_ctype_c_locale(__c_locale __cloc, const char * __s); 
# 426
static __c_locale _S_get_c_locale(); 
# 428
__attribute((const)) static const char *
# 429
_S_get_c_name() throw(); 
# 438 "/usr/include/c++/9/bits/locale_classes.h" 3
facet(const facet &) = delete;
# 441
facet &operator=(const facet &) = delete;
# 446
private: void _M_add_reference() const throw() 
# 447
{ __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); } 
# 450
void _M_remove_reference() const throw() 
# 451
{ 
# 453
; 
# 454
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1) == 1) 
# 455
{ 
# 456
; 
# 457
try 
# 458
{ delete this; } 
# 459
catch (...) 
# 460
{ }  
# 461
}  
# 462
} 
# 464
const facet *_M_sso_shim(const id *) const; 
# 465
const facet *_M_cow_shim(const id *) const; 
# 468
protected: class __shim; 
# 469
}; 
# 483 "/usr/include/c++/9/bits/locale_classes.h" 3
class locale::id { 
# 486
friend class locale; 
# 487
friend class _Impl; 
# 489
template< class _Facet> friend const _Facet &use_facet(const std::locale &); 
# 493
template< class _Facet> friend bool has_facet(const std::locale &) throw(); 
# 500
mutable size_t _M_index; 
# 503
static _Atomic_word _S_refcount; 
# 506
void operator=(const id &); 
# 508
id(const id &); 
# 514
public: id() { } 
# 517
size_t _M_id() const throw(); 
# 518
}; 
# 522
class locale::_Impl { 
# 526
friend class locale; 
# 527
friend class facet; 
# 529
template< class _Facet> friend bool has_facet(const std::locale &) throw(); 
# 533
template< class _Facet> friend const _Facet &use_facet(const std::locale &); 
# 537
template< class _Cache> friend struct __use_cache; 
# 542
_Atomic_word _M_refcount; 
# 543
const facet **_M_facets; 
# 544
size_t _M_facets_size; 
# 545
const facet **_M_caches; 
# 546
char **_M_names; 
# 547
static const id *const _S_id_ctype[]; 
# 548
static const id *const _S_id_numeric[]; 
# 549
static const id *const _S_id_collate[]; 
# 550
static const id *const _S_id_time[]; 
# 551
static const id *const _S_id_monetary[]; 
# 552
static const id *const _S_id_messages[]; 
# 553
static const id *const *const _S_facet_categories[]; 
# 556
void _M_add_reference() throw() 
# 557
{ __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); } 
# 560
void _M_remove_reference() throw() 
# 561
{ 
# 563
; 
# 564
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1) == 1) 
# 565
{ 
# 566
; 
# 567
try 
# 568
{ delete this; } 
# 569
catch (...) 
# 570
{ }  
# 571
}  
# 572
} 
# 574
_Impl(const _Impl &, size_t); 
# 575
_Impl(const char *, size_t); 
# 576
_Impl(size_t) throw(); 
# 578
~_Impl() throw(); 
# 580
_Impl(const _Impl &); 
# 583
void operator=(const _Impl &); 
# 586
bool _M_check_same_name() 
# 587
{ 
# 588
bool __ret = true; 
# 589
if ((_M_names)[1]) { 
# 591
for (size_t __i = (0); __ret && (__i < ((_S_categories_size) - 1)); ++__i) { 
# 592
__ret = (__builtin_strcmp((_M_names)[__i], (_M_names)[__i + (1)]) == 0); }  }  
# 593
return __ret; 
# 594
} 
# 597
void _M_replace_categories(const _Impl *, category); 
# 600
void _M_replace_category(const _Impl *, const id *const *); 
# 603
void _M_replace_facet(const _Impl *, const id *); 
# 606
void _M_install_facet(const id *, const facet *); 
# 608
template< class _Facet> void 
# 610
_M_init_facet(_Facet *__facet) 
# 611
{ this->_M_install_facet(&_Facet::id, __facet); } 
# 613
template< class _Facet> void 
# 615
_M_init_facet_unchecked(_Facet *__facet) 
# 616
{ 
# 617
__facet->_M_add_reference(); 
# 618
((_M_facets)[(_Facet::id._M_id)()]) = __facet; 
# 619
} 
# 622
void _M_install_cache(const facet *, size_t); 
# 624
void _M_init_extra(facet **); 
# 625
void _M_init_extra(void *, void *, const char *, const char *); 
# 626
}; 
# 641 "/usr/include/c++/9/bits/locale_classes.h" 3
template< class _CharT> 
# 642
class __cxx11::collate : public locale::facet { 
# 648
public: typedef _CharT char_type; 
# 649
typedef basic_string< _CharT>  string_type; 
# 655
protected: __c_locale _M_c_locale_collate; 
# 659
public: static locale::id id; 
# 669 "/usr/include/c++/9/bits/locale_classes.h" 3
explicit collate(size_t __refs = 0) : locale::facet(__refs), _M_c_locale_collate(_S_get_c_locale()) 
# 671
{ } 
# 683 "/usr/include/c++/9/bits/locale_classes.h" 3
explicit collate(__c_locale __cloc, size_t __refs = 0) : locale::facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc)) 
# 685
{ } 
# 700 "/usr/include/c++/9/bits/locale_classes.h" 3
int compare(const _CharT *__lo1, const _CharT *__hi1, const _CharT *
# 701
__lo2, const _CharT *__hi2) const 
# 702
{ return do_compare(__lo1, __hi1, __lo2, __hi2); } 
# 719 "/usr/include/c++/9/bits/locale_classes.h" 3
string_type transform(const _CharT *__lo, const _CharT *__hi) const 
# 720
{ return do_transform(__lo, __hi); } 
# 733 "/usr/include/c++/9/bits/locale_classes.h" 3
long hash(const _CharT *__lo, const _CharT *__hi) const 
# 734
{ return do_hash(__lo, __hi); } 
# 738
int _M_compare(const _CharT *, const _CharT *) const throw(); 
# 741
size_t _M_transform(_CharT *, const _CharT *, size_t) const throw(); 
# 746
protected: virtual ~collate() 
# 747
{ _S_destroy_c_locale(_M_c_locale_collate); } 
# 762 "/usr/include/c++/9/bits/locale_classes.h" 3
virtual int do_compare(const _CharT * __lo1, const _CharT * __hi1, const _CharT * __lo2, const _CharT * __hi2) const; 
# 776 "/usr/include/c++/9/bits/locale_classes.h" 3
virtual string_type do_transform(const _CharT * __lo, const _CharT * __hi) const; 
# 789 "/usr/include/c++/9/bits/locale_classes.h" 3
virtual long do_hash(const _CharT * __lo, const _CharT * __hi) const; 
# 790
}; 
# 792
template< class _CharT> locale::id 
# 793
__cxx11::collate< _CharT> ::id; 
# 798
template<> int collate< char> ::_M_compare(const char *, const char *) const throw(); 
# 802
template<> size_t collate< char> ::_M_transform(char *, const char *, size_t) const throw(); 
# 807
template<> int collate< wchar_t> ::_M_compare(const wchar_t *, const wchar_t *) const throw(); 
# 811
template<> size_t collate< wchar_t> ::_M_transform(wchar_t *, const wchar_t *, size_t) const throw(); 
# 815
template< class _CharT> 
# 816
class __cxx11::collate_byname : public collate< _CharT>  { 
# 821
public: typedef _CharT char_type; 
# 822
typedef basic_string< _CharT>  string_type; 
# 826
explicit collate_byname(const char *__s, std::size_t __refs = 0) : collate< _CharT> (__refs) 
# 828
{ 
# 829
if ((__builtin_strcmp(__s, "C") != 0) && (__builtin_strcmp(__s, "POSIX") != 0)) 
# 831
{ 
# 832
this->_S_destroy_c_locale((this->_M_c_locale_collate)); 
# 833
this->_S_create_c_locale((this->_M_c_locale_collate), __s); 
# 834
}  
# 835
} 
# 839
explicit collate_byname(const std::string &__s, std::size_t __refs = 0) : collate_byname(__s.c_str(), __refs) 
# 840
{ } 
# 845
protected: virtual ~collate_byname() { } 
# 846
}; 
# 849
}
# 39 "/usr/include/c++/9/bits/locale_classes.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 43
template< class _Facet> 
# 45
locale::locale(const locale &__other, _Facet *__f) 
# 46
{ 
# 47
(_M_impl) = (new _Impl(*(__other._M_impl), 1)); 
# 49
try 
# 50
{ (_M_impl)->_M_install_facet(&_Facet::id, __f); } 
# 51
catch (...) 
# 52
{ 
# 53
(_M_impl)->_M_remove_reference(); 
# 54
throw; 
# 55
}  
# 56
delete [] (((_M_impl)->_M_names)[0]); 
# 57
(((_M_impl)->_M_names)[0]) = (0); 
# 58
} 
# 60
template< class _Facet> locale 
# 63
locale::combine(const locale &__other) const 
# 64
{ 
# 65
_Impl *__tmp = new _Impl(*(_M_impl), 1); 
# 66
try 
# 67
{ 
# 68
__tmp->_M_replace_facet(__other._M_impl, &_Facet::id); 
# 69
} 
# 70
catch (...) 
# 71
{ 
# 72
__tmp->_M_remove_reference(); 
# 73
throw; 
# 74
}  
# 75
return ((locale)(__tmp)); 
# 76
} 
# 78
template< class _CharT, class _Traits, class _Alloc> bool 
# 81
locale::operator()(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__s1, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 82
__s2) const 
# 83
{ 
# 84
typedef __cxx11::collate< _CharT>  __collate_type; 
# 85
const __collate_type &__collate = use_facet< __cxx11::collate< _CharT> > (*this); 
# 86
return (__collate.compare(__s1.data(), __s1.data() + __s1.length(), __s2.data(), __s2.data() + __s2.length()) < 0); 
# 88
} 
# 102 "/usr/include/c++/9/bits/locale_classes.tcc" 3
template< class _Facet> bool 
# 104
has_facet(const locale &__loc) throw() 
# 105
{ 
# 106
const size_t __i = (_Facet::id._M_id)(); 
# 107
const locale::facet **__facets = (__loc._M_impl)->_M_facets; 
# 108
return ((__i < ((__loc._M_impl)->_M_facets_size)) && (dynamic_cast< const _Facet *>(__facets[__i]))); 
# 114
} 
# 130 "/usr/include/c++/9/bits/locale_classes.tcc" 3
template< class _Facet> const _Facet &
# 132
use_facet(const locale &__loc) 
# 133
{ 
# 134
const size_t __i = (_Facet::id._M_id)(); 
# 135
const locale::facet **__facets = (__loc._M_impl)->_M_facets; 
# 136
if ((__i >= ((__loc._M_impl)->_M_facets_size)) || (!(__facets[__i]))) { 
# 137
__throw_bad_cast(); }  
# 139
return dynamic_cast< const _Facet &>(*(__facets[__i])); 
# 143
} 
# 147
template< class _CharT> int 
# 149
__cxx11::collate< _CharT> ::_M_compare(const _CharT *, const _CharT *) const throw() 
# 150
{ return 0; } 
# 153
template< class _CharT> size_t 
# 155
__cxx11::collate< _CharT> ::_M_transform(_CharT *, const _CharT *, size_t) const throw() 
# 156
{ return 0; } 
# 158
template< class _CharT> int 
# 161
__cxx11::collate< _CharT> ::do_compare(const _CharT *__lo1, const _CharT *__hi1, const _CharT *
# 162
__lo2, const _CharT *__hi2) const 
# 163
{ 
# 166
const string_type __one(__lo1, __hi1); 
# 167
const string_type __two(__lo2, __hi2); 
# 169
const _CharT *__p = __one.c_str(); 
# 170
const _CharT *__pend = __one.data() + __one.length(); 
# 171
const _CharT *__q = __two.c_str(); 
# 172
const _CharT *__qend = __two.data() + __two.length(); 
# 177
for (; ;) 
# 178
{ 
# 179
const int __res = _M_compare(__p, __q); 
# 180
if (__res) { 
# 181
return __res; }  
# 183
__p += char_traits< _CharT> ::length(__p); 
# 184
__q += char_traits< _CharT> ::length(__q); 
# 185
if ((__p == __pend) && (__q == __qend)) { 
# 186
return 0; } else { 
# 187
if (__p == __pend) { 
# 188
return -1; } else { 
# 189
if (__q == __qend) { 
# 190
return 1; }  }  }  
# 192
__p++; 
# 193
__q++; 
# 194
}  
# 195
} 
# 197
template< class _CharT> typename __cxx11::collate< _CharT> ::string_type 
# 200
__cxx11::collate< _CharT> ::do_transform(const _CharT *__lo, const _CharT *__hi) const 
# 201
{ 
# 202
string_type __ret; 
# 205
const string_type __str(__lo, __hi); 
# 207
const _CharT *__p = __str.c_str(); 
# 208
const _CharT *__pend = __str.data() + __str.length(); 
# 210
size_t __len = (__hi - __lo) * 2; 
# 212
_CharT *__c = new _CharT [__len]; 
# 214
try 
# 215
{ 
# 219
for (; ;) 
# 220
{ 
# 222
size_t __res = _M_transform(__c, __p, __len); 
# 225
if (__res >= __len) 
# 226
{ 
# 227
__len = (__res + (1)); 
# 228
(delete [] __c), (__c = 0); 
# 229
__c = (new _CharT [__len]); 
# 230
__res = _M_transform(__c, __p, __len); 
# 231
}  
# 233
__ret.append(__c, __res); 
# 234
__p += char_traits< _CharT> ::length(__p); 
# 235
if (__p == __pend) { 
# 236
break; }  
# 238
__p++; 
# 239
__ret.push_back(_CharT()); 
# 240
}  
# 241
} 
# 242
catch (...) 
# 243
{ 
# 244
delete [] __c; 
# 245
throw; 
# 246
}  
# 248
delete [] __c; 
# 250
return __ret; 
# 251
} 
# 253
template< class _CharT> long 
# 256
__cxx11::collate< _CharT> ::do_hash(const _CharT *__lo, const _CharT *__hi) const 
# 257
{ 
# 258
unsigned long __val = (0); 
# 259
for (; __lo < __hi; ++__lo) { 
# 260
__val = ((*__lo) + ((__val << 7) | (__val >> (__gnu_cxx::__numeric_traits_integer< unsigned long> ::__digits - 7)))); }  
# 264
return static_cast< long>(__val); 
# 265
} 
# 270
extern template class __cxx11::collate< char> ;
# 271
extern template class __cxx11::collate_byname< char> ;
# 273
extern template const __cxx11::collate< char>  &use_facet< __cxx11::collate< char> > (const locale &);
# 277
extern template bool has_facet< __cxx11::collate< char> > (const locale &) throw();
# 282
extern template class __cxx11::collate< wchar_t> ;
# 283
extern template class __cxx11::collate_byname< wchar_t> ;
# 285
extern template const __cxx11::collate< wchar_t>  &use_facet< __cxx11::collate< wchar_t> > (const locale &);
# 289
extern template bool has_facet< __cxx11::collate< wchar_t> > (const locale &) throw();
# 296
}
# 36 "/usr/include/x86_64-linux-gnu/c++/9/bits/error_constants.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 40
enum class errc { 
# 42
address_family_not_supported = 97, 
# 43
address_in_use, 
# 44
address_not_available, 
# 45
already_connected = 106, 
# 46
argument_list_too_long = 7, 
# 47
argument_out_of_domain = 33, 
# 48
bad_address = 14, 
# 49
bad_file_descriptor = 9, 
# 52
bad_message = 74, 
# 55
broken_pipe = 32, 
# 56
connection_aborted = 103, 
# 57
connection_already_in_progress = 114, 
# 58
connection_refused = 111, 
# 59
connection_reset = 104, 
# 60
cross_device_link = 18, 
# 61
destination_address_required = 89, 
# 62
device_or_resource_busy = 16, 
# 63
directory_not_empty = 39, 
# 64
executable_format_error = 8, 
# 65
file_exists = 17, 
# 66
file_too_large = 27, 
# 67
filename_too_long = 36, 
# 68
function_not_supported = 38, 
# 69
host_unreachable = 113, 
# 72
identifier_removed = 43, 
# 75
illegal_byte_sequence = 84, 
# 76
inappropriate_io_control_operation = 25, 
# 77
interrupted = 4, 
# 78
invalid_argument = 22, 
# 79
invalid_seek = 29, 
# 80
io_error = 5, 
# 81
is_a_directory = 21, 
# 82
message_size = 90, 
# 83
network_down = 100, 
# 84
network_reset = 102, 
# 85
network_unreachable = 101, 
# 86
no_buffer_space = 105, 
# 87
no_child_process = 10, 
# 90
no_link = 67, 
# 93
no_lock_available = 37, 
# 96
no_message_available = 61, 
# 99
no_message = 42, 
# 100
no_protocol_option = 92, 
# 101
no_space_on_device = 28, 
# 104
no_stream_resources = 63, 
# 107
no_such_device_or_address = 6, 
# 108
no_such_device = 19, 
# 109
no_such_file_or_directory = 2, 
# 110
no_such_process, 
# 111
not_a_directory = 20, 
# 112
not_a_socket = 88, 
# 115
not_a_stream = 60, 
# 118
not_connected = 107, 
# 119
not_enough_memory = 12, 
# 122
not_supported = 95, 
# 126
operation_canceled = 125, 
# 129
operation_in_progress = 115, 
# 130
operation_not_permitted = 1, 
# 131
operation_not_supported = 95, 
# 132
operation_would_block = 11, 
# 135
owner_dead = 130, 
# 138
permission_denied = 13, 
# 141
protocol_error = 71, 
# 144
protocol_not_supported = 93, 
# 145
read_only_file_system = 30, 
# 146
resource_deadlock_would_occur = 35, 
# 147
resource_unavailable_try_again = 11, 
# 148
result_out_of_range = 34, 
# 151
state_not_recoverable = 131, 
# 155
stream_timeout = 62, 
# 159
text_file_busy = 26, 
# 162
timed_out = 110, 
# 163
too_many_files_open_in_system = 23, 
# 164
too_many_files_open, 
# 165
too_many_links = 31, 
# 166
too_many_symbolic_link_levels = 40, 
# 169
value_too_large = 75, 
# 172
wrong_protocol_type = 91
# 173
}; 
# 176
}
# 41 "/usr/include/c++/9/stdexcept" 3
namespace std __attribute((__visibility__("default"))) { 
# 48
struct __cow_string { 
# 50
union { 
# 51
const char *_M_p; 
# 52
char _M_bytes[sizeof(const char *)]; 
# 53
}; 
# 55
__cow_string(); 
# 56
__cow_string(const string &); 
# 57
__cow_string(const char *, size_t); 
# 58
__cow_string(const __cow_string &) noexcept; 
# 59
__cow_string &operator=(const __cow_string &) noexcept; 
# 60
~__cow_string(); 
# 62
__cow_string(__cow_string &&) noexcept; 
# 63
__cow_string &operator=(__cow_string &&) noexcept; 
# 65
}; 
# 67
typedef __cxx11::basic_string< char>  __sso_string; 
# 113 "/usr/include/c++/9/stdexcept" 3
class logic_error : public exception { 
# 115
__cow_string _M_msg; 
# 120
public: explicit logic_error(const string & __arg); 
# 124
explicit logic_error(const char *); 
# 126
logic_error(logic_error &&) noexcept; 
# 127
logic_error &operator=(logic_error &&) noexcept; 
# 131
logic_error(const logic_error &) noexcept; 
# 132
logic_error &operator=(const logic_error &) noexcept; 
# 138
virtual ~logic_error() noexcept; 
# 143
virtual const char *what() const noexcept; 
# 149
}; 
# 153
class domain_error : public logic_error { 
# 156
public: explicit domain_error(const string & __arg); 
# 158
explicit domain_error(const char *); 
# 159
domain_error(const domain_error &) = default;
# 160
domain_error &operator=(const domain_error &) = default;
# 161
domain_error(domain_error &&) = default;
# 162
domain_error &operator=(domain_error &&) = default;
# 164
virtual ~domain_error() noexcept; 
# 165
}; 
# 168
class invalid_argument : public logic_error { 
# 171
public: explicit invalid_argument(const string & __arg); 
# 173
explicit invalid_argument(const char *); 
# 174
invalid_argument(const invalid_argument &) = default;
# 175
invalid_argument &operator=(const invalid_argument &) = default;
# 176
invalid_argument(invalid_argument &&) = default;
# 177
invalid_argument &operator=(invalid_argument &&) = default;
# 179
virtual ~invalid_argument() noexcept; 
# 180
}; 
# 184
class length_error : public logic_error { 
# 187
public: explicit length_error(const string & __arg); 
# 189
explicit length_error(const char *); 
# 190
length_error(const length_error &) = default;
# 191
length_error &operator=(const length_error &) = default;
# 192
length_error(length_error &&) = default;
# 193
length_error &operator=(length_error &&) = default;
# 195
virtual ~length_error() noexcept; 
# 196
}; 
# 200
class out_of_range : public logic_error { 
# 203
public: explicit out_of_range(const string & __arg); 
# 205
explicit out_of_range(const char *); 
# 206
out_of_range(const out_of_range &) = default;
# 207
out_of_range &operator=(const out_of_range &) = default;
# 208
out_of_range(out_of_range &&) = default;
# 209
out_of_range &operator=(out_of_range &&) = default;
# 211
virtual ~out_of_range() noexcept; 
# 212
}; 
# 219
class runtime_error : public exception { 
# 221
__cow_string _M_msg; 
# 226
public: explicit runtime_error(const string & __arg); 
# 230
explicit runtime_error(const char *); 
# 232
runtime_error(runtime_error &&) noexcept; 
# 233
runtime_error &operator=(runtime_error &&) noexcept; 
# 237
runtime_error(const runtime_error &) noexcept; 
# 238
runtime_error &operator=(const runtime_error &) noexcept; 
# 244
virtual ~runtime_error() noexcept; 
# 249
virtual const char *what() const noexcept; 
# 255
}; 
# 258
class range_error : public runtime_error { 
# 261
public: explicit range_error(const string & __arg); 
# 263
explicit range_error(const char *); 
# 264
range_error(const range_error &) = default;
# 265
range_error &operator=(const range_error &) = default;
# 266
range_error(range_error &&) = default;
# 267
range_error &operator=(range_error &&) = default;
# 269
virtual ~range_error() noexcept; 
# 270
}; 
# 273
class overflow_error : public runtime_error { 
# 276
public: explicit overflow_error(const string & __arg); 
# 278
explicit overflow_error(const char *); 
# 279
overflow_error(const overflow_error &) = default;
# 280
overflow_error &operator=(const overflow_error &) = default;
# 281
overflow_error(overflow_error &&) = default;
# 282
overflow_error &operator=(overflow_error &&) = default;
# 284
virtual ~overflow_error() noexcept; 
# 285
}; 
# 288
class underflow_error : public runtime_error { 
# 291
public: explicit underflow_error(const string & __arg); 
# 293
explicit underflow_error(const char *); 
# 294
underflow_error(const underflow_error &) = default;
# 295
underflow_error &operator=(const underflow_error &) = default;
# 296
underflow_error(underflow_error &&) = default;
# 297
underflow_error &operator=(underflow_error &&) = default;
# 299
virtual ~underflow_error() noexcept; 
# 300
}; 
# 305
}
# 43 "/usr/include/c++/9/system_error" 3
namespace std __attribute((__visibility__("default"))) { 
# 47
struct error_code; 
# 48
struct error_condition; 
# 49
class system_error; 
# 52
template< class _Tp> 
# 53
struct is_error_code_enum : public false_type { }; 
# 56
template< class _Tp> 
# 57
struct is_error_condition_enum : public false_type { }; 
# 60
template<> struct is_error_condition_enum< errc>  : public true_type { 
# 61
}; 
# 71 "/usr/include/c++/9/system_error" 3
inline namespace _V2 { 
# 74
class error_category { 
# 77
public: constexpr error_category() noexcept = default;
# 79
virtual ~error_category(); 
# 81
error_category(const error_category &) = delete;
# 82
error_category &operator=(const error_category &) = delete;
# 85
virtual const char *name() const noexcept = 0; 
# 95
private: 
# 93
__attribute((__abi_tag__("cxx11"))) virtual __cow_string 
# 95
_M_message(int) const; 
# 100
public: 
# 98
__attribute((__abi_tag__("cxx11"))) virtual string 
# 100
message(int) const = 0; 
# 112 "/usr/include/c++/9/system_error" 3
virtual error_condition default_error_condition(int __i) const noexcept; 
# 115
virtual bool equivalent(int __i, const error_condition & __cond) const noexcept; 
# 118
virtual bool equivalent(const error_code & __code, int __i) const noexcept; 
# 121
bool operator<(const error_category &__other) const noexcept 
# 122
{ return less< const error_category *> ()(this, &__other); } 
# 125
bool operator==(const error_category &__other) const noexcept 
# 126
{ return this == (&__other); } 
# 129
bool operator!=(const error_category &__other) const noexcept 
# 130
{ return this != (&__other); } 
# 131
}; 
# 134
__attribute((const)) const error_category &system_category() noexcept; 
# 135
__attribute((const)) const error_category &generic_category() noexcept; 
# 137
}
# 139
inline error_code make_error_code(errc) noexcept; 
# 141
template< class _Tp> struct hash; 
# 146
struct error_code { 
# 148
error_code() noexcept : _M_value(0), _M_cat(&system_category()) 
# 149
{ } 
# 151
error_code(int __v, const _V2::error_category &__cat) noexcept : _M_value(__v), _M_cat(&__cat) 
# 152
{ } 
# 154
template< class _ErrorCodeEnum, class  = typename enable_if< is_error_code_enum< _ErrorCodeEnum> ::value> ::type> 
# 156
error_code(_ErrorCodeEnum __e) noexcept 
# 157
{ (*this) = make_error_code(__e); } 
# 160
void assign(int __v, const _V2::error_category &__cat) noexcept 
# 161
{ 
# 162
(_M_value) = __v; 
# 163
(_M_cat) = (&__cat); 
# 164
} 
# 167
void clear() noexcept 
# 168
{ this->assign(0, system_category()); } 
# 171
template< class _ErrorCodeEnum> typename enable_if< is_error_code_enum< _ErrorCodeEnum> ::value, error_code &> ::type 
# 174
operator=(_ErrorCodeEnum __e) noexcept 
# 175
{ return (*this) = make_error_code(__e); } 
# 178
int value() const noexcept { return _M_value; } 
# 181
const _V2::error_category &category() const noexcept { return *(_M_cat); } 
# 184
error_condition default_error_condition() const noexcept; 
# 186
__attribute((__abi_tag__("cxx11"))) string 
# 188
message() const 
# 189
{ return this->category().message(this->value()); } 
# 191
explicit operator bool() const noexcept 
# 192
{ return (_M_value) != 0; } 
# 196
friend struct hash< error_code> ; 
# 198
private: int _M_value; 
# 199
const _V2::error_category *_M_cat; 
# 200
}; 
# 204
inline error_code make_error_code(errc __e) noexcept 
# 205
{ return error_code(static_cast< int>(__e), generic_category()); } 
# 208
inline bool operator<(const error_code &__lhs, const error_code &__rhs) noexcept 
# 209
{ 
# 210
return (((__lhs.category()) < (__rhs.category())) || (((__lhs.category()) == (__rhs.category())) && (__lhs.value() < __rhs.value()))); 
# 213
} 
# 215
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 217
operator<<(basic_ostream< _CharT, _Traits>  &__os, const error_code &__e) 
# 218
{ return (((__os << __e.category().name()) << ':') << __e.value()); } 
# 220
inline error_condition make_error_condition(errc) noexcept; 
# 224
struct error_condition { 
# 226
error_condition() noexcept : _M_value(0), _M_cat(&generic_category()) 
# 227
{ } 
# 229
error_condition(int __v, const _V2::error_category &__cat) noexcept : _M_value(__v), _M_cat(&__cat) 
# 230
{ } 
# 232
template< class _ErrorConditionEnum, class  = typename enable_if< is_error_condition_enum< _ErrorConditionEnum> ::value> ::type> 
# 234
error_condition(_ErrorConditionEnum __e) noexcept 
# 235
{ (*this) = make_error_condition(__e); } 
# 238
void assign(int __v, const _V2::error_category &__cat) noexcept 
# 239
{ 
# 240
(_M_value) = __v; 
# 241
(_M_cat) = (&__cat); 
# 242
} 
# 245
template< class _ErrorConditionEnum> typename enable_if< is_error_condition_enum< _ErrorConditionEnum> ::value, error_condition &> ::type 
# 248
operator=(_ErrorConditionEnum __e) noexcept 
# 249
{ return (*this) = make_error_condition(__e); } 
# 252
void clear() noexcept 
# 253
{ this->assign(0, generic_category()); } 
# 257
int value() const noexcept { return _M_value; } 
# 260
const _V2::error_category &category() const noexcept { return *(_M_cat); } 
# 262
__attribute((__abi_tag__("cxx11"))) string 
# 264
message() const 
# 265
{ return this->category().message(this->value()); } 
# 267
explicit operator bool() const noexcept 
# 268
{ return (_M_value) != 0; } 
# 272
private: int _M_value; 
# 273
const _V2::error_category *_M_cat; 
# 274
}; 
# 278
inline error_condition make_error_condition(errc __e) noexcept 
# 279
{ return error_condition(static_cast< int>(__e), generic_category()); } 
# 282
inline bool operator<(const error_condition &__lhs, const error_condition &
# 283
__rhs) noexcept 
# 284
{ 
# 285
return (((__lhs.category()) < (__rhs.category())) || (((__lhs.category()) == (__rhs.category())) && (__lhs.value() < __rhs.value()))); 
# 288
} 
# 292
inline bool operator==(const error_code &__lhs, const error_code &__rhs) noexcept 
# 293
{ return (((__lhs.category()) == (__rhs.category())) && (__lhs.value() == __rhs.value())); 
# 294
} 
# 297
inline bool operator==(const error_code &__lhs, const error_condition &__rhs) noexcept 
# 298
{ 
# 299
return (__lhs.category().equivalent(__lhs.value(), __rhs) || __rhs.category().equivalent(__lhs, __rhs.value())); 
# 301
} 
# 304
inline bool operator==(const error_condition &__lhs, const error_code &__rhs) noexcept 
# 305
{ 
# 306
return (__rhs.category().equivalent(__rhs.value(), __lhs) || __lhs.category().equivalent(__rhs, __lhs.value())); 
# 308
} 
# 311
inline bool operator==(const error_condition &__lhs, const error_condition &
# 312
__rhs) noexcept 
# 313
{ 
# 314
return (((__lhs.category()) == (__rhs.category())) && (__lhs.value() == __rhs.value())); 
# 316
} 
# 319
inline bool operator!=(const error_code &__lhs, const error_code &__rhs) noexcept 
# 320
{ return !(__lhs == __rhs); } 
# 323
inline bool operator!=(const error_code &__lhs, const error_condition &__rhs) noexcept 
# 324
{ return !(__lhs == __rhs); } 
# 327
inline bool operator!=(const error_condition &__lhs, const error_code &__rhs) noexcept 
# 328
{ return !(__lhs == __rhs); } 
# 331
inline bool operator!=(const error_condition &__lhs, const error_condition &
# 332
__rhs) noexcept 
# 333
{ return !(__lhs == __rhs); } 
# 341
class system_error : public runtime_error { 
# 344
error_code _M_code; 
# 347
public: system_error(error_code __ec = error_code()) : runtime_error(__ec.message()), _M_code(__ec) 
# 348
{ } 
# 350
system_error(error_code __ec, const string &__what) : runtime_error((((__what + (": "))) + (__ec.message()))), _M_code(__ec) 
# 351
{ } 
# 353
system_error(error_code __ec, const char *__what) : runtime_error((__what + (((": ") + (__ec.message()))))), _M_code(__ec) 
# 354
{ } 
# 356
system_error(int __v, const _V2::error_category &__ecat, const char *__what) : system_error(error_code(__v, __ecat), __what) 
# 357
{ } 
# 359
system_error(int __v, const _V2::error_category &__ecat) : runtime_error(error_code(__v, __ecat).message()), _M_code(__v, __ecat) 
# 361
{ } 
# 363
system_error(int __v, const _V2::error_category &__ecat, const string &__what) : runtime_error((((__what + (": "))) + (error_code(__v, __ecat).message()))), _M_code(__v, __ecat) 
# 365
{ } 
# 368
system_error(const system_error &) = default;
# 369
system_error &operator=(const system_error &) = default;
# 372
virtual ~system_error() noexcept; 
# 375
const error_code &code() const noexcept { return _M_code; } 
# 376
}; 
# 379
}
# 383
namespace std __attribute((__visibility__("default"))) { 
# 391
template<> struct hash< error_code>  : public __hash_base< unsigned long, error_code>  { 
# 395
size_t operator()(const error_code &__e) const noexcept 
# 396
{ 
# 397
const size_t __tmp = std::_Hash_impl::hash(__e._M_value); 
# 398
return std::_Hash_impl::__hash_combine(__e._M_cat, __tmp); 
# 399
} 
# 400
}; 
# 420 "/usr/include/c++/9/system_error" 3
}
# 49 "/usr/include/c++/9/bits/ios_base.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 57
enum _Ios_Fmtflags { 
# 59
_S_boolalpha = (1L << 0), 
# 60
_S_dec, 
# 61
_S_fixed = (1L << 2), 
# 62
_S_hex = (1L << 3), 
# 63
_S_internal = (1L << 4), 
# 64
_S_left = (1L << 5), 
# 65
_S_oct = (1L << 6), 
# 66
_S_right = (1L << 7), 
# 67
_S_scientific = (1L << 8), 
# 68
_S_showbase = (1L << 9), 
# 69
_S_showpoint = (1L << 10), 
# 70
_S_showpos = (1L << 11), 
# 71
_S_skipws = (1L << 12), 
# 72
_S_unitbuf = (1L << 13), 
# 73
_S_uppercase = (1L << 14), 
# 74
_S_adjustfield = ((_S_left | _S_right) | _S_internal), 
# 75
_S_basefield = ((_S_dec | _S_oct) | _S_hex), 
# 76
_S_floatfield = (_S_scientific | _S_fixed), 
# 77
_S_ios_fmtflags_end = (1L << 16), 
# 78
_S_ios_fmtflags_max = 2147483647, 
# 79
_S_ios_fmtflags_min = (~2147483647)
# 80
}; 
# 83
constexpr _Ios_Fmtflags operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b) 
# 84
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) & (static_cast< int>(__b))); } 
# 87
constexpr _Ios_Fmtflags operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b) 
# 88
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) | (static_cast< int>(__b))); } 
# 91
constexpr _Ios_Fmtflags operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b) 
# 92
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); } 
# 95
constexpr _Ios_Fmtflags operator~(_Ios_Fmtflags __a) 
# 96
{ return (_Ios_Fmtflags)(~(static_cast< int>(__a))); } 
# 99
inline const _Ios_Fmtflags &operator|=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b) 
# 100
{ return __a = (__a | __b); } 
# 103
inline const _Ios_Fmtflags &operator&=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b) 
# 104
{ return __a = (__a & __b); } 
# 107
inline const _Ios_Fmtflags &operator^=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b) 
# 108
{ return __a = (__a ^ __b); } 
# 111
enum _Ios_Openmode { 
# 113
_S_app = (1L << 0), 
# 114
_S_ate, 
# 115
_S_bin = (1L << 2), 
# 116
_S_in = (1L << 3), 
# 117
_S_out = (1L << 4), 
# 118
_S_trunc = (1L << 5), 
# 119
_S_ios_openmode_end = (1L << 16), 
# 120
_S_ios_openmode_max = 2147483647, 
# 121
_S_ios_openmode_min = (~2147483647)
# 122
}; 
# 125
constexpr _Ios_Openmode operator&(_Ios_Openmode __a, _Ios_Openmode __b) 
# 126
{ return (_Ios_Openmode)((static_cast< int>(__a)) & (static_cast< int>(__b))); } 
# 129
constexpr _Ios_Openmode operator|(_Ios_Openmode __a, _Ios_Openmode __b) 
# 130
{ return (_Ios_Openmode)((static_cast< int>(__a)) | (static_cast< int>(__b))); } 
# 133
constexpr _Ios_Openmode operator^(_Ios_Openmode __a, _Ios_Openmode __b) 
# 134
{ return (_Ios_Openmode)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); } 
# 137
constexpr _Ios_Openmode operator~(_Ios_Openmode __a) 
# 138
{ return (_Ios_Openmode)(~(static_cast< int>(__a))); } 
# 141
inline const _Ios_Openmode &operator|=(_Ios_Openmode &__a, _Ios_Openmode __b) 
# 142
{ return __a = (__a | __b); } 
# 145
inline const _Ios_Openmode &operator&=(_Ios_Openmode &__a, _Ios_Openmode __b) 
# 146
{ return __a = (__a & __b); } 
# 149
inline const _Ios_Openmode &operator^=(_Ios_Openmode &__a, _Ios_Openmode __b) 
# 150
{ return __a = (__a ^ __b); } 
# 153
enum _Ios_Iostate { 
# 155
_S_goodbit, 
# 156
_S_badbit, 
# 157
_S_eofbit, 
# 158
_S_failbit = (1L << 2), 
# 159
_S_ios_iostate_end = (1L << 16), 
# 160
_S_ios_iostate_max = 2147483647, 
# 161
_S_ios_iostate_min = (~2147483647)
# 162
}; 
# 165
constexpr _Ios_Iostate operator&(_Ios_Iostate __a, _Ios_Iostate __b) 
# 166
{ return (_Ios_Iostate)((static_cast< int>(__a)) & (static_cast< int>(__b))); } 
# 169
constexpr _Ios_Iostate operator|(_Ios_Iostate __a, _Ios_Iostate __b) 
# 170
{ return (_Ios_Iostate)((static_cast< int>(__a)) | (static_cast< int>(__b))); } 
# 173
constexpr _Ios_Iostate operator^(_Ios_Iostate __a, _Ios_Iostate __b) 
# 174
{ return (_Ios_Iostate)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); } 
# 177
constexpr _Ios_Iostate operator~(_Ios_Iostate __a) 
# 178
{ return (_Ios_Iostate)(~(static_cast< int>(__a))); } 
# 181
inline const _Ios_Iostate &operator|=(_Ios_Iostate &__a, _Ios_Iostate __b) 
# 182
{ return __a = (__a | __b); } 
# 185
inline const _Ios_Iostate &operator&=(_Ios_Iostate &__a, _Ios_Iostate __b) 
# 186
{ return __a = (__a & __b); } 
# 189
inline const _Ios_Iostate &operator^=(_Ios_Iostate &__a, _Ios_Iostate __b) 
# 190
{ return __a = (__a ^ __b); } 
# 193
enum _Ios_Seekdir { 
# 195
_S_beg, 
# 196
_S_cur, 
# 197
_S_end, 
# 198
_S_ios_seekdir_end = (1L << 16)
# 199
}; 
# 203
enum class io_errc { stream = 1}; 
# 205
template<> struct is_error_code_enum< io_errc>  : public true_type { }; 
# 207
const _V2::error_category &iostream_category() noexcept; 
# 210
inline error_code make_error_code(io_errc __e) noexcept 
# 211
{ return error_code(static_cast< int>(__e), iostream_category()); } 
# 214
inline error_condition make_error_condition(io_errc __e) noexcept 
# 215
{ return error_condition(static_cast< int>(__e), iostream_category()); } 
# 228 "/usr/include/c++/9/bits/ios_base.h" 3
class ios_base { 
# 255 "/usr/include/c++/9/bits/ios_base.h" 3
public: class __attribute((__abi_tag__("cxx11"))) failure : public system_error { 
# 259
public: explicit failure(const string & __str); 
# 263
explicit failure(const string &, const error_code &); 
# 266
explicit failure(const char *, const error_code & = io_errc::stream); 
# 270
virtual ~failure() throw(); 
# 273
virtual const char *what() const throw(); 
# 274
}; 
# 323 "/usr/include/c++/9/bits/ios_base.h" 3
typedef _Ios_Fmtflags fmtflags; 
# 326
static const fmtflags boolalpha = _S_boolalpha; 
# 329
static const fmtflags dec = _S_dec; 
# 332
static const fmtflags fixed = _S_fixed; 
# 335
static const fmtflags hex = _S_hex; 
# 340
static const fmtflags internal = _S_internal; 
# 344
static const fmtflags left = _S_left; 
# 347
static const fmtflags oct = _S_oct; 
# 351
static const fmtflags right = _S_right; 
# 354
static const fmtflags scientific = _S_scientific; 
# 358
static const fmtflags showbase = _S_showbase; 
# 362
static const fmtflags showpoint = _S_showpoint; 
# 365
static const fmtflags showpos = _S_showpos; 
# 368
static const fmtflags skipws = _S_skipws; 
# 371
static const fmtflags unitbuf = _S_unitbuf; 
# 375
static const fmtflags uppercase = _S_uppercase; 
# 378
static const fmtflags adjustfield = _S_adjustfield; 
# 381
static const fmtflags basefield = _S_basefield; 
# 384
static const fmtflags floatfield = _S_floatfield; 
# 398 "/usr/include/c++/9/bits/ios_base.h" 3
typedef _Ios_Iostate iostate; 
# 402
static const iostate badbit = _S_badbit; 
# 405
static const iostate eofbit = _S_eofbit; 
# 410
static const iostate failbit = _S_failbit; 
# 413
static const iostate goodbit = _S_goodbit; 
# 429 "/usr/include/c++/9/bits/ios_base.h" 3
typedef _Ios_Openmode openmode; 
# 432
static const openmode app = _S_app; 
# 435
static const openmode ate = _S_ate; 
# 440
static const openmode binary = _S_bin; 
# 443
static const openmode in = _S_in; 
# 446
static const openmode out = _S_out; 
# 449
static const openmode trunc = _S_trunc; 
# 461 "/usr/include/c++/9/bits/ios_base.h" 3
typedef _Ios_Seekdir seekdir; 
# 464
static const seekdir beg = _S_beg; 
# 467
static const seekdir cur = _S_cur; 
# 470
static const seekdir end = _S_end; 
# 474
typedef int io_state
# 475
 __attribute((__deprecated__("use \'std::iostate\' instead"))); 
# 476
typedef int open_mode
# 477
 __attribute((__deprecated__("use \'std::openmode\' instead"))); 
# 478
typedef int seek_dir
# 479
 __attribute((__deprecated__("use \'std::seekdir\' instead"))); 
# 481
typedef std::streampos streampos
# 482
 __attribute((__deprecated__("use \'std::streampos\' instead"))); 
# 483
typedef std::streamoff streamoff
# 484
 __attribute((__deprecated__("use \'std::streamoff\' instead"))); 
# 494 "/usr/include/c++/9/bits/ios_base.h" 3
enum event { 
# 496
erase_event, 
# 497
imbue_event, 
# 498
copyfmt_event
# 499
}; 
# 511 "/usr/include/c++/9/bits/ios_base.h" 3
typedef void (*event_callback)(event __e, ios_base & __b, int __i); 
# 524 "/usr/include/c++/9/bits/ios_base.h" 3
void register_callback(event_callback __fn, int __index); 
# 527
protected: streamsize _M_precision; 
# 528
streamsize _M_width; 
# 529
fmtflags _M_flags; 
# 530
iostate _M_exception; 
# 531
iostate _M_streambuf_state; 
# 535
struct _Callback_list { 
# 538
_Callback_list *_M_next; 
# 539
event_callback _M_fn; 
# 540
int _M_index; 
# 541
_Atomic_word _M_refcount; 
# 543
_Callback_list(event_callback __fn, int __index, _Callback_list *
# 544
__cb) : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) 
# 545
{ } 
# 548
void _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); } 
# 552
int _M_remove_reference() 
# 553
{ 
# 555
; 
# 556
int __res = __gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1); 
# 557
if (__res == 0) 
# 558
{ 
# 559
; 
# 560
}  
# 561
return __res; 
# 562
} 
# 563
}; 
# 565
_Callback_list *_M_callbacks; 
# 568
void _M_call_callbacks(event __ev) throw(); 
# 571
void _M_dispose_callbacks() throw(); 
# 574
struct _Words { 
# 576
void *_M_pword; 
# 577
long _M_iword; 
# 578
_Words() : _M_pword((0)), _M_iword((0)) { } 
# 579
}; 
# 582
_Words _M_word_zero; 
# 586
enum { _S_local_word_size = 8}; 
# 587
_Words _M_local_word[_S_local_word_size]; 
# 590
int _M_word_size; 
# 591
_Words *_M_word; 
# 594
_Words &_M_grow_words(int __index, bool __iword); 
# 597
locale _M_ios_locale; 
# 600
void _M_init() throw(); 
# 608
public: class Init { 
# 610
friend class ios_base; 
# 612
public: Init(); 
# 613
~Init(); 
# 616
Init(const Init &) = default;
# 617
Init &operator=(const Init &) = default;
# 621
private: static _Atomic_word _S_refcount; 
# 622
static bool _S_synced_with_stdio; 
# 623
}; 
# 631
fmtflags flags() const 
# 632
{ return _M_flags; } 
# 642 "/usr/include/c++/9/bits/ios_base.h" 3
fmtflags flags(fmtflags __fmtfl) 
# 643
{ 
# 644
fmtflags __old = _M_flags; 
# 645
(_M_flags) = __fmtfl; 
# 646
return __old; 
# 647
} 
# 658 "/usr/include/c++/9/bits/ios_base.h" 3
fmtflags setf(fmtflags __fmtfl) 
# 659
{ 
# 660
fmtflags __old = _M_flags; 
# 661
((_M_flags) |= __fmtfl); 
# 662
return __old; 
# 663
} 
# 675 "/usr/include/c++/9/bits/ios_base.h" 3
fmtflags setf(fmtflags __fmtfl, fmtflags __mask) 
# 676
{ 
# 677
fmtflags __old = _M_flags; 
# 678
((_M_flags) &= ((~__mask))); 
# 679
((_M_flags) |= ((__fmtfl & __mask))); 
# 680
return __old; 
# 681
} 
# 690
void unsetf(fmtflags __mask) 
# 691
{ ((_M_flags) &= ((~__mask))); } 
# 701 "/usr/include/c++/9/bits/ios_base.h" 3
streamsize precision() const 
# 702
{ return _M_precision; } 
# 710
streamsize precision(streamsize __prec) 
# 711
{ 
# 712
streamsize __old = _M_precision; 
# 713
(_M_precision) = __prec; 
# 714
return __old; 
# 715
} 
# 724
streamsize width() const 
# 725
{ return _M_width; } 
# 733
streamsize width(streamsize __wide) 
# 734
{ 
# 735
streamsize __old = _M_width; 
# 736
(_M_width) = __wide; 
# 737
return __old; 
# 738
} 
# 752 "/usr/include/c++/9/bits/ios_base.h" 3
static bool sync_with_stdio(bool __sync = true); 
# 764 "/usr/include/c++/9/bits/ios_base.h" 3
locale imbue(const locale & __loc) throw(); 
# 775 "/usr/include/c++/9/bits/ios_base.h" 3
locale getloc() const 
# 776
{ return _M_ios_locale; } 
# 786 "/usr/include/c++/9/bits/ios_base.h" 3
const locale &_M_getloc() const 
# 787
{ return _M_ios_locale; } 
# 805 "/usr/include/c++/9/bits/ios_base.h" 3
static int xalloc() throw(); 
# 821 "/usr/include/c++/9/bits/ios_base.h" 3
long &iword(int __ix) 
# 822
{ 
# 823
_Words &__word = (((unsigned)__ix) < ((unsigned)(_M_word_size))) ? (_M_word)[__ix] : this->_M_grow_words(__ix, true); 
# 825
return __word._M_iword; 
# 826
} 
# 842 "/usr/include/c++/9/bits/ios_base.h" 3
void *&pword(int __ix) 
# 843
{ 
# 844
_Words &__word = (((unsigned)__ix) < ((unsigned)(_M_word_size))) ? (_M_word)[__ix] : this->_M_grow_words(__ix, false); 
# 846
return __word._M_pword; 
# 847
} 
# 858 "/usr/include/c++/9/bits/ios_base.h" 3
virtual ~ios_base(); 
# 861
protected: ios_base() throw(); 
# 873 "/usr/include/c++/9/bits/ios_base.h" 3
public: ios_base(const ios_base &) = delete;
# 876
ios_base &operator=(const ios_base &) = delete;
# 880
protected: void _M_move(ios_base &) noexcept; 
# 883
void _M_swap(ios_base & __rhs) noexcept; 
# 885
}; 
# 890
inline ios_base &boolalpha(ios_base &__base) 
# 891
{ 
# 892
__base.setf(ios_base::boolalpha); 
# 893
return __base; 
# 894
} 
# 898
inline ios_base &noboolalpha(ios_base &__base) 
# 899
{ 
# 900
__base.unsetf(ios_base::boolalpha); 
# 901
return __base; 
# 902
} 
# 906
inline ios_base &showbase(ios_base &__base) 
# 907
{ 
# 908
__base.setf(ios_base::showbase); 
# 909
return __base; 
# 910
} 
# 914
inline ios_base &noshowbase(ios_base &__base) 
# 915
{ 
# 916
__base.unsetf(ios_base::showbase); 
# 917
return __base; 
# 918
} 
# 922
inline ios_base &showpoint(ios_base &__base) 
# 923
{ 
# 924
__base.setf(ios_base::showpoint); 
# 925
return __base; 
# 926
} 
# 930
inline ios_base &noshowpoint(ios_base &__base) 
# 931
{ 
# 932
__base.unsetf(ios_base::showpoint); 
# 933
return __base; 
# 934
} 
# 938
inline ios_base &showpos(ios_base &__base) 
# 939
{ 
# 940
__base.setf(ios_base::showpos); 
# 941
return __base; 
# 942
} 
# 946
inline ios_base &noshowpos(ios_base &__base) 
# 947
{ 
# 948
__base.unsetf(ios_base::showpos); 
# 949
return __base; 
# 950
} 
# 954
inline ios_base &skipws(ios_base &__base) 
# 955
{ 
# 956
__base.setf(ios_base::skipws); 
# 957
return __base; 
# 958
} 
# 962
inline ios_base &noskipws(ios_base &__base) 
# 963
{ 
# 964
__base.unsetf(ios_base::skipws); 
# 965
return __base; 
# 966
} 
# 970
inline ios_base &uppercase(ios_base &__base) 
# 971
{ 
# 972
__base.setf(ios_base::uppercase); 
# 973
return __base; 
# 974
} 
# 978
inline ios_base &nouppercase(ios_base &__base) 
# 979
{ 
# 980
__base.unsetf(ios_base::uppercase); 
# 981
return __base; 
# 982
} 
# 986
inline ios_base &unitbuf(ios_base &__base) 
# 987
{ 
# 988
__base.setf(ios_base::unitbuf); 
# 989
return __base; 
# 990
} 
# 994
inline ios_base &nounitbuf(ios_base &__base) 
# 995
{ 
# 996
__base.unsetf(ios_base::unitbuf); 
# 997
return __base; 
# 998
} 
# 1003
inline ios_base &internal(ios_base &__base) 
# 1004
{ 
# 1005
__base.setf(ios_base::internal, ios_base::adjustfield); 
# 1006
return __base; 
# 1007
} 
# 1011
inline ios_base &left(ios_base &__base) 
# 1012
{ 
# 1013
__base.setf(ios_base::left, ios_base::adjustfield); 
# 1014
return __base; 
# 1015
} 
# 1019
inline ios_base &right(ios_base &__base) 
# 1020
{ 
# 1021
__base.setf(ios_base::right, ios_base::adjustfield); 
# 1022
return __base; 
# 1023
} 
# 1028
inline ios_base &dec(ios_base &__base) 
# 1029
{ 
# 1030
__base.setf(ios_base::dec, ios_base::basefield); 
# 1031
return __base; 
# 1032
} 
# 1036
inline ios_base &hex(ios_base &__base) 
# 1037
{ 
# 1038
__base.setf(ios_base::hex, ios_base::basefield); 
# 1039
return __base; 
# 1040
} 
# 1044
inline ios_base &oct(ios_base &__base) 
# 1045
{ 
# 1046
__base.setf(ios_base::oct, ios_base::basefield); 
# 1047
return __base; 
# 1048
} 
# 1053
inline ios_base &fixed(ios_base &__base) 
# 1054
{ 
# 1055
__base.setf(ios_base::fixed, ios_base::floatfield); 
# 1056
return __base; 
# 1057
} 
# 1061
inline ios_base &scientific(ios_base &__base) 
# 1062
{ 
# 1063
__base.setf(ios_base::scientific, ios_base::floatfield); 
# 1064
return __base; 
# 1065
} 
# 1073
inline ios_base &hexfloat(ios_base &__base) 
# 1074
{ 
# 1075
__base.setf((ios_base::fixed | ios_base::scientific), ios_base::floatfield); 
# 1076
return __base; 
# 1077
} 
# 1081
inline ios_base &defaultfloat(ios_base &__base) 
# 1082
{ 
# 1083
__base.unsetf(ios_base::floatfield); 
# 1084
return __base; 
# 1085
} 
# 1089
}
# 45 "/usr/include/c++/9/streambuf" 3
namespace std __attribute((__visibility__("default"))) { 
# 51
template< class _CharT, class _Traits> streamsize __copy_streambufs_eof(basic_streambuf< _CharT, _Traits>  *, basic_streambuf< _CharT, _Traits>  *, bool &); 
# 121 "/usr/include/c++/9/streambuf" 3
template< class _CharT, class _Traits> 
# 122
class basic_streambuf { 
# 131
public: typedef _CharT char_type; 
# 132
typedef _Traits traits_type; 
# 133
typedef typename _Traits::int_type int_type; 
# 134
typedef typename _Traits::pos_type pos_type; 
# 135
typedef typename _Traits::off_type off_type; 
# 140
typedef basic_streambuf __streambuf_type; 
# 143
friend class basic_ios< char_type, traits_type> ; 
# 144
friend class basic_istream< char_type, traits_type> ; 
# 145
friend class basic_ostream< char_type, traits_type> ; 
# 146
friend class istreambuf_iterator< char_type, traits_type> ; 
# 147
friend class ostreambuf_iterator< char_type, traits_type> ; 
# 150
friend streamsize __copy_streambufs_eof<> (basic_streambuf< _CharT, _Traits>  *, basic_streambuf< _CharT, _Traits>  *, bool &); 
# 152
template< bool _IsMove, class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, _CharT2 *> ::__type __copy_move_a2(std::istreambuf_iterator< _CharT2> , std::istreambuf_iterator< _CharT2> , _CharT2 *); 
# 158
template< class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, istreambuf_iterator< _CharT2> > ::__type find(std::istreambuf_iterator< _CharT2> , std::istreambuf_iterator< _CharT2> , const _CharT2 &); 
# 164
template< class _CharT2, class _Distance> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, void> ::__type advance(std::istreambuf_iterator< _CharT2>  &, _Distance); 
# 169
template< class _CharT2, class _Traits2> friend basic_istream< _CharT2, _Traits2>  &operator>>(std::basic_istream< _CharT2, _Traits2>  &, _CharT2 *); 
# 173
template< class _CharT2, class _Traits2, class _Alloc> friend basic_istream< _CharT2, _Traits2>  &operator>>(std::basic_istream< _CharT2, _Traits2>  &, std::__cxx11::basic_string< _CharT2, _Traits2, _Alloc>  &); 
# 178
template< class _CharT2, class _Traits2, class _Alloc> friend basic_istream< _CharT2, _Traits2>  &getline(std::basic_istream< _CharT2, _Traits2>  &, std::__cxx11::basic_string< _CharT2, _Traits2, _Alloc>  &, _CharT2); 
# 191
protected: char_type *_M_in_beg; 
# 192
char_type *_M_in_cur; 
# 193
char_type *_M_in_end; 
# 194
char_type *_M_out_beg; 
# 195
char_type *_M_out_cur; 
# 196
char_type *_M_out_end; 
# 199
locale _M_buf_locale; 
# 204
public: virtual ~basic_streambuf() 
# 205
{ } 
# 216 "/usr/include/c++/9/streambuf" 3
locale pubimbue(const locale &__loc) 
# 217
{ 
# 218
locale __tmp(getloc()); 
# 219
imbue(__loc); 
# 220
((_M_buf_locale) = __loc); 
# 221
return __tmp; 
# 222
} 
# 233 "/usr/include/c++/9/streambuf" 3
locale getloc() const 
# 234
{ return _M_buf_locale; } 
# 246 "/usr/include/c++/9/streambuf" 3
basic_streambuf *pubsetbuf(char_type *__s, streamsize __n) 
# 247
{ return setbuf(__s, __n); } 
# 258 "/usr/include/c++/9/streambuf" 3
pos_type pubseekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode 
# 259
__mode = (ios_base::in | ios_base::out)) 
# 260
{ return seekoff(__off, __way, __mode); } 
# 270 "/usr/include/c++/9/streambuf" 3
pos_type pubseekpos(pos_type __sp, ios_base::openmode 
# 271
__mode = (ios_base::in | ios_base::out)) 
# 272
{ return seekpos(__sp, __mode); } 
# 278
int pubsync() { return sync(); } 
# 291 "/usr/include/c++/9/streambuf" 3
streamsize in_avail() 
# 292
{ 
# 293
const streamsize __ret = egptr() - gptr(); 
# 294
return (__ret) ? __ret : showmanyc(); 
# 295
} 
# 305 "/usr/include/c++/9/streambuf" 3
int_type snextc() 
# 306
{ 
# 307
int_type __ret = traits_type::eof(); 
# 308
if (__builtin_expect(!traits_type::eq_int_type(sbumpc(), __ret), true)) { 
# 310
__ret = sgetc(); }  
# 311
return __ret; 
# 312
} 
# 323 "/usr/include/c++/9/streambuf" 3
int_type sbumpc() 
# 324
{ 
# 325
int_type __ret; 
# 326
if (__builtin_expect(gptr() < egptr(), true)) 
# 327
{ 
# 328
__ret = traits_type::to_int_type(*gptr()); 
# 329
gbump(1); 
# 330
} else { 
# 332
__ret = uflow(); }  
# 333
return __ret; 
# 334
} 
# 345 "/usr/include/c++/9/streambuf" 3
int_type sgetc() 
# 346
{ 
# 347
int_type __ret; 
# 348
if (__builtin_expect(gptr() < egptr(), true)) { 
# 349
__ret = traits_type::to_int_type(*gptr()); } else { 
# 351
__ret = underflow(); }  
# 352
return __ret; 
# 353
} 
# 364 "/usr/include/c++/9/streambuf" 3
streamsize sgetn(char_type *__s, streamsize __n) 
# 365
{ return xsgetn(__s, __n); } 
# 379 "/usr/include/c++/9/streambuf" 3
int_type sputbackc(char_type __c) 
# 380
{ 
# 381
int_type __ret; 
# 382
const bool __testpos = eback() < gptr(); 
# 383
if (__builtin_expect((!__testpos) || (!traits_type::eq(__c, gptr()[-1])), false)) { 
# 385
__ret = pbackfail(traits_type::to_int_type(__c)); } else 
# 387
{ 
# 388
gbump(-1); 
# 389
__ret = traits_type::to_int_type(*gptr()); 
# 390
}  
# 391
return __ret; 
# 392
} 
# 404 "/usr/include/c++/9/streambuf" 3
int_type sungetc() 
# 405
{ 
# 406
int_type __ret; 
# 407
if (__builtin_expect(eback() < gptr(), true)) 
# 408
{ 
# 409
gbump(-1); 
# 410
__ret = traits_type::to_int_type(*gptr()); 
# 411
} else { 
# 413
__ret = pbackfail(); }  
# 414
return __ret; 
# 415
} 
# 431 "/usr/include/c++/9/streambuf" 3
int_type sputc(char_type __c) 
# 432
{ 
# 433
int_type __ret; 
# 434
if (__builtin_expect(pptr() < epptr(), true)) 
# 435
{ 
# 436
(*pptr()) = __c; 
# 437
pbump(1); 
# 438
__ret = traits_type::to_int_type(__c); 
# 439
} else { 
# 441
__ret = overflow(traits_type::to_int_type(__c)); }  
# 442
return __ret; 
# 443
} 
# 457 "/usr/include/c++/9/streambuf" 3
streamsize sputn(const char_type *__s, streamsize __n) 
# 458
{ return xsputn(__s, __n); } 
# 470 "/usr/include/c++/9/streambuf" 3
protected: basic_streambuf() : _M_in_beg((0)), _M_in_cur((0)), _M_in_end((0)), _M_out_beg((0)), _M_out_cur((0)), _M_out_end((0)), _M_buf_locale(locale()) 
# 474
{ } 
# 489 "/usr/include/c++/9/streambuf" 3
char_type *eback() const { return _M_in_beg; } 
# 492
char_type *gptr() const { return _M_in_cur; } 
# 495
char_type *egptr() const { return _M_in_end; } 
# 505 "/usr/include/c++/9/streambuf" 3
void gbump(int __n) { (_M_in_cur) += __n; } 
# 516 "/usr/include/c++/9/streambuf" 3
void setg(char_type *__gbeg, char_type *__gnext, char_type *__gend) 
# 517
{ 
# 518
(_M_in_beg) = __gbeg; 
# 519
(_M_in_cur) = __gnext; 
# 520
(_M_in_end) = __gend; 
# 521
} 
# 536 "/usr/include/c++/9/streambuf" 3
char_type *pbase() const { return _M_out_beg; } 
# 539
char_type *pptr() const { return _M_out_cur; } 
# 542
char_type *epptr() const { return _M_out_end; } 
# 552 "/usr/include/c++/9/streambuf" 3
void pbump(int __n) { (_M_out_cur) += __n; } 
# 562 "/usr/include/c++/9/streambuf" 3
void setp(char_type *__pbeg, char_type *__pend) 
# 563
{ 
# 564
(_M_out_beg) = ((_M_out_cur) = __pbeg); 
# 565
(_M_out_end) = __pend; 
# 566
} 
# 583 "/usr/include/c++/9/streambuf" 3
virtual void imbue(const locale &__loc __attribute((__unused__))) 
# 584
{ } 
# 598 "/usr/include/c++/9/streambuf" 3
virtual basic_streambuf *setbuf(char_type *, streamsize) 
# 599
{ return this; } 
# 609 "/usr/include/c++/9/streambuf" 3
virtual pos_type seekoff(off_type, ios_base::seekdir, ios_base::openmode = (ios_base::in | ios_base::out)) 
# 611
{ return (pos_type)((off_type)(-1)); } 
# 621 "/usr/include/c++/9/streambuf" 3
virtual pos_type seekpos(pos_type, ios_base::openmode = (ios_base::in | ios_base::out)) 
# 623
{ return (pos_type)((off_type)(-1)); } 
# 634 "/usr/include/c++/9/streambuf" 3
virtual int sync() { return 0; } 
# 656 "/usr/include/c++/9/streambuf" 3
virtual streamsize showmanyc() { return 0; } 
# 672 "/usr/include/c++/9/streambuf" 3
virtual streamsize xsgetn(char_type * __s, streamsize __n); 
# 694 "/usr/include/c++/9/streambuf" 3
virtual int_type underflow() 
# 695
{ return traits_type::eof(); } 
# 707 "/usr/include/c++/9/streambuf" 3
virtual int_type uflow() 
# 708
{ 
# 709
int_type __ret = traits_type::eof(); 
# 710
const bool __testeof = traits_type::eq_int_type(underflow(), __ret); 
# 712
if (!__testeof) 
# 713
{ 
# 714
__ret = traits_type::to_int_type(*gptr()); 
# 715
gbump(1); 
# 716
}  
# 717
return __ret; 
# 718
} 
# 731 "/usr/include/c++/9/streambuf" 3
virtual int_type pbackfail(int_type __c __attribute((__unused__)) = traits_type::eof()) 
# 732
{ return traits_type::eof(); } 
# 749 "/usr/include/c++/9/streambuf" 3
virtual streamsize xsputn(const char_type * __s, streamsize __n); 
# 775 "/usr/include/c++/9/streambuf" 3
virtual int_type overflow(int_type __c __attribute((__unused__)) = traits_type::eof()) 
# 776
{ return traits_type::eof(); } 
# 791 "/usr/include/c++/9/streambuf" 3
public: 
# 789
__attribute((__deprecated__("use \'std::basic_streambuf::sbumpc\' instead"))) void 
# 791
stossc() 
# 792
{ 
# 793
if (gptr() < egptr()) { 
# 794
gbump(1); } else { 
# 796
uflow(); }  
# 797
} 
# 802
void __safe_gbump(streamsize __n) { (_M_in_cur) += __n; } 
# 805
void __safe_pbump(streamsize __n) { (_M_out_cur) += __n; } 
# 812
protected: basic_streambuf(const basic_streambuf &); 
# 815
basic_streambuf &operator=(const basic_streambuf &); 
# 819
void swap(basic_streambuf &__sb) 
# 820
{ 
# 821
std::swap(_M_in_beg, __sb._M_in_beg); 
# 822
std::swap(_M_in_cur, __sb._M_in_cur); 
# 823
std::swap(_M_in_end, __sb._M_in_end); 
# 824
std::swap(_M_out_beg, __sb._M_out_beg); 
# 825
std::swap(_M_out_cur, __sb._M_out_cur); 
# 826
std::swap(_M_out_end, __sb._M_out_end); 
# 827
std::swap(_M_buf_locale, __sb._M_buf_locale); 
# 828
} 
# 830
}; 
# 833
template < typename _CharT, typename _Traits >
    std :: basic_streambuf < _CharT, _Traits > ::
    basic_streambuf ( const basic_streambuf & ) = default;
# 837
template < typename _CharT, typename _Traits >
    std :: basic_streambuf < _CharT, _Traits > &
    std :: basic_streambuf < _CharT, _Traits > ::
    operator = ( const basic_streambuf & ) = default;
# 846
template<> streamsize __copy_streambufs_eof(basic_streambuf< char>  * __sbin, basic_streambuf< char>  * __sbout, bool & __ineof); 
# 851
template<> streamsize __copy_streambufs_eof(basic_streambuf< wchar_t>  * __sbin, basic_streambuf< wchar_t>  * __sbout, bool & __ineof); 
# 858
}
# 39 "/usr/include/c++/9/bits/streambuf.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 43
template< class _CharT, class _Traits> streamsize 
# 46
basic_streambuf< _CharT, _Traits> ::xsgetn(char_type *__s, streamsize __n) 
# 47
{ 
# 48
streamsize __ret = (0); 
# 49
while (__ret < __n) 
# 50
{ 
# 51
const streamsize __buf_len = egptr() - gptr(); 
# 52
if (__buf_len) 
# 53
{ 
# 54
const streamsize __remaining = __n - __ret; 
# 55
const streamsize __len = std::min(__buf_len, __remaining); 
# 56
traits_type::copy(__s, gptr(), __len); 
# 57
__ret += __len; 
# 58
__s += __len; 
# 59
__safe_gbump(__len); 
# 60
}  
# 62
if (__ret < __n) 
# 63
{ 
# 64
const int_type __c = uflow(); 
# 65
if (!traits_type::eq_int_type(__c, traits_type::eof())) 
# 66
{ 
# 67
traits_type::assign(*(__s++), traits_type::to_char_type(__c)); 
# 68
++__ret; 
# 69
} else { 
# 71
break; }  
# 72
}  
# 73
}  
# 74
return __ret; 
# 75
} 
# 77
template< class _CharT, class _Traits> streamsize 
# 80
basic_streambuf< _CharT, _Traits> ::xsputn(const char_type *__s, streamsize __n) 
# 81
{ 
# 82
streamsize __ret = (0); 
# 83
while (__ret < __n) 
# 84
{ 
# 85
const streamsize __buf_len = epptr() - pptr(); 
# 86
if (__buf_len) 
# 87
{ 
# 88
const streamsize __remaining = __n - __ret; 
# 89
const streamsize __len = std::min(__buf_len, __remaining); 
# 90
traits_type::copy(pptr(), __s, __len); 
# 91
__ret += __len; 
# 92
__s += __len; 
# 93
__safe_pbump(__len); 
# 94
}  
# 96
if (__ret < __n) 
# 97
{ 
# 98
int_type __c = overflow(traits_type::to_int_type(*__s)); 
# 99
if (!traits_type::eq_int_type(__c, traits_type::eof())) 
# 100
{ 
# 101
++__ret; 
# 102
++__s; 
# 103
} else { 
# 105
break; }  
# 106
}  
# 107
}  
# 108
return __ret; 
# 109
} 
# 114
template< class _CharT, class _Traits> streamsize 
# 116
__copy_streambufs_eof(basic_streambuf< _CharT, _Traits>  *__sbin, basic_streambuf< _CharT, _Traits>  *
# 117
__sbout, bool &
# 118
__ineof) 
# 119
{ 
# 120
streamsize __ret = (0); 
# 121
__ineof = true; 
# 122
typename _Traits::int_type __c = __sbin->sgetc(); 
# 123
while (!_Traits::eq_int_type(__c, _Traits::eof())) 
# 124
{ 
# 125
__c = __sbout->sputc(_Traits::to_char_type(__c)); 
# 126
if (_Traits::eq_int_type(__c, _Traits::eof())) 
# 127
{ 
# 128
__ineof = false; 
# 129
break; 
# 130
}  
# 131
++__ret; 
# 132
__c = __sbin->snextc(); 
# 133
}  
# 134
return __ret; 
# 135
} 
# 137
template< class _CharT, class _Traits> inline streamsize 
# 139
__copy_streambufs(basic_streambuf< _CharT, _Traits>  *__sbin, basic_streambuf< _CharT, _Traits>  *
# 140
__sbout) 
# 141
{ 
# 142
bool __ineof; 
# 143
return __copy_streambufs_eof(__sbin, __sbout, __ineof); 
# 144
} 
# 149
extern template class basic_streambuf< char> ;
# 150
extern template streamsize __copy_streambufs(basic_streambuf< char>  * __sbin, basic_streambuf< char>  * __sbout);
# 154
extern template streamsize __copy_streambufs_eof<> (basic_streambuf< char>  *, basic_streambuf< char>  *, bool &);
# 160
extern template class basic_streambuf< wchar_t> ;
# 161
extern template streamsize __copy_streambufs(basic_streambuf< wchar_t>  * __sbin, basic_streambuf< wchar_t>  * __sbout);
# 165
extern template streamsize __copy_streambufs_eof<> (basic_streambuf< wchar_t>  *, basic_streambuf< wchar_t>  *, bool &);
# 173
}
# 38 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3
typedef unsigned long wctype_t; 
# 57 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3
enum { 
# 58
__ISwupper, 
# 59
__ISwlower, 
# 60
__ISwalpha, 
# 61
__ISwdigit, 
# 62
__ISwxdigit, 
# 63
__ISwspace, 
# 64
__ISwprint, 
# 65
__ISwgraph, 
# 66
__ISwblank, 
# 67
__ISwcntrl, 
# 68
__ISwpunct, 
# 69
__ISwalnum, 
# 71
_ISwupper = ((__ISwupper < 8) ? (int)((1UL << __ISwupper) << 24) : ((__ISwupper < 16) ? (int)((1UL << __ISwupper) << 8) : ((__ISwupper < 24) ? (int)((1UL << __ISwupper) >> 8) : ((int)((1UL << __ISwupper) >> 24))))), 
# 72
_ISwlower = ((__ISwlower < 8) ? (int)((1UL << __ISwlower) << 24) : ((__ISwlower < 16) ? (int)((1UL << __ISwlower) << 8) : ((__ISwlower < 24) ? (int)((1UL << __ISwlower) >> 8) : ((int)((1UL << __ISwlower) >> 24))))), 
# 73
_ISwalpha = ((__ISwalpha < 8) ? (int)((1UL << __ISwalpha) << 24) : ((__ISwalpha < 16) ? (int)((1UL << __ISwalpha) << 8) : ((__ISwalpha < 24) ? (int)((1UL << __ISwalpha) >> 8) : ((int)((1UL << __ISwalpha) >> 24))))), 
# 74
_ISwdigit = ((__ISwdigit < 8) ? (int)((1UL << __ISwdigit) << 24) : ((__ISwdigit < 16) ? (int)((1UL << __ISwdigit) << 8) : ((__ISwdigit < 24) ? (int)((1UL << __ISwdigit) >> 8) : ((int)((1UL << __ISwdigit) >> 24))))), 
# 75
_ISwxdigit = ((__ISwxdigit < 8) ? (int)((1UL << __ISwxdigit) << 24) : ((__ISwxdigit < 16) ? (int)((1UL << __ISwxdigit) << 8) : ((__ISwxdigit < 24) ? (int)((1UL << __ISwxdigit) >> 8) : ((int)((1UL << __ISwxdigit) >> 24))))), 
# 76
_ISwspace = ((__ISwspace < 8) ? (int)((1UL << __ISwspace) << 24) : ((__ISwspace < 16) ? (int)((1UL << __ISwspace) << 8) : ((__ISwspace < 24) ? (int)((1UL << __ISwspace) >> 8) : ((int)((1UL << __ISwspace) >> 24))))), 
# 77
_ISwprint = ((__ISwprint < 8) ? (int)((1UL << __ISwprint) << 24) : ((__ISwprint < 16) ? (int)((1UL << __ISwprint) << 8) : ((__ISwprint < 24) ? (int)((1UL << __ISwprint) >> 8) : ((int)((1UL << __ISwprint) >> 24))))), 
# 78
_ISwgraph = ((__ISwgraph < 8) ? (int)((1UL << __ISwgraph) << 24) : ((__ISwgraph < 16) ? (int)((1UL << __ISwgraph) << 8) : ((__ISwgraph < 24) ? (int)((1UL << __ISwgraph) >> 8) : ((int)((1UL << __ISwgraph) >> 24))))), 
# 79
_ISwblank = ((__ISwblank < 8) ? (int)((1UL << __ISwblank) << 24) : ((__ISwblank < 16) ? (int)((1UL << __ISwblank) << 8) : ((__ISwblank < 24) ? (int)((1UL << __ISwblank) >> 8) : ((int)((1UL << __ISwblank) >> 24))))), 
# 80
_ISwcntrl = ((__ISwcntrl < 8) ? (int)((1UL << __ISwcntrl) << 24) : ((__ISwcntrl < 16) ? (int)((1UL << __ISwcntrl) << 8) : ((__ISwcntrl < 24) ? (int)((1UL << __ISwcntrl) >> 8) : ((int)((1UL << __ISwcntrl) >> 24))))), 
# 81
_ISwpunct = ((__ISwpunct < 8) ? (int)((1UL << __ISwpunct) << 24) : ((__ISwpunct < 16) ? (int)((1UL << __ISwpunct) << 8) : ((__ISwpunct < 24) ? (int)((1UL << __ISwpunct) >> 8) : ((int)((1UL << __ISwpunct) >> 24))))), 
# 82
_ISwalnum = ((__ISwalnum < 8) ? (int)((1UL << __ISwalnum) << 24) : ((__ISwalnum < 16) ? (int)((1UL << __ISwalnum) << 8) : ((__ISwalnum < 24) ? (int)((1UL << __ISwalnum) >> 8) : ((int)((1UL << __ISwalnum) >> 24)))))
# 83
}; 
# 87
extern "C" {
# 95
extern int iswalnum(wint_t __wc) throw(); 
# 101
extern int iswalpha(wint_t __wc) throw(); 
# 104
extern int iswcntrl(wint_t __wc) throw(); 
# 108
extern int iswdigit(wint_t __wc) throw(); 
# 112
extern int iswgraph(wint_t __wc) throw(); 
# 117
extern int iswlower(wint_t __wc) throw(); 
# 120
extern int iswprint(wint_t __wc) throw(); 
# 125
extern int iswpunct(wint_t __wc) throw(); 
# 130
extern int iswspace(wint_t __wc) throw(); 
# 135
extern int iswupper(wint_t __wc) throw(); 
# 140
extern int iswxdigit(wint_t __wc) throw(); 
# 146
extern int iswblank(wint_t __wc) throw(); 
# 155 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3
extern wctype_t wctype(const char * __property) throw(); 
# 159
extern int iswctype(wint_t __wc, wctype_t __desc) throw(); 
# 166
extern wint_t towlower(wint_t __wc) throw(); 
# 169
extern wint_t towupper(wint_t __wc) throw(); 
# 171
}
# 44 "/usr/include/wctype.h" 3
extern "C" {
# 48
typedef const __int32_t *wctrans_t; 
# 52
extern wctrans_t wctrans(const char * __property) throw(); 
# 55
extern wint_t towctrans(wint_t __wc, wctrans_t __desc) throw(); 
# 63
extern int iswalnum_l(wint_t __wc, locale_t __locale) throw(); 
# 69
extern int iswalpha_l(wint_t __wc, locale_t __locale) throw(); 
# 72
extern int iswcntrl_l(wint_t __wc, locale_t __locale) throw(); 
# 76
extern int iswdigit_l(wint_t __wc, locale_t __locale) throw(); 
# 80
extern int iswgraph_l(wint_t __wc, locale_t __locale) throw(); 
# 85
extern int iswlower_l(wint_t __wc, locale_t __locale) throw(); 
# 88
extern int iswprint_l(wint_t __wc, locale_t __locale) throw(); 
# 93
extern int iswpunct_l(wint_t __wc, locale_t __locale) throw(); 
# 98
extern int iswspace_l(wint_t __wc, locale_t __locale) throw(); 
# 103
extern int iswupper_l(wint_t __wc, locale_t __locale) throw(); 
# 108
extern int iswxdigit_l(wint_t __wc, locale_t __locale) throw(); 
# 113
extern int iswblank_l(wint_t __wc, locale_t __locale) throw(); 
# 117
extern wctype_t wctype_l(const char * __property, locale_t __locale) throw(); 
# 122
extern int iswctype_l(wint_t __wc, wctype_t __desc, locale_t __locale) throw(); 
# 130
extern wint_t towlower_l(wint_t __wc, locale_t __locale) throw(); 
# 133
extern wint_t towupper_l(wint_t __wc, locale_t __locale) throw(); 
# 137
extern wctrans_t wctrans_l(const char * __property, locale_t __locale) throw(); 
# 141
extern wint_t towctrans_l(wint_t __wc, wctrans_t __desc, locale_t __locale) throw(); 
# 146
}
# 80 "/usr/include/c++/9/cwctype" 3
namespace std { 
# 82
using ::wctrans_t;
# 83
using ::wctype_t;
# 86
using ::iswalnum;
# 87
using ::iswalpha;
# 89
using ::iswblank;
# 91
using ::iswcntrl;
# 92
using ::iswctype;
# 93
using ::iswdigit;
# 94
using ::iswgraph;
# 95
using ::iswlower;
# 96
using ::iswprint;
# 97
using ::iswpunct;
# 98
using ::iswspace;
# 99
using ::iswupper;
# 100
using ::iswxdigit;
# 101
using ::towctrans;
# 102
using ::towlower;
# 103
using ::towupper;
# 104
using ::wctrans;
# 105
using ::wctype;
# 106
}
# 36 "/usr/include/x86_64-linux-gnu/c++/9/bits/ctype_base.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
struct ctype_base { 
# 44
typedef const int *__to_type; 
# 48
typedef unsigned short mask; 
# 49
static const mask upper = (_ISupper); 
# 50
static const mask lower = (_ISlower); 
# 51
static const mask alpha = (_ISalpha); 
# 52
static const mask digit = (_ISdigit); 
# 53
static const mask xdigit = (_ISxdigit); 
# 54
static const mask space = (_ISspace); 
# 55
static const mask print = (_ISprint); 
# 56
static const mask graph = (((_ISalpha) | (_ISdigit)) | (_ISpunct)); 
# 57
static const mask cntrl = (_IScntrl); 
# 58
static const mask punct = (_ISpunct); 
# 59
static const mask alnum = ((_ISalpha) | (_ISdigit)); 
# 61
static const mask blank = (_ISblank); 
# 63
}; 
# 66
}
# 38 "/usr/include/c++/9/bits/streambuf_iterator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 49 "/usr/include/c++/9/bits/streambuf_iterator.h" 3
template< class _CharT, class _Traits> 
# 50
class istreambuf_iterator : public iterator< input_iterator_tag, _CharT, typename _Traits::off_type, _CharT *, _CharT>  { 
# 64
public: typedef _CharT char_type; 
# 65
typedef _Traits traits_type; 
# 66
typedef typename _Traits::int_type int_type; 
# 67
typedef basic_streambuf< _CharT, _Traits>  streambuf_type; 
# 68
typedef basic_istream< _CharT, _Traits>  istream_type; 
# 71
template< class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, ostreambuf_iterator< _CharT2> > ::__type copy(std::istreambuf_iterator< _CharT2> , std::istreambuf_iterator< _CharT2> , std::ostreambuf_iterator< _CharT2> ); 
# 77
template< bool _IsMove, class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, _CharT2 *> ::__type __copy_move_a2(std::istreambuf_iterator< _CharT2> , std::istreambuf_iterator< _CharT2> , _CharT2 *); 
# 83
template< class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, istreambuf_iterator< _CharT2> > ::__type find(std::istreambuf_iterator< _CharT2> , std::istreambuf_iterator< _CharT2> , const _CharT2 &); 
# 89
template< class _CharT2, class _Distance> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, void> ::__type advance(std::istreambuf_iterator< _CharT2>  &, _Distance); 
# 102
private: mutable streambuf_type *_M_sbuf; 
# 103
int_type _M_c; 
# 107
public: constexpr istreambuf_iterator() noexcept : _M_sbuf((0)), _M_c(traits_type::eof()) 
# 108
{ } 
# 111
istreambuf_iterator(const istreambuf_iterator &) noexcept = default;
# 113
~istreambuf_iterator() = default;
# 117
istreambuf_iterator(istream_type &__s) noexcept : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) 
# 118
{ } 
# 121
istreambuf_iterator(streambuf_type *__s) noexcept : _M_sbuf(__s), _M_c(traits_type::eof()) 
# 122
{ } 
# 126
istreambuf_iterator &operator=(const istreambuf_iterator &) noexcept = default;
# 133
char_type operator*() const 
# 134
{ 
# 135
int_type __c = _M_get(); 
# 144 "/usr/include/c++/9/bits/streambuf_iterator.h" 3
return traits_type::to_char_type(__c); 
# 145
} 
# 149
istreambuf_iterator &operator++() 
# 150
{ 
# 154
; 
# 156
(_M_sbuf)->sbumpc(); 
# 157
(_M_c) = traits_type::eof(); 
# 158
return *this; 
# 159
} 
# 163
istreambuf_iterator operator++(int) 
# 164
{ 
# 168
; 
# 170
istreambuf_iterator __old = *this; 
# 171
(__old._M_c) = (_M_sbuf)->sbumpc(); 
# 172
(_M_c) = traits_type::eof(); 
# 173
return __old; 
# 174
} 
# 181
bool equal(const istreambuf_iterator &__b) const 
# 182
{ return _M_at_eof() == __b._M_at_eof(); } 
# 186
private: int_type _M_get() const 
# 187
{ 
# 188
int_type __ret = _M_c; 
# 189
if ((_M_sbuf) && (_S_is_eof)(__ret) && (_S_is_eof)(__ret = (_M_sbuf)->sgetc())) { 
# 190
(_M_sbuf) = 0; }  
# 191
return __ret; 
# 192
} 
# 195
bool _M_at_eof() const 
# 196
{ return (_S_is_eof)(_M_get()); } 
# 199
static bool _S_is_eof(int_type __c) 
# 200
{ 
# 201
const int_type __eof = traits_type::eof(); 
# 202
return traits_type::eq_int_type(__c, __eof); 
# 203
} 
# 204
}; 
# 206
template< class _CharT, class _Traits> inline bool 
# 208
operator==(const istreambuf_iterator< _CharT, _Traits>  &__a, const istreambuf_iterator< _CharT, _Traits>  &
# 209
__b) 
# 210
{ return __a.equal(__b); } 
# 212
template< class _CharT, class _Traits> inline bool 
# 214
operator!=(const istreambuf_iterator< _CharT, _Traits>  &__a, const istreambuf_iterator< _CharT, _Traits>  &
# 215
__b) 
# 216
{ return !__a.equal(__b); } 
# 219
template< class _CharT, class _Traits> 
# 220
class ostreambuf_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 227
public: typedef _CharT char_type; 
# 228
typedef _Traits traits_type; 
# 229
typedef basic_streambuf< _CharT, _Traits>  streambuf_type; 
# 230
typedef basic_ostream< _CharT, _Traits>  ostream_type; 
# 233
template< class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, ostreambuf_iterator< _CharT2> > ::__type copy(std::istreambuf_iterator< _CharT2> , std::istreambuf_iterator< _CharT2> , std::ostreambuf_iterator< _CharT2> ); 
# 240
private: streambuf_type *_M_sbuf; 
# 241
bool _M_failed; 
# 245
public: ostreambuf_iterator(ostream_type &__s) noexcept : _M_sbuf(__s.rdbuf()), _M_failed((!(_M_sbuf))) 
# 246
{ } 
# 249
ostreambuf_iterator(streambuf_type *__s) noexcept : _M_sbuf(__s), _M_failed((!(_M_sbuf))) 
# 250
{ } 
# 254
ostreambuf_iterator &operator=(_CharT __c) 
# 255
{ 
# 256
if ((!(_M_failed)) && _Traits::eq_int_type((_M_sbuf)->sputc(__c), _Traits::eof())) { 
# 258
(_M_failed) = true; }  
# 259
return *this; 
# 260
} 
# 264
ostreambuf_iterator &operator*() 
# 265
{ return *this; } 
# 269
ostreambuf_iterator &operator++(int) 
# 270
{ return *this; } 
# 274
ostreambuf_iterator &operator++() 
# 275
{ return *this; } 
# 279
bool failed() const noexcept 
# 280
{ return _M_failed; } 
# 283
ostreambuf_iterator &_M_put(const _CharT *__ws, streamsize __len) 
# 284
{ 
# 285
if ((__builtin_expect(!(_M_failed), true)) && (__builtin_expect((this->_M_sbuf)->sputn(__ws, __len) != __len, false))) { 
# 288
(_M_failed) = true; }  
# 289
return *this; 
# 290
} 
# 291
}; 
# 294
template< class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT> > ::__type 
# 297
copy(istreambuf_iterator< _CharT>  __first, istreambuf_iterator< _CharT>  
# 298
__last, ostreambuf_iterator< _CharT>  
# 299
__result) 
# 300
{ 
# 301
if ((__first._M_sbuf) && (!(__last._M_sbuf)) && (!(__result._M_failed))) 
# 302
{ 
# 303
bool __ineof; 
# 304
__copy_streambufs_eof((__first._M_sbuf), (__result._M_sbuf), __ineof); 
# 305
if (!__ineof) { 
# 306
(__result._M_failed) = true; }  
# 307
}  
# 308
return __result; 
# 309
} 
# 311
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT> > ::__type 
# 314
__copy_move_a2(_CharT *__first, _CharT *__last, ostreambuf_iterator< _CharT>  
# 315
__result) 
# 316
{ 
# 317
const streamsize __num = __last - __first; 
# 318
if (__num > (0)) { 
# 319
__result._M_put(__first, __num); }  
# 320
return __result; 
# 321
} 
# 323
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT> > ::__type 
# 326
__copy_move_a2(const _CharT *__first, const _CharT *__last, ostreambuf_iterator< _CharT>  
# 327
__result) 
# 328
{ 
# 329
const streamsize __num = __last - __first; 
# 330
if (__num > (0)) { 
# 331
__result._M_put(__first, __num); }  
# 332
return __result; 
# 333
} 
# 335
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _CharT *> ::__type 
# 338
__copy_move_a2(istreambuf_iterator< _CharT>  __first, istreambuf_iterator< _CharT>  
# 339
__last, _CharT *__result) 
# 340
{ 
# 341
typedef istreambuf_iterator< _CharT>  __is_iterator_type; 
# 342
typedef typename istreambuf_iterator< _CharT> ::traits_type traits_type; 
# 343
typedef typename istreambuf_iterator< _CharT> ::streambuf_type streambuf_type; 
# 344
typedef typename istreambuf_iterator< _CharT> ::traits_type::int_type int_type; 
# 346
if ((__first._M_sbuf) && (!(__last._M_sbuf))) 
# 347
{ 
# 348
streambuf_type *__sb = ((__first._M_sbuf)); 
# 349
int_type __c = __sb->sgetc(); 
# 350
while (!traits_type::eq_int_type(__c, traits_type::eof())) 
# 351
{ 
# 352
const streamsize __n = __sb->egptr() - __sb->gptr(); 
# 353
if (__n > (1)) 
# 354
{ 
# 355
traits_type::copy(__result, __sb->gptr(), __n); 
# 356
__sb->__safe_gbump(__n); 
# 357
__result += __n; 
# 358
__c = __sb->underflow(); 
# 359
} else 
# 361
{ 
# 362
(*(__result++)) = traits_type::to_char_type(__c); 
# 363
__c = __sb->snextc(); 
# 364
}  
# 365
}  
# 366
}  
# 367
return __result; 
# 368
} 
# 370
template< class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, istreambuf_iterator< _CharT> > ::__type 
# 373
find(istreambuf_iterator< _CharT>  __first, istreambuf_iterator< _CharT>  
# 374
__last, const _CharT &__val) 
# 375
{ 
# 376
typedef istreambuf_iterator< _CharT>  __is_iterator_type; 
# 377
typedef typename istreambuf_iterator< _CharT> ::traits_type traits_type; 
# 378
typedef typename istreambuf_iterator< _CharT> ::streambuf_type streambuf_type; 
# 379
typedef typename istreambuf_iterator< _CharT> ::traits_type::int_type int_type; 
# 380
const int_type __eof = traits_type::eof(); 
# 382
if ((__first._M_sbuf) && (!(__last._M_sbuf))) 
# 383
{ 
# 384
const int_type __ival = traits_type::to_int_type(__val); 
# 385
streambuf_type *__sb = ((__first._M_sbuf)); 
# 386
int_type __c = __sb->sgetc(); 
# 387
while ((!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __ival))) 
# 389
{ 
# 390
streamsize __n = __sb->egptr() - __sb->gptr(); 
# 391
if (__n > (1)) 
# 392
{ 
# 393
const _CharT *__p = traits_type::find(__sb->gptr(), __n, __val); 
# 395
if (__p) { 
# 396
__n = (__p - __sb->gptr()); }  
# 397
__sb->__safe_gbump(__n); 
# 398
__c = __sb->sgetc(); 
# 399
} else { 
# 401
__c = __sb->snextc(); }  
# 402
}  
# 404
(__first._M_c) = __eof; 
# 405
}  
# 407
return __first; 
# 408
} 
# 410
template< class _CharT, class _Distance> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, void> ::__type 
# 413
advance(istreambuf_iterator< _CharT>  &__i, _Distance __n) 
# 414
{ 
# 415
if (__n == 0) { 
# 416
return; }  
# 418
; 
# 421
; 
# 423
typedef istreambuf_iterator< _CharT>  __is_iterator_type; 
# 424
typedef typename istreambuf_iterator< _CharT> ::traits_type traits_type; 
# 425
typedef typename istreambuf_iterator< _CharT> ::streambuf_type streambuf_type; 
# 426
typedef typename istreambuf_iterator< _CharT> ::traits_type::int_type int_type; 
# 427
const int_type __eof = traits_type::eof(); 
# 429
streambuf_type *__sb = ((__i._M_sbuf)); 
# 430
while (__n > 0) 
# 431
{ 
# 432
streamsize __size = __sb->egptr() - __sb->gptr(); 
# 433
if (__size > __n) 
# 434
{ 
# 435
__sb->__safe_gbump(__n); 
# 436
break; 
# 437
}  
# 439
__sb->__safe_gbump(__size); 
# 440
__n -= __size; 
# 441
if (traits_type::eq_int_type(__sb->underflow(), __eof)) 
# 442
{ 
# 445
; 
# 446
break; 
# 447
}  
# 448
}  
# 450
(__i._M_c) = __eof; 
# 451
} 
# 456
}
# 50 "/usr/include/c++/9/bits/locale_facets.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 71 "/usr/include/c++/9/bits/locale_facets.h" 3
template< class _Tp> void __convert_to_v(const char *, _Tp &, ios_base::iostate &, const __c_locale &) throw(); 
# 79
template<> void __convert_to_v(const char *, float &, ios_base::iostate &, const __c_locale &) throw(); 
# 84
template<> void __convert_to_v(const char *, double &, ios_base::iostate &, const __c_locale &) throw(); 
# 89
template<> void __convert_to_v(const char *, long double &, ios_base::iostate &, const __c_locale &) throw(); 
# 94
template< class _CharT, class _Traits> 
# 95
struct __pad { 
# 98
static void _S_pad(ios_base & __io, _CharT __fill, _CharT * __news, const _CharT * __olds, streamsize __newlen, streamsize __oldlen); 
# 100
}; 
# 107
template< class _CharT> _CharT *__add_grouping(_CharT * __s, _CharT __sep, const char * __gbeg, size_t __gsize, const _CharT * __first, const _CharT * __last); 
# 116
template< class _CharT> inline ostreambuf_iterator< _CharT>  
# 119
__write(ostreambuf_iterator< _CharT>  __s, const _CharT *__ws, int __len) 
# 120
{ 
# 121
__s._M_put(__ws, __len); 
# 122
return __s; 
# 123
} 
# 126
template< class _CharT, class _OutIter> inline _OutIter 
# 129
__write(_OutIter __s, const _CharT *__ws, int __len) 
# 130
{ 
# 131
for (int __j = 0; __j < __len; (__j++), (++__s)) { 
# 132
(*__s) = (__ws[__j]); }  
# 133
return __s; 
# 134
} 
# 149 "/usr/include/c++/9/bits/locale_facets.h" 3
template< class _CharT> 
# 150
class __ctype_abstract_base : public locale::facet, public ctype_base { 
# 155
public: typedef _CharT char_type; 
# 169 "/usr/include/c++/9/bits/locale_facets.h" 3
bool is(mask __m, char_type __c) const 
# 170
{ return this->do_is(__m, __c); } 
# 186 "/usr/include/c++/9/bits/locale_facets.h" 3
const char_type *is(const char_type *__lo, const char_type *__hi, mask *__vec) const 
# 187
{ return this->do_is(__lo, __hi, __vec); } 
# 202 "/usr/include/c++/9/bits/locale_facets.h" 3
const char_type *scan_is(mask __m, const char_type *__lo, const char_type *__hi) const 
# 203
{ return do_scan_is(__m, __lo, __hi); } 
# 218 "/usr/include/c++/9/bits/locale_facets.h" 3
const char_type *scan_not(mask __m, const char_type *__lo, const char_type *__hi) const 
# 219
{ return do_scan_not(__m, __lo, __hi); } 
# 232 "/usr/include/c++/9/bits/locale_facets.h" 3
char_type toupper(char_type __c) const 
# 233
{ return this->do_toupper(__c); } 
# 247 "/usr/include/c++/9/bits/locale_facets.h" 3
const char_type *toupper(char_type *__lo, const char_type *__hi) const 
# 248
{ return this->do_toupper(__lo, __hi); } 
# 261 "/usr/include/c++/9/bits/locale_facets.h" 3
char_type tolower(char_type __c) const 
# 262
{ return this->do_tolower(__c); } 
# 276 "/usr/include/c++/9/bits/locale_facets.h" 3
const char_type *tolower(char_type *__lo, const char_type *__hi) const 
# 277
{ return this->do_tolower(__lo, __hi); } 
# 293 "/usr/include/c++/9/bits/locale_facets.h" 3
char_type widen(char __c) const 
# 294
{ return this->do_widen(__c); } 
# 312 "/usr/include/c++/9/bits/locale_facets.h" 3
const char *widen(const char *__lo, const char *__hi, char_type *__to) const 
# 313
{ return this->do_widen(__lo, __hi, __to); } 
# 331 "/usr/include/c++/9/bits/locale_facets.h" 3
char narrow(char_type __c, char __dfault) const 
# 332
{ return this->do_narrow(__c, __dfault); } 
# 353 "/usr/include/c++/9/bits/locale_facets.h" 3
const char_type *narrow(const char_type *__lo, const char_type *__hi, char 
# 354
__dfault, char *__to) const 
# 355
{ return this->do_narrow(__lo, __hi, __dfault, __to); } 
# 359
protected: explicit __ctype_abstract_base(size_t __refs = 0) : locale::facet(__refs) { } 
# 362
virtual ~__ctype_abstract_base() { } 
# 378 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual bool do_is(mask __m, char_type __c) const = 0; 
# 397 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual const char_type *do_is(const char_type * __lo, const char_type * __hi, mask * __vec) const = 0; 
# 416 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual const char_type *do_scan_is(mask __m, const char_type * __lo, const char_type * __hi) const = 0; 
# 435 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual const char_type *do_scan_not(mask __m, const char_type * __lo, const char_type * __hi) const = 0; 
# 453 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type __c) const = 0; 
# 470 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type * __lo, const char_type * __hi) const = 0; 
# 486 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type __c) const = 0; 
# 503 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type * __lo, const char_type * __hi) const = 0; 
# 522 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual char_type do_widen(char __c) const = 0; 
# 543 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual const char *do_widen(const char * __lo, const char * __hi, char_type * __to) const = 0; 
# 564 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual char do_narrow(char_type __c, char __dfault) const = 0; 
# 589 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type * __lo, const char_type * __hi, char __dfault, char * __to) const = 0; 
# 591
}; 
# 611 "/usr/include/c++/9/bits/locale_facets.h" 3
template< class _CharT> 
# 612
class ctype : public __ctype_abstract_base< _CharT>  { 
# 616
public: typedef _CharT char_type; 
# 617
typedef typename __ctype_abstract_base< _CharT> ::mask mask; 
# 620
static std::locale::id id; 
# 623
explicit ctype(std::size_t __refs = 0) : __ctype_abstract_base< _CharT> (__refs) { } 
# 627
protected: virtual ~ctype(); 
# 630
virtual bool do_is(mask __m, char_type __c) const; 
# 633
virtual const char_type *do_is(const char_type * __lo, const char_type * __hi, mask * __vec) const; 
# 636
virtual const char_type *do_scan_is(mask __m, const char_type * __lo, const char_type * __hi) const; 
# 639
virtual const char_type *do_scan_not(mask __m, const char_type * __lo, const char_type * __hi) const; 
# 643
virtual char_type do_toupper(char_type __c) const; 
# 646
virtual const char_type *do_toupper(char_type * __lo, const char_type * __hi) const; 
# 649
virtual char_type do_tolower(char_type __c) const; 
# 652
virtual const char_type *do_tolower(char_type * __lo, const char_type * __hi) const; 
# 655
virtual char_type do_widen(char __c) const; 
# 658
virtual const char *do_widen(const char * __lo, const char * __hi, char_type * __dest) const; 
# 661
virtual char do_narrow(char_type, char __dfault) const; 
# 664
virtual const char_type *do_narrow(const char_type * __lo, const char_type * __hi, char __dfault, char * __to) const; 
# 666
}; 
# 668
template< class _CharT> locale::id 
# 669
ctype< _CharT> ::id; 
# 681 "/usr/include/c++/9/bits/locale_facets.h" 3
template<> class ctype< char>  : public locale::facet, public ctype_base { 
# 686
public: typedef char char_type; 
# 690
protected: __c_locale _M_c_locale_ctype; 
# 691
bool _M_del; 
# 692
__to_type _M_toupper; 
# 693
__to_type _M_tolower; 
# 694
const mask *_M_table; 
# 695
mutable char _M_widen_ok; 
# 696
mutable char _M_widen[1 + (static_cast< unsigned char>(-1))]; 
# 697
mutable char _M_narrow[1 + (static_cast< unsigned char>(-1))]; 
# 698
mutable char _M_narrow_ok; 
# 703
public: static locale::id id; 
# 705
static const size_t table_size = (1 + (static_cast< unsigned char>(-1))); 
# 718 "/usr/include/c++/9/bits/locale_facets.h" 3
explicit ctype(const mask * __table = 0, bool __del = false, size_t __refs = 0); 
# 731 "/usr/include/c++/9/bits/locale_facets.h" 3
explicit ctype(__c_locale __cloc, const mask * __table = 0, bool __del = false, size_t __refs = 0); 
# 744 "/usr/include/c++/9/bits/locale_facets.h" 3
inline bool is(mask __m, char __c) const; 
# 759 "/usr/include/c++/9/bits/locale_facets.h" 3
inline const char *is(const char * __lo, const char * __hi, mask * __vec) const; 
# 773 "/usr/include/c++/9/bits/locale_facets.h" 3
inline const char *scan_is(mask __m, const char * __lo, const char * __hi) const; 
# 787 "/usr/include/c++/9/bits/locale_facets.h" 3
inline const char *scan_not(mask __m, const char * __lo, const char * __hi) const; 
# 802 "/usr/include/c++/9/bits/locale_facets.h" 3
char_type toupper(char_type __c) const 
# 803
{ return this->do_toupper(__c); } 
# 819 "/usr/include/c++/9/bits/locale_facets.h" 3
const char_type *toupper(char_type *__lo, const char_type *__hi) const 
# 820
{ return this->do_toupper(__lo, __hi); } 
# 835 "/usr/include/c++/9/bits/locale_facets.h" 3
char_type tolower(char_type __c) const 
# 836
{ return this->do_tolower(__c); } 
# 852 "/usr/include/c++/9/bits/locale_facets.h" 3
const char_type *tolower(char_type *__lo, const char_type *__hi) const 
# 853
{ return this->do_tolower(__lo, __hi); } 
# 872 "/usr/include/c++/9/bits/locale_facets.h" 3
char_type widen(char __c) const 
# 873
{ 
# 874
if (_M_widen_ok) { 
# 875
return (_M_widen)[static_cast< unsigned char>(__c)]; }  
# 876
this->_M_widen_init(); 
# 877
return this->do_widen(__c); 
# 878
} 
# 899 "/usr/include/c++/9/bits/locale_facets.h" 3
const char *widen(const char *__lo, const char *__hi, char_type *__to) const 
# 900
{ 
# 901
if ((_M_widen_ok) == 1) 
# 902
{ 
# 903
if (__builtin_expect(__hi != __lo, true)) { 
# 904
__builtin_memcpy(__to, __lo, __hi - __lo); }  
# 905
return __hi; 
# 906
}  
# 907
if (!(_M_widen_ok)) { 
# 908
this->_M_widen_init(); }  
# 909
return this->do_widen(__lo, __hi, __to); 
# 910
} 
# 931 "/usr/include/c++/9/bits/locale_facets.h" 3
char narrow(char_type __c, char __dfault) const 
# 932
{ 
# 933
if ((_M_narrow)[static_cast< unsigned char>(__c)]) { 
# 934
return (_M_narrow)[static_cast< unsigned char>(__c)]; }  
# 935
const char __t = this->do_narrow(__c, __dfault); 
# 936
if (__t != __dfault) { 
# 937
((_M_narrow)[static_cast< unsigned char>(__c)]) = __t; }  
# 938
return __t; 
# 939
} 
# 964 "/usr/include/c++/9/bits/locale_facets.h" 3
const char_type *narrow(const char_type *__lo, const char_type *__hi, char 
# 965
__dfault, char *__to) const 
# 966
{ 
# 967
if (__builtin_expect((_M_narrow_ok) == 1, true)) 
# 968
{ 
# 969
if (__builtin_expect(__hi != __lo, true)) { 
# 970
__builtin_memcpy(__to, __lo, __hi - __lo); }  
# 971
return __hi; 
# 972
}  
# 973
if (!(_M_narrow_ok)) { 
# 974
this->_M_narrow_init(); }  
# 975
return this->do_narrow(__lo, __hi, __dfault, __to); 
# 976
} 
# 983
const mask *table() const throw() 
# 984
{ return _M_table; } 
# 988
static const mask *classic_table() throw(); 
# 998
protected: virtual ~ctype(); 
# 1014 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type __c) const; 
# 1031 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type * __lo, const char_type * __hi) const; 
# 1047 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type __c) const; 
# 1064 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type * __lo, const char_type * __hi) const; 
# 1084 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual char_type do_widen(char __c) const 
# 1085
{ return __c; } 
# 1107 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual const char *do_widen(const char *__lo, const char *__hi, char_type *__to) const 
# 1108
{ 
# 1109
if (__builtin_expect(__hi != __lo, true)) { 
# 1110
__builtin_memcpy(__to, __lo, __hi - __lo); }  
# 1111
return __hi; 
# 1112
} 
# 1134 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual char do_narrow(char_type __c, char __dfault __attribute((__unused__))) const 
# 1135
{ return __c; } 
# 1160 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type *__lo, const char_type *__hi, char 
# 1161
__dfault __attribute((__unused__)), char *__to) const 
# 1162
{ 
# 1163
if (__builtin_expect(__hi != __lo, true)) { 
# 1164
__builtin_memcpy(__to, __lo, __hi - __lo); }  
# 1165
return __hi; 
# 1166
} 
# 1169
private: void _M_narrow_init() const; 
# 1170
void _M_widen_init() const; 
# 1171
}; 
# 1186 "/usr/include/c++/9/bits/locale_facets.h" 3
template<> class ctype< wchar_t>  : public __ctype_abstract_base< wchar_t>  { 
# 1191
public: typedef wchar_t char_type; 
# 1192
typedef wctype_t __wmask_type; 
# 1195
protected: __c_locale _M_c_locale_ctype; 
# 1198
bool _M_narrow_ok; 
# 1199
char _M_narrow[128]; 
# 1200
wint_t _M_widen[1 + (static_cast< unsigned char>(-1))]; 
# 1203
mask _M_bit[16]; 
# 1204
__wmask_type _M_wmask[16]; 
# 1209
public: static locale::id id; 
# 1219 "/usr/include/c++/9/bits/locale_facets.h" 3
explicit ctype(size_t __refs = 0); 
# 1230 "/usr/include/c++/9/bits/locale_facets.h" 3
explicit ctype(__c_locale __cloc, size_t __refs = 0); 
# 1234
protected: __wmask_type _M_convert_to_wmask(const mask __m) const throw(); 
# 1238
virtual ~ctype(); 
# 1254 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual bool do_is(mask __m, char_type __c) const; 
# 1273 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual const char_type *do_is(const char_type * __lo, const char_type * __hi, mask * __vec) const; 
# 1291 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual const char_type *do_scan_is(mask __m, const char_type * __lo, const char_type * __hi) const; 
# 1309 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual const char_type *do_scan_not(mask __m, const char_type * __lo, const char_type * __hi) const; 
# 1326 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type __c) const; 
# 1343 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type * __lo, const char_type * __hi) const; 
# 1359 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type __c) const; 
# 1376 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type * __lo, const char_type * __hi) const; 
# 1396 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual char_type do_widen(char __c) const; 
# 1418 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual const char *do_widen(const char * __lo, const char * __hi, char_type * __to) const; 
# 1441 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual char do_narrow(char_type __c, char __dfault) const; 
# 1467 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type * __lo, const char_type * __hi, char __dfault, char * __to) const; 
# 1472
void _M_initialize_ctype() throw(); 
# 1473
}; 
# 1477
template< class _CharT> 
# 1478
class ctype_byname : public ctype< _CharT>  { 
# 1481
public: typedef typename ctype< _CharT> ::mask mask; 
# 1484
explicit ctype_byname(const char * __s, std::size_t __refs = 0); 
# 1488
explicit ctype_byname(const std::string &__s, std::size_t __refs = 0) : ctype_byname(__s.c_str(), __refs) 
# 1489
{ } 
# 1494
protected: virtual ~ctype_byname() { } 
# 1495
}; 
# 1499
template<> class ctype_byname< char>  : public ctype< char>  { 
# 1503
public: explicit ctype_byname(const char * __s, size_t __refs = 0); 
# 1507
explicit ctype_byname(const string & __s, size_t __refs = 0); 
# 1512
protected: virtual ~ctype_byname(); 
# 1513
}; 
# 1517
template<> class ctype_byname< wchar_t>  : public ctype< wchar_t>  { 
# 1521
public: explicit ctype_byname(const char * __s, size_t __refs = 0); 
# 1525
explicit ctype_byname(const string & __s, size_t __refs = 0); 
# 1530
protected: virtual ~ctype_byname(); 
# 1531
}; 
# 1535
}
# 37 "/usr/include/x86_64-linux-gnu/c++/9/bits/ctype_inline.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 43
inline bool ctype< char> ::is(mask __m, char __c) const 
# 44
{ return ((_M_table)[static_cast< unsigned char>(__c)]) & __m; } 
# 48
inline const char *ctype< char> ::is(const char *__low, const char *__high, mask *__vec) const 
# 49
{ 
# 50
while (__low < __high) { 
# 51
(*(__vec++)) = ((_M_table)[static_cast< unsigned char>(*(__low++))]); }  
# 52
return __high; 
# 53
} 
# 57
inline const char *ctype< char> ::scan_is(mask __m, const char *__low, const char *__high) const 
# 58
{ 
# 59
while ((__low < __high) && (!(((_M_table)[static_cast< unsigned char>(*__low)]) & __m))) { 
# 61
++__low; }  
# 62
return __low; 
# 63
} 
# 67
inline const char *ctype< char> ::scan_not(mask __m, const char *__low, const char *__high) const 
# 68
{ 
# 69
while ((__low < __high) && ((((_M_table)[static_cast< unsigned char>(*__low)]) & __m) != 0)) { 
# 71
++__low; }  
# 72
return __low; 
# 73
} 
# 76
}
# 1540 "/usr/include/c++/9/bits/locale_facets.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 1545
class __num_base { 
# 1551
public: enum { 
# 1552
_S_ominus, 
# 1553
_S_oplus, 
# 1554
_S_ox, 
# 1555
_S_oX, 
# 1556
_S_odigits, 
# 1557
_S_odigits_end = (_S_odigits + 16), 
# 1558
_S_oudigits = _S_odigits_end, 
# 1559
_S_oudigits_end = (_S_oudigits + 16), 
# 1560
_S_oe = (_S_odigits + 14), 
# 1561
_S_oE = (_S_oudigits + 14), 
# 1562
_S_oend = _S_oudigits_end
# 1563
}; 
# 1570
static const char *_S_atoms_out; 
# 1574
static const char *_S_atoms_in; 
# 1577
enum { 
# 1578
_S_iminus, 
# 1579
_S_iplus, 
# 1580
_S_ix, 
# 1581
_S_iX, 
# 1582
_S_izero, 
# 1583
_S_ie = (_S_izero + 14), 
# 1584
_S_iE = (_S_izero + 20), 
# 1585
_S_iend = 26
# 1586
}; 
# 1591
static void _S_format_float(const ios_base & __io, char * __fptr, char __mod) throw(); 
# 1592
}; 
# 1594
template< class _CharT> 
# 1595
struct __numpunct_cache : public locale::facet { 
# 1597
const char *_M_grouping; 
# 1598
size_t _M_grouping_size; 
# 1599
bool _M_use_grouping; 
# 1600
const _CharT *_M_truename; 
# 1601
size_t _M_truename_size; 
# 1602
const _CharT *_M_falsename; 
# 1603
size_t _M_falsename_size; 
# 1604
_CharT _M_decimal_point; 
# 1605
_CharT _M_thousands_sep; 
# 1611
_CharT _M_atoms_out[__num_base::_S_oend]; 
# 1617
_CharT _M_atoms_in[__num_base::_S_iend]; 
# 1619
bool _M_allocated; 
# 1621
__numpunct_cache(size_t __refs = 0) : locale::facet(__refs), _M_grouping((0)), _M_grouping_size((0)), _M_use_grouping(false), _M_truename((0)), _M_truename_size((0)), _M_falsename((0)), _M_falsename_size((0)), _M_decimal_point(_CharT()), _M_thousands_sep(_CharT()), _M_allocated(false) 
# 1627
{ } 
# 1629
virtual ~__numpunct_cache(); 
# 1632
void _M_cache(const locale & __loc); 
# 1636
private: __numpunct_cache &operator=(const __numpunct_cache &); 
# 1639
explicit __numpunct_cache(const __numpunct_cache &); 
# 1640
}; 
# 1642
template< class _CharT> 
# 1643
__numpunct_cache< _CharT> ::~__numpunct_cache() 
# 1644
{ 
# 1645
if (_M_allocated) 
# 1646
{ 
# 1647
delete [] (_M_grouping); 
# 1648
delete [] (_M_truename); 
# 1649
delete [] (_M_falsename); 
# 1650
}  
# 1651
} 
# 1653
inline namespace __cxx11 { 
# 1669 "/usr/include/c++/9/bits/locale_facets.h" 3
template< class _CharT> 
# 1670
class numpunct : public locale::facet { 
# 1676
public: typedef _CharT char_type; 
# 1677
typedef basic_string< _CharT>  string_type; 
# 1679
typedef __numpunct_cache< _CharT>  __cache_type; 
# 1682
protected: __cache_type *_M_data; 
# 1686
public: static locale::id id; 
# 1694
explicit numpunct(size_t __refs = 0) : locale::facet(__refs), _M_data((0)) 
# 1696
{ _M_initialize_numpunct(); } 
# 1708 "/usr/include/c++/9/bits/locale_facets.h" 3
explicit numpunct(__cache_type *__cache, size_t __refs = 0) : locale::facet(__refs), _M_data(__cache) 
# 1710
{ _M_initialize_numpunct(); } 
# 1722 "/usr/include/c++/9/bits/locale_facets.h" 3
explicit numpunct(__c_locale __cloc, size_t __refs = 0) : locale::facet(__refs), _M_data((0)) 
# 1724
{ _M_initialize_numpunct(__cloc); } 
# 1736 "/usr/include/c++/9/bits/locale_facets.h" 3
char_type decimal_point() const 
# 1737
{ return do_decimal_point(); } 
# 1749 "/usr/include/c++/9/bits/locale_facets.h" 3
char_type thousands_sep() const 
# 1750
{ return do_thousands_sep(); } 
# 1780 "/usr/include/c++/9/bits/locale_facets.h" 3
string grouping() const 
# 1781
{ return do_grouping(); } 
# 1793 "/usr/include/c++/9/bits/locale_facets.h" 3
string_type truename() const 
# 1794
{ return do_truename(); } 
# 1806 "/usr/include/c++/9/bits/locale_facets.h" 3
string_type falsename() const 
# 1807
{ return do_falsename(); } 
# 1812
protected: virtual ~numpunct(); 
# 1823 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual char_type do_decimal_point() const 
# 1824
{ return (_M_data)->_M_decimal_point; } 
# 1835 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual char_type do_thousands_sep() const 
# 1836
{ return (_M_data)->_M_thousands_sep; } 
# 1848 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual string do_grouping() const 
# 1849
{ return (_M_data)->_M_grouping; } 
# 1861 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual string_type do_truename() const 
# 1862
{ return (_M_data)->_M_truename; } 
# 1874 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual string_type do_falsename() const 
# 1875
{ return (_M_data)->_M_falsename; } 
# 1879
void _M_initialize_numpunct(__c_locale __cloc = 0); 
# 1880
}; 
# 1882
template< class _CharT> locale::id 
# 1883
numpunct< _CharT> ::id; 
# 1886
template<> numpunct< char> ::~numpunct(); 
# 1890
template<> void numpunct< char> ::_M_initialize_numpunct(__c_locale __cloc); 
# 1894
template<> numpunct< wchar_t> ::~numpunct(); 
# 1898
template<> void numpunct< wchar_t> ::_M_initialize_numpunct(__c_locale __cloc); 
# 1902
template< class _CharT> 
# 1903
class numpunct_byname : public numpunct< _CharT>  { 
# 1906
public: typedef _CharT char_type; 
# 1907
typedef basic_string< _CharT>  string_type; 
# 1910
explicit numpunct_byname(const char *__s, std::size_t __refs = 0) : numpunct< _CharT> (__refs) 
# 1912
{ 
# 1913
if ((__builtin_strcmp(__s, "C") != 0) && (__builtin_strcmp(__s, "POSIX") != 0)) 
# 1915
{ 
# 1916
std::__c_locale __tmp; 
# 1917
this->_S_create_c_locale(__tmp, __s); 
# 1918
this->_M_initialize_numpunct(__tmp); 
# 1919
this->_S_destroy_c_locale(__tmp); 
# 1920
}  
# 1921
} 
# 1925
explicit numpunct_byname(const std::string &__s, std::size_t __refs = 0) : numpunct_byname(__s.c_str(), __refs) 
# 1926
{ } 
# 1931
protected: virtual ~numpunct_byname() { } 
# 1932
}; 
# 1934
}
# 1951 "/usr/include/c++/9/bits/locale_facets.h" 3
template< class _CharT, class _InIter> 
# 1952
class num_get : public locale::facet { 
# 1958
public: typedef _CharT char_type; 
# 1959
typedef _InIter iter_type; 
# 1963
static locale::id id; 
# 1973 "/usr/include/c++/9/bits/locale_facets.h" 3
explicit num_get(size_t __refs = 0) : locale::facet(__refs) { } 
# 1999 "/usr/include/c++/9/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2000
__err, bool &__v) const 
# 2001
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2036 "/usr/include/c++/9/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2037
__err, long &__v) const 
# 2038
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2041
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2042
__err, unsigned short &__v) const 
# 2043
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2046
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2047
__err, unsigned &__v) const 
# 2048
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2051
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2052
__err, unsigned long &__v) const 
# 2053
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2057
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2058
__err, long long &__v) const 
# 2059
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2062
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2063
__err, unsigned long long &__v) const 
# 2064
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2096 "/usr/include/c++/9/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2097
__err, float &__v) const 
# 2098
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2101
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2102
__err, double &__v) const 
# 2103
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2106
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2107
__err, long double &__v) const 
# 2108
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2139 "/usr/include/c++/9/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2140
__err, void *&__v) const 
# 2141
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2145
protected: virtual ~num_get() { } 
# 2147
__attribute((__abi_tag__("cxx11"))) iter_type 
# 2149
_M_extract_float(iter_type, iter_type, ios_base &, ios_base::iostate &, string &) const; 
# 2152
template< class _ValueT> 
# 2153
__attribute((__abi_tag__("cxx11"))) iter_type 
# 2152
_M_extract_int(iter_type, iter_type, ios_base &, ios_base::iostate &, _ValueT &) const; 
# 2158
template< class _CharT2> typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, int> ::__type 
# 2160
_M_find(const _CharT2 *, size_t __len, _CharT2 __c) const 
# 2161
{ 
# 2162
int __ret = (-1); 
# 2163
if (__len <= (10)) 
# 2164
{ 
# 2165
if ((__c >= ((_CharT2)'0')) && (__c < ((_CharT2)(((_CharT2)'0') + __len)))) { 
# 2166
__ret = (__c - ((_CharT2)'0')); }  
# 2167
} else 
# 2169
{ 
# 2170
if ((__c >= ((_CharT2)'0')) && (__c <= ((_CharT2)'9'))) { 
# 2171
__ret = (__c - ((_CharT2)'0')); } else { 
# 2172
if ((__c >= ((_CharT2)'a')) && (__c <= ((_CharT2)'f'))) { 
# 2173
__ret = (10 + (__c - ((_CharT2)'a'))); } else { 
# 2174
if ((__c >= ((_CharT2)'A')) && (__c <= ((_CharT2)'F'))) { 
# 2175
__ret = (10 + (__c - ((_CharT2)'A'))); }  }  }  
# 2176
}  
# 2177
return __ret; 
# 2178
} 
# 2180
template< class _CharT2> typename __gnu_cxx::__enable_if< !__is_char< _CharT2> ::__value, int> ::__type 
# 2183
_M_find(const _CharT2 *__zero, size_t __len, _CharT2 __c) const 
# 2184
{ 
# 2185
int __ret = (-1); 
# 2186
const char_type *__q = char_traits< _CharT2> ::find(__zero, __len, __c); 
# 2187
if (__q) 
# 2188
{ 
# 2189
__ret = (__q - __zero); 
# 2190
if (__ret > 15) { 
# 2191
__ret -= 6; }  
# 2192
}  
# 2193
return __ret; 
# 2194
} 
# 2212 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, bool &) const; 
# 2215
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2216
__err, long &__v) const 
# 2217
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2220
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2221
__err, unsigned short &__v) const 
# 2222
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2225
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2226
__err, unsigned &__v) const 
# 2227
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2230
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2231
__err, unsigned long &__v) const 
# 2232
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2236
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2237
__err, long long &__v) const 
# 2238
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2241
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2242
__err, unsigned long long &__v) const 
# 2243
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2247
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, float &) const; 
# 2250
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, double &) const; 
# 2260
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, long double &) const; 
# 2265
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, void *&) const; 
# 2274 "/usr/include/c++/9/bits/locale_facets.h" 3
}; 
# 2276
template< class _CharT, class _InIter> locale::id 
# 2277
num_get< _CharT, _InIter> ::id; 
# 2292 "/usr/include/c++/9/bits/locale_facets.h" 3
template< class _CharT, class _OutIter> 
# 2293
class num_put : public locale::facet { 
# 2299
public: typedef _CharT char_type; 
# 2300
typedef _OutIter iter_type; 
# 2304
static locale::id id; 
# 2314 "/usr/include/c++/9/bits/locale_facets.h" 3
explicit num_put(size_t __refs = 0) : locale::facet(__refs) { } 
# 2332 "/usr/include/c++/9/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__io, char_type __fill, bool __v) const 
# 2333
{ return this->do_put(__s, __io, __fill, __v); } 
# 2374 "/usr/include/c++/9/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__io, char_type __fill, long __v) const 
# 2375
{ return this->do_put(__s, __io, __fill, __v); } 
# 2378
iter_type put(iter_type __s, ios_base &__io, char_type __fill, unsigned long 
# 2379
__v) const 
# 2380
{ return this->do_put(__s, __io, __fill, __v); } 
# 2384
iter_type put(iter_type __s, ios_base &__io, char_type __fill, long long __v) const 
# 2385
{ return this->do_put(__s, __io, __fill, __v); } 
# 2388
iter_type put(iter_type __s, ios_base &__io, char_type __fill, unsigned long long 
# 2389
__v) const 
# 2390
{ return this->do_put(__s, __io, __fill, __v); } 
# 2437 "/usr/include/c++/9/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__io, char_type __fill, double __v) const 
# 2438
{ return this->do_put(__s, __io, __fill, __v); } 
# 2441
iter_type put(iter_type __s, ios_base &__io, char_type __fill, long double 
# 2442
__v) const 
# 2443
{ return this->do_put(__s, __io, __fill, __v); } 
# 2462 "/usr/include/c++/9/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__io, char_type __fill, const void *
# 2463
__v) const 
# 2464
{ return this->do_put(__s, __io, __fill, __v); } 
# 2467
protected: template< class _ValueT> iter_type _M_insert_float(iter_type, ios_base & __io, char_type __fill, char __mod, _ValueT __v) const; 
# 2473
void _M_group_float(const char * __grouping, size_t __grouping_size, char_type __sep, const char_type * __p, char_type * __new, char_type * __cs, int & __len) const; 
# 2477
template< class _ValueT> iter_type _M_insert_int(iter_type, ios_base & __io, char_type __fill, _ValueT __v) const; 
# 2483
void _M_group_int(const char * __grouping, size_t __grouping_size, char_type __sep, ios_base & __io, char_type * __new, char_type * __cs, int & __len) const; 
# 2488
void _M_pad(char_type __fill, streamsize __w, ios_base & __io, char_type * __new, const char_type * __cs, int & __len) const; 
# 2493
virtual ~num_put() { } 
# 2510 "/usr/include/c++/9/bits/locale_facets.h" 3
virtual iter_type do_put(iter_type __s, ios_base & __io, char_type __fill, bool __v) const; 
# 2513
virtual iter_type do_put(iter_type __s, ios_base &__io, char_type __fill, long __v) const 
# 2514
{ return _M_insert_int(__s, __io, __fill, __v); } 
# 2517
virtual iter_type do_put(iter_type __s, ios_base &__io, char_type __fill, unsigned long 
# 2518
__v) const 
# 2519
{ return _M_insert_int(__s, __io, __fill, __v); } 
# 2523
virtual iter_type do_put(iter_type __s, ios_base &__io, char_type __fill, long long 
# 2524
__v) const 
# 2525
{ return _M_insert_int(__s, __io, __fill, __v); } 
# 2528
virtual iter_type do_put(iter_type __s, ios_base &__io, char_type __fill, unsigned long long 
# 2529
__v) const 
# 2530
{ return _M_insert_int(__s, __io, __fill, __v); } 
# 2534
virtual iter_type do_put(iter_type, ios_base &, char_type, double) const; 
# 2542
virtual iter_type do_put(iter_type, ios_base &, char_type, long double) const; 
# 2546
virtual iter_type do_put(iter_type, ios_base &, char_type, const void *) const; 
# 2554
}; 
# 2556
template< class _CharT, class _OutIter> locale::id 
# 2557
num_put< _CharT, _OutIter> ::id; 
# 2567
template< class _CharT> inline bool 
# 2569
isspace(_CharT __c, const locale &__loc) 
# 2570
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::space, __c); } 
# 2573
template< class _CharT> inline bool 
# 2575
isprint(_CharT __c, const locale &__loc) 
# 2576
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::print, __c); } 
# 2579
template< class _CharT> inline bool 
# 2581
iscntrl(_CharT __c, const locale &__loc) 
# 2582
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::cntrl, __c); } 
# 2585
template< class _CharT> inline bool 
# 2587
isupper(_CharT __c, const locale &__loc) 
# 2588
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::upper, __c); } 
# 2591
template< class _CharT> inline bool 
# 2593
islower(_CharT __c, const locale &__loc) 
# 2594
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::lower, __c); } 
# 2597
template< class _CharT> inline bool 
# 2599
isalpha(_CharT __c, const locale &__loc) 
# 2600
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::alpha, __c); } 
# 2603
template< class _CharT> inline bool 
# 2605
isdigit(_CharT __c, const locale &__loc) 
# 2606
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::digit, __c); } 
# 2609
template< class _CharT> inline bool 
# 2611
ispunct(_CharT __c, const locale &__loc) 
# 2612
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::punct, __c); } 
# 2615
template< class _CharT> inline bool 
# 2617
isxdigit(_CharT __c, const locale &__loc) 
# 2618
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::xdigit, __c); } 
# 2621
template< class _CharT> inline bool 
# 2623
isalnum(_CharT __c, const locale &__loc) 
# 2624
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::alnum, __c); } 
# 2627
template< class _CharT> inline bool 
# 2629
isgraph(_CharT __c, const locale &__loc) 
# 2630
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::graph, __c); } 
# 2634
template< class _CharT> inline bool 
# 2636
isblank(_CharT __c, const locale &__loc) 
# 2637
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::blank, __c); } 
# 2641
template< class _CharT> inline _CharT 
# 2643
toupper(_CharT __c, const locale &__loc) 
# 2644
{ return use_facet< ctype< _CharT> > (__loc).toupper(__c); } 
# 2647
template< class _CharT> inline _CharT 
# 2649
tolower(_CharT __c, const locale &__loc) 
# 2650
{ return use_facet< ctype< _CharT> > (__loc).tolower(__c); } 
# 2653
}
# 35 "/usr/include/c++/9/bits/locale_facets.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
template< class _Facet> 
# 42
struct __use_cache { 
# 45
const _Facet *operator()(const locale & __loc) const; 
# 46
}; 
# 49
template< class _CharT> 
# 50
struct __use_cache< __numpunct_cache< _CharT> >  { 
# 53
const __numpunct_cache< _CharT>  *operator()(const locale &__loc) const 
# 54
{ 
# 55
const size_t __i = (numpunct< _CharT> ::id._M_id)(); 
# 56
const locale::facet **__caches = (__loc._M_impl)->_M_caches; 
# 57
if (!(__caches[__i])) 
# 58
{ 
# 59
__numpunct_cache< _CharT>  *__tmp = (0); 
# 60
try 
# 61
{ 
# 62
__tmp = (new __numpunct_cache< _CharT> ); 
# 63
__tmp->_M_cache(__loc); 
# 64
} 
# 65
catch (...) 
# 66
{ 
# 67
delete __tmp; 
# 68
throw; 
# 69
}  
# 70
(__loc._M_impl)->_M_install_cache(__tmp, __i); 
# 71
}  
# 72
return static_cast< const __numpunct_cache< _CharT>  *>(__caches[__i]); 
# 73
} 
# 74
}; 
# 76
template< class _CharT> void 
# 78
__numpunct_cache< _CharT> ::_M_cache(const locale &__loc) 
# 79
{ 
# 80
const __cxx11::numpunct< _CharT>  &__np = use_facet< __cxx11::numpunct< _CharT> > (__loc); 
# 82
char *__grouping = (0); 
# 83
_CharT *__truename = (0); 
# 84
_CharT *__falsename = (0); 
# 85
try 
# 86
{ 
# 87
const string &__g = __np.grouping(); 
# 88
(_M_grouping_size) = __g.size(); 
# 89
__grouping = (new char [_M_grouping_size]); 
# 90
__g.copy(__grouping, _M_grouping_size); 
# 91
(_M_use_grouping) = ((_M_grouping_size) && ((static_cast< signed char>(__grouping[0])) > 0) && ((__grouping[0]) != __gnu_cxx::__numeric_traits_integer< char> ::__max)); 
# 96
const __cxx11::basic_string< _CharT>  &__tn = __np.truename(); 
# 97
(_M_truename_size) = __tn.size(); 
# 98
__truename = (new _CharT [_M_truename_size]); 
# 99
__tn.copy(__truename, _M_truename_size); 
# 101
const __cxx11::basic_string< _CharT>  &__fn = __np.falsename(); 
# 102
(_M_falsename_size) = __fn.size(); 
# 103
__falsename = (new _CharT [_M_falsename_size]); 
# 104
__fn.copy(__falsename, _M_falsename_size); 
# 106
(_M_decimal_point) = __np.decimal_point(); 
# 107
(_M_thousands_sep) = __np.thousands_sep(); 
# 109
const ctype< _CharT>  &__ct = use_facet< ctype< _CharT> > (__loc); 
# 110
__ct.widen(__num_base::_S_atoms_out, __num_base::_S_atoms_out + __num_base::_S_oend, _M_atoms_out); 
# 113
__ct.widen(__num_base::_S_atoms_in, __num_base::_S_atoms_in + __num_base::_S_iend, _M_atoms_in); 
# 117
(_M_grouping) = __grouping; 
# 118
(_M_truename) = __truename; 
# 119
(_M_falsename) = __falsename; 
# 120
(_M_allocated) = true; 
# 121
} 
# 122
catch (...) 
# 123
{ 
# 124
delete [] __grouping; 
# 125
delete [] __truename; 
# 126
delete [] __falsename; 
# 127
throw; 
# 128
}  
# 129
} 
# 139 "/usr/include/c++/9/bits/locale_facets.tcc" 3
__attribute((__pure__)) bool 
# 140
__verify_grouping(const char * __grouping, size_t __grouping_size, const string & __grouping_tmp) throw(); 
# 145
template< class _CharT, class _InIter> 
# 146
__attribute((__abi_tag__("cxx11"))) _InIter 
# 149
num_get< _CharT, _InIter> ::_M_extract_float(_InIter __beg, _InIter __end, ios_base &__io, ios_base::iostate &
# 150
__err, string &__xtrc) const 
# 151
{ 
# 152
typedef char_traits< _CharT>  __traits_type; 
# 153
typedef __numpunct_cache< _CharT>  __cache_type; 
# 154
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 155
const locale &__loc = __io._M_getloc(); 
# 156
const __cache_type *__lc = __uc(__loc); 
# 157
const _CharT *__lit = ((__lc->_M_atoms_in)); 
# 158
char_type __c = char_type(); 
# 161
bool __testeof = __beg == __end; 
# 164
if (!__testeof) 
# 165
{ 
# 166
__c = (*__beg); 
# 167
const bool __plus = __c == (__lit[__num_base::_S_iplus]); 
# 168
if ((__plus || (__c == (__lit[__num_base::_S_iminus]))) && (!((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep)))) && (!(__c == (__lc->_M_decimal_point)))) 
# 171
{ 
# 172
(__xtrc += (__plus ? '+' : '-')); 
# 173
if ((++__beg) != __end) { 
# 174
__c = (*__beg); } else { 
# 176
__testeof = true; }  
# 177
}  
# 178
}  
# 181
bool __found_mantissa = false; 
# 182
int __sep_pos = 0; 
# 183
while (!__testeof) 
# 184
{ 
# 185
if (((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) || (__c == (__lc->_M_decimal_point))) { 
# 187
break; } else { 
# 188
if (__c == (__lit[__num_base::_S_izero])) 
# 189
{ 
# 190
if (!__found_mantissa) 
# 191
{ 
# 192
(__xtrc += ('0')); 
# 193
__found_mantissa = true; 
# 194
}  
# 195
++__sep_pos; 
# 197
if ((++__beg) != __end) { 
# 198
__c = (*__beg); } else { 
# 200
__testeof = true; }  
# 201
} else { 
# 203
break; }  }  
# 204
}  
# 207
bool __found_dec = false; 
# 208
bool __found_sci = false; 
# 209
string __found_grouping; 
# 210
if (__lc->_M_use_grouping) { 
# 211
__found_grouping.reserve(32); }  
# 212
const char_type *__lit_zero = __lit + __num_base::_S_izero; 
# 214
if (!(__lc->_M_allocated)) { 
# 216
while (!__testeof) 
# 217
{ 
# 218
const int __digit = _M_find(__lit_zero, 10, __c); 
# 219
if (__digit != (-1)) 
# 220
{ 
# 221
(__xtrc += (('0') + __digit)); 
# 222
__found_mantissa = true; 
# 223
} else { 
# 224
if ((__c == (__lc->_M_decimal_point)) && (!__found_dec) && (!__found_sci)) 
# 226
{ 
# 227
(__xtrc += ('.')); 
# 228
__found_dec = true; 
# 229
} else { 
# 230
if (((__c == (__lit[__num_base::_S_ie])) || (__c == (__lit[__num_base::_S_iE]))) && (!__found_sci) && __found_mantissa) 
# 233
{ 
# 235
(__xtrc += ('e')); 
# 236
__found_sci = true; 
# 239
if ((++__beg) != __end) 
# 240
{ 
# 241
__c = (*__beg); 
# 242
const bool __plus = __c == (__lit[__num_base::_S_iplus]); 
# 243
if (__plus || (__c == (__lit[__num_base::_S_iminus]))) { 
# 244
(__xtrc += (__plus ? '+' : '-')); } else { 
# 246
continue; }  
# 247
} else 
# 249
{ 
# 250
__testeof = true; 
# 251
break; 
# 252
}  
# 253
} else { 
# 255
break; }  }  }  
# 257
if ((++__beg) != __end) { 
# 258
__c = (*__beg); } else { 
# 260
__testeof = true; }  
# 261
}   } else { 
# 263
while (!__testeof) 
# 264
{ 
# 267
if ((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) 
# 268
{ 
# 269
if ((!__found_dec) && (!__found_sci)) 
# 270
{ 
# 273
if (__sep_pos) 
# 274
{ 
# 275
(__found_grouping += (static_cast< char>(__sep_pos))); 
# 276
__sep_pos = 0; 
# 277
} else 
# 279
{ 
# 282
__xtrc.clear(); 
# 283
break; 
# 284
}  
# 285
} else { 
# 287
break; }  
# 288
} else { 
# 289
if (__c == (__lc->_M_decimal_point)) 
# 290
{ 
# 291
if ((!__found_dec) && (!__found_sci)) 
# 292
{ 
# 296
if (__found_grouping.size()) { 
# 297
(__found_grouping += (static_cast< char>(__sep_pos))); }  
# 298
(__xtrc += ('.')); 
# 299
__found_dec = true; 
# 300
} else { 
# 302
break; }  
# 303
} else 
# 305
{ 
# 306
const char_type *__q = __traits_type::find(__lit_zero, 10, __c); 
# 308
if (__q) 
# 309
{ 
# 310
__xtrc += ('0' + (__q - __lit_zero)); 
# 311
__found_mantissa = true; 
# 312
++__sep_pos; 
# 313
} else { 
# 314
if (((__c == (__lit[__num_base::_S_ie])) || (__c == (__lit[__num_base::_S_iE]))) && (!__found_sci) && __found_mantissa) 
# 317
{ 
# 319
if ((__found_grouping.size()) && (!__found_dec)) { 
# 320
(__found_grouping += (static_cast< char>(__sep_pos))); }  
# 321
(__xtrc += ('e')); 
# 322
__found_sci = true; 
# 325
if ((++__beg) != __end) 
# 326
{ 
# 327
__c = (*__beg); 
# 328
const bool __plus = __c == (__lit[__num_base::_S_iplus]); 
# 329
if ((__plus || (__c == (__lit[__num_base::_S_iminus]))) && (!((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep)))) && (!(__c == (__lc->_M_decimal_point)))) { 
# 333
(__xtrc += (__plus ? '+' : '-')); } else { 
# 335
continue; }  
# 336
} else 
# 338
{ 
# 339
__testeof = true; 
# 340
break; 
# 341
}  
# 342
} else { 
# 344
break; }  }  
# 345
}  }  
# 347
if ((++__beg) != __end) { 
# 348
__c = (*__beg); } else { 
# 350
__testeof = true; }  
# 351
}   }  
# 355
if (__found_grouping.size()) 
# 356
{ 
# 358
if ((!__found_dec) && (!__found_sci)) { 
# 359
(__found_grouping += (static_cast< char>(__sep_pos))); }  
# 361
if (!std::__verify_grouping((__lc->_M_grouping), (__lc->_M_grouping_size), __found_grouping)) { 
# 364
__err = ios_base::failbit; }  
# 365
}  
# 367
return __beg; 
# 368
} 
# 370
template< class _CharT, class _InIter> 
# 371
template< class _ValueT> 
# 372
__attribute((__abi_tag__("cxx11"))) _InIter 
# 375
num_get< _CharT, _InIter> ::_M_extract_int(_InIter __beg, _InIter __end, ios_base &__io, ios_base::iostate &
# 376
__err, _ValueT &__v) const 
# 377
{ 
# 378
typedef char_traits< _CharT>  __traits_type; 
# 379
using __gnu_cxx::__add_unsigned;
# 380
typedef typename __gnu_cxx::__add_unsigned< _ValueT> ::__type __unsigned_type; 
# 381
typedef __numpunct_cache< _CharT>  __cache_type; 
# 382
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 383
const locale &__loc = __io._M_getloc(); 
# 384
const __cache_type *__lc = __uc(__loc); 
# 385
const _CharT *__lit = ((__lc->_M_atoms_in)); 
# 386
char_type __c = char_type(); 
# 389
const ios_base::fmtflags __basefield = ((__io.flags()) & ios_base::basefield); 
# 391
const bool __oct = __basefield == ios_base::oct; 
# 392
int __base = __oct ? 8 : ((__basefield == ios_base::hex) ? 16 : 10); 
# 395
bool __testeof = __beg == __end; 
# 398
bool __negative = false; 
# 399
if (!__testeof) 
# 400
{ 
# 401
__c = (*__beg); 
# 402
__negative = (__c == (__lit[__num_base::_S_iminus])); 
# 403
if ((__negative || (__c == (__lit[__num_base::_S_iplus]))) && (!((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep)))) && (!(__c == (__lc->_M_decimal_point)))) 
# 406
{ 
# 407
if ((++__beg) != __end) { 
# 408
__c = (*__beg); } else { 
# 410
__testeof = true; }  
# 411
}  
# 412
}  
# 416
bool __found_zero = false; 
# 417
int __sep_pos = 0; 
# 418
while (!__testeof) 
# 419
{ 
# 420
if (((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) || (__c == (__lc->_M_decimal_point))) { 
# 422
break; } else { 
# 423
if ((__c == (__lit[__num_base::_S_izero])) && ((!__found_zero) || (__base == 10))) 
# 425
{ 
# 426
__found_zero = true; 
# 427
++__sep_pos; 
# 428
if (__basefield == 0) { 
# 429
__base = 8; }  
# 430
if (__base == 8) { 
# 431
__sep_pos = 0; }  
# 432
} else { 
# 433
if (__found_zero && ((__c == (__lit[__num_base::_S_ix])) || (__c == (__lit[__num_base::_S_iX])))) 
# 436
{ 
# 437
if (__basefield == 0) { 
# 438
__base = 16; }  
# 439
if (__base == 16) 
# 440
{ 
# 441
__found_zero = false; 
# 442
__sep_pos = 0; 
# 443
} else { 
# 445
break; }  
# 446
} else { 
# 448
break; }  }  }  
# 450
if ((++__beg) != __end) 
# 451
{ 
# 452
__c = (*__beg); 
# 453
if (!__found_zero) { 
# 454
break; }  
# 455
} else { 
# 457
__testeof = true; }  
# 458
}  
# 462
const size_t __len = (__base == 16) ? (__num_base::_S_iend) - (__num_base::_S_izero) : __base; 
# 466
typedef __gnu_cxx::__numeric_traits< _ValueT>  __num_traits; 
# 467
string __found_grouping; 
# 468
if (__lc->_M_use_grouping) { 
# 469
__found_grouping.reserve(32); }  
# 470
bool __testfail = false; 
# 471
bool __testoverflow = false; 
# 472
const __unsigned_type __max = (__negative && __num_traits::__is_signed) ? -(static_cast< __unsigned_type>(__num_traits::__min)) : __num_traits::__max; 
# 476
const __unsigned_type __smax = __max / __base; 
# 477
__unsigned_type __result = (0); 
# 478
int __digit = 0; 
# 479
const char_type *__lit_zero = __lit + __num_base::_S_izero; 
# 481
if (!(__lc->_M_allocated)) { 
# 483
while (!__testeof) 
# 484
{ 
# 485
__digit = _M_find(__lit_zero, __len, __c); 
# 486
if (__digit == (-1)) { 
# 487
break; }  
# 489
if (__result > __smax) { 
# 490
__testoverflow = true; } else 
# 492
{ 
# 493
__result *= __base; 
# 494
__testoverflow |= (__result > (__max - __digit)); 
# 495
__result += __digit; 
# 496
++__sep_pos; 
# 497
}  
# 499
if ((++__beg) != __end) { 
# 500
__c = (*__beg); } else { 
# 502
__testeof = true; }  
# 503
}  } else { 
# 505
while (!__testeof) 
# 506
{ 
# 509
if ((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) 
# 510
{ 
# 513
if (__sep_pos) 
# 514
{ 
# 515
(__found_grouping += (static_cast< char>(__sep_pos))); 
# 516
__sep_pos = 0; 
# 517
} else 
# 519
{ 
# 520
__testfail = true; 
# 521
break; 
# 522
}  
# 523
} else { 
# 524
if (__c == (__lc->_M_decimal_point)) { 
# 525
break; } else 
# 527
{ 
# 528
const char_type *__q = __traits_type::find(__lit_zero, __len, __c); 
# 530
if (!__q) { 
# 531
break; }  
# 533
__digit = (__q - __lit_zero); 
# 534
if (__digit > 15) { 
# 535
__digit -= 6; }  
# 536
if (__result > __smax) { 
# 537
__testoverflow = true; } else 
# 539
{ 
# 540
__result *= __base; 
# 541
__testoverflow |= (__result > (__max - __digit)); 
# 542
__result += __digit; 
# 543
++__sep_pos; 
# 544
}  
# 545
}  }  
# 547
if ((++__beg) != __end) { 
# 548
__c = (*__beg); } else { 
# 550
__testeof = true; }  
# 551
}  }  
# 555
if (__found_grouping.size()) 
# 556
{ 
# 558
(__found_grouping += (static_cast< char>(__sep_pos))); 
# 560
if (!std::__verify_grouping((__lc->_M_grouping), (__lc->_M_grouping_size), __found_grouping)) { 
# 563
__err = ios_base::failbit; }  
# 564
}  
# 568
if (((!__sep_pos) && (!__found_zero) && (!(__found_grouping.size()))) || __testfail) 
# 570
{ 
# 571
__v = 0; 
# 572
__err = ios_base::failbit; 
# 573
} else { 
# 574
if (__testoverflow) 
# 575
{ 
# 576
if (__negative && __num_traits::__is_signed) { 
# 577
__v = __num_traits::__min; } else { 
# 579
__v = __num_traits::__max; }  
# 580
__err = ios_base::failbit; 
# 581
} else { 
# 583
__v = (__negative ? -__result : __result); }  }  
# 585
if (__testeof) { 
# 586
(__err |= ios_base::eofbit); }  
# 587
return __beg; 
# 588
} 
# 592
template< class _CharT, class _InIter> _InIter 
# 595
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 596
__err, bool &__v) const 
# 597
{ 
# 598
if (!(((__io.flags()) & ios_base::boolalpha))) 
# 599
{ 
# 603
long __l = (-1); 
# 604
__beg = _M_extract_int(__beg, __end, __io, __err, __l); 
# 605
if ((__l == (0)) || (__l == (1))) { 
# 606
__v = ((bool)__l); } else 
# 608
{ 
# 611
__v = true; 
# 612
__err = ios_base::failbit; 
# 613
if (__beg == __end) { 
# 614
(__err |= ios_base::eofbit); }  
# 615
}  
# 616
} else 
# 618
{ 
# 620
typedef __numpunct_cache< _CharT>  __cache_type; 
# 621
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 622
const locale &__loc = __io._M_getloc(); 
# 623
const __cache_type *__lc = __uc(__loc); 
# 625
bool __testf = true; 
# 626
bool __testt = true; 
# 627
bool __donef = (__lc->_M_falsename_size) == 0; 
# 628
bool __donet = (__lc->_M_truename_size) == 0; 
# 629
bool __testeof = false; 
# 630
size_t __n = (0); 
# 631
while ((!__donef) || (!__donet)) 
# 632
{ 
# 633
if (__beg == __end) 
# 634
{ 
# 635
__testeof = true; 
# 636
break; 
# 637
}  
# 639
const char_type __c = (*__beg); 
# 641
if (!__donef) { 
# 642
__testf = (__c == ((__lc->_M_falsename)[__n])); }  
# 644
if ((!__testf) && __donet) { 
# 645
break; }  
# 647
if (!__donet) { 
# 648
__testt = (__c == ((__lc->_M_truename)[__n])); }  
# 650
if ((!__testt) && __donef) { 
# 651
break; }  
# 653
if ((!__testt) && (!__testf)) { 
# 654
break; }  
# 656
++__n; 
# 657
++__beg; 
# 659
__donef = ((!__testf) || (__n >= (__lc->_M_falsename_size))); 
# 660
__donet = ((!__testt) || (__n >= (__lc->_M_truename_size))); 
# 661
}  
# 662
if (__testf && (__n == (__lc->_M_falsename_size)) && __n) 
# 663
{ 
# 664
__v = false; 
# 665
if (__testt && (__n == (__lc->_M_truename_size))) { 
# 666
__err = ios_base::failbit; } else { 
# 668
__err = (__testeof ? ios_base::eofbit : ios_base::goodbit); }  
# 669
} else { 
# 670
if (__testt && (__n == (__lc->_M_truename_size)) && __n) 
# 671
{ 
# 672
__v = true; 
# 673
__err = (__testeof ? ios_base::eofbit : ios_base::goodbit); 
# 674
} else 
# 676
{ 
# 679
__v = false; 
# 680
__err = ios_base::failbit; 
# 681
if (__testeof) { 
# 682
(__err |= ios_base::eofbit); }  
# 683
}  }  
# 684
}  
# 685
return __beg; 
# 686
} 
# 688
template< class _CharT, class _InIter> _InIter 
# 691
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 692
__err, float &__v) const 
# 693
{ 
# 694
string __xtrc; 
# 695
__xtrc.reserve(32); 
# 696
__beg = _M_extract_float(__beg, __end, __io, __err, __xtrc); 
# 697
std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale()); 
# 698
if (__beg == __end) { 
# 699
(__err |= ios_base::eofbit); }  
# 700
return __beg; 
# 701
} 
# 703
template< class _CharT, class _InIter> _InIter 
# 706
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 707
__err, double &__v) const 
# 708
{ 
# 709
string __xtrc; 
# 710
__xtrc.reserve(32); 
# 711
__beg = _M_extract_float(__beg, __end, __io, __err, __xtrc); 
# 712
std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale()); 
# 713
if (__beg == __end) { 
# 714
(__err |= ios_base::eofbit); }  
# 715
return __beg; 
# 716
} 
# 735 "/usr/include/c++/9/bits/locale_facets.tcc" 3
template< class _CharT, class _InIter> _InIter 
# 738
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 739
__err, long double &__v) const 
# 740
{ 
# 741
string __xtrc; 
# 742
__xtrc.reserve(32); 
# 743
__beg = _M_extract_float(__beg, __end, __io, __err, __xtrc); 
# 744
std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale()); 
# 745
if (__beg == __end) { 
# 746
(__err |= ios_base::eofbit); }  
# 747
return __beg; 
# 748
} 
# 750
template< class _CharT, class _InIter> _InIter 
# 753
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 754
__err, void *&__v) const 
# 755
{ 
# 757
typedef ios_base::fmtflags fmtflags; 
# 758
const fmtflags __fmt = __io.flags(); 
# 759
__io.flags((((__fmt & ((~ios_base::basefield)))) | ios_base::hex)); 
# 763
typedef __gnu_cxx::__conditional_type< sizeof(void *) <= sizeof(unsigned long), unsigned long, unsigned long long> ::__type _UIntPtrType; 
# 765
_UIntPtrType __ul; 
# 766
__beg = _M_extract_int(__beg, __end, __io, __err, __ul); 
# 769
__io.flags(__fmt); 
# 771
__v = (reinterpret_cast< void *>(__ul)); 
# 772
return __beg; 
# 773
} 
# 777
template< class _CharT, class _OutIter> void 
# 780
num_put< _CharT, _OutIter> ::_M_pad(_CharT __fill, streamsize __w, ios_base &__io, _CharT *
# 781
__new, const _CharT *__cs, int &__len) const 
# 782
{ 
# 785
__pad< _CharT, char_traits< _CharT> > ::_S_pad(__io, __fill, __new, __cs, __w, __len); 
# 787
__len = (static_cast< int>(__w)); 
# 788
} 
# 792
template< class _CharT, class _ValueT> int 
# 794
__int_to_char(_CharT *__bufend, _ValueT __v, const _CharT *__lit, ios_base::fmtflags 
# 795
__flags, bool __dec) 
# 796
{ 
# 797
_CharT *__buf = __bufend; 
# 798
if (__builtin_expect(__dec, true)) 
# 799
{ 
# 801
do 
# 802
{ 
# 803
(*(--__buf)) = (__lit[(__v % 10) + __num_base::_S_odigits]); 
# 804
__v /= 10; 
# 805
} 
# 806
while (__v != 0); 
# 807
} else { 
# 808
if (((__flags & ios_base::basefield)) == ios_base::oct) 
# 809
{ 
# 811
do 
# 812
{ 
# 813
(*(--__buf)) = (__lit[(__v & 7) + __num_base::_S_odigits]); 
# 814
__v >>= 3; 
# 815
} 
# 816
while (__v != 0); 
# 817
} else 
# 819
{ 
# 821
const bool __uppercase = (__flags & ios_base::uppercase); 
# 822
const int __case_offset = __uppercase ? __num_base::_S_oudigits : __num_base::_S_odigits; 
# 824
do 
# 825
{ 
# 826
(*(--__buf)) = (__lit[(__v & 15) + __case_offset]); 
# 827
__v >>= 4; 
# 828
} 
# 829
while (__v != 0); 
# 830
}  }  
# 831
return __bufend - __buf; 
# 832
} 
# 836
template< class _CharT, class _OutIter> void 
# 839
num_put< _CharT, _OutIter> ::_M_group_int(const char *__grouping, size_t __grouping_size, _CharT __sep, ios_base &, _CharT *
# 840
__new, _CharT *__cs, int &__len) const 
# 841
{ 
# 842
_CharT *__p = std::__add_grouping(__new, __sep, __grouping, __grouping_size, __cs, __cs + __len); 
# 844
__len = (__p - __new); 
# 845
} 
# 847
template< class _CharT, class _OutIter> 
# 848
template< class _ValueT> _OutIter 
# 851
num_put< _CharT, _OutIter> ::_M_insert_int(_OutIter __s, ios_base &__io, _CharT __fill, _ValueT 
# 852
__v) const 
# 853
{ 
# 854
using __gnu_cxx::__add_unsigned;
# 855
typedef typename __gnu_cxx::__add_unsigned< _ValueT> ::__type __unsigned_type; 
# 856
typedef __numpunct_cache< _CharT>  __cache_type; 
# 857
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 858
const locale &__loc = __io._M_getloc(); 
# 859
const __cache_type *__lc = __uc(__loc); 
# 860
const _CharT *__lit = ((__lc->_M_atoms_out)); 
# 861
const ios_base::fmtflags __flags = __io.flags(); 
# 864
const int __ilen = ((5) * sizeof(_ValueT)); 
# 865
_CharT *__cs = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __ilen)); 
# 870
const ios_base::fmtflags __basefield = (__flags & ios_base::basefield); 
# 871
const bool __dec = (__basefield != ios_base::oct) && (__basefield != ios_base::hex); 
# 873
const __unsigned_type __u = ((__v > 0) || (!__dec)) ? (__unsigned_type)__v : (-((__unsigned_type)__v)); 
# 876
int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec); 
# 877
__cs += (__ilen - __len); 
# 880
if (__lc->_M_use_grouping) 
# 881
{ 
# 884
_CharT *__cs2 = static_cast< _CharT *>(__builtin_alloca((sizeof(_CharT) * (__len + 1)) * (2))); 
# 887
_M_group_int((__lc->_M_grouping), (__lc->_M_grouping_size), (__lc->_M_thousands_sep), __io, __cs2 + 2, __cs, __len); 
# 889
__cs = (__cs2 + 2); 
# 890
}  
# 893
if (__builtin_expect(__dec, true)) 
# 894
{ 
# 896
if (__v >= 0) 
# 897
{ 
# 898
if (((bool)(__flags & ios_base::showpos)) && __gnu_cxx::template __numeric_traits< _ValueT> ::__is_signed) { 
# 900
((*(--__cs)) = (__lit[__num_base::_S_oplus])), (++__len); }  
# 901
} else { 
# 903
((*(--__cs)) = (__lit[__num_base::_S_ominus])), (++__len); }  
# 904
} else { 
# 905
if (((bool)(__flags & ios_base::showbase)) && __v) 
# 906
{ 
# 907
if (__basefield == ios_base::oct) { 
# 908
((*(--__cs)) = (__lit[__num_base::_S_odigits])), (++__len); } else 
# 910
{ 
# 912
const bool __uppercase = (__flags & ios_base::uppercase); 
# 913
(*(--__cs)) = (__lit[(__num_base::_S_ox) + __uppercase]); 
# 915
(*(--__cs)) = (__lit[__num_base::_S_odigits]); 
# 916
__len += 2; 
# 917
}  
# 918
}  }  
# 921
const streamsize __w = __io.width(); 
# 922
if (__w > (static_cast< streamsize>(__len))) 
# 923
{ 
# 924
_CharT *__cs3 = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __w)); 
# 926
_M_pad(__fill, __w, __io, __cs3, __cs, __len); 
# 927
__cs = __cs3; 
# 928
}  
# 929
__io.width(0); 
# 933
return std::__write(__s, __cs, __len); 
# 934
} 
# 936
template< class _CharT, class _OutIter> void 
# 939
num_put< _CharT, _OutIter> ::_M_group_float(const char *__grouping, size_t __grouping_size, _CharT 
# 940
__sep, const _CharT *__p, _CharT *__new, _CharT *
# 941
__cs, int &__len) const 
# 942
{ 
# 946
const int __declen = (__p) ? __p - __cs : __len; 
# 947
_CharT *__p2 = std::__add_grouping(__new, __sep, __grouping, __grouping_size, __cs, __cs + __declen); 
# 952
int __newlen = __p2 - __new; 
# 953
if (__p) 
# 954
{ 
# 955
char_traits< _CharT> ::copy(__p2, __p, __len - __declen); 
# 956
__newlen += (__len - __declen); 
# 957
}  
# 958
__len = __newlen; 
# 959
} 
# 971 "/usr/include/c++/9/bits/locale_facets.tcc" 3
template< class _CharT, class _OutIter> 
# 972
template< class _ValueT> _OutIter 
# 975
num_put< _CharT, _OutIter> ::_M_insert_float(_OutIter __s, ios_base &__io, _CharT __fill, char __mod, _ValueT 
# 976
__v) const 
# 977
{ 
# 978
typedef __numpunct_cache< _CharT>  __cache_type; 
# 979
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 980
const locale &__loc = __io._M_getloc(); 
# 981
const __cache_type *__lc = __uc(__loc); 
# 984
const streamsize __prec = (__io.precision() < (0)) ? 6 : __io.precision(); 
# 986
const int __max_digits = (__gnu_cxx::template __numeric_traits< _ValueT> ::__digits10); 
# 990
int __len; 
# 992
char __fbuf[16]; 
# 993
__num_base::_S_format_float(__io, __fbuf, __mod); 
# 997
const bool __use_prec = (((__io.flags()) & ios_base::floatfield)) != ios_base::floatfield; 
# 1002
int __cs_size = (__max_digits * 3); 
# 1003
char *__cs = static_cast< char *>(__builtin_alloca(__cs_size)); 
# 1004
if (__use_prec) { 
# 1005
__len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __prec, __v); } else { 
# 1008
__len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __v); }  
# 1012
if (__len >= __cs_size) 
# 1013
{ 
# 1014
__cs_size = (__len + 1); 
# 1015
__cs = (static_cast< char *>(__builtin_alloca(__cs_size))); 
# 1016
if (__use_prec) { 
# 1017
__len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __prec, __v); } else { 
# 1020
__len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __v); }  
# 1022
}  
# 1044 "/usr/include/c++/9/bits/locale_facets.tcc" 3
const ctype< _CharT>  &__ctype = use_facet< ctype< _CharT> > (__loc); 
# 1046
_CharT *__ws = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __len)); 
# 1048
__ctype.widen(__cs, __cs + __len, __ws); 
# 1051
_CharT *__wp = (0); 
# 1052
const char *__p = char_traits< char> ::find(__cs, __len, '.'); 
# 1053
if (__p) 
# 1054
{ 
# 1055
__wp = (__ws + (__p - __cs)); 
# 1056
(*__wp) = (__lc->_M_decimal_point); 
# 1057
}  
# 1062
if ((__lc->_M_use_grouping) && ((__wp || (__len < 3)) || (((__cs[1]) <= ('9')) && ((__cs[2]) <= ('9')) && ((__cs[1]) >= ('0')) && ((__cs[2]) >= ('0'))))) 
# 1065
{ 
# 1068
_CharT *__ws2 = static_cast< _CharT *>(__builtin_alloca((sizeof(_CharT) * __len) * (2))); 
# 1071
streamsize __off = (0); 
# 1072
if (((__cs[0]) == ('-')) || ((__cs[0]) == ('+'))) 
# 1073
{ 
# 1074
__off = (1); 
# 1075
(__ws2[0]) = (__ws[0]); 
# 1076
__len -= 1; 
# 1077
}  
# 1079
_M_group_float((__lc->_M_grouping), (__lc->_M_grouping_size), (__lc->_M_thousands_sep), __wp, __ws2 + __off, __ws + __off, __len); 
# 1082
__len += __off; 
# 1084
__ws = __ws2; 
# 1085
}  
# 1088
const streamsize __w = __io.width(); 
# 1089
if (__w > (static_cast< streamsize>(__len))) 
# 1090
{ 
# 1091
_CharT *__ws3 = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __w)); 
# 1093
_M_pad(__fill, __w, __io, __ws3, __ws, __len); 
# 1094
__ws = __ws3; 
# 1095
}  
# 1096
__io.width(0); 
# 1100
return std::__write(__s, __ws, __len); 
# 1101
} 
# 1103
template< class _CharT, class _OutIter> _OutIter 
# 1106
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, bool __v) const 
# 1107
{ 
# 1108
const ios_base::fmtflags __flags = __io.flags(); 
# 1109
if (((__flags & ios_base::boolalpha)) == 0) 
# 1110
{ 
# 1111
const long __l = __v; 
# 1112
__s = _M_insert_int(__s, __io, __fill, __l); 
# 1113
} else 
# 1115
{ 
# 1116
typedef __numpunct_cache< _CharT>  __cache_type; 
# 1117
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 1118
const locale &__loc = __io._M_getloc(); 
# 1119
const __cache_type *__lc = __uc(__loc); 
# 1121
const _CharT *__name = __v ? __lc->_M_truename : (__lc->_M_falsename); 
# 1123
int __len = __v ? __lc->_M_truename_size : (__lc->_M_falsename_size); 
# 1126
const streamsize __w = __io.width(); 
# 1127
if (__w > (static_cast< streamsize>(__len))) 
# 1128
{ 
# 1129
const streamsize __plen = __w - __len; 
# 1130
_CharT *__ps = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __plen)); 
# 1134
char_traits< _CharT> ::assign(__ps, __plen, __fill); 
# 1135
__io.width(0); 
# 1137
if (((__flags & ios_base::adjustfield)) == ios_base::left) 
# 1138
{ 
# 1139
__s = std::__write(__s, __name, __len); 
# 1140
__s = std::__write(__s, __ps, __plen); 
# 1141
} else 
# 1143
{ 
# 1144
__s = std::__write(__s, __ps, __plen); 
# 1145
__s = std::__write(__s, __name, __len); 
# 1146
}  
# 1147
return __s; 
# 1148
}  
# 1149
__io.width(0); 
# 1150
__s = std::__write(__s, __name, __len); 
# 1151
}  
# 1152
return __s; 
# 1153
} 
# 1155
template< class _CharT, class _OutIter> _OutIter 
# 1158
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, double __v) const 
# 1159
{ return _M_insert_float(__s, __io, __fill, ((char)0), __v); } 
# 1169 "/usr/include/c++/9/bits/locale_facets.tcc" 3
template< class _CharT, class _OutIter> _OutIter 
# 1172
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, long double 
# 1173
__v) const 
# 1174
{ return _M_insert_float(__s, __io, __fill, 'L', __v); } 
# 1176
template< class _CharT, class _OutIter> _OutIter 
# 1179
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, const void *
# 1180
__v) const 
# 1181
{ 
# 1182
const ios_base::fmtflags __flags = __io.flags(); 
# 1183
const ios_base::fmtflags __fmt = (~((ios_base::basefield | ios_base::uppercase))); 
# 1185
__io.flags((((__flags & __fmt)) | ((ios_base::hex | ios_base::showbase)))); 
# 1189
typedef __gnu_cxx::__conditional_type< sizeof(void *) <= sizeof(unsigned long), unsigned long, unsigned long long> ::__type _UIntPtrType; 
# 1191
__s = _M_insert_int(__s, __io, __fill, reinterpret_cast< _UIntPtrType>(__v)); 
# 1193
__io.flags(__flags); 
# 1194
return __s; 
# 1195
} 
# 1206 "/usr/include/c++/9/bits/locale_facets.tcc" 3
template< class _CharT, class _Traits> void 
# 1208
__pad< _CharT, _Traits> ::_S_pad(ios_base &__io, _CharT __fill, _CharT *
# 1209
__news, const _CharT *__olds, streamsize 
# 1210
__newlen, streamsize __oldlen) 
# 1211
{ 
# 1212
const size_t __plen = static_cast< size_t>(__newlen - __oldlen); 
# 1213
const ios_base::fmtflags __adjust = ((__io.flags()) & ios_base::adjustfield); 
# 1216
if (__adjust == ios_base::left) 
# 1217
{ 
# 1218
_Traits::copy(__news, __olds, __oldlen); 
# 1219
_Traits::assign(__news + __oldlen, __plen, __fill); 
# 1220
return; 
# 1221
}  
# 1223
size_t __mod = (0); 
# 1224
if (__adjust == ios_base::internal) 
# 1225
{ 
# 1229
const locale &__loc = __io._M_getloc(); 
# 1230
const ctype< _CharT>  &__ctype = use_facet< ctype< _CharT> > (__loc); 
# 1232
if ((__ctype.widen('-') == (__olds[0])) || (__ctype.widen('+') == (__olds[0]))) 
# 1234
{ 
# 1235
(__news[0]) = (__olds[0]); 
# 1236
__mod = (1); 
# 1237
++__news; 
# 1238
} else { 
# 1239
if ((__ctype.widen('0') == (__olds[0])) && (__oldlen > (1)) && ((__ctype.widen('x') == (__olds[1])) || (__ctype.widen('X') == (__olds[1])))) 
# 1243
{ 
# 1244
(__news[0]) = (__olds[0]); 
# 1245
(__news[1]) = (__olds[1]); 
# 1246
__mod = (2); 
# 1247
__news += 2; 
# 1248
}  }  
# 1250
}  
# 1251
_Traits::assign(__news, __plen, __fill); 
# 1252
_Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod); 
# 1253
} 
# 1255
template< class _CharT> _CharT *
# 1257
__add_grouping(_CharT *__s, _CharT __sep, const char *
# 1258
__gbeg, size_t __gsize, const _CharT *
# 1259
__first, const _CharT *__last) 
# 1260
{ 
# 1261
size_t __idx = (0); 
# 1262
size_t __ctr = (0); 
# 1264
while (((__last - __first) > (__gbeg[__idx])) && ((static_cast< signed char>(__gbeg[__idx])) > 0) && ((__gbeg[__idx]) != __gnu_cxx::__numeric_traits_integer< char> ::__max)) 
# 1267
{ 
# 1268
__last -= (__gbeg[__idx]); 
# 1269
(__idx < (__gsize - (1))) ? ++__idx : (++__ctr); 
# 1270
}  
# 1272
while (__first != __last) { 
# 1273
(*(__s++)) = (*(__first++)); }  
# 1275
while (__ctr--) 
# 1276
{ 
# 1277
(*(__s++)) = __sep; 
# 1278
for (char __i = __gbeg[__idx]; __i > 0; --__i) { 
# 1279
(*(__s++)) = (*(__first++)); }  
# 1280
}  
# 1282
while (__idx--) 
# 1283
{ 
# 1284
(*(__s++)) = __sep; 
# 1285
for (char __i = __gbeg[__idx]; __i > 0; --__i) { 
# 1286
(*(__s++)) = (*(__first++)); }  
# 1287
}  
# 1289
return __s; 
# 1290
} 
# 1295
extern template class __cxx11::numpunct< char> ;
# 1296
extern template class __cxx11::numpunct_byname< char> ;
# 1297
extern template class num_get< char> ;
# 1298
extern template class num_put< char> ;
# 1301
extern template const ctype< char>  &use_facet< ctype< char> > (const locale &);
# 1305
extern template const __cxx11::numpunct< char>  &use_facet< __cxx11::numpunct< char> > (const locale &);
# 1309
extern template const num_put< char>  &use_facet< num_put< char> > (const locale &);
# 1313
extern template const num_get< char>  &use_facet< num_get< char> > (const locale &);
# 1317
extern template bool has_facet< ctype< char> > (const locale &) throw();
# 1321
extern template bool has_facet< __cxx11::numpunct< char> > (const locale &) throw();
# 1325
extern template bool has_facet< num_put< char> > (const locale &) throw();
# 1329
extern template bool has_facet< num_get< char> > (const locale &) throw();
# 1334
extern template class __cxx11::numpunct< wchar_t> ;
# 1335
extern template class __cxx11::numpunct_byname< wchar_t> ;
# 1336
extern template class num_get< wchar_t> ;
# 1337
extern template class num_put< wchar_t> ;
# 1340
extern template const ctype< wchar_t>  &use_facet< ctype< wchar_t> > (const locale &);
# 1344
extern template const __cxx11::numpunct< wchar_t>  &use_facet< __cxx11::numpunct< wchar_t> > (const locale &);
# 1348
extern template const num_put< wchar_t>  &use_facet< num_put< wchar_t> > (const locale &);
# 1352
extern template const num_get< wchar_t>  &use_facet< num_get< wchar_t> > (const locale &);
# 1356
extern template bool has_facet< ctype< wchar_t> > (const locale &) throw();
# 1360
extern template bool has_facet< __cxx11::numpunct< wchar_t> > (const locale &) throw();
# 1364
extern template bool has_facet< num_put< wchar_t> > (const locale &) throw();
# 1368
extern template bool has_facet< num_get< wchar_t> > (const locale &) throw();
# 1375
}
# 41 "/usr/include/c++/9/bits/basic_ios.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _Facet> inline const _Facet &
# 47
__check_facet(const _Facet *__f) 
# 48
{ 
# 49
if (!__f) { 
# 50
__throw_bad_cast(); }  
# 51
return *__f; 
# 52
} 
# 66 "/usr/include/c++/9/bits/basic_ios.h" 3
template< class _CharT, class _Traits> 
# 67
class basic_ios : public ios_base { 
# 76
public: typedef _CharT char_type; 
# 77
typedef typename _Traits::int_type int_type; 
# 78
typedef typename _Traits::pos_type pos_type; 
# 79
typedef typename _Traits::off_type off_type; 
# 80
typedef _Traits traits_type; 
# 87
typedef ctype< _CharT>  __ctype_type; 
# 89
typedef num_put< _CharT, ostreambuf_iterator< _CharT, _Traits> >  __num_put_type; 
# 91
typedef num_get< _CharT, istreambuf_iterator< _CharT, _Traits> >  __num_get_type; 
# 96
protected: basic_ostream< _CharT, _Traits>  *_M_tie; 
# 97
mutable char_type _M_fill; 
# 98
mutable bool _M_fill_init; 
# 99
basic_streambuf< _CharT, _Traits>  *_M_streambuf; 
# 102
const __ctype_type *_M_ctype; 
# 104
const __num_put_type *_M_num_put; 
# 106
const __num_get_type *_M_num_get; 
# 117 "/usr/include/c++/9/bits/basic_ios.h" 3
public: explicit operator bool() const 
# 118
{ return !fail(); } 
# 125
bool operator!() const 
# 126
{ return fail(); } 
# 137 "/usr/include/c++/9/bits/basic_ios.h" 3
iostate rdstate() const 
# 138
{ return _M_streambuf_state; } 
# 148 "/usr/include/c++/9/bits/basic_ios.h" 3
void clear(iostate __state = goodbit); 
# 157
void setstate(iostate __state) 
# 158
{ clear(((rdstate()) | __state)); } 
# 164
void _M_setstate(iostate __state) 
# 165
{ 
# 168
((_M_streambuf_state) |= __state); 
# 169
if (((exceptions()) & __state)) { 
# 170
throw; }  
# 171
} 
# 180
bool good() const 
# 181
{ return (rdstate()) == 0; } 
# 190
bool eof() const 
# 191
{ return (((rdstate()) & eofbit)) != 0; } 
# 201 "/usr/include/c++/9/bits/basic_ios.h" 3
bool fail() const 
# 202
{ return (((rdstate()) & ((badbit | failbit)))) != 0; } 
# 211
bool bad() const 
# 212
{ return (((rdstate()) & badbit)) != 0; } 
# 222 "/usr/include/c++/9/bits/basic_ios.h" 3
iostate exceptions() const 
# 223
{ return _M_exception; } 
# 257 "/usr/include/c++/9/bits/basic_ios.h" 3
void exceptions(iostate __except) 
# 258
{ 
# 259
(_M_exception) = __except; 
# 260
clear(_M_streambuf_state); 
# 261
} 
# 270
explicit basic_ios(basic_streambuf< _CharT, _Traits>  *__sb) : ios_base(), _M_tie((0)), _M_fill(), _M_fill_init(false), _M_streambuf((0)), _M_ctype((0)), _M_num_put((0)), _M_num_get((0)) 
# 273
{ init(__sb); } 
# 282
virtual ~basic_ios() { } 
# 295 "/usr/include/c++/9/bits/basic_ios.h" 3
basic_ostream< _CharT, _Traits>  *tie() const 
# 296
{ return _M_tie; } 
# 307 "/usr/include/c++/9/bits/basic_ios.h" 3
basic_ostream< _CharT, _Traits>  *tie(basic_ostream< _CharT, _Traits>  *__tiestr) 
# 308
{ 
# 309
basic_ostream< _CharT, _Traits>  *__old = _M_tie; 
# 310
(_M_tie) = __tiestr; 
# 311
return __old; 
# 312
} 
# 321
basic_streambuf< _CharT, _Traits>  *rdbuf() const 
# 322
{ return _M_streambuf; } 
# 347 "/usr/include/c++/9/bits/basic_ios.h" 3
basic_streambuf< _CharT, _Traits>  *rdbuf(basic_streambuf< _CharT, _Traits>  * __sb); 
# 361 "/usr/include/c++/9/bits/basic_ios.h" 3
basic_ios &copyfmt(const basic_ios & __rhs); 
# 370
char_type fill() const 
# 371
{ 
# 372
if (!(_M_fill_init)) 
# 373
{ 
# 374
(_M_fill) = widen(' '); 
# 375
(_M_fill_init) = true; 
# 376
}  
# 377
return _M_fill; 
# 378
} 
# 390 "/usr/include/c++/9/bits/basic_ios.h" 3
char_type fill(char_type __ch) 
# 391
{ 
# 392
char_type __old = this->fill(); 
# 393
(_M_fill) = __ch; 
# 394
return __old; 
# 395
} 
# 410 "/usr/include/c++/9/bits/basic_ios.h" 3
locale imbue(const locale & __loc); 
# 430 "/usr/include/c++/9/bits/basic_ios.h" 3
char narrow(char_type __c, char __dfault) const 
# 431
{ return __check_facet(_M_ctype).narrow(__c, __dfault); } 
# 449 "/usr/include/c++/9/bits/basic_ios.h" 3
char_type widen(char __c) const 
# 450
{ return __check_facet(_M_ctype).widen(__c); } 
# 460
protected: basic_ios() : ios_base(), _M_tie((0)), _M_fill(char_type()), _M_fill_init(false), _M_streambuf((0)), _M_ctype((0)), _M_num_put((0)), _M_num_get((0)) 
# 463
{ } 
# 472
void init(basic_streambuf< _CharT, _Traits>  * __sb); 
# 475
basic_ios(const basic_ios &) = delete;
# 476
basic_ios &operator=(const basic_ios &) = delete;
# 479
void move(basic_ios &__rhs) 
# 480
{ 
# 481
this->ios_base::_M_move(__rhs); 
# 482
_M_cache_locale(_M_ios_locale); 
# 483
this->tie(__rhs.tie(nullptr)); 
# 484
(_M_fill) = (__rhs._M_fill); 
# 485
(_M_fill_init) = (__rhs._M_fill_init); 
# 486
(_M_streambuf) = nullptr; 
# 487
} 
# 490
void move(basic_ios &&__rhs) 
# 491
{ this->move(__rhs); } 
# 494
void swap(basic_ios &__rhs) noexcept 
# 495
{ 
# 496
this->ios_base::_M_swap(__rhs); 
# 497
_M_cache_locale(_M_ios_locale); 
# 498
__rhs._M_cache_locale(__rhs._M_ios_locale); 
# 499
std::swap(_M_tie, __rhs._M_tie); 
# 500
std::swap(_M_fill, __rhs._M_fill); 
# 501
std::swap(_M_fill_init, __rhs._M_fill_init); 
# 502
} 
# 505
void set_rdbuf(basic_streambuf< _CharT, _Traits>  *__sb) 
# 506
{ (_M_streambuf) = __sb; } 
# 510
void _M_cache_locale(const locale & __loc); 
# 511
}; 
# 514
}
# 35 "/usr/include/c++/9/bits/basic_ios.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 39
template< class _CharT, class _Traits> void 
# 41
basic_ios< _CharT, _Traits> ::clear(iostate __state) 
# 42
{ 
# 43
if (this->rdbuf()) { 
# 44
(_M_streambuf_state) = __state; } else { 
# 46
(_M_streambuf_state) = (__state | badbit); }  
# 47
if (((exceptions()) & (rdstate()))) { 
# 48
__throw_ios_failure("basic_ios::clear"); }  
# 49
} 
# 51
template< class _CharT, class _Traits> basic_streambuf< _CharT, _Traits>  *
# 53
basic_ios< _CharT, _Traits> ::rdbuf(basic_streambuf< _CharT, _Traits>  *__sb) 
# 54
{ 
# 55
basic_streambuf< _CharT, _Traits>  *__old = _M_streambuf; 
# 56
(_M_streambuf) = __sb; 
# 57
clear(); 
# 58
return __old; 
# 59
} 
# 61
template< class _CharT, class _Traits> basic_ios< _CharT, _Traits>  &
# 63
basic_ios< _CharT, _Traits> ::copyfmt(const basic_ios &__rhs) 
# 64
{ 
# 67
if (this != (&__rhs)) 
# 68
{ 
# 73
_Words *__words = ((__rhs._M_word_size) <= (_S_local_word_size)) ? _M_local_word : (new _Words [__rhs._M_word_size]); 
# 77
_Callback_list *__cb = __rhs._M_callbacks; 
# 78
if (__cb) { 
# 79
__cb->_M_add_reference(); }  
# 80
this->ios_base::_M_call_callbacks(erase_event); 
# 81
if ((_M_word) != (_M_local_word)) 
# 82
{ 
# 83
delete [] (_M_word); 
# 84
(_M_word) = (0); 
# 85
}  
# 86
this->ios_base::_M_dispose_callbacks(); 
# 89
(_M_callbacks) = __cb; 
# 90
for (int __i = 0; __i < (__rhs._M_word_size); ++__i) { 
# 91
(__words[__i]) = ((__rhs._M_word)[__i]); }  
# 92
(_M_word) = __words; 
# 93
(_M_word_size) = (__rhs._M_word_size); 
# 95
this->flags(__rhs.flags()); 
# 96
this->width(__rhs.width()); 
# 97
this->precision(__rhs.precision()); 
# 98
this->tie(__rhs.tie()); 
# 99
this->fill(__rhs.fill()); 
# 100
((_M_ios_locale) = (__rhs.getloc())); 
# 101
_M_cache_locale(_M_ios_locale); 
# 103
this->ios_base::_M_call_callbacks(copyfmt_event); 
# 106
exceptions(__rhs.exceptions()); 
# 107
}  
# 108
return *this; 
# 109
} 
# 112
template< class _CharT, class _Traits> locale 
# 114
basic_ios< _CharT, _Traits> ::imbue(const locale &__loc) 
# 115
{ 
# 116
locale __old(this->getloc()); 
# 117
this->ios_base::imbue(__loc); 
# 118
_M_cache_locale(__loc); 
# 119
if (this->rdbuf() != 0) { 
# 120
this->rdbuf()->pubimbue(__loc); }  
# 121
return __old; 
# 122
} 
# 124
template< class _CharT, class _Traits> void 
# 126
basic_ios< _CharT, _Traits> ::init(basic_streambuf< _CharT, _Traits>  *__sb) 
# 127
{ 
# 129
this->ios_base::_M_init(); 
# 132
_M_cache_locale(_M_ios_locale); 
# 146 "/usr/include/c++/9/bits/basic_ios.tcc" 3
(_M_fill) = _CharT(); 
# 147
(_M_fill_init) = false; 
# 149
(_M_tie) = 0; 
# 150
(_M_exception) = goodbit; 
# 151
(_M_streambuf) = __sb; 
# 152
(_M_streambuf_state) = ((__sb) ? goodbit : badbit); 
# 153
} 
# 155
template< class _CharT, class _Traits> void 
# 157
basic_ios< _CharT, _Traits> ::_M_cache_locale(const locale &__loc) 
# 158
{ 
# 159
if (__builtin_expect(has_facet< __ctype_type> (__loc), true)) { 
# 160
(_M_ctype) = std::__addressof(use_facet< __ctype_type> (__loc)); } else { 
# 162
(_M_ctype) = 0; }  
# 164
if (__builtin_expect(has_facet< __num_put_type> (__loc), true)) { 
# 165
(_M_num_put) = std::__addressof(use_facet< __num_put_type> (__loc)); } else { 
# 167
(_M_num_put) = 0; }  
# 169
if (__builtin_expect(has_facet< __num_get_type> (__loc), true)) { 
# 170
(_M_num_get) = std::__addressof(use_facet< __num_get_type> (__loc)); } else { 
# 172
(_M_num_get) = 0; }  
# 173
} 
# 178
extern template class basic_ios< char> ;
# 181
extern template class basic_ios< wchar_t> ;
# 186
}
# 41 "/usr/include/c++/9/ostream" 3
namespace std __attribute((__visibility__("default"))) { 
# 57 "/usr/include/c++/9/ostream" 3
template< class _CharT, class _Traits> 
# 58
class basic_ostream : virtual public basic_ios< _CharT, _Traits>  { 
# 62
public: typedef _CharT char_type; 
# 63
typedef typename _Traits::int_type int_type; 
# 64
typedef typename _Traits::pos_type pos_type; 
# 65
typedef typename _Traits::off_type off_type; 
# 66
typedef _Traits traits_type; 
# 69
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 70
typedef basic_ios< _CharT, _Traits>  __ios_type; 
# 71
typedef basic_ostream __ostream_type; 
# 73
typedef num_put< _CharT, ostreambuf_iterator< _CharT, _Traits> >  __num_put_type; 
# 74
typedef ctype< _CharT>  __ctype_type; 
# 84 "/usr/include/c++/9/ostream" 3
explicit basic_ostream(__streambuf_type *__sb) 
# 85
{ this->init(__sb); } 
# 93
virtual ~basic_ostream() { } 
# 96
class sentry; 
# 97
friend class sentry; 
# 108 "/usr/include/c++/9/ostream" 3
__ostream_type &operator<<(__ostream_type &(*__pf)(__ostream_type &)) 
# 109
{ 
# 113
return __pf(*this); 
# 114
} 
# 117
__ostream_type &operator<<(__ios_type &(*__pf)(__ios_type &)) 
# 118
{ 
# 122
__pf(*this); 
# 123
return *this; 
# 124
} 
# 127
__ostream_type &operator<<(std::ios_base &(*__pf)(std::ios_base &)) 
# 128
{ 
# 132
__pf(*this); 
# 133
return *this; 
# 134
} 
# 166 "/usr/include/c++/9/ostream" 3
__ostream_type &operator<<(long __n) 
# 167
{ return _M_insert(__n); } 
# 170
__ostream_type &operator<<(unsigned long __n) 
# 171
{ return _M_insert(__n); } 
# 174
__ostream_type &operator<<(bool __n) 
# 175
{ return _M_insert(__n); } 
# 178
__ostream_type &operator<<(short __n); 
# 181
__ostream_type &operator<<(unsigned short __n) 
# 182
{ 
# 185
return _M_insert(static_cast< unsigned long>(__n)); 
# 186
} 
# 189
__ostream_type &operator<<(int __n); 
# 192
__ostream_type &operator<<(unsigned __n) 
# 193
{ 
# 196
return _M_insert(static_cast< unsigned long>(__n)); 
# 197
} 
# 201
__ostream_type &operator<<(long long __n) 
# 202
{ return _M_insert(__n); } 
# 205
__ostream_type &operator<<(unsigned long long __n) 
# 206
{ return _M_insert(__n); } 
# 220 "/usr/include/c++/9/ostream" 3
__ostream_type &operator<<(double __f) 
# 221
{ return _M_insert(__f); } 
# 224
__ostream_type &operator<<(float __f) 
# 225
{ 
# 228
return _M_insert(static_cast< double>(__f)); 
# 229
} 
# 232
__ostream_type &operator<<(long double __f) 
# 233
{ return _M_insert(__f); } 
# 245 "/usr/include/c++/9/ostream" 3
__ostream_type &operator<<(const void *__p) 
# 246
{ return _M_insert(__p); } 
# 276 "/usr/include/c++/9/ostream" 3
__ostream_type &operator<<(__streambuf_type * __sb); 
# 309 "/usr/include/c++/9/ostream" 3
__ostream_type &put(char_type __c); 
# 317
void _M_write(const char_type *__s, std::streamsize __n) 
# 318
{ 
# 319
const std::streamsize __put = this->rdbuf()->sputn(__s, __n); 
# 320
if (__put != __n) { 
# 321
this->setstate(ios_base::badbit); }  
# 322
} 
# 341 "/usr/include/c++/9/ostream" 3
__ostream_type &write(const char_type * __s, std::streamsize __n); 
# 354 "/usr/include/c++/9/ostream" 3
__ostream_type &flush(); 
# 364 "/usr/include/c++/9/ostream" 3
pos_type tellp(); 
# 375 "/usr/include/c++/9/ostream" 3
__ostream_type &seekp(pos_type); 
# 387 "/usr/include/c++/9/ostream" 3
__ostream_type &seekp(off_type, std::ios_base::seekdir); 
# 390
protected: basic_ostream() 
# 391
{ this->init(0); } 
# 395
basic_ostream(basic_iostream< _CharT, _Traits>  &) { } 
# 397
basic_ostream(const basic_ostream &) = delete;
# 399
basic_ostream(basic_ostream &&__rhs) : __ios_type() 
# 401
{ __ios_type::move(__rhs); } 
# 405
basic_ostream &operator=(const basic_ostream &) = delete;
# 408
basic_ostream &operator=(basic_ostream &&__rhs) 
# 409
{ 
# 410
swap(__rhs); 
# 411
return *this; 
# 412
} 
# 415
void swap(basic_ostream &__rhs) 
# 416
{ __ios_type::swap(__rhs); } 
# 419
template< class _ValueT> __ostream_type &_M_insert(_ValueT __v); 
# 422
}; 
# 431 "/usr/include/c++/9/ostream" 3
template< class _CharT, class _Traits> 
# 432
class basic_ostream< _CharT, _Traits> ::sentry { 
# 435
bool _M_ok; 
# 436
basic_ostream &_M_os; 
# 451 "/usr/include/c++/9/ostream" 3
public: explicit sentry(basic_ostream & __os); 
# 453
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 462
~sentry() 
# 463
{ 
# 465
if (((bool)((_M_os).flags() & ios_base::unitbuf)) && (!uncaught_exception())) 
# 466
{ 
# 468
if ((_M_os).rdbuf() && ((_M_os).rdbuf()->pubsync() == (-1))) { 
# 469
(_M_os).setstate(ios_base::badbit); }  
# 470
}  
# 471
} 
#pragma GCC diagnostic pop
# 484 "/usr/include/c++/9/ostream" 3
explicit operator bool() const 
# 485
{ return _M_ok; } 
# 486
}; 
# 504 "/usr/include/c++/9/ostream" 3
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 506
operator<<(basic_ostream< _CharT, _Traits>  &__out, _CharT __c) 
# 507
{ return __ostream_insert(__out, &__c, 1); } 
# 509
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 511
operator<<(basic_ostream< _CharT, _Traits>  &__out, char __c) 
# 512
{ return (__out << __out.widen(__c)); } 
# 515
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 517
operator<<(basic_ostream< char, _Traits>  &__out, char __c) 
# 518
{ return __ostream_insert(__out, &__c, 1); } 
# 521
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 523
operator<<(basic_ostream< char, _Traits>  &__out, signed char __c) 
# 524
{ return (__out << (static_cast< char>(__c))); } 
# 526
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 528
operator<<(basic_ostream< char, _Traits>  &__out, unsigned char __c) 
# 529
{ return (__out << (static_cast< char>(__c))); } 
# 546 "/usr/include/c++/9/ostream" 3
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 548
operator<<(basic_ostream< _CharT, _Traits>  &__out, const _CharT *__s) 
# 549
{ 
# 550
if (!__s) { 
# 551
__out.setstate(ios_base::badbit); } else { 
# 553
__ostream_insert(__out, __s, static_cast< streamsize>(_Traits::length(__s))); }  
# 555
return __out; 
# 556
} 
# 558
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __out, const char * __s); 
# 563
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 565
operator<<(basic_ostream< char, _Traits>  &__out, const char *__s) 
# 566
{ 
# 567
if (!__s) { 
# 568
__out.setstate(ios_base::badbit); } else { 
# 570
__ostream_insert(__out, __s, static_cast< streamsize>(_Traits::length(__s))); }  
# 572
return __out; 
# 573
} 
# 576
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 578
operator<<(basic_ostream< char, _Traits>  &__out, const signed char *__s) 
# 579
{ return (__out << (reinterpret_cast< const char *>(__s))); } 
# 581
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 583
operator<<(basic_ostream< char, _Traits>  &__out, const unsigned char *__s) 
# 584
{ return (__out << (reinterpret_cast< const char *>(__s))); } 
# 597 "/usr/include/c++/9/ostream" 3
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 599
endl(basic_ostream< _CharT, _Traits>  &__os) 
# 600
{ return flush(__os.put(__os.widen('\n'))); } 
# 609 "/usr/include/c++/9/ostream" 3
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 611
ends(basic_ostream< _CharT, _Traits>  &__os) 
# 612
{ return __os.put(_CharT()); } 
# 619
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 621
flush(basic_ostream< _CharT, _Traits>  &__os) 
# 622
{ return __os.flush(); } 
# 625
template< class _Ch, class _Up> basic_ostream< _Ch, _Up>  &__is_convertible_to_basic_ostream_test(basic_ostream< _Ch, _Up>  *); 
# 629
template< class _Tp, class  = void> 
# 630
struct __is_convertible_to_basic_ostream_impl { 
# 632
using __ostream_type = void; 
# 633
}; 
# 635
template< class _Tp> using __do_is_convertible_to_basic_ostream_impl = __decltype((__is_convertible_to_basic_ostream_test(declval< typename remove_reference< _Tp> ::type *> ()))); 
# 640
template< class _Tp> 
# 641
struct __is_convertible_to_basic_ostream_impl< _Tp, __void_t< __do_is_convertible_to_basic_ostream_impl< _Tp> > >  { 
# 645
using __ostream_type = __do_is_convertible_to_basic_ostream_impl< _Tp> ; 
# 647
}; 
# 649
template< class _Tp> 
# 650
struct __is_convertible_to_basic_ostream : public __is_convertible_to_basic_ostream_impl< _Tp>  { 
# 654
using type = __not_< is_void< typename __is_convertible_to_basic_ostream_impl< _Tp> ::__ostream_type> > ; 
# 656
static constexpr bool value = (type::value); 
# 657
}; 
# 659
template< class _Ostream, class _Tp, class  = void> 
# 660
struct __is_insertable : public false_type { }; 
# 662
template< class _Ostream, class _Tp> 
# 663
struct __is_insertable< _Ostream, _Tp, __void_t< __decltype((declval< _Ostream &> () << declval< const _Tp &> ()))> >  : public true_type { 
# 666
}; 
# 668
template< class _Ostream> using __rvalue_ostream_type = typename __is_convertible_to_basic_ostream< _Ostream> ::__ostream_type; 
# 683 "/usr/include/c++/9/ostream" 3
template< class _Ostream, class _Tp> inline typename enable_if< __and_< __not_< is_lvalue_reference< _Ostream> > , __is_convertible_to_basic_ostream< _Ostream> , __is_insertable< __rvalue_ostream_type< _Ostream> , const _Tp &> > ::value, __rvalue_ostream_type< _Ostream> > ::type 
# 691
operator<<(_Ostream &&__os, const _Tp &__x) 
# 692
{ 
# 693
__rvalue_ostream_type< _Ostream>  __ret_os = __os; 
# 694
__ret_os << __x; 
# 695
return __ret_os; 
# 696
} 
# 700
}
# 41 "/usr/include/c++/9/bits/ostream.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _CharT, class _Traits> 
# 47
basic_ostream< _CharT, _Traits> ::sentry::sentry(basic_ostream &__os) : _M_ok(false), _M_os(__os) 
# 49
{ 
# 51
if (__os.tie() && __os.good()) { 
# 52
__os.tie()->flush(); }  
# 54
if (__os.good()) { 
# 55
(_M_ok) = true; } else { 
# 57
__os.setstate(ios_base::failbit); }  
# 58
} 
# 60
template< class _CharT, class _Traits> 
# 61
template< class _ValueT> basic_ostream< _CharT, _Traits>  &
# 64
basic_ostream< _CharT, _Traits> ::_M_insert(_ValueT __v) 
# 65
{ 
# 66
sentry __cerb(*this); 
# 67
if (__cerb) 
# 68
{ 
# 69
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 70
try 
# 71
{ 
# 72
const __num_put_type &__np = __check_facet((this->_M_num_put)); 
# 73
if (__np.put(*this, *this, this->fill(), __v).failed()) { 
# 74
(__err |= std::ios_base::badbit); }  
# 75
} 
# 76
catch (__cxxabiv1::__forced_unwind &) 
# 77
{ 
# 78
this->_M_setstate(ios_base::badbit); 
# 79
throw; 
# 80
} 
# 81
catch (...) 
# 82
{ this->_M_setstate(ios_base::badbit); }  
# 83
if (__err) { 
# 84
this->setstate(__err); }  
# 85
}  
# 86
return *this; 
# 87
} 
# 89
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 92
basic_ostream< _CharT, _Traits> ::operator<<(short __n) 
# 93
{ 
# 96
const std::ios_base::fmtflags __fmt = this->flags() & ios_base::basefield; 
# 97
if ((__fmt == std::ios_base::oct) || (__fmt == std::ios_base::hex)) { 
# 98
return _M_insert(static_cast< long>(static_cast< unsigned short>(__n))); } else { 
# 100
return _M_insert(static_cast< long>(__n)); }  
# 101
} 
# 103
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 106
basic_ostream< _CharT, _Traits> ::operator<<(int __n) 
# 107
{ 
# 110
const std::ios_base::fmtflags __fmt = this->flags() & ios_base::basefield; 
# 111
if ((__fmt == std::ios_base::oct) || (__fmt == std::ios_base::hex)) { 
# 112
return _M_insert(static_cast< long>(static_cast< unsigned>(__n))); } else { 
# 114
return _M_insert(static_cast< long>(__n)); }  
# 115
} 
# 117
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 120
basic_ostream< _CharT, _Traits> ::operator<<(__streambuf_type *__sbin) 
# 121
{ 
# 122
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 123
sentry __cerb(*this); 
# 124
if (__cerb && __sbin) 
# 125
{ 
# 126
try 
# 127
{ 
# 128
if (!__copy_streambufs(__sbin, this->rdbuf())) { 
# 129
(__err |= std::ios_base::failbit); }  
# 130
} 
# 131
catch (__cxxabiv1::__forced_unwind &) 
# 132
{ 
# 133
this->_M_setstate(ios_base::badbit); 
# 134
throw; 
# 135
} 
# 136
catch (...) 
# 137
{ this->_M_setstate(ios_base::failbit); }  
# 138
} else { 
# 139
if (!__sbin) { 
# 140
(__err |= std::ios_base::badbit); }  }  
# 141
if (__err) { 
# 142
this->setstate(__err); }  
# 143
return *this; 
# 144
} 
# 146
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 149
basic_ostream< _CharT, _Traits> ::put(char_type __c) 
# 150
{ 
# 157
sentry __cerb(*this); 
# 158
if (__cerb) 
# 159
{ 
# 160
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 161
try 
# 162
{ 
# 163
const int_type __put = this->rdbuf()->sputc(__c); 
# 164
if (traits_type::eq_int_type(__put, traits_type::eof())) { 
# 165
(__err |= std::ios_base::badbit); }  
# 166
} 
# 167
catch (__cxxabiv1::__forced_unwind &) 
# 168
{ 
# 169
this->_M_setstate(ios_base::badbit); 
# 170
throw; 
# 171
} 
# 172
catch (...) 
# 173
{ this->_M_setstate(ios_base::badbit); }  
# 174
if (__err) { 
# 175
this->setstate(__err); }  
# 176
}  
# 177
return *this; 
# 178
} 
# 180
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 183
basic_ostream< _CharT, _Traits> ::write(const _CharT *__s, std::streamsize __n) 
# 184
{ 
# 192
sentry __cerb(*this); 
# 193
if (__cerb) 
# 194
{ 
# 195
try 
# 196
{ _M_write(__s, __n); } 
# 197
catch (__cxxabiv1::__forced_unwind &) 
# 198
{ 
# 199
this->_M_setstate(ios_base::badbit); 
# 200
throw; 
# 201
} 
# 202
catch (...) 
# 203
{ this->_M_setstate(ios_base::badbit); }  
# 204
}  
# 205
return *this; 
# 206
} 
# 208
template< class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::__ostream_type &
# 211
basic_ostream< _CharT, _Traits> ::flush() 
# 212
{ 
# 216
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 217
try 
# 218
{ 
# 219
if (this->rdbuf() && (this->rdbuf()->pubsync() == (-1))) { 
# 220
(__err |= std::ios_base::badbit); }  
# 221
} 
# 222
catch (__cxxabiv1::__forced_unwind &) 
# 223
{ 
# 224
this->_M_setstate(ios_base::badbit); 
# 225
throw; 
# 226
} 
# 227
catch (...) 
# 228
{ this->_M_setstate(ios_base::badbit); }  
# 229
if (__err) { 
# 230
this->setstate(__err); }  
# 231
return *this; 
# 232
} 
# 234
template< class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::pos_type 
# 237
basic_ostream< _CharT, _Traits> ::tellp() 
# 238
{ 
# 239
pos_type __ret = ((pos_type)(-1)); 
# 240
try 
# 241
{ 
# 242
if (!this->fail()) { 
# 243
__ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out); }  
# 244
} 
# 245
catch (__cxxabiv1::__forced_unwind &) 
# 246
{ 
# 247
this->_M_setstate(ios_base::badbit); 
# 248
throw; 
# 249
} 
# 250
catch (...) 
# 251
{ this->_M_setstate(ios_base::badbit); }  
# 252
return __ret; 
# 253
} 
# 255
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 258
basic_ostream< _CharT, _Traits> ::seekp(pos_type __pos) 
# 259
{ 
# 260
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 261
try 
# 262
{ 
# 263
if (!this->fail()) 
# 264
{ 
# 267
const pos_type __p = this->rdbuf()->pubseekpos(__pos, ios_base::out); 
# 271
if (__p == ((pos_type)((off_type)(-1)))) { 
# 272
(__err |= std::ios_base::failbit); }  
# 273
}  
# 274
} 
# 275
catch (__cxxabiv1::__forced_unwind &) 
# 276
{ 
# 277
this->_M_setstate(ios_base::badbit); 
# 278
throw; 
# 279
} 
# 280
catch (...) 
# 281
{ this->_M_setstate(ios_base::badbit); }  
# 282
if (__err) { 
# 283
this->setstate(__err); }  
# 284
return *this; 
# 285
} 
# 287
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 290
basic_ostream< _CharT, _Traits> ::seekp(off_type __off, std::ios_base::seekdir __dir) 
# 291
{ 
# 292
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 293
try 
# 294
{ 
# 295
if (!this->fail()) 
# 296
{ 
# 299
const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir, ios_base::out); 
# 303
if (__p == ((pos_type)((off_type)(-1)))) { 
# 304
(__err |= std::ios_base::failbit); }  
# 305
}  
# 306
} 
# 307
catch (__cxxabiv1::__forced_unwind &) 
# 308
{ 
# 309
this->_M_setstate(ios_base::badbit); 
# 310
throw; 
# 311
} 
# 312
catch (...) 
# 313
{ this->_M_setstate(ios_base::badbit); }  
# 314
if (__err) { 
# 315
this->setstate(__err); }  
# 316
return *this; 
# 317
} 
# 319
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 321
operator<<(basic_ostream< _CharT, _Traits>  &__out, const char *__s) 
# 322
{ 
# 323
if (!__s) { 
# 324
__out.setstate(ios_base::badbit); } else 
# 326
{ 
# 329
const size_t __clen = char_traits< char> ::length(__s); 
# 330
try 
# 331
{ 
# 332
struct __ptr_guard { 
# 334
_CharT *__p; 
# 335
__ptr_guard(_CharT *__ip) : __p(__ip) { } 
# 336
~__ptr_guard() { delete [] (__p); } 
# 337
_CharT *__get() { return __p; } 
# 338
} __pg(new _CharT [__clen]); 
# 340
_CharT *__ws = __pg.__get(); 
# 341
for (size_t __i = (0); __i < __clen; ++__i) { 
# 342
(__ws[__i]) = __out.widen(__s[__i]); }  
# 343
__ostream_insert(__out, __ws, __clen); 
# 344
} 
# 345
catch (__cxxabiv1::__forced_unwind &) 
# 346
{ 
# 347
__out._M_setstate(ios_base::badbit); 
# 348
throw; 
# 349
} 
# 350
catch (...) 
# 351
{ __out._M_setstate(ios_base::badbit); }  
# 352
}  
# 353
return __out; 
# 354
} 
# 359
extern template class basic_ostream< char> ;
# 360
extern template basic_ostream< char>  &endl(basic_ostream< char>  & __os);
# 361
extern template basic_ostream< char>  &ends(basic_ostream< char>  & __os);
# 362
extern template basic_ostream< char>  &flush(basic_ostream< char>  & __os);
# 363
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __out, char __c);
# 364
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __out, unsigned char __c);
# 365
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __out, signed char __c);
# 366
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __out, const char * __s);
# 367
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __out, const unsigned char * __s);
# 368
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __out, const signed char * __s);
# 370
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(long __v);
# 371
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(unsigned long __v);
# 372
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(bool __v);
# 374
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(long long __v);
# 375
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(unsigned long long __v);
# 377
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(double __v);
# 378
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(long double __v);
# 379
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(const void * __v);
# 382
extern template class basic_ostream< wchar_t> ;
# 383
extern template basic_ostream< wchar_t>  &endl(basic_ostream< wchar_t>  & __os);
# 384
extern template basic_ostream< wchar_t>  &ends(basic_ostream< wchar_t>  & __os);
# 385
extern template basic_ostream< wchar_t>  &flush(basic_ostream< wchar_t>  & __os);
# 386
extern template basic_ostream< wchar_t>  &operator<<(basic_ostream< wchar_t>  & __out, wchar_t __c);
# 387
extern template basic_ostream< wchar_t>  &operator<<(basic_ostream< wchar_t>  & __out, char __c);
# 388
extern template basic_ostream< wchar_t>  &operator<<(basic_ostream< wchar_t>  & __out, const wchar_t * __s);
# 389
extern template basic_ostream< wchar_t>  &operator<<(basic_ostream< wchar_t>  & __out, const char * __s);
# 391
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(long __v);
# 392
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(unsigned long __v);
# 393
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(bool __v);
# 395
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(long long __v);
# 396
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(unsigned long long __v);
# 398
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(double __v);
# 399
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(long double __v);
# 400
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(const void * __v);
# 405
}
# 41 "/usr/include/c++/9/istream" 3
namespace std __attribute((__visibility__("default"))) { 
# 57 "/usr/include/c++/9/istream" 3
template< class _CharT, class _Traits> 
# 58
class basic_istream : virtual public basic_ios< _CharT, _Traits>  { 
# 62
public: typedef _CharT char_type; 
# 63
typedef typename _Traits::int_type int_type; 
# 64
typedef typename _Traits::pos_type pos_type; 
# 65
typedef typename _Traits::off_type off_type; 
# 66
typedef _Traits traits_type; 
# 69
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 70
typedef basic_ios< _CharT, _Traits>  __ios_type; 
# 71
typedef basic_istream __istream_type; 
# 73
typedef num_get< _CharT, istreambuf_iterator< _CharT, _Traits> >  __num_get_type; 
# 74
typedef ctype< _CharT>  __ctype_type; 
# 82
protected: std::streamsize _M_gcount; 
# 93
public: explicit basic_istream(__streambuf_type *__sb) : _M_gcount(((std::streamsize)0)) 
# 95
{ this->init(__sb); } 
# 103
virtual ~basic_istream() 
# 104
{ (_M_gcount) = ((std::streamsize)0); } 
# 107
class sentry; 
# 108
friend class sentry; 
# 120 "/usr/include/c++/9/istream" 3
__istream_type &operator>>(__istream_type &(*__pf)(__istream_type &)) 
# 121
{ return __pf(*this); } 
# 124
__istream_type &operator>>(__ios_type &(*__pf)(__ios_type &)) 
# 125
{ 
# 126
__pf(*this); 
# 127
return *this; 
# 128
} 
# 131
__istream_type &operator>>(std::ios_base &(*__pf)(std::ios_base &)) 
# 132
{ 
# 133
__pf(*this); 
# 134
return *this; 
# 135
} 
# 168 "/usr/include/c++/9/istream" 3
__istream_type &operator>>(bool &__n) 
# 169
{ return _M_extract(__n); } 
# 172
__istream_type &operator>>(short & __n); 
# 175
__istream_type &operator>>(unsigned short &__n) 
# 176
{ return _M_extract(__n); } 
# 179
__istream_type &operator>>(int & __n); 
# 182
__istream_type &operator>>(unsigned &__n) 
# 183
{ return _M_extract(__n); } 
# 186
__istream_type &operator>>(long &__n) 
# 187
{ return _M_extract(__n); } 
# 190
__istream_type &operator>>(unsigned long &__n) 
# 191
{ return _M_extract(__n); } 
# 195
__istream_type &operator>>(long long &__n) 
# 196
{ return _M_extract(__n); } 
# 199
__istream_type &operator>>(unsigned long long &__n) 
# 200
{ return _M_extract(__n); } 
# 214 "/usr/include/c++/9/istream" 3
__istream_type &operator>>(float &__f) 
# 215
{ return _M_extract(__f); } 
# 218
__istream_type &operator>>(double &__f) 
# 219
{ return _M_extract(__f); } 
# 222
__istream_type &operator>>(long double &__f) 
# 223
{ return _M_extract(__f); } 
# 235 "/usr/include/c++/9/istream" 3
__istream_type &operator>>(void *&__p) 
# 236
{ return _M_extract(__p); } 
# 259 "/usr/include/c++/9/istream" 3
__istream_type &operator>>(__streambuf_type * __sb); 
# 269 "/usr/include/c++/9/istream" 3
std::streamsize gcount() const 
# 270
{ return _M_gcount; } 
# 302 "/usr/include/c++/9/istream" 3
int_type get(); 
# 316 "/usr/include/c++/9/istream" 3
__istream_type &get(char_type & __c); 
# 343 "/usr/include/c++/9/istream" 3
__istream_type &get(char_type * __s, std::streamsize __n, char_type __delim); 
# 354 "/usr/include/c++/9/istream" 3
__istream_type &get(char_type *__s, std::streamsize __n) 
# 355
{ return this->get(__s, __n, this->widen('\n')); } 
# 377 "/usr/include/c++/9/istream" 3
__istream_type &get(__streambuf_type & __sb, char_type __delim); 
# 387 "/usr/include/c++/9/istream" 3
__istream_type &get(__streambuf_type &__sb) 
# 388
{ return this->get(__sb, this->widen('\n')); } 
# 416 "/usr/include/c++/9/istream" 3
__istream_type &getline(char_type * __s, std::streamsize __n, char_type __delim); 
# 427 "/usr/include/c++/9/istream" 3
__istream_type &getline(char_type *__s, std::streamsize __n) 
# 428
{ return this->getline(__s, __n, this->widen('\n')); } 
# 451 "/usr/include/c++/9/istream" 3
__istream_type &ignore(std::streamsize __n, int_type __delim); 
# 454
__istream_type &ignore(std::streamsize __n); 
# 457
__istream_type &ignore(); 
# 468 "/usr/include/c++/9/istream" 3
int_type peek(); 
# 486 "/usr/include/c++/9/istream" 3
__istream_type &read(char_type * __s, std::streamsize __n); 
# 505 "/usr/include/c++/9/istream" 3
std::streamsize readsome(char_type * __s, std::streamsize __n); 
# 522 "/usr/include/c++/9/istream" 3
__istream_type &putback(char_type __c); 
# 538 "/usr/include/c++/9/istream" 3
__istream_type &unget(); 
# 556 "/usr/include/c++/9/istream" 3
int sync(); 
# 571 "/usr/include/c++/9/istream" 3
pos_type tellg(); 
# 586 "/usr/include/c++/9/istream" 3
__istream_type &seekg(pos_type); 
# 602 "/usr/include/c++/9/istream" 3
__istream_type &seekg(off_type, std::ios_base::seekdir); 
# 606
protected: basic_istream() : _M_gcount(((std::streamsize)0)) 
# 608
{ this->init(0); } 
# 611
basic_istream(const basic_istream &) = delete;
# 613
basic_istream(basic_istream &&__rhs) : __ios_type(), _M_gcount(__rhs._M_gcount) 
# 615
{ 
# 616
__ios_type::move(__rhs); 
# 617
(__rhs._M_gcount) = (0); 
# 618
} 
# 622
basic_istream &operator=(const basic_istream &) = delete;
# 625
basic_istream &operator=(basic_istream &&__rhs) 
# 626
{ 
# 627
swap(__rhs); 
# 628
return *this; 
# 629
} 
# 632
void swap(basic_istream &__rhs) 
# 633
{ 
# 634
__ios_type::swap(__rhs); 
# 635
std::swap(_M_gcount, __rhs._M_gcount); 
# 636
} 
# 639
template< class _ValueT> __istream_type &_M_extract(_ValueT & __v); 
# 642
}; 
# 648
template<> basic_istream< char>  &basic_istream< char> ::getline(char_type * __s, streamsize __n, char_type __delim); 
# 653
template<> basic_istream< char>  &basic_istream< char> ::ignore(streamsize __n); 
# 658
template<> basic_istream< char>  &basic_istream< char> ::ignore(streamsize __n, int_type __delim); 
# 664
template<> basic_istream< wchar_t>  &basic_istream< wchar_t> ::getline(char_type * __s, streamsize __n, char_type __delim); 
# 669
template<> basic_istream< wchar_t>  &basic_istream< wchar_t> ::ignore(streamsize __n); 
# 674
template<> basic_istream< wchar_t>  &basic_istream< wchar_t> ::ignore(streamsize __n, int_type __delim); 
# 685 "/usr/include/c++/9/istream" 3
template< class _CharT, class _Traits> 
# 686
class basic_istream< _CharT, _Traits> ::sentry { 
# 689
bool _M_ok; 
# 693
public: typedef _Traits traits_type; 
# 694
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 695
typedef basic_istream __istream_type; 
# 696
typedef typename basic_istream< _CharT, _Traits> ::__ctype_type __ctype_type; 
# 697
typedef typename _Traits::int_type __int_type; 
# 722 "/usr/include/c++/9/istream" 3
explicit sentry(basic_istream & __is, bool __noskipws = false); 
# 734 "/usr/include/c++/9/istream" 3
explicit operator bool() const 
# 735
{ return _M_ok; } 
# 736
}; 
# 750 "/usr/include/c++/9/istream" 3
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __in, _CharT & __c); 
# 754
template< class _Traits> inline basic_istream< char, _Traits>  &
# 756
operator>>(basic_istream< char, _Traits>  &__in, unsigned char &__c) 
# 757
{ return (__in >> (reinterpret_cast< char &>(__c))); } 
# 759
template< class _Traits> inline basic_istream< char, _Traits>  &
# 761
operator>>(basic_istream< char, _Traits>  &__in, signed char &__c) 
# 762
{ return (__in >> (reinterpret_cast< char &>(__c))); } 
# 792 "/usr/include/c++/9/istream" 3
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __in, _CharT * __s); 
# 799
template<> basic_istream< char>  &operator>>(basic_istream< char>  & __in, char * __s); 
# 801
template< class _Traits> inline basic_istream< char, _Traits>  &
# 803
operator>>(basic_istream< char, _Traits>  &__in, unsigned char *__s) 
# 804
{ return (__in >> (reinterpret_cast< char *>(__s))); } 
# 806
template< class _Traits> inline basic_istream< char, _Traits>  &
# 808
operator>>(basic_istream< char, _Traits>  &__in, signed char *__s) 
# 809
{ return (__in >> (reinterpret_cast< char *>(__s))); } 
# 823 "/usr/include/c++/9/istream" 3
template< class _CharT, class _Traits> 
# 824
class basic_iostream : public basic_istream< _CharT, _Traits> , public basic_ostream< _CharT, _Traits>  { 
# 832
public: typedef _CharT char_type; 
# 833
typedef typename _Traits::int_type int_type; 
# 834
typedef typename _Traits::pos_type pos_type; 
# 835
typedef typename _Traits::off_type off_type; 
# 836
typedef _Traits traits_type; 
# 839
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 840
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 849
explicit basic_iostream(basic_streambuf< _CharT, _Traits>  *__sb) : __istream_type(__sb), __ostream_type(__sb) 
# 850
{ } 
# 856
virtual ~basic_iostream() { } 
# 859
protected: basic_iostream() : __istream_type(), __ostream_type() 
# 860
{ } 
# 863
basic_iostream(const basic_iostream &) = delete;
# 865
basic_iostream(basic_iostream &&__rhs) : __istream_type(std::move(__rhs)), __ostream_type(*this) 
# 867
{ } 
# 871
basic_iostream &operator=(const basic_iostream &) = delete;
# 874
basic_iostream &operator=(basic_iostream &&__rhs) 
# 875
{ 
# 876
swap(__rhs); 
# 877
return *this; 
# 878
} 
# 881
void swap(basic_iostream &__rhs) 
# 882
{ __istream_type::swap(__rhs); } 
# 884
}; 
# 906 "/usr/include/c++/9/istream" 3
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &ws(basic_istream< _CharT, _Traits>  & __is); 
# 911
template< class _Ch, class _Up> basic_istream< _Ch, _Up>  &__is_convertible_to_basic_istream_test(basic_istream< _Ch, _Up>  *); 
# 915
template< class _Tp, class  = void> 
# 916
struct __is_convertible_to_basic_istream_impl { 
# 918
using __istream_type = void; 
# 919
}; 
# 921
template< class _Tp> using __do_is_convertible_to_basic_istream_impl = __decltype((__is_convertible_to_basic_istream_test(declval< typename remove_reference< _Tp> ::type *> ()))); 
# 926
template< class _Tp> 
# 927
struct __is_convertible_to_basic_istream_impl< _Tp, __void_t< __do_is_convertible_to_basic_istream_impl< _Tp> > >  { 
# 931
using __istream_type = __do_is_convertible_to_basic_istream_impl< _Tp> ; 
# 933
}; 
# 935
template< class _Tp> 
# 936
struct __is_convertible_to_basic_istream : public __is_convertible_to_basic_istream_impl< _Tp>  { 
# 940
using type = __not_< is_void< typename __is_convertible_to_basic_istream_impl< _Tp> ::__istream_type> > ; 
# 942
static constexpr bool value = (type::value); 
# 943
}; 
# 945
template< class _Istream, class _Tp, class  = void> 
# 946
struct __is_extractable : public false_type { }; 
# 948
template< class _Istream, class _Tp> 
# 949
struct __is_extractable< _Istream, _Tp, __void_t< __decltype((declval< _Istream &> () >> declval< _Tp> ()))> >  : public true_type { 
# 952
}; 
# 954
template< class _Istream> using __rvalue_istream_type = typename __is_convertible_to_basic_istream< _Istream> ::__istream_type; 
# 972 "/usr/include/c++/9/istream" 3
template< class _Istream, class _Tp> inline typename enable_if< __and_< __not_< is_lvalue_reference< _Istream> > , __is_convertible_to_basic_istream< _Istream> , __is_extractable< __rvalue_istream_type< _Istream> , _Tp &&> > ::value, __rvalue_istream_type< _Istream> > ::type 
# 980
operator>>(_Istream &&__is, _Tp &&__x) 
# 981
{ 
# 982
__rvalue_istream_type< _Istream>  __ret_is = __is; 
# 983
__ret_is >> std::forward< _Tp> (__x); 
# 984
return __ret_is; 
# 985
} 
# 989
}
# 41 "/usr/include/c++/9/bits/istream.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _CharT, class _Traits> 
# 47
basic_istream< _CharT, _Traits> ::sentry::sentry(basic_istream &__in, bool __noskip) : _M_ok(false) 
# 48
{ 
# 49
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 50
if (__in.good()) { 
# 51
try 
# 52
{ 
# 53
if (__in.tie()) { 
# 54
__in.tie()->flush(); }  
# 55
if ((!__noskip) && ((bool)(__in.flags() & ios_base::skipws))) 
# 56
{ 
# 57
const __int_type __eof = traits_type::eof(); 
# 58
__streambuf_type *__sb = __in.rdbuf(); 
# 59
__int_type __c = __sb->sgetc(); 
# 61
const __ctype_type &__ct = __check_facet((__in._M_ctype)); 
# 62
while ((!traits_type::eq_int_type(__c, __eof)) && __ct.is(ctype_base::space, traits_type::to_char_type(__c))) { 
# 65
__c = __sb->snextc(); }  
# 70
if (traits_type::eq_int_type(__c, __eof)) { 
# 71
(__err |= std::ios_base::eofbit); }  
# 72
}  
# 73
} 
# 74
catch (__cxxabiv1::__forced_unwind &) 
# 75
{ 
# 76
__in._M_setstate(ios_base::badbit); 
# 77
throw; 
# 78
} 
# 79
catch (...) 
# 80
{ __in._M_setstate(ios_base::badbit); }  }  
# 82
if (__in.good() && (__err == std::ios_base::goodbit)) { 
# 83
(_M_ok) = true; } else 
# 85
{ 
# 86
(__err |= std::ios_base::failbit); 
# 87
__in.setstate(__err); 
# 88
}  
# 89
} 
# 91
template< class _CharT, class _Traits> 
# 92
template< class _ValueT> basic_istream< _CharT, _Traits>  &
# 95
basic_istream< _CharT, _Traits> ::_M_extract(_ValueT &__v) 
# 96
{ 
# 97
sentry __cerb(*this, false); 
# 98
if (__cerb) 
# 99
{ 
# 100
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 101
try 
# 102
{ 
# 103
const __num_get_type &__ng = __check_facet((this->_M_num_get)); 
# 104
__ng.get(*this, 0, *this, __err, __v); 
# 105
} 
# 106
catch (__cxxabiv1::__forced_unwind &) 
# 107
{ 
# 108
this->_M_setstate(ios_base::badbit); 
# 109
throw; 
# 110
} 
# 111
catch (...) 
# 112
{ this->_M_setstate(ios_base::badbit); }  
# 113
if (__err) { 
# 114
this->setstate(__err); }  
# 115
}  
# 116
return *this; 
# 117
} 
# 119
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 122
basic_istream< _CharT, _Traits> ::operator>>(short &__n) 
# 123
{ 
# 126
sentry __cerb(*this, false); 
# 127
if (__cerb) 
# 128
{ 
# 129
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 130
try 
# 131
{ 
# 132
long __l; 
# 133
const __num_get_type &__ng = __check_facet((this->_M_num_get)); 
# 134
__ng.get(*this, 0, *this, __err, __l); 
# 138
if (__l < __gnu_cxx::__numeric_traits_integer< short> ::__min) 
# 139
{ 
# 140
(__err |= std::ios_base::failbit); 
# 141
__n = __gnu_cxx::__numeric_traits_integer< short> ::__min; 
# 142
} else { 
# 143
if (__l > __gnu_cxx::__numeric_traits_integer< short> ::__max) 
# 144
{ 
# 145
(__err |= std::ios_base::failbit); 
# 146
__n = __gnu_cxx::__numeric_traits_integer< short> ::__max; 
# 147
} else { 
# 149
__n = ((short)__l); }  }  
# 150
} 
# 151
catch (__cxxabiv1::__forced_unwind &) 
# 152
{ 
# 153
this->_M_setstate(ios_base::badbit); 
# 154
throw; 
# 155
} 
# 156
catch (...) 
# 157
{ this->_M_setstate(ios_base::badbit); }  
# 158
if (__err) { 
# 159
this->setstate(__err); }  
# 160
}  
# 161
return *this; 
# 162
} 
# 164
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 167
basic_istream< _CharT, _Traits> ::operator>>(int &__n) 
# 168
{ 
# 171
sentry __cerb(*this, false); 
# 172
if (__cerb) 
# 173
{ 
# 174
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 175
try 
# 176
{ 
# 177
long __l; 
# 178
const __num_get_type &__ng = __check_facet((this->_M_num_get)); 
# 179
__ng.get(*this, 0, *this, __err, __l); 
# 183
if (__l < __gnu_cxx::__numeric_traits_integer< int> ::__min) 
# 184
{ 
# 185
(__err |= std::ios_base::failbit); 
# 186
__n = __gnu_cxx::__numeric_traits_integer< int> ::__min; 
# 187
} else { 
# 188
if (__l > __gnu_cxx::__numeric_traits_integer< int> ::__max) 
# 189
{ 
# 190
(__err |= std::ios_base::failbit); 
# 191
__n = __gnu_cxx::__numeric_traits_integer< int> ::__max; 
# 192
} else { 
# 194
__n = ((int)__l); }  }  
# 195
} 
# 196
catch (__cxxabiv1::__forced_unwind &) 
# 197
{ 
# 198
this->_M_setstate(ios_base::badbit); 
# 199
throw; 
# 200
} 
# 201
catch (...) 
# 202
{ this->_M_setstate(ios_base::badbit); }  
# 203
if (__err) { 
# 204
this->setstate(__err); }  
# 205
}  
# 206
return *this; 
# 207
} 
# 209
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 212
basic_istream< _CharT, _Traits> ::operator>>(__streambuf_type *__sbout) 
# 213
{ 
# 214
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 215
sentry __cerb(*this, false); 
# 216
if (__cerb && __sbout) 
# 217
{ 
# 218
try 
# 219
{ 
# 220
bool __ineof; 
# 221
if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof)) { 
# 222
(__err |= std::ios_base::failbit); }  
# 223
if (__ineof) { 
# 224
(__err |= std::ios_base::eofbit); }  
# 225
} 
# 226
catch (__cxxabiv1::__forced_unwind &) 
# 227
{ 
# 228
this->_M_setstate(ios_base::failbit); 
# 229
throw; 
# 230
} 
# 231
catch (...) 
# 232
{ this->_M_setstate(ios_base::failbit); }  
# 233
} else { 
# 234
if (!__sbout) { 
# 235
(__err |= std::ios_base::failbit); }  }  
# 236
if (__err) { 
# 237
this->setstate(__err); }  
# 238
return *this; 
# 239
} 
# 241
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::int_type 
# 244
basic_istream< _CharT, _Traits> ::get() 
# 245
{ 
# 246
const int_type __eof = traits_type::eof(); 
# 247
int_type __c = __eof; 
# 248
(_M_gcount) = (0); 
# 249
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 250
sentry __cerb(*this, true); 
# 251
if (__cerb) 
# 252
{ 
# 253
try 
# 254
{ 
# 255
__c = this->rdbuf()->sbumpc(); 
# 257
if (!traits_type::eq_int_type(__c, __eof)) { 
# 258
(_M_gcount) = (1); } else { 
# 260
(__err |= std::ios_base::eofbit); }  
# 261
} 
# 262
catch (__cxxabiv1::__forced_unwind &) 
# 263
{ 
# 264
this->_M_setstate(ios_base::badbit); 
# 265
throw; 
# 266
} 
# 267
catch (...) 
# 268
{ this->_M_setstate(ios_base::badbit); }  
# 269
}  
# 270
if (!(_M_gcount)) { 
# 271
(__err |= std::ios_base::failbit); }  
# 272
if (__err) { 
# 273
this->setstate(__err); }  
# 274
return __c; 
# 275
} 
# 277
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 280
basic_istream< _CharT, _Traits> ::get(char_type &__c) 
# 281
{ 
# 282
(_M_gcount) = (0); 
# 283
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 284
sentry __cerb(*this, true); 
# 285
if (__cerb) 
# 286
{ 
# 287
try 
# 288
{ 
# 289
const int_type __cb = this->rdbuf()->sbumpc(); 
# 291
if (!traits_type::eq_int_type(__cb, traits_type::eof())) 
# 292
{ 
# 293
(_M_gcount) = (1); 
# 294
__c = traits_type::to_char_type(__cb); 
# 295
} else { 
# 297
(__err |= std::ios_base::eofbit); }  
# 298
} 
# 299
catch (__cxxabiv1::__forced_unwind &) 
# 300
{ 
# 301
this->_M_setstate(ios_base::badbit); 
# 302
throw; 
# 303
} 
# 304
catch (...) 
# 305
{ this->_M_setstate(ios_base::badbit); }  
# 306
}  
# 307
if (!(_M_gcount)) { 
# 308
(__err |= std::ios_base::failbit); }  
# 309
if (__err) { 
# 310
this->setstate(__err); }  
# 311
return *this; 
# 312
} 
# 314
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 317
basic_istream< _CharT, _Traits> ::get(char_type *__s, std::streamsize __n, char_type __delim) 
# 318
{ 
# 319
(_M_gcount) = (0); 
# 320
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 321
sentry __cerb(*this, true); 
# 322
if (__cerb) 
# 323
{ 
# 324
try 
# 325
{ 
# 326
const int_type __idelim = traits_type::to_int_type(__delim); 
# 327
const int_type __eof = traits_type::eof(); 
# 328
__streambuf_type *__sb = this->rdbuf(); 
# 329
int_type __c = __sb->sgetc(); 
# 331
while ((((_M_gcount) + (1)) < __n) && (!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __idelim))) 
# 334
{ 
# 335
(*(__s++)) = traits_type::to_char_type(__c); 
# 336
++(_M_gcount); 
# 337
__c = __sb->snextc(); 
# 338
}  
# 339
if (traits_type::eq_int_type(__c, __eof)) { 
# 340
(__err |= std::ios_base::eofbit); }  
# 341
} 
# 342
catch (__cxxabiv1::__forced_unwind &) 
# 343
{ 
# 344
this->_M_setstate(ios_base::badbit); 
# 345
throw; 
# 346
} 
# 347
catch (...) 
# 348
{ this->_M_setstate(ios_base::badbit); }  
# 349
}  
# 352
if (__n > (0)) { 
# 353
(*__s) = char_type(); }  
# 354
if (!(_M_gcount)) { 
# 355
(__err |= std::ios_base::failbit); }  
# 356
if (__err) { 
# 357
this->setstate(__err); }  
# 358
return *this; 
# 359
} 
# 361
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 364
basic_istream< _CharT, _Traits> ::get(__streambuf_type &__sb, char_type __delim) 
# 365
{ 
# 366
(_M_gcount) = (0); 
# 367
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 368
sentry __cerb(*this, true); 
# 369
if (__cerb) 
# 370
{ 
# 371
try 
# 372
{ 
# 373
const int_type __idelim = traits_type::to_int_type(__delim); 
# 374
const int_type __eof = traits_type::eof(); 
# 375
__streambuf_type *__this_sb = this->rdbuf(); 
# 376
int_type __c = __this_sb->sgetc(); 
# 377
char_type __c2 = traits_type::to_char_type(__c); 
# 379
while ((!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __idelim)) && (!traits_type::eq_int_type(__sb.sputc(__c2), __eof))) 
# 382
{ 
# 383
++(_M_gcount); 
# 384
__c = __this_sb->snextc(); 
# 385
__c2 = traits_type::to_char_type(__c); 
# 386
}  
# 387
if (traits_type::eq_int_type(__c, __eof)) { 
# 388
(__err |= std::ios_base::eofbit); }  
# 389
} 
# 390
catch (__cxxabiv1::__forced_unwind &) 
# 391
{ 
# 392
this->_M_setstate(ios_base::badbit); 
# 393
throw; 
# 394
} 
# 395
catch (...) 
# 396
{ this->_M_setstate(ios_base::badbit); }  
# 397
}  
# 398
if (!(_M_gcount)) { 
# 399
(__err |= std::ios_base::failbit); }  
# 400
if (__err) { 
# 401
this->setstate(__err); }  
# 402
return *this; 
# 403
} 
# 405
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 408
basic_istream< _CharT, _Traits> ::getline(char_type *__s, std::streamsize __n, char_type __delim) 
# 409
{ 
# 410
(_M_gcount) = (0); 
# 411
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 412
sentry __cerb(*this, true); 
# 413
if (__cerb) 
# 414
{ 
# 415
try 
# 416
{ 
# 417
const int_type __idelim = traits_type::to_int_type(__delim); 
# 418
const int_type __eof = traits_type::eof(); 
# 419
__streambuf_type *__sb = this->rdbuf(); 
# 420
int_type __c = __sb->sgetc(); 
# 422
while ((((_M_gcount) + (1)) < __n) && (!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __idelim))) 
# 425
{ 
# 426
(*(__s++)) = traits_type::to_char_type(__c); 
# 427
__c = __sb->snextc(); 
# 428
++(_M_gcount); 
# 429
}  
# 430
if (traits_type::eq_int_type(__c, __eof)) { 
# 431
(__err |= std::ios_base::eofbit); } else 
# 433
{ 
# 434
if (traits_type::eq_int_type(__c, __idelim)) 
# 435
{ 
# 436
__sb->sbumpc(); 
# 437
++(_M_gcount); 
# 438
} else { 
# 440
(__err |= std::ios_base::failbit); }  
# 441
}  
# 442
} 
# 443
catch (__cxxabiv1::__forced_unwind &) 
# 444
{ 
# 445
this->_M_setstate(ios_base::badbit); 
# 446
throw; 
# 447
} 
# 448
catch (...) 
# 449
{ this->_M_setstate(ios_base::badbit); }  
# 450
}  
# 453
if (__n > (0)) { 
# 454
(*__s) = char_type(); }  
# 455
if (!(_M_gcount)) { 
# 456
(__err |= std::ios_base::failbit); }  
# 457
if (__err) { 
# 458
this->setstate(__err); }  
# 459
return *this; 
# 460
} 
# 465
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 468
basic_istream< _CharT, _Traits> ::ignore() 
# 469
{ 
# 470
(_M_gcount) = (0); 
# 471
sentry __cerb(*this, true); 
# 472
if (__cerb) 
# 473
{ 
# 474
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 475
try 
# 476
{ 
# 477
const int_type __eof = traits_type::eof(); 
# 478
__streambuf_type *__sb = this->rdbuf(); 
# 480
if (traits_type::eq_int_type(__sb->sbumpc(), __eof)) { 
# 481
(__err |= std::ios_base::eofbit); } else { 
# 483
(_M_gcount) = (1); }  
# 484
} 
# 485
catch (__cxxabiv1::__forced_unwind &) 
# 486
{ 
# 487
this->_M_setstate(ios_base::badbit); 
# 488
throw; 
# 489
} 
# 490
catch (...) 
# 491
{ this->_M_setstate(ios_base::badbit); }  
# 492
if (__err) { 
# 493
this->setstate(__err); }  
# 494
}  
# 495
return *this; 
# 496
} 
# 498
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 501
basic_istream< _CharT, _Traits> ::ignore(std::streamsize __n) 
# 502
{ 
# 503
(_M_gcount) = (0); 
# 504
sentry __cerb(*this, true); 
# 505
if (__cerb && (__n > (0))) 
# 506
{ 
# 507
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 508
try 
# 509
{ 
# 510
const int_type __eof = traits_type::eof(); 
# 511
__streambuf_type *__sb = this->rdbuf(); 
# 512
int_type __c = __sb->sgetc(); 
# 521 "/usr/include/c++/9/bits/istream.tcc" 3
bool __large_ignore = false; 
# 522
while (true) 
# 523
{ 
# 524
while (((_M_gcount) < __n) && (!traits_type::eq_int_type(__c, __eof))) 
# 526
{ 
# 527
++(_M_gcount); 
# 528
__c = __sb->snextc(); 
# 529
}  
# 530
if ((__n == __gnu_cxx::__numeric_traits_integer< long> ::__max) && (!traits_type::eq_int_type(__c, __eof))) 
# 532
{ 
# 533
(_M_gcount) = __gnu_cxx::__numeric_traits_integer< long> ::__min; 
# 535
__large_ignore = true; 
# 536
} else { 
# 538
break; }  
# 539
}  
# 541
if (__large_ignore) { 
# 542
(_M_gcount) = __gnu_cxx::__numeric_traits_integer< long> ::__max; }  
# 544
if (traits_type::eq_int_type(__c, __eof)) { 
# 545
(__err |= std::ios_base::eofbit); }  
# 546
} 
# 547
catch (__cxxabiv1::__forced_unwind &) 
# 548
{ 
# 549
this->_M_setstate(ios_base::badbit); 
# 550
throw; 
# 551
} 
# 552
catch (...) 
# 553
{ this->_M_setstate(ios_base::badbit); }  
# 554
if (__err) { 
# 555
this->setstate(__err); }  
# 556
}  
# 557
return *this; 
# 558
} 
# 560
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 563
basic_istream< _CharT, _Traits> ::ignore(std::streamsize __n, int_type __delim) 
# 564
{ 
# 565
(_M_gcount) = (0); 
# 566
sentry __cerb(*this, true); 
# 567
if (__cerb && (__n > (0))) 
# 568
{ 
# 569
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 570
try 
# 571
{ 
# 572
const int_type __eof = traits_type::eof(); 
# 573
__streambuf_type *__sb = this->rdbuf(); 
# 574
int_type __c = __sb->sgetc(); 
# 577
bool __large_ignore = false; 
# 578
while (true) 
# 579
{ 
# 580
while (((_M_gcount) < __n) && (!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __delim))) 
# 583
{ 
# 584
++(_M_gcount); 
# 585
__c = __sb->snextc(); 
# 586
}  
# 587
if ((__n == __gnu_cxx::__numeric_traits_integer< long> ::__max) && (!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __delim))) 
# 590
{ 
# 591
(_M_gcount) = __gnu_cxx::__numeric_traits_integer< long> ::__min; 
# 593
__large_ignore = true; 
# 594
} else { 
# 596
break; }  
# 597
}  
# 599
if (__large_ignore) { 
# 600
(_M_gcount) = __gnu_cxx::__numeric_traits_integer< long> ::__max; }  
# 602
if (traits_type::eq_int_type(__c, __eof)) { 
# 603
(__err |= std::ios_base::eofbit); } else { 
# 604
if (traits_type::eq_int_type(__c, __delim)) 
# 605
{ 
# 606
if ((_M_gcount) < __gnu_cxx::__numeric_traits_integer< long> ::__max) { 
# 608
++(_M_gcount); }  
# 609
__sb->sbumpc(); 
# 610
}  }  
# 611
} 
# 612
catch (__cxxabiv1::__forced_unwind &) 
# 613
{ 
# 614
this->_M_setstate(ios_base::badbit); 
# 615
throw; 
# 616
} 
# 617
catch (...) 
# 618
{ this->_M_setstate(ios_base::badbit); }  
# 619
if (__err) { 
# 620
this->setstate(__err); }  
# 621
}  
# 622
return *this; 
# 623
} 
# 625
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::int_type 
# 628
basic_istream< _CharT, _Traits> ::peek() 
# 629
{ 
# 630
int_type __c = traits_type::eof(); 
# 631
(_M_gcount) = (0); 
# 632
sentry __cerb(*this, true); 
# 633
if (__cerb) 
# 634
{ 
# 635
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 636
try 
# 637
{ 
# 638
__c = this->rdbuf()->sgetc(); 
# 639
if (traits_type::eq_int_type(__c, traits_type::eof())) { 
# 640
(__err |= std::ios_base::eofbit); }  
# 641
} 
# 642
catch (__cxxabiv1::__forced_unwind &) 
# 643
{ 
# 644
this->_M_setstate(ios_base::badbit); 
# 645
throw; 
# 646
} 
# 647
catch (...) 
# 648
{ this->_M_setstate(ios_base::badbit); }  
# 649
if (__err) { 
# 650
this->setstate(__err); }  
# 651
}  
# 652
return __c; 
# 653
} 
# 655
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 658
basic_istream< _CharT, _Traits> ::read(char_type *__s, std::streamsize __n) 
# 659
{ 
# 660
(_M_gcount) = (0); 
# 661
sentry __cerb(*this, true); 
# 662
if (__cerb) 
# 663
{ 
# 664
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 665
try 
# 666
{ 
# 667
(_M_gcount) = this->rdbuf()->sgetn(__s, __n); 
# 668
if ((_M_gcount) != __n) { 
# 669
(__err |= ((std::ios_base::eofbit | std::ios_base::failbit))); }  
# 670
} 
# 671
catch (__cxxabiv1::__forced_unwind &) 
# 672
{ 
# 673
this->_M_setstate(ios_base::badbit); 
# 674
throw; 
# 675
} 
# 676
catch (...) 
# 677
{ this->_M_setstate(ios_base::badbit); }  
# 678
if (__err) { 
# 679
this->setstate(__err); }  
# 680
}  
# 681
return *this; 
# 682
} 
# 684
template< class _CharT, class _Traits> streamsize 
# 687
basic_istream< _CharT, _Traits> ::readsome(char_type *__s, std::streamsize __n) 
# 688
{ 
# 689
(_M_gcount) = (0); 
# 690
sentry __cerb(*this, true); 
# 691
if (__cerb) 
# 692
{ 
# 693
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 694
try 
# 695
{ 
# 697
const std::streamsize __num = this->rdbuf()->in_avail(); 
# 698
if (__num > (0)) { 
# 699
(_M_gcount) = this->rdbuf()->sgetn(__s, std::min(__num, __n)); } else { 
# 700
if (__num == (-1)) { 
# 701
(__err |= std::ios_base::eofbit); }  }  
# 702
} 
# 703
catch (__cxxabiv1::__forced_unwind &) 
# 704
{ 
# 705
this->_M_setstate(ios_base::badbit); 
# 706
throw; 
# 707
} 
# 708
catch (...) 
# 709
{ this->_M_setstate(ios_base::badbit); }  
# 710
if (__err) { 
# 711
this->setstate(__err); }  
# 712
}  
# 713
return _M_gcount; 
# 714
} 
# 716
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 719
basic_istream< _CharT, _Traits> ::putback(char_type __c) 
# 720
{ 
# 723
(_M_gcount) = (0); 
# 725
this->clear(this->rdstate() & (~std::ios_base::eofbit)); 
# 726
sentry __cerb(*this, true); 
# 727
if (__cerb) 
# 728
{ 
# 729
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 730
try 
# 731
{ 
# 732
const int_type __eof = traits_type::eof(); 
# 733
__streambuf_type *__sb = this->rdbuf(); 
# 734
if ((!__sb) || traits_type::eq_int_type(__sb->sputbackc(__c), __eof)) { 
# 736
(__err |= std::ios_base::badbit); }  
# 737
} 
# 738
catch (__cxxabiv1::__forced_unwind &) 
# 739
{ 
# 740
this->_M_setstate(ios_base::badbit); 
# 741
throw; 
# 742
} 
# 743
catch (...) 
# 744
{ this->_M_setstate(ios_base::badbit); }  
# 745
if (__err) { 
# 746
this->setstate(__err); }  
# 747
}  
# 748
return *this; 
# 749
} 
# 751
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 754
basic_istream< _CharT, _Traits> ::unget() 
# 755
{ 
# 758
(_M_gcount) = (0); 
# 760
this->clear(this->rdstate() & (~std::ios_base::eofbit)); 
# 761
sentry __cerb(*this, true); 
# 762
if (__cerb) 
# 763
{ 
# 764
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 765
try 
# 766
{ 
# 767
const int_type __eof = traits_type::eof(); 
# 768
__streambuf_type *__sb = this->rdbuf(); 
# 769
if ((!__sb) || traits_type::eq_int_type(__sb->sungetc(), __eof)) { 
# 771
(__err |= std::ios_base::badbit); }  
# 772
} 
# 773
catch (__cxxabiv1::__forced_unwind &) 
# 774
{ 
# 775
this->_M_setstate(ios_base::badbit); 
# 776
throw; 
# 777
} 
# 778
catch (...) 
# 779
{ this->_M_setstate(ios_base::badbit); }  
# 780
if (__err) { 
# 781
this->setstate(__err); }  
# 782
}  
# 783
return *this; 
# 784
} 
# 786
template< class _CharT, class _Traits> int 
# 789
basic_istream< _CharT, _Traits> ::sync() 
# 790
{ 
# 793
int __ret = (-1); 
# 794
sentry __cerb(*this, true); 
# 795
if (__cerb) 
# 796
{ 
# 797
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 798
try 
# 799
{ 
# 800
__streambuf_type *__sb = this->rdbuf(); 
# 801
if (__sb) 
# 802
{ 
# 803
if (__sb->pubsync() == (-1)) { 
# 804
(__err |= std::ios_base::badbit); } else { 
# 806
__ret = 0; }  
# 807
}  
# 808
} 
# 809
catch (__cxxabiv1::__forced_unwind &) 
# 810
{ 
# 811
this->_M_setstate(ios_base::badbit); 
# 812
throw; 
# 813
} 
# 814
catch (...) 
# 815
{ this->_M_setstate(ios_base::badbit); }  
# 816
if (__err) { 
# 817
this->setstate(__err); }  
# 818
}  
# 819
return __ret; 
# 820
} 
# 822
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::pos_type 
# 825
basic_istream< _CharT, _Traits> ::tellg() 
# 826
{ 
# 829
pos_type __ret = ((pos_type)(-1)); 
# 830
sentry __cerb(*this, true); 
# 831
if (__cerb) 
# 832
{ 
# 833
try 
# 834
{ 
# 835
if (!this->fail()) { 
# 836
__ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::in); }  
# 838
} 
# 839
catch (__cxxabiv1::__forced_unwind &) 
# 840
{ 
# 841
this->_M_setstate(ios_base::badbit); 
# 842
throw; 
# 843
} 
# 844
catch (...) 
# 845
{ this->_M_setstate(ios_base::badbit); }  
# 846
}  
# 847
return __ret; 
# 848
} 
# 850
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 853
basic_istream< _CharT, _Traits> ::seekg(pos_type __pos) 
# 854
{ 
# 858
this->clear(this->rdstate() & (~std::ios_base::eofbit)); 
# 859
sentry __cerb(*this, true); 
# 860
if (__cerb) 
# 861
{ 
# 862
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 863
try 
# 864
{ 
# 865
if (!this->fail()) 
# 866
{ 
# 868
const pos_type __p = this->rdbuf()->pubseekpos(__pos, ios_base::in); 
# 872
if (__p == ((pos_type)((off_type)(-1)))) { 
# 873
(__err |= std::ios_base::failbit); }  
# 874
}  
# 875
} 
# 876
catch (__cxxabiv1::__forced_unwind &) 
# 877
{ 
# 878
this->_M_setstate(ios_base::badbit); 
# 879
throw; 
# 880
} 
# 881
catch (...) 
# 882
{ this->_M_setstate(ios_base::badbit); }  
# 883
if (__err) { 
# 884
this->setstate(__err); }  
# 885
}  
# 886
return *this; 
# 887
} 
# 889
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 892
basic_istream< _CharT, _Traits> ::seekg(off_type __off, std::ios_base::seekdir __dir) 
# 893
{ 
# 897
this->clear(this->rdstate() & (~std::ios_base::eofbit)); 
# 898
sentry __cerb(*this, true); 
# 899
if (__cerb) 
# 900
{ 
# 901
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 902
try 
# 903
{ 
# 904
if (!this->fail()) 
# 905
{ 
# 907
const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir, ios_base::in); 
# 911
if (__p == ((pos_type)((off_type)(-1)))) { 
# 912
(__err |= std::ios_base::failbit); }  
# 913
}  
# 914
} 
# 915
catch (__cxxabiv1::__forced_unwind &) 
# 916
{ 
# 917
this->_M_setstate(ios_base::badbit); 
# 918
throw; 
# 919
} 
# 920
catch (...) 
# 921
{ this->_M_setstate(ios_base::badbit); }  
# 922
if (__err) { 
# 923
this->setstate(__err); }  
# 924
}  
# 925
return *this; 
# 926
} 
# 929
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 931
operator>>(basic_istream< _CharT, _Traits>  &__in, _CharT &__c) 
# 932
{ 
# 933
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 934
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 936
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, false); 
# 937
if (__cerb) 
# 938
{ 
# 939
ios_base::iostate __err = ios_base::goodbit; 
# 940
try 
# 941
{ 
# 942
const __int_type __cb = __in.rdbuf()->sbumpc(); 
# 943
if (!_Traits::eq_int_type(__cb, _Traits::eof())) { 
# 944
__c = _Traits::to_char_type(__cb); } else { 
# 946
(__err |= ((ios_base::eofbit | ios_base::failbit))); }  
# 947
} 
# 948
catch (__cxxabiv1::__forced_unwind &) 
# 949
{ 
# 950
__in._M_setstate(ios_base::badbit); 
# 951
throw; 
# 952
} 
# 953
catch (...) 
# 954
{ __in._M_setstate(ios_base::badbit); }  
# 955
if (__err) { 
# 956
__in.setstate(__err); }  
# 957
}  
# 958
return __in; 
# 959
} 
# 961
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 963
operator>>(basic_istream< _CharT, _Traits>  &__in, _CharT *__s) 
# 964
{ 
# 965
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 966
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 967
typedef typename _Traits::int_type int_type; 
# 968
typedef _CharT char_type; 
# 969
typedef ctype< _CharT>  __ctype_type; 
# 971
streamsize __extracted = (0); 
# 972
ios_base::iostate __err = ios_base::goodbit; 
# 973
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, false); 
# 974
if (__cerb) 
# 975
{ 
# 976
try 
# 977
{ 
# 979
streamsize __num = __in.width(); 
# 980
if (__num <= (0)) { 
# 981
__num = __gnu_cxx::__numeric_traits_integer< long> ::__max; }  
# 983
const __ctype_type &__ct = use_facet< ctype< _CharT> > (__in.getloc()); 
# 985
const int_type __eof = _Traits::eof(); 
# 986
__streambuf_type *__sb = __in.rdbuf(); 
# 987
int_type __c = __sb->sgetc(); 
# 989
while ((__extracted < (__num - (1))) && (!_Traits::eq_int_type(__c, __eof)) && (!__ct.is(ctype_base::space, _Traits::to_char_type(__c)))) 
# 993
{ 
# 994
(*(__s++)) = _Traits::to_char_type(__c); 
# 995
++__extracted; 
# 996
__c = __sb->snextc(); 
# 997
}  
# 998
if (_Traits::eq_int_type(__c, __eof)) { 
# 999
(__err |= ios_base::eofbit); }  
# 1003
(*__s) = char_type(); 
# 1004
__in.width(0); 
# 1005
} 
# 1006
catch (__cxxabiv1::__forced_unwind &) 
# 1007
{ 
# 1008
__in._M_setstate(ios_base::badbit); 
# 1009
throw; 
# 1010
} 
# 1011
catch (...) 
# 1012
{ __in._M_setstate(ios_base::badbit); }  
# 1013
}  
# 1014
if (!__extracted) { 
# 1015
(__err |= ios_base::failbit); }  
# 1016
if (__err) { 
# 1017
__in.setstate(__err); }  
# 1018
return __in; 
# 1019
} 
# 1022
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 1024
ws(basic_istream< _CharT, _Traits>  &__in) 
# 1025
{ 
# 1026
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1027
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 1028
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 1029
typedef ctype< _CharT>  __ctype_type; 
# 1031
const __ctype_type &__ct = use_facet< ctype< _CharT> > (__in.getloc()); 
# 1032
const __int_type __eof = _Traits::eof(); 
# 1033
__streambuf_type *__sb = __in.rdbuf(); 
# 1034
__int_type __c = __sb->sgetc(); 
# 1036
while ((!_Traits::eq_int_type(__c, __eof)) && __ct.is(ctype_base::space, _Traits::to_char_type(__c))) { 
# 1038
__c = __sb->snextc(); }  
# 1040
if (_Traits::eq_int_type(__c, __eof)) { 
# 1041
__in.setstate(ios_base::eofbit); }  
# 1042
return __in; 
# 1043
} 
# 1048
extern template class basic_istream< char> ;
# 1049
extern template basic_istream< char>  &ws(basic_istream< char>  & __is);
# 1050
extern template basic_istream< char>  &operator>>(basic_istream< char>  & __in, char & __c);
# 1051
extern template basic_istream< char>  &operator>>(basic_istream< char>  &, char *);
# 1052
extern template basic_istream< char>  &operator>>(basic_istream< char>  & __in, unsigned char & __c);
# 1053
extern template basic_istream< char>  &operator>>(basic_istream< char>  & __in, signed char & __c);
# 1054
extern template basic_istream< char>  &operator>>(basic_istream< char>  & __in, unsigned char * __s);
# 1055
extern template basic_istream< char>  &operator>>(basic_istream< char>  & __in, signed char * __s);
# 1057
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(unsigned short & __v);
# 1058
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(unsigned & __v);
# 1059
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(long & __v);
# 1060
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(unsigned long & __v);
# 1061
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(bool & __v);
# 1063
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(long long & __v);
# 1064
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(unsigned long long & __v);
# 1066
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(float & __v);
# 1067
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(double & __v);
# 1068
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(long double & __v);
# 1069
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(void *& __v);
# 1071
extern template class basic_iostream< char> ;
# 1074
extern template class basic_istream< wchar_t> ;
# 1075
extern template basic_istream< wchar_t>  &ws(basic_istream< wchar_t>  & __is);
# 1076
extern template basic_istream< wchar_t>  &operator>>(basic_istream< wchar_t>  & __in, wchar_t & __c);
# 1077
extern template basic_istream< wchar_t>  &operator>>(basic_istream< wchar_t>  &, wchar_t *);
# 1079
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(unsigned short & __v);
# 1080
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(unsigned & __v);
# 1081
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(long & __v);
# 1082
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(unsigned long & __v);
# 1083
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(bool & __v);
# 1085
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(long long & __v);
# 1086
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(unsigned long long & __v);
# 1088
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(float & __v);
# 1089
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(double & __v);
# 1090
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(long double & __v);
# 1091
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(void *& __v);
# 1093
extern template class basic_iostream< wchar_t> ;
# 1098
}
# 42 "/usr/include/c++/9/iostream" 3
namespace std __attribute((__visibility__("default"))) { 
# 60 "/usr/include/c++/9/iostream" 3
extern istream cin; 
# 61
extern ostream cout; 
# 62
extern ostream cerr; 
# 63
extern ostream clog; 
# 66
extern wistream wcin; 
# 67
extern wostream wcout; 
# 68
extern wostream wcerr; 
# 69
extern wostream wclog; 
# 74
static ios_base::Init __ioinit; 
# 77
}
# 147 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
struct __half; 
# 160 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
struct __half2; 
# 176 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __double2half(const double a); 
# 191 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __float2half(const float a); 
# 206 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __float2half_rn(const float a); 
# 221 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __float2half_rz(const float a); 
# 237 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __float2half_rd(const float a); 
# 253 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __float2half_ru(const float a); 
# 268 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline float __half2float(const __half a); 
# 286 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half2 __float2half2_rn(const float a); 
# 307 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half2 __floats2half2_rn(const float a, const float b); 
# 323 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline float __low2float(const __half2 a); 
# 339 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline float __high2float(const __half2 a); 
# 355 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline short __half2short_rz(const __half h); 
# 372 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline unsigned short __half2ushort_rz(const __half h); 
# 388 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline int __half2int_rz(const __half h); 
# 404 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline unsigned __half2uint_rz(const __half h); 
# 420 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline long long __half2ll_rz(const __half h); 
# 437 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline unsigned long long __half2ull_rz(const __half h); 
# 459 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half2 __float22half2_rn(const float2 a); 
# 475 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline float2 __half22float2(const __half2 a); 
# 491 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline int __half2int_rn(const __half h); 
# 507 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline int __half2int_rd(const __half h); 
# 523 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline int __half2int_ru(const __half h); 
# 540 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __int2half_rn(const int i); 
# 556 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __int2half_rz(const int i); 
# 572 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __int2half_rd(const int i); 
# 588 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __int2half_ru(const int i); 
# 606 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline short __half2short_rn(const __half h); 
# 622 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline short __half2short_rd(const __half h); 
# 638 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline short __half2short_ru(const __half h); 
# 656 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __short2half_rn(const short i); 
# 672 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __short2half_rz(const short i); 
# 688 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __short2half_rd(const short i); 
# 704 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __short2half_ru(const short i); 
# 721 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __half2uint_rn(const __half h); 
# 737 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __half2uint_rd(const __half h); 
# 753 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __half2uint_ru(const __half h); 
# 770 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __uint2half_rn(const unsigned i); 
# 786 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __uint2half_rz(const unsigned i); 
# 802 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __uint2half_rd(const unsigned i); 
# 818 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __uint2half_ru(const unsigned i); 
# 836 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned short __half2ushort_rn(const __half h); 
# 848 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned short __half2ushort_rd(const __half h); 
# 860 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned short __half2ushort_ru(const __half h); 
# 878 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __ushort2half_rn(const unsigned short i); 
# 895 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ushort2half_rz(const unsigned short i); 
# 911 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ushort2half_rd(const unsigned short i); 
# 927 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ushort2half_ru(const unsigned short i); 
# 945 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned long long __half2ull_rn(const __half h); 
# 961 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned long long __half2ull_rd(const __half h); 
# 977 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned long long __half2ull_ru(const __half h); 
# 995 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __ull2half_rn(const unsigned long long i); 
# 1012 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ull2half_rz(const unsigned long long i); 
# 1028 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ull2half_rd(const unsigned long long i); 
# 1044 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ull2half_ru(const unsigned long long i); 
# 1062 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline long long __half2ll_rn(const __half h); 
# 1078 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline long long __half2ll_rd(const __half h); 
# 1094 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline long long __half2ll_ru(const __half h); 
# 1112 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __ll2half_rn(const long long i); 
# 1124 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ll2half_rz(const long long i); 
# 1140 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ll2half_rd(const long long i); 
# 1156 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ll2half_ru(const long long i); 
# 1173 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half htrunc(const __half h); 
# 1188 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hceil(const __half h); 
# 1203 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hfloor(const __half h); 
# 1220 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hrint(const __half h); 
# 1237 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2trunc(const __half2 h); 
# 1253 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2ceil(const __half2 h); 
# 1269 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2floor(const __half2 h); 
# 1287 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2rint(const __half2 h); 
# 1304 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __half2half2(const __half a); 
# 1320 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __lowhigh2highlow(const __half2 a); 
# 1340 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __lows2half2(const __half2 a, const __half2 b); 
# 1360 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __highs2half2(const __half2 a, const __half2 b); 
# 1375 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __high2half(const __half2 a); 
# 1390 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __low2half(const __half2 a); 
# 1407 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline int __hisinf(const __half a); 
# 1425 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __halves2half2(const __half a, const __half b); 
# 1441 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __low2half2(const __half2 a); 
# 1457 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __high2half2(const __half2 a); 
# 1474 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline short __half_as_short(const __half h); 
# 1490 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned short __half_as_ushort(const __half h); 
# 1506 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __short_as_half(const short i); 
# 1522 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ushort_as_half(const unsigned short i); 
# 1541 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hmax(const __half a, const __half b); 
# 1560 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hmin(const __half a, const __half b); 
# 1581 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hmax2(const __half2 a, const __half2 b); 
# 1602 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hmin2(const __half2 a, const __half2 b); 
# 1621 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline __half2 __shfl(const __half2 var, const int delta, const int width = 32); 
# 1622
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline __half2 __shfl_up(const __half2 var, const unsigned delta, const int width = 32); 
# 1623
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline __half2 __shfl_down(const __half2 var, const unsigned delta, const int width = 32); 
# 1624
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline __half2 __shfl_xor(const __half2 var, const int delta, const int width = 32); 
# 1625
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline __half __shfl(const __half var, const int delta, const int width = 32); 
# 1626
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline __half __shfl_up(const __half var, const unsigned delta, const int width = 32); 
# 1627
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline __half __shfl_down(const __half var, const unsigned delta, const int width = 32); 
# 1628
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline __half __shfl_xor(const __half var, const int delta, const int width = 32); 
# 1654 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __shfl_sync(const unsigned mask, const __half2 var, const int delta, const int width = 32); 
# 1679 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __shfl_up_sync(const unsigned mask, const __half2 var, const unsigned delta, const int width = 32); 
# 1704 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __shfl_down_sync(const unsigned mask, const __half2 var, const unsigned delta, const int width = 32); 
# 1728 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __shfl_xor_sync(const unsigned mask, const __half2 var, const int delta, const int width = 32); 
# 1753 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __shfl_sync(const unsigned mask, const __half var, const int delta, const int width = 32); 
# 1777 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __shfl_up_sync(const unsigned mask, const __half var, const unsigned delta, const int width = 32); 
# 1802 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __shfl_down_sync(const unsigned mask, const __half var, const unsigned delta, const int width = 32); 
# 1826 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __shfl_xor_sync(const unsigned mask, const __half var, const int delta, const int width = 32); 
# 1841 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __ldg(const __half2 *const ptr); 
# 1848
__attribute__((unused)) static inline __half __ldg(const __half *const ptr); 
# 1855
__attribute__((unused)) static inline __half2 __ldcg(const __half2 *const ptr); 
# 1862
__attribute__((unused)) static inline __half __ldcg(const __half *const ptr); 
# 1869
__attribute__((unused)) static inline __half2 __ldca(const __half2 *const ptr); 
# 1876
__attribute__((unused)) static inline __half __ldca(const __half *const ptr); 
# 1883
__attribute__((unused)) static inline __half2 __ldcs(const __half2 *const ptr); 
# 1890
__attribute__((unused)) static inline __half __ldcs(const __half *const ptr); 
# 1897
__attribute__((unused)) static inline __half2 __ldlu(const __half2 *const ptr); 
# 1904
__attribute__((unused)) static inline __half __ldlu(const __half *const ptr); 
# 1911
__attribute__((unused)) static inline __half2 __ldcv(const __half2 *const ptr); 
# 1918
__attribute__((unused)) static inline __half __ldcv(const __half *const ptr); 
# 1925
__attribute__((unused)) static inline void __stwb(__half2 *const ptr, const __half2 value); 
# 1932
__attribute__((unused)) static inline void __stwb(__half *const ptr, const __half value); 
# 1939
__attribute__((unused)) static inline void __stcg(__half2 *const ptr, const __half2 value); 
# 1946
__attribute__((unused)) static inline void __stcg(__half *const ptr, const __half value); 
# 1953
__attribute__((unused)) static inline void __stcs(__half2 *const ptr, const __half2 value); 
# 1960
__attribute__((unused)) static inline void __stcs(__half *const ptr, const __half value); 
# 1967
__attribute__((unused)) static inline void __stwt(__half2 *const ptr, const __half2 value); 
# 1974
__attribute__((unused)) static inline void __stwt(__half *const ptr, const __half value); 
# 1995 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __heq2(const __half2 a, const __half2 b); 
# 2013 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hne2(const __half2 a, const __half2 b); 
# 2031 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hle2(const __half2 a, const __half2 b); 
# 2049 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hge2(const __half2 a, const __half2 b); 
# 2067 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hlt2(const __half2 a, const __half2 b); 
# 2085 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hgt2(const __half2 a, const __half2 b); 
# 2103 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hequ2(const __half2 a, const __half2 b); 
# 2121 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hneu2(const __half2 a, const __half2 b); 
# 2139 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hleu2(const __half2 a, const __half2 b); 
# 2157 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hgeu2(const __half2 a, const __half2 b); 
# 2175 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hltu2(const __half2 a, const __half2 b); 
# 2193 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hgtu2(const __half2 a, const __half2 b); 
# 2211 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __heq2_mask(const __half2 a, const __half2 b); 
# 2229 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __hne2_mask(const __half2 a, const __half2 b); 
# 2247 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __hle2_mask(const __half2 a, const __half2 b); 
# 2265 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __hge2_mask(const __half2 a, const __half2 b); 
# 2283 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __hlt2_mask(const __half2 a, const __half2 b); 
# 2301 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __hgt2_mask(const __half2 a, const __half2 b); 
# 2319 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __hequ2_mask(const __half2 a, const __half2 b); 
# 2337 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __hneu2_mask(const __half2 a, const __half2 b); 
# 2355 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __hleu2_mask(const __half2 a, const __half2 b); 
# 2373 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __hgeu2_mask(const __half2 a, const __half2 b); 
# 2391 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __hltu2_mask(const __half2 a, const __half2 b); 
# 2409 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __hgtu2_mask(const __half2 a, const __half2 b); 
# 2425 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hisnan2(const __half2 a); 
# 2445 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hadd2(const __half2 a, const __half2 b); 
# 2465 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hsub2(const __half2 a, const __half2 b); 
# 2485 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hmul2(const __half2 a, const __half2 b); 
# 2505 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hadd2_rn(const __half2 a, const __half2 b); 
# 2526 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hsub2_rn(const __half2 a, const __half2 b); 
# 2547 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hmul2_rn(const __half2 a, const __half2 b); 
# 2567 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __h2div(const __half2 a, const __half2 b); 
# 2584 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __habs2(const __half2 a); 
# 2603 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hadd2_sat(const __half2 a, const __half2 b); 
# 2622 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hsub2_sat(const __half2 a, const __half2 b); 
# 2642 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hmul2_sat(const __half2 a, const __half2 b); 
# 2665 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hfma2(const __half2 a, const __half2 b, const __half2 c); 
# 2687 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hfma2_sat(const __half2 a, const __half2 b, const __half2 c); 
# 2706 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hneg2(const __half2 a); 
# 2721 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __habs(const __half a); 
# 2741 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hadd(const __half a, const __half b); 
# 2761 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hsub(const __half a, const __half b); 
# 2777 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hmul(const __half a, const __half b); 
# 2797 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hadd_rn(const __half a, const __half b); 
# 2817 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hsub_rn(const __half a, const __half b); 
# 2833 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hmul_rn(const __half a, const __half b); 
# 2853 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hdiv(const __half a, const __half b); 
# 2871 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hadd_sat(const __half a, const __half b); 
# 2890 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hsub_sat(const __half a, const __half b); 
# 2909 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hmul_sat(const __half a, const __half b); 
# 2932 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hfma(const __half a, const __half b, const __half c); 
# 2954 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hfma_sat(const __half a, const __half b, const __half c); 
# 2972 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hneg(const __half a); 
# 2994 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbeq2(const __half2 a, const __half2 b); 
# 3016 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbne2(const __half2 a, const __half2 b); 
# 3038 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hble2(const __half2 a, const __half2 b); 
# 3060 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbge2(const __half2 a, const __half2 b); 
# 3082 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hblt2(const __half2 a, const __half2 b); 
# 3104 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbgt2(const __half2 a, const __half2 b); 
# 3126 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbequ2(const __half2 a, const __half2 b); 
# 3148 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbneu2(const __half2 a, const __half2 b); 
# 3170 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbleu2(const __half2 a, const __half2 b); 
# 3193 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbgeu2(const __half2 a, const __half2 b); 
# 3215 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbltu2(const __half2 a, const __half2 b); 
# 3238 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbgtu2(const __half2 a, const __half2 b); 
# 3255 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __heq(const __half a, const __half b); 
# 3272 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hne(const __half a, const __half b); 
# 3289 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hle(const __half a, const __half b); 
# 3306 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hge(const __half a, const __half b); 
# 3323 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hlt(const __half a, const __half b); 
# 3340 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hgt(const __half a, const __half b); 
# 3358 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hequ(const __half a, const __half b); 
# 3376 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hneu(const __half a, const __half b); 
# 3394 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hleu(const __half a, const __half b); 
# 3412 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hgeu(const __half a, const __half b); 
# 3430 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hltu(const __half a, const __half b); 
# 3448 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hgtu(const __half a, const __half b); 
# 3463 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hisnan(const __half a); 
# 3482 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hmax_nan(const __half a, const __half b); 
# 3500 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hmin_nan(const __half a, const __half b); 
# 3522 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hfma_relu(const __half a, const __half b, const __half c); 
# 3542 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hmax2_nan(const __half2 a, const __half2 b); 
# 3562 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hmin2_nan(const __half2 a, const __half2 b); 
# 3584 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hfma2_relu(const __half2 a, const __half2 b, const __half2 c); 
# 3604 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hcmadd(const __half2 a, const __half2 b, const __half2 c); 
# 3619 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hsqrt(const __half a); 
# 3636 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hrsqrt(const __half a); 
# 3651 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hrcp(const __half a); 
# 3667 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hlog(const __half a); 
# 3683 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hlog2(const __half a); 
# 3699 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hlog10(const __half a); 
# 3716 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hexp(const __half a); 
# 3733 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hexp2(const __half a); 
# 3750 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hexp10(const __half a); 
# 3765 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hcos(const __half a); 
# 3780 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hsin(const __half a); 
# 3796 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2sqrt(const __half2 a); 
# 3813 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2rsqrt(const __half2 a); 
# 3829 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2rcp(const __half2 a); 
# 3846 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2log(const __half2 a); 
# 3863 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2log2(const __half2 a); 
# 3880 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2log10(const __half2 a); 
# 3897 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2exp(const __half2 a); 
# 3914 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2exp2(const __half2 a); 
# 3931 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2exp10(const __half2 a); 
# 3947 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2cos(const __half2 a); 
# 3962 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2sin(const __half2 a); 
# 3985 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 atomicAdd(__half2 *const address, const __half2 val); 
# 4007 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half atomicAdd(__half *const address, const __half val); 
# 46 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/nv/target"
namespace nv { 
# 47
namespace target { 
# 48
namespace detail { 
# 50
typedef unsigned long long base_int_t; 
# 53
constexpr base_int_t all_hosts = (1); 
# 56
constexpr base_int_t sm_35_bit = (1 << 1); 
# 57
constexpr base_int_t sm_37_bit = (1 << 2); 
# 58
constexpr base_int_t sm_50_bit = (1 << 3); 
# 59
constexpr base_int_t sm_52_bit = (1 << 4); 
# 60
constexpr base_int_t sm_53_bit = (1 << 5); 
# 61
constexpr base_int_t sm_60_bit = (1 << 6); 
# 62
constexpr base_int_t sm_61_bit = (1 << 7); 
# 63
constexpr base_int_t sm_62_bit = (1 << 8); 
# 64
constexpr base_int_t sm_70_bit = (1 << 9); 
# 65
constexpr base_int_t sm_72_bit = (1 << 10); 
# 66
constexpr base_int_t sm_75_bit = (1 << 11); 
# 67
constexpr base_int_t sm_80_bit = (1 << 12); 
# 68
constexpr base_int_t sm_86_bit = (1 << 13); 
# 69
constexpr base_int_t sm_87_bit = (1 << 14); 
# 70
constexpr base_int_t sm_89_bit = (1 << 15); 
# 71
constexpr base_int_t sm_90_bit = (1 << 16); 
# 72
constexpr base_int_t all_devices = (((((((((((((((sm_35_bit | sm_37_bit) | sm_50_bit) | sm_52_bit) | sm_53_bit) | sm_60_bit) | sm_61_bit) | sm_62_bit) | sm_70_bit) | sm_72_bit) | sm_75_bit) | sm_80_bit) | sm_86_bit) | sm_87_bit) | sm_89_bit) | sm_90_bit); 
# 81
struct target_description { 
# 82
base_int_t targets; 
# 84
constexpr target_description(base_int_t a) : targets(a) { } 
# 85
}; 
# 88
enum class sm_selector: base_int_t { 
# 89
sm_35 = 35ULL, sm_37 = 37ULL, 
# 90
sm_50 = 50ULL, sm_52 = 52ULL, sm_53, 
# 91
sm_60 = 60ULL, sm_61, sm_62, 
# 92
sm_70 = 70ULL, sm_72 = 72ULL, sm_75 = 75ULL, 
# 93
sm_80 = 80ULL, sm_86 = 86ULL, sm_87, 
# 94
sm_89 = 89ULL, sm_90
# 95
}; 
# 97
constexpr base_int_t toint(sm_selector a) { 
# 98
return static_cast< base_int_t>(a); 
# 99
} 
# 101
constexpr base_int_t bitexact(sm_selector a) { 
# 102
return (toint(a) == (35)) ? sm_35_bit : ((toint(a) == (37)) ? sm_37_bit : ((toint(a) == (50)) ? sm_50_bit : ((toint(a) == (52)) ? sm_52_bit : ((toint(a) == (53)) ? sm_53_bit : ((toint(a) == (60)) ? sm_60_bit : ((toint(a) == (61)) ? sm_61_bit : ((toint(a) == (62)) ? sm_62_bit : ((toint(a) == (70)) ? sm_70_bit : ((toint(a) == (72)) ? sm_72_bit : ((toint(a) == (75)) ? sm_75_bit : ((toint(a) == (80)) ? sm_80_bit : ((toint(a) == (86)) ? sm_86_bit : ((toint(a) == (87)) ? sm_87_bit : ((toint(a) == (89)) ? sm_89_bit : ((toint(a) == (90)) ? sm_90_bit : (0)))))))))))))))); 
# 118
} 
# 120
constexpr base_int_t bitrounddown(sm_selector a) { 
# 121
return (toint(a) >= (90)) ? sm_90_bit : ((toint(a) >= (89)) ? sm_89_bit : ((toint(a) >= (87)) ? sm_87_bit : ((toint(a) >= (86)) ? sm_86_bit : ((toint(a) >= (80)) ? sm_80_bit : ((toint(a) >= (75)) ? sm_75_bit : ((toint(a) >= (72)) ? sm_72_bit : ((toint(a) >= (70)) ? sm_70_bit : ((toint(a) >= (62)) ? sm_62_bit : ((toint(a) >= (61)) ? sm_61_bit : ((toint(a) >= (60)) ? sm_60_bit : ((toint(a) >= (53)) ? sm_53_bit : ((toint(a) >= (52)) ? sm_52_bit : ((toint(a) >= (50)) ? sm_50_bit : ((toint(a) >= (37)) ? sm_37_bit : ((toint(a) >= (35)) ? sm_35_bit : (0)))))))))))))))); 
# 137
} 
# 142
constexpr target_description is_exactly(sm_selector a) { 
# 143
return ((target_description)(bitexact(a))); 
# 144
} 
# 147
constexpr target_description provides(sm_selector a) { 
# 148
return ((target_description)((~(bitrounddown(a) - (1))) & all_devices)); 
# 149
} 
# 154
constexpr target_description operator&&(target_description a, target_description 
# 155
b) { 
# 156
return ((target_description)((a.targets) & (b.targets))); 
# 157
} 
# 160
constexpr target_description operator||(target_description a, target_description 
# 161
b) { 
# 162
return ((target_description)((a.targets) | (b.targets))); 
# 163
} 
# 166
constexpr target_description operator!(target_description a) { 
# 167
return ((target_description)((~(a.targets)) & (all_devices | all_hosts))); 
# 168
} 
# 169
}
# 171
using detail::target_description;
# 172
using detail::sm_selector;
# 175
constexpr detail::target_description is_host = ((detail::target_description)(detail::all_hosts)); 
# 177
constexpr detail::target_description is_device = ((detail::target_description)(detail::all_devices)); 
# 179
constexpr detail::target_description any_target = ((detail::target_description)(detail::all_hosts | detail::all_devices)); 
# 181
constexpr detail::target_description no_target = ((detail::target_description)(0)); 
# 185
constexpr detail::sm_selector sm_35 = sm_selector::sm_35; 
# 186
constexpr detail::sm_selector sm_37 = sm_selector::sm_37; 
# 187
constexpr detail::sm_selector sm_50 = sm_selector::sm_50; 
# 188
constexpr detail::sm_selector sm_52 = sm_selector::sm_52; 
# 189
constexpr detail::sm_selector sm_53 = sm_selector::sm_53; 
# 190
constexpr detail::sm_selector sm_60 = sm_selector::sm_60; 
# 191
constexpr detail::sm_selector sm_61 = sm_selector::sm_61; 
# 192
constexpr detail::sm_selector sm_62 = sm_selector::sm_62; 
# 193
constexpr detail::sm_selector sm_70 = sm_selector::sm_70; 
# 194
constexpr detail::sm_selector sm_72 = sm_selector::sm_72; 
# 195
constexpr detail::sm_selector sm_75 = sm_selector::sm_75; 
# 196
constexpr detail::sm_selector sm_80 = sm_selector::sm_80; 
# 197
constexpr detail::sm_selector sm_86 = sm_selector::sm_86; 
# 198
constexpr detail::sm_selector sm_87 = sm_selector::sm_87; 
# 199
constexpr detail::sm_selector sm_89 = sm_selector::sm_89; 
# 200
constexpr detail::sm_selector sm_90 = sm_selector::sm_90; 
# 202
using detail::is_exactly;
# 203
using detail::provides;
# 204
}
# 205
}
# 166 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
typedef 
# 164
struct __attribute((aligned(2))) { 
# 165
unsigned short x; 
# 166
} __half_raw; 
# 171
typedef 
# 168
struct __attribute((aligned(4))) { 
# 169
unsigned short x; 
# 170
unsigned short y; 
# 171
} __half2_raw; 
# 179
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#pragma GCC diagnostic ignored "-Weffc++"
# 192 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
struct __attribute((aligned(2))) __half { 
# 194
protected: unsigned short __x; 
# 198
public: __half() = default;
# 204
__half(const __half_raw &hr) : __x(hr.x) { } 
# 205
__half &operator=(const __half_raw &hr) { (__x) = (hr.x); return *this; } 
# 206
volatile __half &operator=(const __half_raw &hr) volatile { (__x) = (hr.x); return *this; } 
# 207
volatile __half &operator=(const volatile __half_raw &hr) volatile { (__x) = (hr.x); return *this; } 
# 208
operator __half_raw() const { __half_raw ret; (ret.x) = (__x); return ret; } 
# 209
operator __half_raw() const volatile { __half_raw ret; (ret.x) = (__x); return ret; } 
# 214
__half(const float f) { (__x) = (__float2half(f).__x); } 
# 215
__half(const double f) { (__x) = (__double2half(f).__x); } 
# 217
operator float() const { return __half2float(*this); } 
# 218
__half &operator=(const float f) { (__x) = (__float2half(f).__x); return *this; } 
# 221
__half &operator=(const double f) { (__x) = (__double2half(f).__x); return *this; } 
# 227
__half(const short val) { (__x) = (__short2half_rn(val).__x); } 
# 228
__half(const unsigned short val) { (__x) = (__ushort2half_rn(val).__x); } 
# 229
__half(const int val) { (__x) = (__int2half_rn(val).__x); } 
# 230
__half(const unsigned val) { (__x) = (__uint2half_rn(val).__x); } 
# 231
__half(const long long val) { (__x) = (__ll2half_rn(val).__x); } 
# 232
__half(const unsigned long long val) { (__x) = (__ull2half_rn(val).__x); } 
# 235
operator short() const { return __half2short_rz(*this); } 
# 236
__half &operator=(const short val) { (__x) = (__short2half_rn(val).__x); return *this; } 
# 238
operator unsigned short() const { return __half2ushort_rz(*this); } 
# 239
__half &operator=(const unsigned short val) { (__x) = (__ushort2half_rn(val).__x); return *this; } 
# 241
operator int() const { return __half2int_rz(*this); } 
# 242
__half &operator=(const int val) { (__x) = (__int2half_rn(val).__x); return *this; } 
# 244
operator unsigned() const { return __half2uint_rz(*this); } 
# 245
__half &operator=(const unsigned val) { (__x) = (__uint2half_rn(val).__x); return *this; } 
# 247
operator long long() const { return __half2ll_rz(*this); } 
# 248
__half &operator=(const long long val) { (__x) = (__ll2half_rn(val).__x); return *this; } 
# 250
operator unsigned long long() const { return __half2ull_rz(*this); } 
# 251
__half &operator=(const unsigned long long val) { (__x) = (__ull2half_rn(val).__x); return *this; } 
# 254
operator bool() const { return ((__x) & 32767U) != 0U; } 
# 257
}; 
# 266 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator+(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 266
{ return __hadd(lh, rh); } 
#endif
# 267 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator-(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 267
{ return __hsub(lh, rh); } 
#endif
# 268 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator*(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 268
{ return __hmul(lh, rh); } 
#endif
# 269 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator/(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 269
{ return __hdiv(lh, rh); } 
#endif
# 271 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half &operator+=(__half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 271
{ lh = __hadd(lh, rh); return lh; } 
#endif
# 272 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half &operator-=(__half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 272
{ lh = __hsub(lh, rh); return lh; } 
#endif
# 273 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half &operator*=(__half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 273
{ lh = __hmul(lh, rh); return lh; } 
#endif
# 274 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half &operator/=(__half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 274
{ lh = __hdiv(lh, rh); return lh; } 
#endif
# 277 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half &operator++(__half &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 277
{ __half_raw one; (one.x) = (15360U); (h += one); return h; } 
#endif
# 278 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half &operator--(__half &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 278
{ __half_raw one; (one.x) = (15360U); (h -= one); return h; } 
#endif
# 279 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator++(__half &h, const int ignored) 
# 280
{int volatile ___ = 1;(void)h;(void)ignored;
# 289
::exit(___);}
#if 0
# 280
{ 
# 282
static_cast< void>(ignored); 
# 284
const __half ret = h; 
# 285
__half_raw one; 
# 286
(one.x) = (15360U); 
# 287
(h += one); 
# 288
return ret; 
# 289
} 
#endif
# 290 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator--(__half &h, const int ignored) 
# 291
{int volatile ___ = 1;(void)h;(void)ignored;
# 300
::exit(___);}
#if 0
# 291
{ 
# 293
static_cast< void>(ignored); 
# 295
const __half ret = h; 
# 296
__half_raw one; 
# 297
(one.x) = (15360U); 
# 298
(h -= one); 
# 299
return ret; 
# 300
} 
#endif
# 303 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator+(const __half &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 303
{ return h; } 
#endif
# 304 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator-(const __half &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 304
{ return __hneg(h); } 
#endif
# 307 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator==(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 307
{ return __heq(lh, rh); } 
#endif
# 308 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator!=(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 308
{ return __hneu(lh, rh); } 
#endif
# 309 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 309
{ return __hgt(lh, rh); } 
#endif
# 310 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 310
{ return __hlt(lh, rh); } 
#endif
# 311 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>=(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 311
{ return __hge(lh, rh); } 
#endif
# 312 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<=(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 312
{ return __hle(lh, rh); } 
#endif
# 318 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
struct __attribute((aligned(4))) __half2 { 
# 319
__half x; 
# 320
__half y; 
# 325
__half2() = default;
# 326
__half2(const __half2 &&src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = std::move(*(reinterpret_cast< const unsigned *>(&src))); } 
# 327
__half2 &operator=(const __half2 &&src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = std::move(*(reinterpret_cast< const unsigned *>(&src))); return *this; } 
# 331
__half2(const __half &a, const __half &b) : x(a), y(b) { } 
# 332
__half2(const __half2 &src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&src))); } 
# 333
__half2 &operator=(const __half2 &src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&src))); return *this; } 
# 336
__half2(const __half2_raw &h2r) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&h2r))); } 
# 337
__half2 &operator=(const __half2_raw &h2r) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&h2r))); return *this; } 
# 338
operator __half2_raw() const { __half2_raw ret; (ret.x) = (0U); (ret.y) = (0U); (*(reinterpret_cast< unsigned *>(&ret))) = (*(reinterpret_cast< const unsigned *>(&(*this)))); return ret; } 
# 339
}; 
# 347
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator+(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 347
{ return __hadd2(lh, rh); } 
#endif
# 348 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator-(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 348
{ return __hsub2(lh, rh); } 
#endif
# 349 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator*(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 349
{ return __hmul2(lh, rh); } 
#endif
# 350 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator/(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 350
{ return __h2div(lh, rh); } 
#endif
# 352 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 &operator+=(__half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 352
{ (lh = (__hadd2(lh, rh))); return lh; } 
#endif
# 353 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 &operator-=(__half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 353
{ (lh = (__hsub2(lh, rh))); return lh; } 
#endif
# 354 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 &operator*=(__half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 354
{ (lh = (__hmul2(lh, rh))); return lh; } 
#endif
# 355 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 &operator/=(__half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 355
{ (lh = (__h2div(lh, rh))); return lh; } 
#endif
# 357 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 &operator++(__half2 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 357
{ __half2_raw one; (one.x) = (15360U); (one.y) = (15360U); (h = (__hadd2(h, one))); return h; } 
#endif
# 358 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 &operator--(__half2 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 358
{ __half2_raw one; (one.x) = (15360U); (one.y) = (15360U); (h = (__hsub2(h, one))); return h; } 
#endif
# 359 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator++(__half2 &h, const int ignored) 
# 360
{int volatile ___ = 1;(void)h;(void)ignored;
# 370
::exit(___);}
#if 0
# 360
{ 
# 362
static_cast< void>(ignored); 
# 364
const __half2 ret = h; 
# 365
__half2_raw one; 
# 366
(one.x) = (15360U); 
# 367
(one.y) = (15360U); 
# 368
(h = (__hadd2(h, one))); 
# 369
return ret; 
# 370
} 
#endif
# 371 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator--(__half2 &h, const int ignored) 
# 372
{int volatile ___ = 1;(void)h;(void)ignored;
# 382
::exit(___);}
#if 0
# 372
{ 
# 374
static_cast< void>(ignored); 
# 376
const __half2 ret = h; 
# 377
__half2_raw one; 
# 378
(one.x) = (15360U); 
# 379
(one.y) = (15360U); 
# 380
(h = (__hsub2(h, one))); 
# 381
return ret; 
# 382
} 
#endif
# 384 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator+(const __half2 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 384
{ return h; } 
#endif
# 385 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator-(const __half2 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 385
{ return __hneg2(h); } 
#endif
# 387 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator==(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 387
{ return __hbeq2(lh, rh); } 
#endif
# 388 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator!=(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 388
{ return __hbneu2(lh, rh); } 
#endif
# 389 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 389
{ return __hbgt2(lh, rh); } 
#endif
# 390 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 390
{ return __hblt2(lh, rh); } 
#endif
# 391 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>=(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 391
{ return __hbge2(lh, rh); } 
#endif
# 392 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<=(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 392
{ return __hble2(lh, rh); } 
#endif
# 405 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
#pragma GCC diagnostic pop
# 413
static inline unsigned short __internal_float2half(const float f, unsigned &sign, unsigned &remainder) 
# 414
{ 
# 415
unsigned x; 
# 416
unsigned u; 
# 417
unsigned result; 
# 419
(void)memcpy(&x, &f, sizeof f); 
# 423
u = (x & 2147483647U); 
# 424
sign = ((x >> 16U) & 32768U); 
# 426
if (u >= 2139095040U) { 
# 427
remainder = 0U; 
# 428
result = ((u == 2139095040U) ? sign | 31744U : 32767U); 
# 429
} else { if (u > 1199566847U) { 
# 430
remainder = 2147483648U; 
# 431
result = (sign | 31743U); 
# 432
} else { if (u >= 947912704U) { 
# 433
remainder = (u << 19U); 
# 434
u -= 939524096U; 
# 435
result = (sign | (u >> 13U)); 
# 436
} else { if (u < 855638017U) { 
# 437
remainder = u; 
# 438
result = sign; 
# 439
} else { 
# 440
const unsigned exponent = u >> 23U; 
# 441
const unsigned shift = 126U - exponent; 
# 442
unsigned mantissa = u & 8388607U; 
# 443
mantissa |= 8388608U; 
# 444
remainder = (mantissa << (32U - shift)); 
# 445
result = (sign | (mantissa >> shift)); 
# 446
result &= 65535U; 
# 447
}  }  }  }  
# 448
return static_cast< unsigned short>(result); 
# 449
} 
# 452
static inline __half __double2half(const double a) 
# 453
{ 
# 454 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 454 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__half result; unsigned long long absa; unsigned long long ua; (void)memcpy(&ua, &a, sizeof a); absa = (ua & 9223372036854775807ULL); if ((absa >= 4679240012837945344ULL) || (absa <= 4494592428115755008ULL)) { result = __float2half(static_cast< float>(a)); } else { unsigned long long shifterBits; if (absa >= 4544132024016830464ULL) { shifterBits = ((ua & 9218868437227405312ULL) + 189151184349560832ULL); } else { shifterBits = 4733283208366391296ULL; }  shifterBits |= 2251799813685248ULL; double shifter; (void)memcpy(&shifter, &shifterBits, sizeof shifterBits); double aShiftRound = a + shifter; unsigned long long aShiftRoundBits; (void)memcpy(&aShiftRoundBits, &aShiftRound, sizeof aShiftRound); aShiftRoundBits &= 9223372036854775807ULL; (void)memcpy(&aShiftRound, &aShiftRoundBits, sizeof aShiftRound); result = __float2half(static_cast< float>(aShiftRound - shifter)); }  return result; 
# 454 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 591 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
} 
# 593
static inline __half __float2half(const float a) 
# 594
{ 
# 595
__half val; 
# 596 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 596 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__half_raw r; unsigned sign = 0U; unsigned remainder = 0U; (r.x) = __internal_float2half(a, sign, remainder); if ((remainder > 2147483648U) || ((remainder == 2147483648U) && (((r.x) & 1U) != 0U))) { (r.x)++; }  (val = r); 
# 596 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 608 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return val; 
# 609
} 
# 610
static inline __half __float2half_rn(const float a) 
# 611
{ 
# 612
__half val; 
# 613 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 613 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__half_raw r; unsigned sign = 0U; unsigned remainder = 0U; (r.x) = __internal_float2half(a, sign, remainder); if ((remainder > 2147483648U) || ((remainder == 2147483648U) && (((r.x) & 1U) != 0U))) { (r.x)++; }  (val = r); 
# 613 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 625 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return val; 
# 626
} 
# 627
static inline __half __float2half_rz(const float a) 
# 628
{ 
# 629
__half val; 
# 630 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 630 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__half_raw r; unsigned sign = 0U; unsigned remainder = 0U; (r.x) = __internal_float2half(a, sign, remainder); (val = r); 
# 630 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 639 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return val; 
# 640
} 
# 641
static inline __half __float2half_rd(const float a) 
# 642
{ 
# 643
__half val; 
# 644 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 644 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__half_raw r; unsigned sign = 0U; unsigned remainder = 0U; (r.x) = __internal_float2half(a, sign, remainder); if ((remainder != 0U) && (sign != 0U)) { (r.x)++; }  (val = r); 
# 644 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 656 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return val; 
# 657
} 
# 658
static inline __half __float2half_ru(const float a) 
# 659
{ 
# 660
__half val; 
# 661 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 661 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__half_raw r; unsigned sign = 0U; unsigned remainder = 0U; (r.x) = __internal_float2half(a, sign, remainder); if ((remainder != 0U) && (sign == 0U)) { (r.x)++; }  (val = r); 
# 661 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 673 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return val; 
# 674
} 
# 675
static inline __half2 __float2half2_rn(const float a) 
# 676
{ 
# 677
__half2 val; 
# 678 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 678 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
(val = __half2(__float2half_rn(a), __float2half_rn(a))); 
# 678 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 685 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return val; 
# 686
} 
# 689
__attribute__((unused)) static inline __half2 __internal_device_float2_to_half2_rn(const float a, const float b) {int volatile ___ = 1;(void)a;(void)b;
# 701 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
::exit(___);}
#if 0
# 689 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
{ 
# 690
__half2 val; 
# 691 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 691 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__asm__("{.reg .f16 low,high;\n  cvt.rn.f16.f32 low, %1;\n  cvt.rn.f16.f32 high, %2;\n  mov.b32 %0, {low,high};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "f" (a), "f" (b)); 
# 691 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 700 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return val; 
# 701
} 
#endif
# 705 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
static inline __half2 __floats2half2_rn(const float a, const float b) 
# 706
{ 
# 707
__half2 val; 
# 708 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 708 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
(val = __half2(__float2half_rn(a), __float2half_rn(b))); 
# 708 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 713 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return val; 
# 714
} 
# 717
static inline float __internal_half2float(const unsigned short h) 
# 718
{ 
# 719
unsigned sign = ((static_cast< unsigned>(h)) >> 15U) & 1U; 
# 720
unsigned exponent = ((static_cast< unsigned>(h)) >> 10U) & 31U; 
# 721
unsigned mantissa = ((static_cast< unsigned>(h)) & 1023U) << 13U; 
# 722
float f; 
# 723
if (exponent == 31U) { 
# 725
sign = ((mantissa != 0U) ? sign >> 1U : sign); 
# 726
mantissa = ((mantissa != 0U) ? 8388607U : 0U); 
# 727
exponent = 255U; 
# 728
} else { if (exponent == 0U) { 
# 729
if (mantissa != 0U) { 
# 730
unsigned msb; 
# 731
exponent = 113U; 
# 732
do { 
# 733
msb = (mantissa & 4194304U); 
# 734
mantissa <<= 1U; 
# 735
--exponent; 
# 736
} while (msb == 0U); 
# 737
mantissa &= 8388607U; 
# 738
}  
# 739
} else { 
# 740
exponent += 112U; 
# 741
}  }  
# 742
const unsigned u = ((sign << 31U) | (exponent << 23U)) | mantissa; 
# 744
(void)memcpy(&f, &u, sizeof u); 
# 748
return f; 
# 749
} 
# 752
static inline float __half2float(const __half a) 
# 753
{ 
# 754
float val; 
# 755 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 755 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
val = __internal_half2float(((__half_raw)a).x); 
# 755 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 760 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return val; 
# 761
} 
# 762
static inline float __low2float(const __half2 a) 
# 763
{ 
# 764
float val; 
# 765 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 765 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
val = __internal_half2float(((__half2_raw)a).x); 
# 765 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 772 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return val; 
# 773
} 
# 774
static inline float __high2float(const __half2 a) 
# 775
{ 
# 776
float val; 
# 777 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 777 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
val = __internal_half2float(((__half2_raw)a).y); 
# 777 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 784 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return val; 
# 785
} 
# 786
static inline short __half2short_rz(const __half h) 
# 787
{ 
# 788
short i; 
# 789 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 789 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
const float f = __half2float(h); const short max_val = ((short)32767U); const short min_val = ((short)32768U); const unsigned short bits = static_cast< unsigned short>((((__half_raw)h).x) << 1U); if (bits > ((unsigned short)63488U)) { i = (0); } else { if (f > (static_cast< float>(max_val))) { i = max_val; } else { if (f < (static_cast< float>(min_val))) { i = min_val; } else { i = (static_cast< short>(f)); }  }  }  
# 789 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 811 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return i; 
# 812
} 
# 813
static inline unsigned short __half2ushort_rz(const __half h) 
# 814
{ 
# 815
unsigned short i; 
# 816 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 816 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
const float f = __half2float(h); const unsigned short max_val = (65535U); const unsigned short min_val = (0U); const unsigned short bits = static_cast< unsigned short>((((__half_raw)h).x) << 1U); if (bits > ((unsigned short)63488U)) { i = (0U); } else { if (f > (static_cast< float>(max_val))) { i = max_val; } else { if (f < (static_cast< float>(min_val))) { i = min_val; } else { i = (static_cast< unsigned short>(f)); }  }  }  
# 816 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 838 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return i; 
# 839
} 
# 840
static inline int __half2int_rz(const __half h) 
# 841
{ 
# 842
int i; 
# 843 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 843 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
const float f = __half2float(h); const int max_val = ((int)2147483647U); const int min_val = ((int)2147483648U); const unsigned short bits = static_cast< unsigned short>((((__half_raw)h).x) << 1U); if (bits > ((unsigned short)63488U)) { i = 0; } else { if (f > (static_cast< float>(max_val))) { i = max_val; } else { if (f < (static_cast< float>(min_val))) { i = min_val; } else { i = (static_cast< int>(f)); }  }  }  
# 843 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 865 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return i; 
# 866
} 
# 867
static inline unsigned __half2uint_rz(const __half h) 
# 868
{ 
# 869
unsigned i; 
# 870 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 870 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
const float f = __half2float(h); const unsigned max_val = 4294967295U; const unsigned min_val = 0U; const unsigned short bits = static_cast< unsigned short>((((__half_raw)h).x) << 1U); if (bits > ((unsigned short)63488U)) { i = 0U; } else { if (f > (static_cast< float>(max_val))) { i = max_val; } else { if (f < (static_cast< float>(min_val))) { i = min_val; } else { i = (static_cast< unsigned>(f)); }  }  }  
# 870 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 892 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return i; 
# 893
} 
# 894
static inline long long __half2ll_rz(const __half h) 
# 895
{ 
# 896
long long i; 
# 897 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 897 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
const float f = __half2float(h); const long long max_val = ((long long)9223372036854775807ULL); const long long min_val = ((long long)9223372036854775808ULL); const unsigned short bits = static_cast< unsigned short>((((__half_raw)h).x) << 1U); if (bits > ((unsigned short)63488U)) { i = min_val; } else { if (f > (static_cast< float>(max_val))) { i = max_val; } else { if (f < (static_cast< float>(min_val))) { i = min_val; } else { i = (static_cast< long long>(f)); }  }  }  
# 897 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 919 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return i; 
# 920
} 
# 921
static inline unsigned long long __half2ull_rz(const __half h) 
# 922
{ 
# 923
unsigned long long i; 
# 924 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 924 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
const float f = __half2float(h); const unsigned long long max_val = 18446744073709551615ULL; const unsigned long long min_val = 0ULL; const unsigned short bits = static_cast< unsigned short>((((__half_raw)h).x) << 1U); if (bits > ((unsigned short)63488U)) { i = 9223372036854775808ULL; } else { if (f > (static_cast< float>(max_val))) { i = max_val; } else { if (f < (static_cast< float>(min_val))) { i = min_val; } else { i = (static_cast< unsigned long long>(f)); }  }  }  
# 924 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 946 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return i; 
# 947
} 
# 953
static inline __half2 make_half2(const __half x, const __half y) 
# 954
{ 
# 955
__half2 t; (t.x) = x; (t.y) = y; return t; 
# 956
} 
# 961
static inline __half2 __float22half2_rn(const float2 a) 
# 962
{ 
# 963
const __half2 val = __floats2half2_rn(a.x, a.y); 
# 964
return val; 
# 965
} 
# 966
static inline float2 __half22float2(const __half2 a) 
# 967
{ 
# 968
float hi_float; 
# 969
float lo_float; 
# 970 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 970 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
lo_float = __internal_half2float(((__half2_raw)a).x); hi_float = __internal_half2float(((__half2_raw)a).y); 
# 970 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 982 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return make_float2(lo_float, hi_float); 
# 983
} 
# 984
__attribute__((unused)) static inline int __half2int_rn(const __half h) 
# 985
{int volatile ___ = 1;(void)h;
# 989
::exit(___);}
#if 0
# 985
{ 
# 986
int i; 
# 987
__asm__("cvt.rni.s32.f16 %0, %1;" : "=r" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 988
return i; 
# 989
} 
#endif
# 990 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline int __half2int_rd(const __half h) 
# 991
{int volatile ___ = 1;(void)h;
# 995
::exit(___);}
#if 0
# 991
{ 
# 992
int i; 
# 993
__asm__("cvt.rmi.s32.f16 %0, %1;" : "=r" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 994
return i; 
# 995
} 
#endif
# 996 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline int __half2int_ru(const __half h) 
# 997
{int volatile ___ = 1;(void)h;
# 1001
::exit(___);}
#if 0
# 997
{ 
# 998
int i; 
# 999
__asm__("cvt.rpi.s32.f16 %0, %1;" : "=r" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1000
return i; 
# 1001
} 
#endif
# 1002 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
static inline __half __int2half_rn(const int i) 
# 1003
{ 
# 1004
__half h; 
# 1005 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 1005 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
const float f = static_cast< float>(i); h = __float2half_rn(f); 
# 1005 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 1015 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return h; 
# 1016
} 
# 1017
__attribute__((unused)) static inline __half __int2half_rz(const int i) 
# 1018
{int volatile ___ = 1;(void)i;
# 1022
::exit(___);}
#if 0
# 1018
{ 
# 1019
__half h; 
# 1020
__asm__("cvt.rz.f16.s32 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "r" (i)); 
# 1021
return h; 
# 1022
} 
#endif
# 1023 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __int2half_rd(const int i) 
# 1024
{int volatile ___ = 1;(void)i;
# 1028
::exit(___);}
#if 0
# 1024
{ 
# 1025
__half h; 
# 1026
__asm__("cvt.rm.f16.s32 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "r" (i)); 
# 1027
return h; 
# 1028
} 
#endif
# 1029 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __int2half_ru(const int i) 
# 1030
{int volatile ___ = 1;(void)i;
# 1034
::exit(___);}
#if 0
# 1030
{ 
# 1031
__half h; 
# 1032
__asm__("cvt.rp.f16.s32 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "r" (i)); 
# 1033
return h; 
# 1034
} 
#endif
# 1036 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline short __half2short_rn(const __half h) 
# 1037
{int volatile ___ = 1;(void)h;
# 1041
::exit(___);}
#if 0
# 1037
{ 
# 1038
short i; 
# 1039
__asm__("cvt.rni.s16.f16 %0, %1;" : "=h" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1040
return i; 
# 1041
} 
#endif
# 1042 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline short __half2short_rd(const __half h) 
# 1043
{int volatile ___ = 1;(void)h;
# 1047
::exit(___);}
#if 0
# 1043
{ 
# 1044
short i; 
# 1045
__asm__("cvt.rmi.s16.f16 %0, %1;" : "=h" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1046
return i; 
# 1047
} 
#endif
# 1048 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline short __half2short_ru(const __half h) 
# 1049
{int volatile ___ = 1;(void)h;
# 1053
::exit(___);}
#if 0
# 1049
{ 
# 1050
short i; 
# 1051
__asm__("cvt.rpi.s16.f16 %0, %1;" : "=h" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1052
return i; 
# 1053
} 
#endif
# 1054 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
static inline __half __short2half_rn(const short i) 
# 1055
{ 
# 1056
__half h; 
# 1057 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 1057 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
const float f = static_cast< float>(i); h = __float2half_rn(f); 
# 1057 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 1063 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return h; 
# 1064
} 
# 1065
__attribute__((unused)) static inline __half __short2half_rz(const short i) 
# 1066
{int volatile ___ = 1;(void)i;
# 1070
::exit(___);}
#if 0
# 1066
{ 
# 1067
__half h; 
# 1068
__asm__("cvt.rz.f16.s16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "h" (i)); 
# 1069
return h; 
# 1070
} 
#endif
# 1071 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __short2half_rd(const short i) 
# 1072
{int volatile ___ = 1;(void)i;
# 1076
::exit(___);}
#if 0
# 1072
{ 
# 1073
__half h; 
# 1074
__asm__("cvt.rm.f16.s16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "h" (i)); 
# 1075
return h; 
# 1076
} 
#endif
# 1077 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __short2half_ru(const short i) 
# 1078
{int volatile ___ = 1;(void)i;
# 1082
::exit(___);}
#if 0
# 1078
{ 
# 1079
__half h; 
# 1080
__asm__("cvt.rp.f16.s16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "h" (i)); 
# 1081
return h; 
# 1082
} 
#endif
# 1084 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __half2uint_rn(const __half h) 
# 1085
{int volatile ___ = 1;(void)h;
# 1089
::exit(___);}
#if 0
# 1085
{ 
# 1086
unsigned i; 
# 1087
__asm__("cvt.rni.u32.f16 %0, %1;" : "=r" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1088
return i; 
# 1089
} 
#endif
# 1090 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __half2uint_rd(const __half h) 
# 1091
{int volatile ___ = 1;(void)h;
# 1095
::exit(___);}
#if 0
# 1091
{ 
# 1092
unsigned i; 
# 1093
__asm__("cvt.rmi.u32.f16 %0, %1;" : "=r" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1094
return i; 
# 1095
} 
#endif
# 1096 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __half2uint_ru(const __half h) 
# 1097
{int volatile ___ = 1;(void)h;
# 1101
::exit(___);}
#if 0
# 1097
{ 
# 1098
unsigned i; 
# 1099
__asm__("cvt.rpi.u32.f16 %0, %1;" : "=r" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1100
return i; 
# 1101
} 
#endif
# 1102 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
static inline __half __uint2half_rn(const unsigned i) 
# 1103
{ 
# 1104
__half h; 
# 1105 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 1105 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
const float f = static_cast< float>(i); h = __float2half_rn(f); 
# 1105 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 1115 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return h; 
# 1116
} 
# 1117
__attribute__((unused)) static inline __half __uint2half_rz(const unsigned i) 
# 1118
{int volatile ___ = 1;(void)i;
# 1122
::exit(___);}
#if 0
# 1118
{ 
# 1119
__half h; 
# 1120
__asm__("cvt.rz.f16.u32 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "r" (i)); 
# 1121
return h; 
# 1122
} 
#endif
# 1123 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __uint2half_rd(const unsigned i) 
# 1124
{int volatile ___ = 1;(void)i;
# 1128
::exit(___);}
#if 0
# 1124
{ 
# 1125
__half h; 
# 1126
__asm__("cvt.rm.f16.u32 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "r" (i)); 
# 1127
return h; 
# 1128
} 
#endif
# 1129 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __uint2half_ru(const unsigned i) 
# 1130
{int volatile ___ = 1;(void)i;
# 1134
::exit(___);}
#if 0
# 1130
{ 
# 1131
__half h; 
# 1132
__asm__("cvt.rp.f16.u32 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "r" (i)); 
# 1133
return h; 
# 1134
} 
#endif
# 1136 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned short __half2ushort_rn(const __half h) 
# 1137
{int volatile ___ = 1;(void)h;
# 1141
::exit(___);}
#if 0
# 1137
{ 
# 1138
unsigned short i; 
# 1139
__asm__("cvt.rni.u16.f16 %0, %1;" : "=h" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1140
return i; 
# 1141
} 
#endif
# 1142 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned short __half2ushort_rd(const __half h) 
# 1143
{int volatile ___ = 1;(void)h;
# 1147
::exit(___);}
#if 0
# 1143
{ 
# 1144
unsigned short i; 
# 1145
__asm__("cvt.rmi.u16.f16 %0, %1;" : "=h" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1146
return i; 
# 1147
} 
#endif
# 1148 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned short __half2ushort_ru(const __half h) 
# 1149
{int volatile ___ = 1;(void)h;
# 1153
::exit(___);}
#if 0
# 1149
{ 
# 1150
unsigned short i; 
# 1151
__asm__("cvt.rpi.u16.f16 %0, %1;" : "=h" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1152
return i; 
# 1153
} 
#endif
# 1154 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
static inline __half __ushort2half_rn(const unsigned short i) 
# 1155
{ 
# 1156
__half h; 
# 1157 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 1157 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
const float f = static_cast< float>(i); h = __float2half_rn(f); 
# 1157 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 1163 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return h; 
# 1164
} 
# 1165
__attribute__((unused)) static inline __half __ushort2half_rz(const unsigned short i) 
# 1166
{int volatile ___ = 1;(void)i;
# 1170
::exit(___);}
#if 0
# 1166
{ 
# 1167
__half h; 
# 1168
__asm__("cvt.rz.f16.u16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "h" (i)); 
# 1169
return h; 
# 1170
} 
#endif
# 1171 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ushort2half_rd(const unsigned short i) 
# 1172
{int volatile ___ = 1;(void)i;
# 1176
::exit(___);}
#if 0
# 1172
{ 
# 1173
__half h; 
# 1174
__asm__("cvt.rm.f16.u16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "h" (i)); 
# 1175
return h; 
# 1176
} 
#endif
# 1177 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ushort2half_ru(const unsigned short i) 
# 1178
{int volatile ___ = 1;(void)i;
# 1182
::exit(___);}
#if 0
# 1178
{ 
# 1179
__half h; 
# 1180
__asm__("cvt.rp.f16.u16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "h" (i)); 
# 1181
return h; 
# 1182
} 
#endif
# 1184 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned long long __half2ull_rn(const __half h) 
# 1185
{int volatile ___ = 1;(void)h;
# 1189
::exit(___);}
#if 0
# 1185
{ 
# 1186
unsigned long long i; 
# 1187
__asm__("cvt.rni.u64.f16 %0, %1;" : "=l" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1188
return i; 
# 1189
} 
#endif
# 1190 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned long long __half2ull_rd(const __half h) 
# 1191
{int volatile ___ = 1;(void)h;
# 1195
::exit(___);}
#if 0
# 1191
{ 
# 1192
unsigned long long i; 
# 1193
__asm__("cvt.rmi.u64.f16 %0, %1;" : "=l" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1194
return i; 
# 1195
} 
#endif
# 1196 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned long long __half2ull_ru(const __half h) 
# 1197
{int volatile ___ = 1;(void)h;
# 1201
::exit(___);}
#if 0
# 1197
{ 
# 1198
unsigned long long i; 
# 1199
__asm__("cvt.rpi.u64.f16 %0, %1;" : "=l" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1200
return i; 
# 1201
} 
#endif
# 1202 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
static inline __half __ull2half_rn(const unsigned long long i) 
# 1203
{ 
# 1204
__half h; 
# 1205 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 1205 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
const float f = static_cast< float>(i); h = __float2half_rn(f); 
# 1205 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 1215 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return h; 
# 1216
} 
# 1217
__attribute__((unused)) static inline __half __ull2half_rz(const unsigned long long i) 
# 1218
{int volatile ___ = 1;(void)i;
# 1222
::exit(___);}
#if 0
# 1218
{ 
# 1219
__half h; 
# 1220
__asm__("cvt.rz.f16.u64 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "l" (i)); 
# 1221
return h; 
# 1222
} 
#endif
# 1223 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ull2half_rd(const unsigned long long i) 
# 1224
{int volatile ___ = 1;(void)i;
# 1228
::exit(___);}
#if 0
# 1224
{ 
# 1225
__half h; 
# 1226
__asm__("cvt.rm.f16.u64 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "l" (i)); 
# 1227
return h; 
# 1228
} 
#endif
# 1229 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ull2half_ru(const unsigned long long i) 
# 1230
{int volatile ___ = 1;(void)i;
# 1234
::exit(___);}
#if 0
# 1230
{ 
# 1231
__half h; 
# 1232
__asm__("cvt.rp.f16.u64 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "l" (i)); 
# 1233
return h; 
# 1234
} 
#endif
# 1236 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline long long __half2ll_rn(const __half h) 
# 1237
{int volatile ___ = 1;(void)h;
# 1241
::exit(___);}
#if 0
# 1237
{ 
# 1238
long long i; 
# 1239
__asm__("cvt.rni.s64.f16 %0, %1;" : "=l" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1240
return i; 
# 1241
} 
#endif
# 1242 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline long long __half2ll_rd(const __half h) 
# 1243
{int volatile ___ = 1;(void)h;
# 1247
::exit(___);}
#if 0
# 1243
{ 
# 1244
long long i; 
# 1245
__asm__("cvt.rmi.s64.f16 %0, %1;" : "=l" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1246
return i; 
# 1247
} 
#endif
# 1248 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline long long __half2ll_ru(const __half h) 
# 1249
{int volatile ___ = 1;(void)h;
# 1253
::exit(___);}
#if 0
# 1249
{ 
# 1250
long long i; 
# 1251
__asm__("cvt.rpi.s64.f16 %0, %1;" : "=l" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1252
return i; 
# 1253
} 
#endif
# 1254 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
static inline __half __ll2half_rn(const long long i) 
# 1255
{ 
# 1256
__half h; 
# 1257 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 1257 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
const float f = static_cast< float>(i); h = __float2half_rn(f); 
# 1257 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 1267 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return h; 
# 1268
} 
# 1269
__attribute__((unused)) static inline __half __ll2half_rz(const long long i) 
# 1270
{int volatile ___ = 1;(void)i;
# 1274
::exit(___);}
#if 0
# 1270
{ 
# 1271
__half h; 
# 1272
__asm__("cvt.rz.f16.s64 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "l" (i)); 
# 1273
return h; 
# 1274
} 
#endif
# 1275 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ll2half_rd(const long long i) 
# 1276
{int volatile ___ = 1;(void)i;
# 1280
::exit(___);}
#if 0
# 1276
{ 
# 1277
__half h; 
# 1278
__asm__("cvt.rm.f16.s64 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "l" (i)); 
# 1279
return h; 
# 1280
} 
#endif
# 1281 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ll2half_ru(const long long i) 
# 1282
{int volatile ___ = 1;(void)i;
# 1286
::exit(___);}
#if 0
# 1282
{ 
# 1283
__half h; 
# 1284
__asm__("cvt.rp.f16.s64 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "l" (i)); 
# 1285
return h; 
# 1286
} 
#endif
# 1288 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half htrunc(const __half h) 
# 1289
{int volatile ___ = 1;(void)h;
# 1293
::exit(___);}
#if 0
# 1289
{ 
# 1290
__half r; 
# 1291
__asm__("cvt.rzi.f16.f16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1292
return r; 
# 1293
} 
#endif
# 1294 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hceil(const __half h) 
# 1295
{int volatile ___ = 1;(void)h;
# 1299
::exit(___);}
#if 0
# 1295
{ 
# 1296
__half r; 
# 1297
__asm__("cvt.rpi.f16.f16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1298
return r; 
# 1299
} 
#endif
# 1300 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hfloor(const __half h) 
# 1301
{int volatile ___ = 1;(void)h;
# 1305
::exit(___);}
#if 0
# 1301
{ 
# 1302
__half r; 
# 1303
__asm__("cvt.rmi.f16.f16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1304
return r; 
# 1305
} 
#endif
# 1306 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hrint(const __half h) 
# 1307
{int volatile ___ = 1;(void)h;
# 1311
::exit(___);}
#if 0
# 1307
{ 
# 1308
__half r; 
# 1309
__asm__("cvt.rni.f16.f16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1310
return r; 
# 1311
} 
#endif
# 1313 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2trunc(const __half2 h) 
# 1314
{int volatile ___ = 1;(void)h;
# 1322
::exit(___);}
#if 0
# 1314
{ 
# 1315
__half2 val; 
# 1316
__asm__("{.reg .f16 low,high;\n  mov.b32 {low,high}, %1;\n  cvt.rzi.f16.f16 low, low;\n  cvt.rzi.f16.f16 high, high;\n  mov.b32 %0, {low," "high};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&h)))); 
# 1321
return val; 
# 1322
} 
#endif
# 1323 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2ceil(const __half2 h) 
# 1324
{int volatile ___ = 1;(void)h;
# 1332
::exit(___);}
#if 0
# 1324
{ 
# 1325
__half2 val; 
# 1326
__asm__("{.reg .f16 low,high;\n  mov.b32 {low,high}, %1;\n  cvt.rpi.f16.f16 low, low;\n  cvt.rpi.f16.f16 high, high;\n  mov.b32 %0, {low," "high};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&h)))); 
# 1331
return val; 
# 1332
} 
#endif
# 1333 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2floor(const __half2 h) 
# 1334
{int volatile ___ = 1;(void)h;
# 1342
::exit(___);}
#if 0
# 1334
{ 
# 1335
__half2 val; 
# 1336
__asm__("{.reg .f16 low,high;\n  mov.b32 {low,high}, %1;\n  cvt.rmi.f16.f16 low, low;\n  cvt.rmi.f16.f16 high, high;\n  mov.b32 %0, {low," "high};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&h)))); 
# 1341
return val; 
# 1342
} 
#endif
# 1343 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2rint(const __half2 h) 
# 1344
{int volatile ___ = 1;(void)h;
# 1352
::exit(___);}
#if 0
# 1344
{ 
# 1345
__half2 val; 
# 1346
__asm__("{.reg .f16 low,high;\n  mov.b32 {low,high}, %1;\n  cvt.rni.f16.f16 low, low;\n  cvt.rni.f16.f16 high, high;\n  mov.b32 %0, {low," "high};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&h)))); 
# 1351
return val; 
# 1352
} 
#endif
# 1353 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __lows2half2(const __half2 a, const __half2 b) 
# 1354
{int volatile ___ = 1;(void)a;(void)b;
# 1361
::exit(___);}
#if 0
# 1354
{ 
# 1355
__half2 val; 
# 1356
__asm__("{.reg .f16 alow,ahigh,blow,bhigh;\n  mov.b32 {alow,ahigh}, %1;\n  mov.b32 {blow,bhigh}, %2;\n  mov.b32 %0, {alow,blow};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1360
return val; 
# 1361
} 
#endif
# 1362 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __highs2half2(const __half2 a, const __half2 b) 
# 1363
{int volatile ___ = 1;(void)a;(void)b;
# 1370
::exit(___);}
#if 0
# 1363
{ 
# 1364
__half2 val; 
# 1365
__asm__("{.reg .f16 alow,ahigh,blow,bhigh;\n  mov.b32 {alow,ahigh}, %1;\n  mov.b32 {blow,bhigh}, %2;\n  mov.b32 %0, {ahigh,bhigh};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1369
return val; 
# 1370
} 
#endif
# 1371 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __low2half(const __half2 a) 
# 1372
{int volatile ___ = 1;(void)a;
# 1378
::exit(___);}
#if 0
# 1372
{ 
# 1373
__half ret; 
# 1374
__asm__("{.reg .f16 low,high;\n mov.b32 {low,high}, %1;\n mov.b16 %0, low;}" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1377
return ret; 
# 1378
} 
#endif
# 1379 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline int __hisinf(const __half a) 
# 1380
{int volatile ___ = 1;(void)a;
# 1390
::exit(___);}
#if 0
# 1380
{ 
# 1381
int retval; 
# 1382
if ((*(reinterpret_cast< const unsigned short *>(&a))) == 64512U) { 
# 1383
retval = (-1); 
# 1384
} else { if ((*(reinterpret_cast< const unsigned short *>(&a))) == 31744U) { 
# 1385
retval = 1; 
# 1386
} else { 
# 1387
retval = 0; 
# 1388
}  }  
# 1389
return retval; 
# 1390
} 
#endif
# 1391 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __low2half2(const __half2 a) 
# 1392
{int volatile ___ = 1;(void)a;
# 1398
::exit(___);}
#if 0
# 1392
{ 
# 1393
__half2 val; 
# 1394
__asm__("{.reg .f16 low,high;\n  mov.b32 {low,high}, %1;\n  mov.b32 %0, {low,low};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1397
return val; 
# 1398
} 
#endif
# 1399 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __high2half2(const __half2 a) 
# 1400
{int volatile ___ = 1;(void)a;
# 1406
::exit(___);}
#if 0
# 1400
{ 
# 1401
__half2 val; 
# 1402
__asm__("{.reg .f16 low,high;\n  mov.b32 {low,high}, %1;\n  mov.b32 %0, {high,high};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1405
return val; 
# 1406
} 
#endif
# 1407 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __high2half(const __half2 a) 
# 1408
{int volatile ___ = 1;(void)a;
# 1414
::exit(___);}
#if 0
# 1408
{ 
# 1409
__half ret; 
# 1410
__asm__("{.reg .f16 low,high;\n mov.b32 {low,high}, %1;\n mov.b16 %0, high;}" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1413
return ret; 
# 1414
} 
#endif
# 1415 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __halves2half2(const __half a, const __half b) 
# 1416
{int volatile ___ = 1;(void)a;(void)b;
# 1421
::exit(___);}
#if 0
# 1416
{ 
# 1417
__half2 val; 
# 1418
__asm__("{  mov.b32 %0, {%1,%2};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 1420
return val; 
# 1421
} 
#endif
# 1422 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __half2half2(const __half a) 
# 1423
{int volatile ___ = 1;(void)a;
# 1428
::exit(___);}
#if 0
# 1423
{ 
# 1424
__half2 val; 
# 1425
__asm__("{  mov.b32 %0, {%1,%1};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 1427
return val; 
# 1428
} 
#endif
# 1429 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __lowhigh2highlow(const __half2 a) 
# 1430
{int volatile ___ = 1;(void)a;
# 1436
::exit(___);}
#if 0
# 1430
{ 
# 1431
__half2 val; 
# 1432
__asm__("{.reg .f16 low,high;\n  mov.b32 {low,high}, %1;\n  mov.b32 %0, {high,low};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1435
return val; 
# 1436
} 
#endif
# 1437 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline short __half_as_short(const __half h) 
# 1438
{int volatile ___ = 1;(void)h;
# 1440
::exit(___);}
#if 0
# 1438
{ 
# 1439
return static_cast< short>(*(reinterpret_cast< const unsigned short *>(&h))); 
# 1440
} 
#endif
# 1441 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned short __half_as_ushort(const __half h) 
# 1442
{int volatile ___ = 1;(void)h;
# 1444
::exit(___);}
#if 0
# 1442
{ 
# 1443
return *(reinterpret_cast< const unsigned short *>(&h)); 
# 1444
} 
#endif
# 1445 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __short_as_half(const short i) 
# 1446
{int volatile ___ = 1;(void)i;
# 1450
::exit(___);}
#if 0
# 1446
{ 
# 1447
__half h; 
# 1448
(*(reinterpret_cast< unsigned short *>(&h))) = (static_cast< unsigned short>(i)); 
# 1449
return h; 
# 1450
} 
#endif
# 1451 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ushort_as_half(const unsigned short i) 
# 1452
{int volatile ___ = 1;(void)i;
# 1456
::exit(___);}
#if 0
# 1452
{ 
# 1453
__half h; 
# 1454
(*(reinterpret_cast< unsigned short *>(&h))) = i; 
# 1455
return h; 
# 1456
} 
#endif
# 1461 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hmax(const __half a, const __half b) 
# 1462
{int volatile ___ = 1;(void)a;(void)b;
# 1474 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
::exit(___);}
#if 0
# 1462 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
{ 
# 1464
{ __half val; __asm__("{max.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 1474 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
} 
#endif
# 1475 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hmin(const __half a, const __half b) 
# 1476
{int volatile ___ = 1;(void)a;(void)b;
# 1488 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
::exit(___);}
#if 0
# 1476 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
{ 
# 1478
{ __half val; __asm__("{min.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 1488 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
} 
#endif
# 1493 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hmax2(const __half2 a, const __half2 b) 
# 1494
{int volatile ___ = 1;(void)a;(void)b;
# 1508 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
::exit(___);}
#if 0
# 1494 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
{ 
# 1496
{ __half2 val; __asm__("{max.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1508 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
} 
#endif
# 1509 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hmin2(const __half2 a, const __half2 b) 
# 1510
{int volatile ___ = 1;(void)a;(void)b;
# 1524 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
::exit(___);}
#if 0
# 1510 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
{ 
# 1512
{ __half2 val; __asm__("{min.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1524 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
} 
#endif
# 1547 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl(const __half2 var, const int delta, const int width) 
# 1548
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1553
::exit(___);}
#if 0
# 1548
{ 
# 1549
unsigned warp_size; 
# 1550
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1551
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1552
{ __half2 r; __asm__ volatile("{shfl.idx.b32 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c)); return r; } 
# 1553
} 
#endif
# 1554 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl_up(const __half2 var, const unsigned delta, const int width) 
# 1555
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1560
::exit(___);}
#if 0
# 1555
{ 
# 1556
unsigned warp_size; 
# 1557
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1558
const unsigned c = (warp_size - (static_cast< unsigned>(width))) << 8U; 
# 1559
{ __half2 r; __asm__ volatile("{shfl.up.b32 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c)); return r; } 
# 1560
} 
#endif
# 1561 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl_down(const __half2 var, const unsigned delta, const int width) 
# 1562
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1567
::exit(___);}
#if 0
# 1562
{ 
# 1563
unsigned warp_size; 
# 1564
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1565
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1566
{ __half2 r; __asm__ volatile("{shfl.down.b32 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c)); return r; } 
# 1567
} 
#endif
# 1568 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl_xor(const __half2 var, const int delta, const int width) 
# 1569
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1574
::exit(___);}
#if 0
# 1569
{ 
# 1570
unsigned warp_size; 
# 1571
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1572
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1573
{ __half2 r; __asm__ volatile("{shfl.bfly.b32 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c)); return r; } 
# 1574
} 
#endif
# 1578 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl_sync(const unsigned mask, const __half2 var, const int delta, const int width) 
# 1579
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1584
::exit(___);}
#if 0
# 1579
{ 
# 1580
unsigned warp_size; 
# 1581
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1582
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1583
{ __half2 r; __asm__ volatile("{shfl.sync.idx.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1584
} 
#endif
# 1585 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl_up_sync(const unsigned mask, const __half2 var, const unsigned delta, const int width) 
# 1586
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1591
::exit(___);}
#if 0
# 1586
{ 
# 1587
unsigned warp_size; 
# 1588
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1589
const unsigned c = (warp_size - (static_cast< unsigned>(width))) << 8U; 
# 1590
{ __half2 r; __asm__ volatile("{shfl.sync.up.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1591
} 
#endif
# 1592 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl_down_sync(const unsigned mask, const __half2 var, const unsigned delta, const int width) 
# 1593
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1598
::exit(___);}
#if 0
# 1593
{ 
# 1594
unsigned warp_size; 
# 1595
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1596
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1597
{ __half2 r; __asm__ volatile("{shfl.sync.down.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1598
} 
#endif
# 1599 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl_xor_sync(const unsigned mask, const __half2 var, const int delta, const int width) 
# 1600
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1605
::exit(___);}
#if 0
# 1600
{ 
# 1601
unsigned warp_size; 
# 1602
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1603
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1604
{ __half2 r; __asm__ volatile("{shfl.sync.bfly.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1605
} 
#endif
# 1612 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl(const __half var, const int delta, const int width) 
# 1613
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1617
::exit(___);}
#if 0
# 1613
{ 
# 1614
const __half2 temp1 = __halves2half2(var, var); 
# 1615
const __half2 temp2 = __shfl(temp1, delta, width); 
# 1616
return __low2half(temp2); 
# 1617
} 
#endif
# 1618 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl_up(const __half var, const unsigned delta, const int width) 
# 1619
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1623
::exit(___);}
#if 0
# 1619
{ 
# 1620
const __half2 temp1 = __halves2half2(var, var); 
# 1621
const __half2 temp2 = __shfl_up(temp1, delta, width); 
# 1622
return __low2half(temp2); 
# 1623
} 
#endif
# 1624 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl_down(const __half var, const unsigned delta, const int width) 
# 1625
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1629
::exit(___);}
#if 0
# 1625
{ 
# 1626
const __half2 temp1 = __halves2half2(var, var); 
# 1627
const __half2 temp2 = __shfl_down(temp1, delta, width); 
# 1628
return __low2half(temp2); 
# 1629
} 
#endif
# 1630 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl_xor(const __half var, const int delta, const int width) 
# 1631
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1635
::exit(___);}
#if 0
# 1631
{ 
# 1632
const __half2 temp1 = __halves2half2(var, var); 
# 1633
const __half2 temp2 = __shfl_xor(temp1, delta, width); 
# 1634
return __low2half(temp2); 
# 1635
} 
#endif
# 1639 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl_sync(const unsigned mask, const __half var, const int delta, const int width) 
# 1640
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1644
::exit(___);}
#if 0
# 1640
{ 
# 1641
const __half2 temp1 = __halves2half2(var, var); 
# 1642
const __half2 temp2 = __shfl_sync(mask, temp1, delta, width); 
# 1643
return __low2half(temp2); 
# 1644
} 
#endif
# 1645 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl_up_sync(const unsigned mask, const __half var, const unsigned delta, const int width) 
# 1646
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1650
::exit(___);}
#if 0
# 1646
{ 
# 1647
const __half2 temp1 = __halves2half2(var, var); 
# 1648
const __half2 temp2 = __shfl_up_sync(mask, temp1, delta, width); 
# 1649
return __low2half(temp2); 
# 1650
} 
#endif
# 1651 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl_down_sync(const unsigned mask, const __half var, const unsigned delta, const int width) 
# 1652
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1656
::exit(___);}
#if 0
# 1652
{ 
# 1653
const __half2 temp1 = __halves2half2(var, var); 
# 1654
const __half2 temp2 = __shfl_down_sync(mask, temp1, delta, width); 
# 1655
return __low2half(temp2); 
# 1656
} 
#endif
# 1657 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl_xor_sync(const unsigned mask, const __half var, const int delta, const int width) 
# 1658
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1662
::exit(___);}
#if 0
# 1658
{ 
# 1659
const __half2 temp1 = __halves2half2(var, var); 
# 1660
const __half2 temp2 = __shfl_xor_sync(mask, temp1, delta, width); 
# 1661
return __low2half(temp2); 
# 1662
} 
#endif
# 1675 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __ldg(const __half2 *const ptr) 
# 1676
{int volatile ___ = 1;(void)ptr;
# 1680
::exit(___);}
#if 0
# 1676
{ 
# 1677
__half2 ret; 
# 1678
__asm__("ld.global.nc.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1679
return ret; 
# 1680
} 
#endif
# 1681 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ldg(const __half *const ptr) 
# 1682
{int volatile ___ = 1;(void)ptr;
# 1686
::exit(___);}
#if 0
# 1682
{ 
# 1683
__half ret; 
# 1684
__asm__("ld.global.nc.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1685
return ret; 
# 1686
} 
#endif
# 1687 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __ldcg(const __half2 *const ptr) 
# 1688
{int volatile ___ = 1;(void)ptr;
# 1692
::exit(___);}
#if 0
# 1688
{ 
# 1689
__half2 ret; 
# 1690
__asm__("ld.global.cg.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1691
return ret; 
# 1692
} 
#endif
# 1693 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ldcg(const __half *const ptr) 
# 1694
{int volatile ___ = 1;(void)ptr;
# 1698
::exit(___);}
#if 0
# 1694
{ 
# 1695
__half ret; 
# 1696
__asm__("ld.global.cg.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1697
return ret; 
# 1698
} 
#endif
# 1699 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __ldca(const __half2 *const ptr) 
# 1700
{int volatile ___ = 1;(void)ptr;
# 1704
::exit(___);}
#if 0
# 1700
{ 
# 1701
__half2 ret; 
# 1702
__asm__("ld.global.ca.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1703
return ret; 
# 1704
} 
#endif
# 1705 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ldca(const __half *const ptr) 
# 1706
{int volatile ___ = 1;(void)ptr;
# 1710
::exit(___);}
#if 0
# 1706
{ 
# 1707
__half ret; 
# 1708
__asm__("ld.global.ca.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1709
return ret; 
# 1710
} 
#endif
# 1711 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __ldcs(const __half2 *const ptr) 
# 1712
{int volatile ___ = 1;(void)ptr;
# 1716
::exit(___);}
#if 0
# 1712
{ 
# 1713
__half2 ret; 
# 1714
__asm__("ld.global.cs.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1715
return ret; 
# 1716
} 
#endif
# 1717 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ldcs(const __half *const ptr) 
# 1718
{int volatile ___ = 1;(void)ptr;
# 1722
::exit(___);}
#if 0
# 1718
{ 
# 1719
__half ret; 
# 1720
__asm__("ld.global.cs.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1721
return ret; 
# 1722
} 
#endif
# 1723 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __ldlu(const __half2 *const ptr) 
# 1724
{int volatile ___ = 1;(void)ptr;
# 1728
::exit(___);}
#if 0
# 1724
{ 
# 1725
__half2 ret; 
# 1726
__asm__("ld.global.lu.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr) : "memory"); 
# 1727
return ret; 
# 1728
} 
#endif
# 1729 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ldlu(const __half *const ptr) 
# 1730
{int volatile ___ = 1;(void)ptr;
# 1734
::exit(___);}
#if 0
# 1730
{ 
# 1731
__half ret; 
# 1732
__asm__("ld.global.lu.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr) : "memory"); 
# 1733
return ret; 
# 1734
} 
#endif
# 1735 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __ldcv(const __half2 *const ptr) 
# 1736
{int volatile ___ = 1;(void)ptr;
# 1740
::exit(___);}
#if 0
# 1736
{ 
# 1737
__half2 ret; 
# 1738
__asm__("ld.global.cv.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr) : "memory"); 
# 1739
return ret; 
# 1740
} 
#endif
# 1741 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ldcv(const __half *const ptr) 
# 1742
{int volatile ___ = 1;(void)ptr;
# 1746
::exit(___);}
#if 0
# 1742
{ 
# 1743
__half ret; 
# 1744
__asm__("ld.global.cv.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr) : "memory"); 
# 1745
return ret; 
# 1746
} 
#endif
# 1747 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stwb(__half2 *const ptr, const __half2 value) 
# 1748
{int volatile ___ = 1;(void)ptr;(void)value;
# 1750
::exit(___);}
#if 0
# 1748
{ 
# 1749
__asm__("st.global.wb.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1750
} 
#endif
# 1751 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stwb(__half *const ptr, const __half value) 
# 1752
{int volatile ___ = 1;(void)ptr;(void)value;
# 1754
::exit(___);}
#if 0
# 1752
{ 
# 1753
__asm__("st.global.wb.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1754
} 
#endif
# 1755 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stcg(__half2 *const ptr, const __half2 value) 
# 1756
{int volatile ___ = 1;(void)ptr;(void)value;
# 1758
::exit(___);}
#if 0
# 1756
{ 
# 1757
__asm__("st.global.cg.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1758
} 
#endif
# 1759 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stcg(__half *const ptr, const __half value) 
# 1760
{int volatile ___ = 1;(void)ptr;(void)value;
# 1762
::exit(___);}
#if 0
# 1760
{ 
# 1761
__asm__("st.global.cg.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1762
} 
#endif
# 1763 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stcs(__half2 *const ptr, const __half2 value) 
# 1764
{int volatile ___ = 1;(void)ptr;(void)value;
# 1766
::exit(___);}
#if 0
# 1764
{ 
# 1765
__asm__("st.global.cs.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1766
} 
#endif
# 1767 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stcs(__half *const ptr, const __half value) 
# 1768
{int volatile ___ = 1;(void)ptr;(void)value;
# 1770
::exit(___);}
#if 0
# 1768
{ 
# 1769
__asm__("st.global.cs.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1770
} 
#endif
# 1771 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stwt(__half2 *const ptr, const __half2 value) 
# 1772
{int volatile ___ = 1;(void)ptr;(void)value;
# 1774
::exit(___);}
#if 0
# 1772
{ 
# 1773
__asm__("st.global.wt.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1774
} 
#endif
# 1775 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stwt(__half *const ptr, const __half value) 
# 1776
{int volatile ___ = 1;(void)ptr;(void)value;
# 1778
::exit(___);}
#if 0
# 1776
{ 
# 1777
__asm__("st.global.wt.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1778
} 
#endif
# 1791 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __heq2(const __half2 a, const __half2 b) 
# 1792
{int volatile ___ = 1;(void)a;(void)b;
# 1794
::exit(___);}
#if 0
# 1792
{ 
# 1793
{ __half2 val; __asm__("{ set.eq.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1794
} 
#endif
# 1795 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hne2(const __half2 a, const __half2 b) 
# 1796
{int volatile ___ = 1;(void)a;(void)b;
# 1798
::exit(___);}
#if 0
# 1796
{ 
# 1797
{ __half2 val; __asm__("{ set.ne.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1798
} 
#endif
# 1799 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hle2(const __half2 a, const __half2 b) 
# 1800
{int volatile ___ = 1;(void)a;(void)b;
# 1802
::exit(___);}
#if 0
# 1800
{ 
# 1801
{ __half2 val; __asm__("{ set.le.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1802
} 
#endif
# 1803 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hge2(const __half2 a, const __half2 b) 
# 1804
{int volatile ___ = 1;(void)a;(void)b;
# 1806
::exit(___);}
#if 0
# 1804
{ 
# 1805
{ __half2 val; __asm__("{ set.ge.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1806
} 
#endif
# 1807 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hlt2(const __half2 a, const __half2 b) 
# 1808
{int volatile ___ = 1;(void)a;(void)b;
# 1810
::exit(___);}
#if 0
# 1808
{ 
# 1809
{ __half2 val; __asm__("{ set.lt.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1810
} 
#endif
# 1811 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hgt2(const __half2 a, const __half2 b) 
# 1812
{int volatile ___ = 1;(void)a;(void)b;
# 1814
::exit(___);}
#if 0
# 1812
{ 
# 1813
{ __half2 val; __asm__("{ set.gt.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1814
} 
#endif
# 1815 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hequ2(const __half2 a, const __half2 b) 
# 1816
{int volatile ___ = 1;(void)a;(void)b;
# 1818
::exit(___);}
#if 0
# 1816
{ 
# 1817
{ __half2 val; __asm__("{ set.equ.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1818
} 
#endif
# 1819 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hneu2(const __half2 a, const __half2 b) 
# 1820
{int volatile ___ = 1;(void)a;(void)b;
# 1822
::exit(___);}
#if 0
# 1820
{ 
# 1821
{ __half2 val; __asm__("{ set.neu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1822
} 
#endif
# 1823 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hleu2(const __half2 a, const __half2 b) 
# 1824
{int volatile ___ = 1;(void)a;(void)b;
# 1826
::exit(___);}
#if 0
# 1824
{ 
# 1825
{ __half2 val; __asm__("{ set.leu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1826
} 
#endif
# 1827 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hgeu2(const __half2 a, const __half2 b) 
# 1828
{int volatile ___ = 1;(void)a;(void)b;
# 1830
::exit(___);}
#if 0
# 1828
{ 
# 1829
{ __half2 val; __asm__("{ set.geu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1830
} 
#endif
# 1831 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hltu2(const __half2 a, const __half2 b) 
# 1832
{int volatile ___ = 1;(void)a;(void)b;
# 1834
::exit(___);}
#if 0
# 1832
{ 
# 1833
{ __half2 val; __asm__("{ set.ltu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1834
} 
#endif
# 1835 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hgtu2(const __half2 a, const __half2 b) 
# 1836
{int volatile ___ = 1;(void)a;(void)b;
# 1838
::exit(___);}
#if 0
# 1836
{ 
# 1837
{ __half2 val; __asm__("{ set.gtu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1838
} 
#endif
# 1849 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __heq2_mask(const __half2 a, const __half2 b) 
# 1850
{int volatile ___ = 1;(void)a;(void)b;
# 1852
::exit(___);}
#if 0
# 1850
{ 
# 1851
{ unsigned val; __asm__("{ set.eq.u32.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1852
} 
#endif
# 1853 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __hne2_mask(const __half2 a, const __half2 b) 
# 1854
{int volatile ___ = 1;(void)a;(void)b;
# 1856
::exit(___);}
#if 0
# 1854
{ 
# 1855
{ unsigned val; __asm__("{ set.ne.u32.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1856
} 
#endif
# 1857 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __hle2_mask(const __half2 a, const __half2 b) 
# 1858
{int volatile ___ = 1;(void)a;(void)b;
# 1860
::exit(___);}
#if 0
# 1858
{ 
# 1859
{ unsigned val; __asm__("{ set.le.u32.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1860
} 
#endif
# 1861 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __hge2_mask(const __half2 a, const __half2 b) 
# 1862
{int volatile ___ = 1;(void)a;(void)b;
# 1864
::exit(___);}
#if 0
# 1862
{ 
# 1863
{ unsigned val; __asm__("{ set.ge.u32.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1864
} 
#endif
# 1865 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __hlt2_mask(const __half2 a, const __half2 b) 
# 1866
{int volatile ___ = 1;(void)a;(void)b;
# 1868
::exit(___);}
#if 0
# 1866
{ 
# 1867
{ unsigned val; __asm__("{ set.lt.u32.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1868
} 
#endif
# 1869 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __hgt2_mask(const __half2 a, const __half2 b) 
# 1870
{int volatile ___ = 1;(void)a;(void)b;
# 1872
::exit(___);}
#if 0
# 1870
{ 
# 1871
{ unsigned val; __asm__("{ set.gt.u32.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1872
} 
#endif
# 1873 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __hequ2_mask(const __half2 a, const __half2 b) 
# 1874
{int volatile ___ = 1;(void)a;(void)b;
# 1876
::exit(___);}
#if 0
# 1874
{ 
# 1875
{ unsigned val; __asm__("{ set.equ.u32.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1876
} 
#endif
# 1877 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __hneu2_mask(const __half2 a, const __half2 b) 
# 1878
{int volatile ___ = 1;(void)a;(void)b;
# 1880
::exit(___);}
#if 0
# 1878
{ 
# 1879
{ unsigned val; __asm__("{ set.neu.u32.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1880
} 
#endif
# 1881 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __hleu2_mask(const __half2 a, const __half2 b) 
# 1882
{int volatile ___ = 1;(void)a;(void)b;
# 1884
::exit(___);}
#if 0
# 1882
{ 
# 1883
{ unsigned val; __asm__("{ set.leu.u32.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1884
} 
#endif
# 1885 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __hgeu2_mask(const __half2 a, const __half2 b) 
# 1886
{int volatile ___ = 1;(void)a;(void)b;
# 1888
::exit(___);}
#if 0
# 1886
{ 
# 1887
{ unsigned val; __asm__("{ set.geu.u32.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1888
} 
#endif
# 1889 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __hltu2_mask(const __half2 a, const __half2 b) 
# 1890
{int volatile ___ = 1;(void)a;(void)b;
# 1892
::exit(___);}
#if 0
# 1890
{ 
# 1891
{ unsigned val; __asm__("{ set.ltu.u32.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1892
} 
#endif
# 1893 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __hgtu2_mask(const __half2 a, const __half2 b) 
# 1894
{int volatile ___ = 1;(void)a;(void)b;
# 1896
::exit(___);}
#if 0
# 1894
{ 
# 1895
{ unsigned val; __asm__("{ set.gtu.u32.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1896
} 
#endif
# 1910 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbeq2(const __half2 a, const __half2 b) 
# 1911
{int volatile ___ = 1;(void)a;(void)b;
# 1913
::exit(___);}
#if 0
# 1911
{ 
# 1912
{ __half2 val; bool retval; __asm__("{ set.eq.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1913
} 
#endif
# 1914 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbne2(const __half2 a, const __half2 b) 
# 1915
{int volatile ___ = 1;(void)a;(void)b;
# 1917
::exit(___);}
#if 0
# 1915
{ 
# 1916
{ __half2 val; bool retval; __asm__("{ set.ne.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1917
} 
#endif
# 1918 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hble2(const __half2 a, const __half2 b) 
# 1919
{int volatile ___ = 1;(void)a;(void)b;
# 1921
::exit(___);}
#if 0
# 1919
{ 
# 1920
{ __half2 val; bool retval; __asm__("{ set.le.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1921
} 
#endif
# 1922 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbge2(const __half2 a, const __half2 b) 
# 1923
{int volatile ___ = 1;(void)a;(void)b;
# 1925
::exit(___);}
#if 0
# 1923
{ 
# 1924
{ __half2 val; bool retval; __asm__("{ set.ge.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1925
} 
#endif
# 1926 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hblt2(const __half2 a, const __half2 b) 
# 1927
{int volatile ___ = 1;(void)a;(void)b;
# 1929
::exit(___);}
#if 0
# 1927
{ 
# 1928
{ __half2 val; bool retval; __asm__("{ set.lt.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1929
} 
#endif
# 1930 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbgt2(const __half2 a, const __half2 b) 
# 1931
{int volatile ___ = 1;(void)a;(void)b;
# 1933
::exit(___);}
#if 0
# 1931
{ 
# 1932
{ __half2 val; bool retval; __asm__("{ set.gt.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1933
} 
#endif
# 1934 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbequ2(const __half2 a, const __half2 b) 
# 1935
{int volatile ___ = 1;(void)a;(void)b;
# 1937
::exit(___);}
#if 0
# 1935
{ 
# 1936
{ __half2 val; bool retval; __asm__("{ set.equ.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1937
} 
#endif
# 1938 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbneu2(const __half2 a, const __half2 b) 
# 1939
{int volatile ___ = 1;(void)a;(void)b;
# 1941
::exit(___);}
#if 0
# 1939
{ 
# 1940
{ __half2 val; bool retval; __asm__("{ set.neu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1941
} 
#endif
# 1942 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbleu2(const __half2 a, const __half2 b) 
# 1943
{int volatile ___ = 1;(void)a;(void)b;
# 1945
::exit(___);}
#if 0
# 1943
{ 
# 1944
{ __half2 val; bool retval; __asm__("{ set.leu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1945
} 
#endif
# 1946 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbgeu2(const __half2 a, const __half2 b) 
# 1947
{int volatile ___ = 1;(void)a;(void)b;
# 1949
::exit(___);}
#if 0
# 1947
{ 
# 1948
{ __half2 val; bool retval; __asm__("{ set.geu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1949
} 
#endif
# 1950 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbltu2(const __half2 a, const __half2 b) 
# 1951
{int volatile ___ = 1;(void)a;(void)b;
# 1953
::exit(___);}
#if 0
# 1951
{ 
# 1952
{ __half2 val; bool retval; __asm__("{ set.ltu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1953
} 
#endif
# 1954 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbgtu2(const __half2 a, const __half2 b) 
# 1955
{int volatile ___ = 1;(void)a;(void)b;
# 1957
::exit(___);}
#if 0
# 1955
{ 
# 1956
{ __half2 val; bool retval; __asm__("{ set.gtu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1957
} 
#endif
# 1970 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __heq(const __half a, const __half b) 
# 1971
{int volatile ___ = 1;(void)a;(void)b;
# 1973
::exit(___);}
#if 0
# 1971
{ 
# 1972
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.eq.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1973
} 
#endif
# 1974 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hne(const __half a, const __half b) 
# 1975
{int volatile ___ = 1;(void)a;(void)b;
# 1977
::exit(___);}
#if 0
# 1975
{ 
# 1976
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.ne.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1977
} 
#endif
# 1978 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hle(const __half a, const __half b) 
# 1979
{int volatile ___ = 1;(void)a;(void)b;
# 1981
::exit(___);}
#if 0
# 1979
{ 
# 1980
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.le.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1981
} 
#endif
# 1982 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hge(const __half a, const __half b) 
# 1983
{int volatile ___ = 1;(void)a;(void)b;
# 1985
::exit(___);}
#if 0
# 1983
{ 
# 1984
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.ge.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1985
} 
#endif
# 1986 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hlt(const __half a, const __half b) 
# 1987
{int volatile ___ = 1;(void)a;(void)b;
# 1989
::exit(___);}
#if 0
# 1987
{ 
# 1988
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.lt.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1989
} 
#endif
# 1990 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hgt(const __half a, const __half b) 
# 1991
{int volatile ___ = 1;(void)a;(void)b;
# 1993
::exit(___);}
#if 0
# 1991
{ 
# 1992
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.gt.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1993
} 
#endif
# 1994 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hequ(const __half a, const __half b) 
# 1995
{int volatile ___ = 1;(void)a;(void)b;
# 1997
::exit(___);}
#if 0
# 1995
{ 
# 1996
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.equ.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1997
} 
#endif
# 1998 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hneu(const __half a, const __half b) 
# 1999
{int volatile ___ = 1;(void)a;(void)b;
# 2001
::exit(___);}
#if 0
# 1999
{ 
# 2000
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.neu.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 2001
} 
#endif
# 2002 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hleu(const __half a, const __half b) 
# 2003
{int volatile ___ = 1;(void)a;(void)b;
# 2005
::exit(___);}
#if 0
# 2003
{ 
# 2004
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.leu.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 2005
} 
#endif
# 2006 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hgeu(const __half a, const __half b) 
# 2007
{int volatile ___ = 1;(void)a;(void)b;
# 2009
::exit(___);}
#if 0
# 2007
{ 
# 2008
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.geu.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 2009
} 
#endif
# 2010 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hltu(const __half a, const __half b) 
# 2011
{int volatile ___ = 1;(void)a;(void)b;
# 2013
::exit(___);}
#if 0
# 2011
{ 
# 2012
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.ltu.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 2013
} 
#endif
# 2014 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hgtu(const __half a, const __half b) 
# 2015
{int volatile ___ = 1;(void)a;(void)b;
# 2017
::exit(___);}
#if 0
# 2015
{ 
# 2016
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.gtu.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 2017
} 
#endif
# 2022 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hadd2(const __half2 a, const __half2 b) 
# 2023
{int volatile ___ = 1;(void)a;(void)b;
# 2025
::exit(___);}
#if 0
# 2023
{ 
# 2024
{ __half2 val; __asm__("{add.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2025
} 
#endif
# 2026 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hsub2(const __half2 a, const __half2 b) 
# 2027
{int volatile ___ = 1;(void)a;(void)b;
# 2029
::exit(___);}
#if 0
# 2027
{ 
# 2028
{ __half2 val; __asm__("{sub.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2029
} 
#endif
# 2030 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hmul2(const __half2 a, const __half2 b) 
# 2031
{int volatile ___ = 1;(void)a;(void)b;
# 2033
::exit(___);}
#if 0
# 2031
{ 
# 2032
{ __half2 val; __asm__("{mul.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2033
} 
#endif
# 2034 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hadd2_sat(const __half2 a, const __half2 b) 
# 2035
{int volatile ___ = 1;(void)a;(void)b;
# 2037
::exit(___);}
#if 0
# 2035
{ 
# 2036
{ __half2 val; __asm__("{add.sat.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2037
} 
#endif
# 2038 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hsub2_sat(const __half2 a, const __half2 b) 
# 2039
{int volatile ___ = 1;(void)a;(void)b;
# 2041
::exit(___);}
#if 0
# 2039
{ 
# 2040
{ __half2 val; __asm__("{sub.sat.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2041
} 
#endif
# 2042 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hmul2_sat(const __half2 a, const __half2 b) 
# 2043
{int volatile ___ = 1;(void)a;(void)b;
# 2045
::exit(___);}
#if 0
# 2043
{ 
# 2044
{ __half2 val; __asm__("{mul.sat.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2045
} 
#endif
# 2046 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hadd2_rn(const __half2 a, const __half2 b) 
# 2047
{int volatile ___ = 1;(void)a;(void)b;
# 2049
::exit(___);}
#if 0
# 2047
{ 
# 2048
{ __half2 val; __asm__("{add.rn.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2049
} 
#endif
# 2050 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hsub2_rn(const __half2 a, const __half2 b) 
# 2051
{int volatile ___ = 1;(void)a;(void)b;
# 2053
::exit(___);}
#if 0
# 2051
{ 
# 2052
{ __half2 val; __asm__("{sub.rn.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2053
} 
#endif
# 2054 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hmul2_rn(const __half2 a, const __half2 b) 
# 2055
{int volatile ___ = 1;(void)a;(void)b;
# 2057
::exit(___);}
#if 0
# 2055
{ 
# 2056
{ __half2 val; __asm__("{mul.rn.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2057
} 
#endif
# 2058 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hfma2(const __half2 a, const __half2 b, const __half2 c) 
# 2059
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2061
::exit(___);}
#if 0
# 2059
{ 
# 2060
{ __half2 val; __asm__("{fma.rn.f16x2 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b))), "r" (*(reinterpret_cast< const unsigned *>(&c)))); return val; } 
# 2061
} 
#endif
# 2062 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hfma2_sat(const __half2 a, const __half2 b, const __half2 c) 
# 2063
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2065
::exit(___);}
#if 0
# 2063
{ 
# 2064
{ __half2 val; __asm__("{fma.rn.sat.f16x2 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b))), "r" (*(reinterpret_cast< const unsigned *>(&c)))); return val; } 
# 2065
} 
#endif
# 2066 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __h2div(const __half2 a, const __half2 b) {int volatile ___ = 1;(void)a;(void)b;
# 2078
::exit(___);}
#if 0
# 2066
{ 
# 2067
__half ha = __low2half(a); 
# 2068
__half hb = __low2half(b); 
# 2070
const __half v1 = __hdiv(ha, hb); 
# 2072
ha = __high2half(a); 
# 2073
hb = __high2half(b); 
# 2075
const __half v2 = __hdiv(ha, hb); 
# 2077
return __halves2half2(v1, v2); 
# 2078
} 
#endif
# 2082 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hadd(const __half a, const __half b) 
# 2083
{int volatile ___ = 1;(void)a;(void)b;
# 2085
::exit(___);}
#if 0
# 2083
{ 
# 2084
{ __half val; __asm__("{add.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2085
} 
#endif
# 2086 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hsub(const __half a, const __half b) 
# 2087
{int volatile ___ = 1;(void)a;(void)b;
# 2089
::exit(___);}
#if 0
# 2087
{ 
# 2088
{ __half val; __asm__("{sub.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2089
} 
#endif
# 2090 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hmul(const __half a, const __half b) 
# 2091
{int volatile ___ = 1;(void)a;(void)b;
# 2093
::exit(___);}
#if 0
# 2091
{ 
# 2092
{ __half val; __asm__("{mul.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2093
} 
#endif
# 2094 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hadd_sat(const __half a, const __half b) 
# 2095
{int volatile ___ = 1;(void)a;(void)b;
# 2097
::exit(___);}
#if 0
# 2095
{ 
# 2096
{ __half val; __asm__("{add.sat.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2097
} 
#endif
# 2098 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hsub_sat(const __half a, const __half b) 
# 2099
{int volatile ___ = 1;(void)a;(void)b;
# 2101
::exit(___);}
#if 0
# 2099
{ 
# 2100
{ __half val; __asm__("{sub.sat.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2101
} 
#endif
# 2102 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hmul_sat(const __half a, const __half b) 
# 2103
{int volatile ___ = 1;(void)a;(void)b;
# 2105
::exit(___);}
#if 0
# 2103
{ 
# 2104
{ __half val; __asm__("{mul.sat.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2105
} 
#endif
# 2106 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hadd_rn(const __half a, const __half b) 
# 2107
{int volatile ___ = 1;(void)a;(void)b;
# 2109
::exit(___);}
#if 0
# 2107
{ 
# 2108
{ __half val; __asm__("{add.rn.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2109
} 
#endif
# 2110 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hsub_rn(const __half a, const __half b) 
# 2111
{int volatile ___ = 1;(void)a;(void)b;
# 2113
::exit(___);}
#if 0
# 2111
{ 
# 2112
{ __half val; __asm__("{sub.rn.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2113
} 
#endif
# 2114 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hmul_rn(const __half a, const __half b) 
# 2115
{int volatile ___ = 1;(void)a;(void)b;
# 2117
::exit(___);}
#if 0
# 2115
{ 
# 2116
{ __half val; __asm__("{mul.rn.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2117
} 
#endif
# 2118 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hfma(const __half a, const __half b, const __half c) 
# 2119
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2121
::exit(___);}
#if 0
# 2119
{ 
# 2120
{ __half val; __asm__("{fma.rn.f16 %0,%1,%2,%3;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b))), "h" (*(reinterpret_cast< const unsigned short *>(&c)))); return val; } 
# 2121
} 
#endif
# 2122 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hfma_sat(const __half a, const __half b, const __half c) 
# 2123
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2125
::exit(___);}
#if 0
# 2123
{ 
# 2124
{ __half val; __asm__("{fma.rn.sat.f16 %0,%1,%2,%3;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b))), "h" (*(reinterpret_cast< const unsigned short *>(&c)))); return val; } 
# 2125
} 
#endif
# 2126 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hdiv(const __half a, const __half b) {int volatile ___ = 1;(void)a;(void)b;
# 2148
::exit(___);}
#if 0
# 2126
{ 
# 2127
__half v; 
# 2128
__half abs; 
# 2129
__half den; 
# 2130
(*(reinterpret_cast< unsigned short *>(&den))) = (143U); 
# 2132
float rcp; 
# 2133
const float fa = __half2float(a); 
# 2134
const float fb = __half2float(b); 
# 2136
__asm__("{rcp.approx.ftz.f32 %0, %1;\n}" : "=f" (rcp) : "f" (fb)); 
# 2138
float fv = rcp * fa; 
# 2140
v = __float2half(fv); 
# 2141
abs = __habs(v); 
# 2142
if (__hlt(abs, den) && __hlt(__float2half((0.0F)), abs)) { 
# 2143
const float err = __fmaf_rn(-fb, fv, fa); 
# 2144
fv = __fmaf_rn(rcp, err, fv); 
# 2145
v = __float2half(fv); 
# 2146
}  
# 2147
return v; 
# 2148
} 
#endif
# 2192 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float __float_simpl_sinf(float a); 
# 2193
__attribute((always_inline)) __attribute__((unused)) static inline float __float_simpl_cosf(float a); 
# 2194
__attribute__((unused)) static inline __half hsin(const __half a) {int volatile ___ = 1;(void)a;
# 2210
::exit(___);}
#if 0
# 2194
{ 
# 2195
const float sl = __float_simpl_sinf(__half2float(a)); 
# 2196
__half r = __float2half_rn(sl); 
# 2197
__asm__("{\n\t  .reg.b16 i,r,t;     \n\t  mov.b16 r, %0;      \n\t  mov.b16 i, %1;      \n\t  and.b16 t, r, 0x8000U; \n\t  abs.f16 r, r; " "  \n\t  abs.f16 i, i;   \n\t{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X32B3U;\n  mov.b16 ulp,0x0800U;\n  set.eq.f16.f16 p,i, spc;\n" "  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X5CB0U;\n  mov.b16 ulp,0x9000U;\n  set.eq.f16.f16 p,i, spc;\n" "  fma.rn.f16 r,p,ulp,r;\n}\n  or.b16  r,r,t;      \n\t  mov.b16 %0, r;      \n}\n" : "+h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2209
return r; 
# 2210
} 
#endif
# 2211 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2sin(const __half2 a) {int volatile ___ = 1;(void)a;
# 2228
::exit(___);}
#if 0
# 2211
{ 
# 2212
const float sl = __float_simpl_sinf(__half2float(a.x)); 
# 2213
const float sh = __float_simpl_sinf(__half2float(a.y)); 
# 2214
__half2 r = __floats2half2_rn(sl, sh); 
# 2215
__asm__("{\n\t  .reg.b32 i,r,t;             \n\t  mov.b32 r, %0;              \n\t  mov.b32 i, %1;              \n\t  and.b32 t, r, 0x800" "08000U;   \n\t  abs.f16x2 r, r;   \n\t  abs.f16x2 i, i;   \n\t{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0X32B332B3U;\n  mov.b32 ulp," "0x08000800U;\n  set.eq.f16x2.f16x2 p,i, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0X5CB05CB0U;\n" "  mov.b32 ulp,0x90009000U;\n  set.eq.f16x2.f16x2 p,i, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n  or.b32  r, r, t;            \n\t  mo" "v.b32 %0, r;              \n}\n" : "+r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2227
return r; 
# 2228
} 
#endif
# 2229 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hcos(const __half a) {int volatile ___ = 1;(void)a;
# 2241
::exit(___);}
#if 0
# 2229
{ 
# 2230
const float cl = __float_simpl_cosf(__half2float(a)); 
# 2231
__half r = __float2half_rn(cl); 
# 2232
__asm__("{\n\t  .reg.b16 i,r;        \n\t  mov.b16 r, %0;       \n\t  mov.b16 i, %1;       \n\t  abs.f16 i, i;        \n\t{.reg.b16 spc, " "ulp, p;\n  mov.b16 spc,0X2B7CU;\n  mov.b16 ulp,0x1000U;\n  set.eq.f16.f16 p,i, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n  mov.b16 %0, r" ";       \n}\n" : "+h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2240
return r; 
# 2241
} 
#endif
# 2242 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2cos(const __half2 a) {int volatile ___ = 1;(void)a;
# 2255
::exit(___);}
#if 0
# 2242
{ 
# 2243
const float cl = __float_simpl_cosf(__half2float(a.x)); 
# 2244
const float ch = __float_simpl_cosf(__half2float(a.y)); 
# 2245
__half2 r = __floats2half2_rn(cl, ch); 
# 2246
__asm__("{\n\t  .reg.b32 i,r;   \n\t  mov.b32 r, %0;  \n\t  mov.b32 i, %1;  \n\t  abs.f16x2 i, i; \n\t{.reg.b32 spc, ulp, p;\n  mov.b32 s" "pc,0X2B7C2B7CU;\n  mov.b32 ulp,0x10001000U;\n  set.eq.f16x2.f16x2 p,i, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n  mov.b32 %0, r;  \n}" "\n" : "+r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2254
return r; 
# 2255
} 
#endif
# 2256 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float __internal_trig_reduction_kernel(const float a, unsigned *const quadrant) 
# 2257
{int volatile ___ = 1;(void)a;(void)quadrant;
# 2265
::exit(___);}
#if 0
# 2257
{ 
# 2258
const float ar = __fmaf_rn(a, (0.63661975F), (1.2582912E7F)); 
# 2259
const unsigned q = __float_as_uint(ar); 
# 2260
const float j = __fsub_rn(ar, (1.2582912E7F)); 
# 2261
float t = __fmaf_rn(j, -(1.5707963F), a); 
# 2262
t = __fmaf_rn(j, -(7.5497894E-8F), t); 
# 2263
(*quadrant) = q; 
# 2264
return t; 
# 2265
} 
#endif
# 2266 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float __internal_sin_cos_kernel(const float x, const unsigned i) 
# 2267
{int volatile ___ = 1;(void)x;(void)i;
# 2305
::exit(___);}
#if 0
# 2267
{ 
# 2268
float z; 
# 2269
const float x2 = x * x; 
# 2270
float a8; 
# 2271
float a6; 
# 2272
float a4; 
# 2273
float a2; 
# 2274
float a1; 
# 2275
float a0; 
# 2277
if ((i & 1U) != 0U) { 
# 2279
a8 = (2.4433157E-5F); 
# 2280
a6 = (-(0.0013887316F)); 
# 2281
a4 = (0.041666646F); 
# 2282
a2 = (-(0.5F)); 
# 2283
a1 = x2; 
# 2284
a0 = (1.0F); 
# 2285
} else 
# 2286
{ 
# 2288
a8 = (-(1.9515296E-4F)); 
# 2289
a6 = (0.008332161F); 
# 2290
a4 = (-(0.16666655F)); 
# 2291
a2 = (0.0F); 
# 2292
a1 = x; 
# 2293
a0 = x; 
# 2294
}  
# 2296
z = __fmaf_rn(a8, x2, a6); 
# 2297
z = __fmaf_rn(z, x2, a4); 
# 2298
z = __fmaf_rn(z, x2, a2); 
# 2299
z = __fmaf_rn(z, a1, a0); 
# 2301
if ((i & 2U) != 0U) { 
# 2302
z = (-z); 
# 2303
}  
# 2304
return z; 
# 2305
} 
#endif
# 2306 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float __float_simpl_sinf(float a) 
# 2307
{int volatile ___ = 1;(void)a;
# 2313
::exit(___);}
#if 0
# 2307
{ 
# 2308
float z; 
# 2309
unsigned i; 
# 2310
a = __internal_trig_reduction_kernel(a, &i); 
# 2311
z = __internal_sin_cos_kernel(a, i); 
# 2312
return z; 
# 2313
} 
#endif
# 2314 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float __float_simpl_cosf(float a) 
# 2315
{int volatile ___ = 1;(void)a;
# 2321
::exit(___);}
#if 0
# 2315
{ 
# 2316
float z; 
# 2317
unsigned i; 
# 2318
a = __internal_trig_reduction_kernel(a, &i); 
# 2319
z = __internal_sin_cos_kernel(a, (i & 3U) + 1U); 
# 2320
return z; 
# 2321
} 
#endif
# 2323 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hexp(const __half a) {int volatile ___ = 1;(void)a;
# 2341
::exit(___);}
#if 0
# 2323
{ 
# 2324
__half val; 
# 2325
__asm__("{.reg.b32         f, C, nZ;       \n .reg.b16         h,r;            \n  mov.b16         h,%1;           \n  cvt.f32.f16     f," "h;            \n  mov.b32         C, 0x3fb8aa3bU; \n  mov.b32         nZ, 0x80000000U;\n  fma.rn.f32      f,f,C,nZ;       \n  ex" "2.approx.ftz.f32  f,f;        \n  cvt.rn.f16.f32      r,f;        \n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X1F79U;\n  mov.b16 ul" "p,0x9400U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X25CFU;\n  mov.b16 ul" "p,0x9400U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0XC13BU;\n  mov.b16 ul" "p,0x0400U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0XC1EFU;\n  mov.b16 ul" "p,0x0200U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n  mov.b16         %0,r;           \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2340
return val; 
# 2341
} 
#endif
# 2342 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2exp(const __half2 a) {int volatile ___ = 1;(void)a;
# 2366
::exit(___);}
#if 0
# 2342
{ 
# 2343
__half2 val; 
# 2344
__asm__("{.reg.b16         hl, hu;         \n .reg.b32         h,r,fl,fu,C,nZ; \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         h," " %1;          \n  cvt.f32.f16     fl, hl;         \n  cvt.f32.f16     fu, hu;         \n  mov.b32         C, 0x3fb8aa3bU; \n  mo" "v.b32         nZ, 0x80000000U;\n  fma.rn.f32      fl,fl,C,nZ;     \n  fma.rn.f32      fu,fu,C,nZ;     \n  ex2.approx.ftz.f32  fl" ", fl;     \n  ex2.approx.ftz.f32  fu, fu;     \n  cvt.rn.f16.f32      hl, fl;     \n  cvt.rn.f16.f32      hu, fu;     \n  mov.b3" "2         r, {hl, hu};    \n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0X1F791F79U;\n  mov.b32 ulp,0x94009400U;\n  set.eq.f16x2.f16x2" " p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0X25CF25CFU;\n  mov.b32 ulp,0x94009400U;\n  set." "eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0XC13BC13BU;\n  mov.b32 ulp,0x0400" "0400U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0XC1EFC1EFU;\n  mov." "b32 ulp,0x02000200U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n  mov.b32         %0, r;  \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2365
return val; 
# 2366
} 
#endif
# 2367 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hexp2(const __half a) {int volatile ___ = 1;(void)a;
# 2380
::exit(___);}
#if 0
# 2367
{ 
# 2368
__half val; 
# 2369
__asm__("{.reg.b32         f, ULP;         \n .reg.b16         r;              \n  mov.b16         r,%1;           \n  cvt.f32.f16     f," "r;            \n  ex2.approx.ftz.f32      f,f;    \n  mov.b32         ULP, 0x33800000U;\n  fma.rn.f32      f,f,ULP,f;      \n  c" "vt.rn.f16.f32      r,f;        \n  mov.b16         %0,r;           \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2379
return val; 
# 2380
} 
#endif
# 2381 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2exp2(const __half2 a) {int volatile ___ = 1;(void)a;
# 2398
::exit(___);}
#if 0
# 2381
{ 
# 2382
__half2 val; 
# 2383
__asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu, ULP;    \n  mov.b32         {hl, hu}, %1;   \n  cvt.f32.f16     fl" ", hl;         \n  cvt.f32.f16     fu, hu;         \n  ex2.approx.ftz.f32  fl, fl;     \n  ex2.approx.ftz.f32  fu, fu;     \n  mo" "v.b32         ULP, 0x33800000U;\n  fma.rn.f32      fl,fl,ULP,fl;   \n  fma.rn.f32      fu,fu,ULP,fu;   \n  cvt.rn.f16.f32      h" "l, fl;     \n  cvt.rn.f16.f32      hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2397
return val; 
# 2398
} 
#endif
# 2399 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hexp10(const __half a) {int volatile ___ = 1;(void)a;
# 2418
::exit(___);}
#if 0
# 2399
{ 
# 2400
__half val; 
# 2401
__asm__("{.reg.b16         h,r;            \n .reg.b32         f, C, nZ;       \n  mov.b16         h, %1;          \n  cvt.f32.f16     f," " h;           \n  mov.b32         C, 0x40549A78U; \n  mov.b32         nZ, 0x80000000U;\n  fma.rn.f32      f,f,C,nZ;       \n  ex" "2.approx.ftz.f32  f, f;       \n  cvt.rn.f16.f32      r, f;       \n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x34DEU;\n  mov.b16 ul" "p,0x9800U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x9766U;\n  mov.b16 ul" "p,0x9000U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x9972U;\n  mov.b16 ul" "p,0x1000U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0xA5C4U;\n  mov.b16 ul" "p,0x1000U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0xBF0AU;\n  mov.b16 ul" "p,0x8100U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n  mov.b16         %0, r;          \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2417
return val; 
# 2418
} 
#endif
# 2419 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2exp10(const __half2 a) {int volatile ___ = 1;(void)a;
# 2444
::exit(___);}
#if 0
# 2419
{ 
# 2420
__half2 val; 
# 2421
__asm__("{.reg.b16         hl, hu;         \n .reg.b32         h,r,fl,fu,C,nZ; \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         h," " %1;          \n  cvt.f32.f16     fl, hl;         \n  cvt.f32.f16     fu, hu;         \n  mov.b32         C, 0x40549A78U; \n  mo" "v.b32         nZ, 0x80000000U;\n  fma.rn.f32      fl,fl,C,nZ;     \n  fma.rn.f32      fu,fu,C,nZ;     \n  ex2.approx.ftz.f32  fl" ", fl;     \n  ex2.approx.ftz.f32  fu, fu;     \n  cvt.rn.f16.f32      hl, fl;     \n  cvt.rn.f16.f32      hu, fu;     \n  mov.b3" "2         r, {hl, hu};    \n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0x34DE34DEU;\n  mov.b32 ulp,0x98009800U;\n  set.eq.f16x2.f16x2" " p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0x97669766U;\n  mov.b32 ulp,0x90009000U;\n  set." "eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0x99729972U;\n  mov.b32 ulp,0x1000" "1000U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0xA5C4A5C4U;\n  mov." "b32 ulp,0x10001000U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0xBF0A" "BF0AU;\n  mov.b32 ulp,0x81008100U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n  mov.b32         %0, r;  \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2443
return val; 
# 2444
} 
#endif
# 2445 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hlog2(const __half a) {int volatile ___ = 1;(void)a;
# 2458
::exit(___);}
#if 0
# 2445
{ 
# 2446
__half val; 
# 2447
__asm__("{.reg.b16         h, r;           \n .reg.b32         f;              \n  mov.b16         h, %1;          \n  cvt.f32.f16     f," " h;           \n  lg2.approx.ftz.f32  f, f;       \n  cvt.rn.f16.f32      r, f;       \n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x" "A2E2U;\n  mov.b16 ulp,0x8080U;\n  set.eq.f16.f16 p,r, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x" "BF46U;\n  mov.b16 ulp,0x9400U;\n  set.eq.f16.f16 p,r, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n  mov.b16         %0, r;          \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2457
return val; 
# 2458
} 
#endif
# 2459 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2log2(const __half2 a) {int volatile ___ = 1;(void)a;
# 2476
::exit(___);}
#if 0
# 2459
{ 
# 2460
__half2 val; 
# 2461
__asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu, r, p;   \n  mov.b32         {hl, hu}, %1;   \n  cvt.f32.f16     fl" ", hl;         \n  cvt.f32.f16     fu, hu;         \n  lg2.approx.ftz.f32  fl, fl;     \n  lg2.approx.ftz.f32  fu, fu;     \n  cv" "t.rn.f16.f32      hl, fl;     \n  cvt.rn.f16.f32      hu, fu;     \n  mov.b32         r, {hl, hu};    \n{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,0xA2E2A2E2U;\n  mov.b32 ulp,0x80808080U;\n  set.eq.f16x2.f16x2 p,r, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 " "spc, ulp, p;\n  mov.b32 spc,0xBF46BF46U;\n  mov.b32 ulp,0x94009400U;\n  set.eq.f16x2.f16x2 p,r, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n" "}\n  mov.b32         %0, r;          \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2475
return val; 
# 2476
} 
#endif
# 2477 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hlog(const __half a) {int volatile ___ = 1;(void)a;
# 2494
::exit(___);}
#if 0
# 2477
{ 
# 2478
__half val; 
# 2479
__asm__("{.reg.b32         f, C;           \n .reg.b16         r,h;            \n  mov.b16         h,%1;           \n  cvt.f32.f16     f," "h;            \n  lg2.approx.ftz.f32  f,f;        \n  mov.b32         C, 0x3f317218U;  \n  mul.f32         f,f,C;          \n  c" "vt.rn.f16.f32      r,f;        \n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X160DU;\n  mov.b16 ulp,0x9C00U;\n  set.eq.f16.f16 p,h, s" "pc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X3BFEU;\n  mov.b16 ulp,0x8010U;\n  set.eq.f16.f16 p,h, s" "pc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X3C0BU;\n  mov.b16 ulp,0x8080U;\n  set.eq.f16.f16 p,h, s" "pc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X6051U;\n  mov.b16 ulp,0x1C00U;\n  set.eq.f16.f16 p,h, s" "pc;\n  fma.rn.f16 r,p,ulp,r;\n}\n  mov.b16         %0,r;           \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2493
return val; 
# 2494
} 
#endif
# 2495 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2log(const __half2 a) {int volatile ___ = 1;(void)a;
# 2518
::exit(___);}
#if 0
# 2495
{ 
# 2496
__half2 val; 
# 2497
__asm__("{.reg.b16         hl, hu;             \n .reg.b32         r, fl, fu, C, h;    \n  mov.b32         {hl, hu}, %1;       \n  mov.b3" "2         h, %1;              \n  cvt.f32.f16     fl, hl;             \n  cvt.f32.f16     fu, hu;             \n  lg2.approx.ftz" ".f32  fl, fl;         \n  lg2.approx.ftz.f32  fu, fu;         \n  mov.b32         C, 0x3f317218U;     \n  mul.f32         fl,fl," "C;            \n  mul.f32         fu,fu,C;            \n  cvt.rn.f16.f32      hl, fl;         \n  cvt.rn.f16.f32      hu, fu;   " "      \n  mov.b32         r, {hl, hu};        \n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0X160D160DU;\n  mov.b32 ulp,0x9C009C00U;\n" "  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0X3BFE3BFEU;\n  mov.b32 ulp," "0x80108010U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0X3C0B3C0BU;\n" "  mov.b32 ulp,0x80808080U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc," "0X60516051U;\n  mov.b32 ulp,0x1C001C00U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n  mov.b32         %0, r;" "              \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2517
return val; 
# 2518
} 
#endif
# 2519 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hlog10(const __half a) {int volatile ___ = 1;(void)a;
# 2536
::exit(___);}
#if 0
# 2519
{ 
# 2520
__half val; 
# 2521
__asm__("{.reg.b16         h, r;           \n .reg.b32         f, C;           \n  mov.b16         h, %1;          \n  cvt.f32.f16     f," " h;           \n  lg2.approx.ftz.f32  f, f;       \n  mov.b32         C, 0x3E9A209BU; \n  mul.f32         f,f,C;          \n  cv" "t.rn.f16.f32      r, f;       \n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x338FU;\n  mov.b16 ulp,0x1000U;\n  set.eq.f16.f16 p,h, sp" "c;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x33F8U;\n  mov.b16 ulp,0x9000U;\n  set.eq.f16.f16 p,h, sp" "c;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x57E1U;\n  mov.b16 ulp,0x9800U;\n  set.eq.f16.f16 p,h, sp" "c;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x719DU;\n  mov.b16 ulp,0x9C00U;\n  set.eq.f16.f16 p,h, sp" "c;\n  fma.rn.f16 r,p,ulp,r;\n}\n  mov.b16         %0, r;          \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2535
return val; 
# 2536
} 
#endif
# 2537 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2log10(const __half2 a) {int volatile ___ = 1;(void)a;
# 2560
::exit(___);}
#if 0
# 2537
{ 
# 2538
__half2 val; 
# 2539
__asm__("{.reg.b16         hl, hu;             \n .reg.b32         r, fl, fu, C, h;    \n  mov.b32         {hl, hu}, %1;       \n  mov.b3" "2         h, %1;              \n  cvt.f32.f16     fl, hl;             \n  cvt.f32.f16     fu, hu;             \n  lg2.approx.ftz" ".f32  fl, fl;         \n  lg2.approx.ftz.f32  fu, fu;         \n  mov.b32         C, 0x3E9A209BU;     \n  mul.f32         fl,fl," "C;            \n  mul.f32         fu,fu,C;            \n  cvt.rn.f16.f32      hl, fl;         \n  cvt.rn.f16.f32      hu, fu;   " "      \n  mov.b32         r, {hl, hu};        \n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0x338F338FU;\n  mov.b32 ulp,0x10001000U;\n" "  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0x33F833F8U;\n  mov.b32 ulp," "0x90009000U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0x57E157E1U;\n" "  mov.b32 ulp,0x98009800U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc," "0x719D719DU;\n  mov.b32 ulp,0x9C009C00U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n  mov.b32         %0, r;" "              \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2559
return val; 
# 2560
} 
#endif
# 2563 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2rcp(const __half2 a) {int volatile ___ = 1;(void)a;
# 2565
::exit(___);}
#if 0
# 2563
{ 
# 2564
{ __half2 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  cvt.f32.f16     fl" ", hl;         \n  cvt.f32.f16     fu, hu;         \n  rcp.approx.ftz.f32   fl, fl;     \n  rcp.approx.ftz.f32   fu, fu;     \n  " "cvt.rn.f16.f32      hl, fl;     \n  cvt.rn.f16.f32      hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } 
# 2565
} 
#endif
# 2566 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hrcp(const __half a) {int volatile ___ = 1;(void)a;
# 2568
::exit(___);}
#if 0
# 2566
{ 
# 2567
{ __half val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  cvt.f32.f16     f,r;      \n  rcp.ap" "prox.ftz.f32   f,f;  \n  cvt.rn.f16.f32      r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } 
# 2568
} 
#endif
# 2569 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2rsqrt(const __half2 a) {int volatile ___ = 1;(void)a;
# 2571
::exit(___);}
#if 0
# 2569
{ 
# 2570
{ __half2 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  cvt.f32.f16     fl" ", hl;         \n  cvt.f32.f16     fu, hu;         \n  rsqrt.approx.ftz.f32   fl, fl;     \n  rsqrt.approx.ftz.f32   fu, fu;     " "\n  cvt.rn.f16.f32      hl, fl;     \n  cvt.rn.f16.f32      hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } 
# 2571
} 
#endif
# 2572 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hrsqrt(const __half a) {int volatile ___ = 1;(void)a;
# 2574
::exit(___);}
#if 0
# 2572
{ 
# 2573
{ __half val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  cvt.f32.f16     f,r;      \n  rsqrt." "approx.ftz.f32   f,f;  \n  cvt.rn.f16.f32      r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } 
# 2574
} 
#endif
# 2575 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2sqrt(const __half2 a) {int volatile ___ = 1;(void)a;
# 2577
::exit(___);}
#if 0
# 2575
{ 
# 2576
{ __half2 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  cvt.f32.f16     fl" ", hl;         \n  cvt.f32.f16     fu, hu;         \n  sqrt.approx.ftz.f32   fl, fl;     \n  sqrt.approx.ftz.f32   fu, fu;     \n" "  cvt.rn.f16.f32      hl, fl;     \n  cvt.rn.f16.f32      hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } 
# 2577
} 
#endif
# 2578 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hsqrt(const __half a) {int volatile ___ = 1;(void)a;
# 2580
::exit(___);}
#if 0
# 2578
{ 
# 2579
{ __half val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  cvt.f32.f16     f,r;      \n  sqrt.a" "pprox.ftz.f32   f,f;  \n  cvt.rn.f16.f32      r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } 
# 2580
} 
#endif
# 2583 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hisnan2(const __half2 a) 
# 2584
{int volatile ___ = 1;(void)a;
# 2589
::exit(___);}
#if 0
# 2584
{ 
# 2585
__half2 r; 
# 2586
__asm__("{set.nan.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2588
return r; 
# 2589
} 
#endif
# 2590 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hisnan(const __half a) 
# 2591
{int volatile ___ = 1;(void)a;
# 2596
::exit(___);}
#if 0
# 2591
{ 
# 2592
__half r; 
# 2593
__asm__("{set.nan.f16.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2595
return (*(reinterpret_cast< const unsigned short *>(&r))) != 0U; 
# 2596
} 
#endif
# 2597 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hneg2(const __half2 a) 
# 2598
{int volatile ___ = 1;(void)a;
# 2603
::exit(___);}
#if 0
# 2598
{ 
# 2599
__half2 r; 
# 2600
__asm__("{neg.f16x2 %0,%1;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2602
return r; 
# 2603
} 
#endif
# 2604 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hneg(const __half a) 
# 2605
{int volatile ___ = 1;(void)a;
# 2610
::exit(___);}
#if 0
# 2605
{ 
# 2606
__half r; 
# 2607
__asm__("{neg.f16 %0,%1;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2609
return r; 
# 2610
} 
#endif
# 2611 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __habs2(const __half2 a) 
# 2612
{int volatile ___ = 1;(void)a;
# 2617
::exit(___);}
#if 0
# 2612
{ 
# 2613
__half2 r; 
# 2614
__asm__("{abs.f16x2 %0,%1;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2616
return r; 
# 2617
} 
#endif
# 2618 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __habs(const __half a) 
# 2619
{int volatile ___ = 1;(void)a;
# 2624
::exit(___);}
#if 0
# 2619
{ 
# 2620
__half r; 
# 2621
__asm__("{abs.f16 %0,%1;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2623
return r; 
# 2624
} 
#endif
# 2626 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hcmadd(const __half2 a, const __half2 b, const __half2 c) 
# 2627
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2637
::exit(___);}
#if 0
# 2627
{ 
# 2632
__half real_tmp = __hfma(a.x, b.x, c.x); 
# 2633
__half img_tmp = __hfma(a.x, b.y, c.y); 
# 2634
real_tmp = __hfma(__hneg(a.y), b.y, real_tmp); 
# 2635
img_tmp = __hfma(a.y, b.x, img_tmp); 
# 2636
return make_half2(real_tmp, img_tmp); 
# 2637
} 
#endif
# 2642 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hmax_nan(const __half a, const __half b) 
# 2643
{int volatile ___ = 1;(void)a;(void)b;
# 2645
::exit(___);}
#if 0
# 2643
{ 
# 2644
{ __half val; __asm__("{max.NaN.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2645
} 
#endif
# 2646 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hmin_nan(const __half a, const __half b) 
# 2647
{int volatile ___ = 1;(void)a;(void)b;
# 2649
::exit(___);}
#if 0
# 2647
{ 
# 2648
{ __half val; __asm__("{min.NaN.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2649
} 
#endif
# 2650 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hfma_relu(const __half a, const __half b, const __half c) 
# 2651
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2653
::exit(___);}
#if 0
# 2651
{ 
# 2652
{ __half val; __asm__("{fma.rn.relu.f16 %0,%1,%2,%3;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b))), "h" (*(reinterpret_cast< const unsigned short *>(&c)))); return val; } 
# 2653
} 
#endif
# 2655 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hmax2_nan(const __half2 a, const __half2 b) 
# 2656
{int volatile ___ = 1;(void)a;(void)b;
# 2658
::exit(___);}
#if 0
# 2656
{ 
# 2657
{ __half2 val; __asm__("{max.NaN.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2658
} 
#endif
# 2659 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hmin2_nan(const __half2 a, const __half2 b) 
# 2660
{int volatile ___ = 1;(void)a;(void)b;
# 2662
::exit(___);}
#if 0
# 2660
{ 
# 2661
{ __half2 val; __asm__("{min.NaN.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2662
} 
#endif
# 2663 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hfma2_relu(const __half2 a, const __half2 b, const __half2 c) 
# 2664
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2666
::exit(___);}
#if 0
# 2664
{ 
# 2665
{ __half2 val; __asm__("{fma.rn.relu.f16x2 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b))), "r" (*(reinterpret_cast< const unsigned *>(&c)))); return val; } 
# 2666
} 
#endif
# 2678 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 atomicAdd(__half2 *const address, const __half2 val) {int volatile ___ = 1;(void)address;(void)val;
# 2684
::exit(___);}
#if 0
# 2678
{ 
# 2679
__half2 r; 
# 2680
__asm__ volatile("{ atom.add.noftz.f16x2 %0,[%1],%2; }\n" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "l" (address), "r" (*(reinterpret_cast< const unsigned *>(&val))) : "memory"); 
# 2683
return r; 
# 2684
} 
#endif
# 2690 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half atomicAdd(__half *const address, const __half val) {int volatile ___ = 1;(void)address;(void)val;
# 2697
::exit(___);}
#if 0
# 2690
{ 
# 2691
__half r; 
# 2692
__asm__ volatile("{ atom.add.noftz.f16 %0,[%1],%2; }\n" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "l" (address), "h" (*(reinterpret_cast< const unsigned short *>(&val))) : "memory"); 
# 2696
return r; 
# 2697
} 
#endif
# 2723 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
typedef __half half; 
# 2724
typedef __half2 half2; 
# 2726
typedef __half __nv_half; 
# 2727
typedef __half2 __nv_half2; 
# 2728
typedef __half_raw __nv_half_raw; 
# 2729
typedef __half2_raw __nv_half2_raw; 
# 2730
typedef __half nv_half; 
# 2731
typedef __half2 nv_half2; 
# 141 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
struct __nv_bfloat16; 
# 151 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
struct __nv_bfloat162; 
# 167 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __double2bfloat16(const double a); 
# 182 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __float2bfloat16(const float a); 
# 197 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __float2bfloat16_rn(const float a); 
# 212 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __float2bfloat16_rz(const float a); 
# 228 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __float2bfloat16_rd(const float a); 
# 244 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __float2bfloat16_ru(const float a); 
# 259 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline float __bfloat162float(const __nv_bfloat16 a); 
# 277 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat162 __float2bfloat162_rn(const float a); 
# 298 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat162 __floats2bfloat162_rn(const float a, const float b); 
# 314 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline float __low2float(const __nv_bfloat162 a); 
# 330 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline float __high2float(const __nv_bfloat162 a); 
# 352 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat162 __float22bfloat162_rn(const float2 a); 
# 368 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline float2 __bfloat1622float2(const __nv_bfloat162 a); 
# 384 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline int __bfloat162int_rn(const __nv_bfloat16 h); 
# 400 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline int __bfloat162int_rz(const __nv_bfloat16 h); 
# 416 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline int __bfloat162int_rd(const __nv_bfloat16 h); 
# 432 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline int __bfloat162int_ru(const __nv_bfloat16 h); 
# 449 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __int2bfloat16_rn(const int i); 
# 465 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __int2bfloat16_rz(const int i); 
# 481 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __int2bfloat16_rd(const int i); 
# 497 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __int2bfloat16_ru(const int i); 
# 515 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline short __bfloat162short_rn(const __nv_bfloat16 h); 
# 531 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline short __bfloat162short_rz(const __nv_bfloat16 h); 
# 547 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline short __bfloat162short_rd(const __nv_bfloat16 h); 
# 563 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline short __bfloat162short_ru(const __nv_bfloat16 h); 
# 581 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __short2bfloat16_rn(const short i); 
# 597 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __short2bfloat16_rz(const short i); 
# 613 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __short2bfloat16_rd(const short i); 
# 629 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __short2bfloat16_ru(const short i); 
# 646 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __bfloat162uint_rn(const __nv_bfloat16 h); 
# 662 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline unsigned __bfloat162uint_rz(const __nv_bfloat16 h); 
# 678 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __bfloat162uint_rd(const __nv_bfloat16 h); 
# 694 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __bfloat162uint_ru(const __nv_bfloat16 h); 
# 711 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __uint2bfloat16_rn(const unsigned i); 
# 727 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __uint2bfloat16_rz(const unsigned i); 
# 743 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __uint2bfloat16_rd(const unsigned i); 
# 759 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __uint2bfloat16_ru(const unsigned i); 
# 777 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned short __bfloat162ushort_rn(const __nv_bfloat16 h); 
# 794 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline unsigned short __bfloat162ushort_rz(const __nv_bfloat16 h); 
# 806 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned short __bfloat162ushort_rd(const __nv_bfloat16 h); 
# 818 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned short __bfloat162ushort_ru(const __nv_bfloat16 h); 
# 836 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __ushort2bfloat16_rn(const unsigned short i); 
# 853 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ushort2bfloat16_rz(const unsigned short i); 
# 869 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ushort2bfloat16_rd(const unsigned short i); 
# 885 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ushort2bfloat16_ru(const unsigned short i); 
# 903 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned long long __bfloat162ull_rn(const __nv_bfloat16 h); 
# 920 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline unsigned long long __bfloat162ull_rz(const __nv_bfloat16 h); 
# 936 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned long long __bfloat162ull_rd(const __nv_bfloat16 h); 
# 952 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned long long __bfloat162ull_ru(const __nv_bfloat16 h); 
# 970 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __ull2bfloat16_rn(const unsigned long long i); 
# 987 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ull2bfloat16_rz(const unsigned long long i); 
# 1003 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ull2bfloat16_rd(const unsigned long long i); 
# 1019 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ull2bfloat16_ru(const unsigned long long i); 
# 1037 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline long long __bfloat162ll_rn(const __nv_bfloat16 h); 
# 1053 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline long long __bfloat162ll_rz(const __nv_bfloat16 h); 
# 1069 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline long long __bfloat162ll_rd(const __nv_bfloat16 h); 
# 1085 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline long long __bfloat162ll_ru(const __nv_bfloat16 h); 
# 1103 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __ll2bfloat16_rn(const long long i); 
# 1115 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ll2bfloat16_rz(const long long i); 
# 1131 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ll2bfloat16_rd(const long long i); 
# 1147 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ll2bfloat16_ru(const long long i); 
# 1164 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 htrunc(const __nv_bfloat16 h); 
# 1179 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hceil(const __nv_bfloat16 h); 
# 1194 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hfloor(const __nv_bfloat16 h); 
# 1211 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hrint(const __nv_bfloat16 h); 
# 1228 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2trunc(const __nv_bfloat162 h); 
# 1244 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2ceil(const __nv_bfloat162 h); 
# 1260 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2floor(const __nv_bfloat162 h); 
# 1278 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2rint(const __nv_bfloat162 h); 
# 1295 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __bfloat162bfloat162(const __nv_bfloat16 a); 
# 1311 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __lowhigh2highlow(const __nv_bfloat162 a); 
# 1331 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __lows2bfloat162(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1351 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __highs2bfloat162(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1366 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __high2bfloat16(const __nv_bfloat162 a); 
# 1381 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __low2bfloat16(const __nv_bfloat162 a); 
# 1398 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline int __hisinf(const __nv_bfloat16 a); 
# 1416 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __halves2bfloat162(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 1432 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __low2bfloat162(const __nv_bfloat162 a); 
# 1448 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __high2bfloat162(const __nv_bfloat162 a); 
# 1465 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline short __bfloat16_as_short(const __nv_bfloat16 h); 
# 1481 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned short __bfloat16_as_ushort(const __nv_bfloat16 h); 
# 1497 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __short_as_bfloat16(const short i); 
# 1513 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ushort_as_bfloat16(const unsigned short i); 
# 1544 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_sync(const unsigned mask, const __nv_bfloat162 var, const int delta, const int width = 32); 
# 1569 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_up_sync(const unsigned mask, const __nv_bfloat162 var, const unsigned delta, const int width = 32); 
# 1594 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_down_sync(const unsigned mask, const __nv_bfloat162 var, const unsigned delta, const int width = 32); 
# 1618 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_xor_sync(const unsigned mask, const __nv_bfloat162 var, const int delta, const int width = 32); 
# 1643 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_sync(const unsigned mask, const __nv_bfloat16 var, const int delta, const int width = 32); 
# 1667 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_up_sync(const unsigned mask, const __nv_bfloat16 var, const unsigned delta, const int width = 32); 
# 1692 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_down_sync(const unsigned mask, const __nv_bfloat16 var, const unsigned delta, const int width = 32); 
# 1716 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_xor_sync(const unsigned mask, const __nv_bfloat16 var, const int delta, const int width = 32); 
# 1729 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __ldg(const __nv_bfloat162 *const ptr); 
# 1736
__attribute__((unused)) static inline __nv_bfloat16 __ldg(const __nv_bfloat16 *const ptr); 
# 1743
__attribute__((unused)) static inline __nv_bfloat162 __ldcg(const __nv_bfloat162 *const ptr); 
# 1750
__attribute__((unused)) static inline __nv_bfloat16 __ldcg(const __nv_bfloat16 *const ptr); 
# 1757
__attribute__((unused)) static inline __nv_bfloat162 __ldca(const __nv_bfloat162 *const ptr); 
# 1764
__attribute__((unused)) static inline __nv_bfloat16 __ldca(const __nv_bfloat16 *const ptr); 
# 1771
__attribute__((unused)) static inline __nv_bfloat162 __ldcs(const __nv_bfloat162 *const ptr); 
# 1778
__attribute__((unused)) static inline __nv_bfloat16 __ldcs(const __nv_bfloat16 *const ptr); 
# 1785
__attribute__((unused)) static inline __nv_bfloat162 __ldlu(const __nv_bfloat162 *const ptr); 
# 1792
__attribute__((unused)) static inline __nv_bfloat16 __ldlu(const __nv_bfloat16 *const ptr); 
# 1799
__attribute__((unused)) static inline __nv_bfloat162 __ldcv(const __nv_bfloat162 *const ptr); 
# 1806
__attribute__((unused)) static inline __nv_bfloat16 __ldcv(const __nv_bfloat16 *const ptr); 
# 1814
__attribute__((unused)) static inline void __stwb(__nv_bfloat162 *const ptr, const __nv_bfloat162 value); 
# 1821
__attribute__((unused)) static inline void __stwb(__nv_bfloat16 *const ptr, const __nv_bfloat16 value); 
# 1828
__attribute__((unused)) static inline void __stcg(__nv_bfloat162 *const ptr, const __nv_bfloat162 value); 
# 1835
__attribute__((unused)) static inline void __stcg(__nv_bfloat16 *const ptr, const __nv_bfloat16 value); 
# 1842
__attribute__((unused)) static inline void __stcs(__nv_bfloat162 *const ptr, const __nv_bfloat162 value); 
# 1849
__attribute__((unused)) static inline void __stcs(__nv_bfloat16 *const ptr, const __nv_bfloat16 value); 
# 1856
__attribute__((unused)) static inline void __stwt(__nv_bfloat162 *const ptr, const __nv_bfloat162 value); 
# 1863
__attribute__((unused)) static inline void __stwt(__nv_bfloat16 *const ptr, const __nv_bfloat16 value); 
# 1882 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __heq2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1900 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hne2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1918 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hle2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1936 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hge2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1954 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hlt2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1972 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hgt2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1990 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hequ2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2008 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hneu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2026 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hleu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2044 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hgeu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2062 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hltu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2080 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hgtu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2098 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __heq2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2116 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __hne2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2134 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __hle2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2152 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __hge2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2170 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __hlt2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2188 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __hgt2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2206 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __hequ2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2224 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __hneu2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2242 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __hleu2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2260 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __hgeu2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2278 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __hltu2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2296 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __hgtu2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2312 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hisnan2(const __nv_bfloat162 a); 
# 2332 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hadd2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2352 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hsub2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2372 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hmul2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2392 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hadd2_rn(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2412 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hsub2_rn(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2433 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hmul2_rn(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2453 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __h2div(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2470 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __habs2(const __nv_bfloat162 a); 
# 2489 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hadd2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2508 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hsub2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2528 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hmul2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2551 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hfma2(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c); 
# 2573 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hfma2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c); 
# 2592 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hneg2(const __nv_bfloat162 a); 
# 2607 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __habs(const __nv_bfloat16 a); 
# 2627 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hadd(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2647 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hsub(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2663 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hmul(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2683 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hadd_rn(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2703 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hsub_rn(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2719 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hmul_rn(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2739 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hdiv(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2757 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hadd_sat(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2776 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hsub_sat(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2795 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hmul_sat(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2818 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hfma(const __nv_bfloat16 a, const __nv_bfloat16 b, const __nv_bfloat16 c); 
# 2840 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hfma_sat(const __nv_bfloat16 a, const __nv_bfloat16 b, const __nv_bfloat16 c); 
# 2858 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hneg(const __nv_bfloat16 a); 
# 2880 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbeq2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2902 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbne2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2924 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hble2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2946 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbge2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2968 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hblt2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2990 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbgt2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3012 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbequ2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3034 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbneu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3056 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbleu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3079 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbgeu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3101 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbltu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3124 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbgtu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3141 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __heq(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3158 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hne(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3175 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hle(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3192 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hge(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3209 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hlt(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3226 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hgt(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3244 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hequ(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3262 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hneu(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3280 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hleu(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3298 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hgeu(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3316 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hltu(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3334 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hgtu(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3349 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hisnan(const __nv_bfloat16 a); 
# 3368 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hmax(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3387 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hmin(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3405 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hmax_nan(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3423 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hmin_nan(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3445 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hfma_relu(const __nv_bfloat16 a, const __nv_bfloat16 b, const __nv_bfloat16 c); 
# 3466 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hmax2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3487 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hmin2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3507 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hmax2_nan(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3527 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hmin2_nan(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3549 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hfma2_relu(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c); 
# 3568 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hcmadd(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c); 
# 3584 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hsqrt(const __nv_bfloat16 a); 
# 3601 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hrsqrt(const __nv_bfloat16 a); 
# 3616 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hrcp(const __nv_bfloat16 a); 
# 3632 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hlog(const __nv_bfloat16 a); 
# 3648 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hlog2(const __nv_bfloat16 a); 
# 3664 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hlog10(const __nv_bfloat16 a); 
# 3681 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hexp(const __nv_bfloat16 a); 
# 3698 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hexp2(const __nv_bfloat16 a); 
# 3715 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hexp10(const __nv_bfloat16 a); 
# 3730 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hcos(const __nv_bfloat16 a); 
# 3745 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hsin(const __nv_bfloat16 a); 
# 3761 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2sqrt(const __nv_bfloat162 a); 
# 3778 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2rsqrt(const __nv_bfloat162 a); 
# 3794 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2rcp(const __nv_bfloat162 a); 
# 3811 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2log(const __nv_bfloat162 a); 
# 3828 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2log2(const __nv_bfloat162 a); 
# 3845 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2log10(const __nv_bfloat162 a); 
# 3862 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2exp(const __nv_bfloat162 a); 
# 3879 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2exp2(const __nv_bfloat162 a); 
# 3896 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2exp10(const __nv_bfloat162 a); 
# 3912 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2cos(const __nv_bfloat162 a); 
# 3927 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2sin(const __nv_bfloat162 a); 
# 3946 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 atomicAdd(__nv_bfloat162 *const address, const __nv_bfloat162 val); 
# 3964 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 atomicAdd(__nv_bfloat16 *const address, const __nv_bfloat16 val); 
# 139 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
typedef 
# 137
struct __attribute((aligned(2))) { 
# 138
unsigned short x; 
# 139
} __nv_bfloat16_raw; 
# 144
typedef 
# 141
struct __attribute((aligned(4))) { 
# 142
unsigned short x; 
# 143
unsigned short y; 
# 144
} __nv_bfloat162_raw; 
# 152
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#pragma GCC diagnostic ignored "-Weffc++"
# 165 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
struct __attribute((aligned(2))) __nv_bfloat16 { 
# 167
protected: unsigned short __x; 
# 171
public: __nv_bfloat16() = default;
# 177
__nv_bfloat16(const __nv_bfloat16_raw &hr) : __x(hr.x) { } 
# 178
__nv_bfloat16 &operator=(const __nv_bfloat16_raw &hr) { (__x) = (hr.x); return *this; } 
# 179
volatile __nv_bfloat16 &operator=(const __nv_bfloat16_raw &hr) volatile { (__x) = (hr.x); return *this; } 
# 180
volatile __nv_bfloat16 &operator=(const volatile __nv_bfloat16_raw &hr) volatile { (__x) = (hr.x); return *this; } 
# 181
operator __nv_bfloat16_raw() const { __nv_bfloat16_raw ret; (ret.x) = (__x); return ret; } 
# 182
operator __nv_bfloat16_raw() const volatile { __nv_bfloat16_raw ret; (ret.x) = (__x); return ret; } 
# 186
__nv_bfloat16(const float f) { (__x) = (__float2bfloat16(f).__x); } 
# 187
__nv_bfloat16(const double f) { (__x) = (__double2bfloat16(f).__x); } 
# 189
operator float() const { return __bfloat162float(*this); } 
# 190
__nv_bfloat16 &operator=(const float f) { (__x) = (__float2bfloat16(f).__x); return *this; } 
# 193
__nv_bfloat16 &operator=(const double f) { (__x) = (__double2bfloat16(f).__x); return *this; } 
# 199
__nv_bfloat16(short val) { (__x) = (__short2bfloat16_rn(val).__x); } 
# 200
__nv_bfloat16(unsigned short val) { (__x) = (__ushort2bfloat16_rn(val).__x); } 
# 201
__nv_bfloat16(int val) { (__x) = (__int2bfloat16_rn(val).__x); } 
# 202
__nv_bfloat16(unsigned val) { (__x) = (__uint2bfloat16_rn(val).__x); } 
# 203
__nv_bfloat16(long long val) { (__x) = (__ll2bfloat16_rn(val).__x); } 
# 204
__nv_bfloat16(unsigned long long val) { (__x) = (__ull2bfloat16_rn(val).__x); } 
# 207
operator short() const { return __bfloat162short_rz(*this); } 
# 208
__nv_bfloat16 &operator=(short val) { (__x) = (__short2bfloat16_rn(val).__x); return *this; } 
# 210
operator unsigned short() const { return __bfloat162ushort_rz(*this); } 
# 211
__nv_bfloat16 &operator=(unsigned short val) { (__x) = (__ushort2bfloat16_rn(val).__x); return *this; } 
# 213
operator int() const { return __bfloat162int_rz(*this); } 
# 214
__nv_bfloat16 &operator=(int val) { (__x) = (__int2bfloat16_rn(val).__x); return *this; } 
# 216
operator unsigned() const { return __bfloat162uint_rz(*this); } 
# 217
__nv_bfloat16 &operator=(unsigned val) { (__x) = (__uint2bfloat16_rn(val).__x); return *this; } 
# 219
operator long long() const { return __bfloat162ll_rz(*this); } 
# 220
__nv_bfloat16 &operator=(long long val) { (__x) = (__ll2bfloat16_rn(val).__x); return *this; } 
# 222
operator unsigned long long() const { return __bfloat162ull_rz(*this); } 
# 223
__nv_bfloat16 &operator=(unsigned long long val) { (__x) = (__ull2bfloat16_rn(val).__x); return *this; } 
# 226
operator bool() const { return ((__x) & 32767) != 0; } 
# 229
}; 
# 237
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator+(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 237
{ return __hadd(lh, rh); } 
#endif
# 238 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator-(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 238
{ return __hsub(lh, rh); } 
#endif
# 239 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator*(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 239
{ return __hmul(lh, rh); } 
#endif
# 240 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator/(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 240
{ return __hdiv(lh, rh); } 
#endif
# 242 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 &operator+=(__nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 242
{ lh = __hadd(lh, rh); return lh; } 
#endif
# 243 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 &operator-=(__nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 243
{ lh = __hsub(lh, rh); return lh; } 
#endif
# 244 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 &operator*=(__nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 244
{ lh = __hmul(lh, rh); return lh; } 
#endif
# 245 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 &operator/=(__nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 245
{ lh = __hdiv(lh, rh); return lh; } 
#endif
# 248 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 &operator++(__nv_bfloat16 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 248
{ __nv_bfloat16_raw one; (one.x) = (16256); (h += one); return h; } 
#endif
# 249 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 &operator--(__nv_bfloat16 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 249
{ __nv_bfloat16_raw one; (one.x) = (16256); (h -= one); return h; } 
#endif
# 250 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator++(__nv_bfloat16 &h, const int ignored) 
# 251
{int volatile ___ = 1;(void)h;(void)ignored;
# 260
::exit(___);}
#if 0
# 251
{ 
# 253
static_cast< void>(ignored); 
# 255
const __nv_bfloat16 ret = h; 
# 256
__nv_bfloat16_raw one; 
# 257
(one.x) = (16256); 
# 258
(h += one); 
# 259
return ret; 
# 260
} 
#endif
# 261 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator--(__nv_bfloat16 &h, const int ignored) 
# 262
{int volatile ___ = 1;(void)h;(void)ignored;
# 271
::exit(___);}
#if 0
# 262
{ 
# 264
static_cast< void>(ignored); 
# 266
const __nv_bfloat16 ret = h; 
# 267
__nv_bfloat16_raw one; 
# 268
(one.x) = (16256); 
# 269
(h -= one); 
# 270
return ret; 
# 271
} 
#endif
# 273 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator+(const __nv_bfloat16 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 273
{ return h; } 
#endif
# 274 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator-(const __nv_bfloat16 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 274
{ return __hneg(h); } 
#endif
# 277 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator==(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 277
{ return __heq(lh, rh); } 
#endif
# 278 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator!=(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 278
{ return __hneu(lh, rh); } 
#endif
# 279 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 279
{ return __hgt(lh, rh); } 
#endif
# 280 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 280
{ return __hlt(lh, rh); } 
#endif
# 281 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>=(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 281
{ return __hge(lh, rh); } 
#endif
# 282 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<=(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 282
{ return __hle(lh, rh); } 
#endif
# 288 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
struct __attribute((aligned(4))) __nv_bfloat162 { 
# 289
__nv_bfloat16 x; 
# 290
__nv_bfloat16 y; 
# 295
__nv_bfloat162() = default;
# 296
__nv_bfloat162(__nv_bfloat162 &&src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = std::move(*(reinterpret_cast< const unsigned *>(&src))); } 
# 297
__nv_bfloat162 &operator=(__nv_bfloat162 &&src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = std::move(*(reinterpret_cast< const unsigned *>(&src))); return *this; } 
# 301
__nv_bfloat162(const __nv_bfloat16 &a, const __nv_bfloat16 &b) : x(a), y(b) { } 
# 302
__nv_bfloat162(const __nv_bfloat162 &src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&src))); } 
# 303
__nv_bfloat162 &operator=(const __nv_bfloat162 &src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&src))); return *this; } 
# 306
__nv_bfloat162(const __nv_bfloat162_raw &h2r) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&h2r))); } 
# 307
__nv_bfloat162 &operator=(const __nv_bfloat162_raw &h2r) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&h2r))); return *this; } 
# 308
operator __nv_bfloat162_raw() const { __nv_bfloat162_raw ret; (ret.x) = (0U); (ret.y) = (0U); (*(reinterpret_cast< unsigned *>(&ret))) = (*(reinterpret_cast< const unsigned *>(&(*this)))); return ret; } 
# 309
}; 
# 316
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator+(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 316
{ return __hadd2(lh, rh); } 
#endif
# 317 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator-(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 317
{ return __hsub2(lh, rh); } 
#endif
# 318 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator*(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 318
{ return __hmul2(lh, rh); } 
#endif
# 319 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator/(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 319
{ return __h2div(lh, rh); } 
#endif
# 321 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 &operator+=(__nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 321
{ (lh = (__hadd2(lh, rh))); return lh; } 
#endif
# 322 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 &operator-=(__nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 322
{ (lh = (__hsub2(lh, rh))); return lh; } 
#endif
# 323 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 &operator*=(__nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 323
{ (lh = (__hmul2(lh, rh))); return lh; } 
#endif
# 324 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 &operator/=(__nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 324
{ (lh = (__h2div(lh, rh))); return lh; } 
#endif
# 326 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 &operator++(__nv_bfloat162 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 326
{ __nv_bfloat162_raw one; (one.x) = (16256); (one.y) = (16256); (h = (__hadd2(h, one))); return h; } 
#endif
# 327 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 &operator--(__nv_bfloat162 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 327
{ __nv_bfloat162_raw one; (one.x) = (16256); (one.y) = (16256); (h = (__hsub2(h, one))); return h; } 
#endif
# 328 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator++(__nv_bfloat162 &h, const int ignored) 
# 329
{int volatile ___ = 1;(void)h;(void)ignored;
# 339
::exit(___);}
#if 0
# 329
{ 
# 331
static_cast< void>(ignored); 
# 333
const __nv_bfloat162 ret = h; 
# 334
__nv_bfloat162_raw one; 
# 335
(one.x) = (16256); 
# 336
(one.y) = (16256); 
# 337
(h = (__hadd2(h, one))); 
# 338
return ret; 
# 339
} 
#endif
# 340 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator--(__nv_bfloat162 &h, const int ignored) 
# 341
{int volatile ___ = 1;(void)h;(void)ignored;
# 351
::exit(___);}
#if 0
# 341
{ 
# 343
static_cast< void>(ignored); 
# 345
const __nv_bfloat162 ret = h; 
# 346
__nv_bfloat162_raw one; 
# 347
(one.x) = (16256); 
# 348
(one.y) = (16256); 
# 349
(h = (__hsub2(h, one))); 
# 350
return ret; 
# 351
} 
#endif
# 352 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator+(const __nv_bfloat162 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 352
{ return h; } 
#endif
# 353 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator-(const __nv_bfloat162 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 353
{ return __hneg2(h); } 
#endif
# 355 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator==(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 355
{ return __hbeq2(lh, rh); } 
#endif
# 356 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator!=(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 356
{ return __hbneu2(lh, rh); } 
#endif
# 357 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 357
{ return __hbgt2(lh, rh); } 
#endif
# 358 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 358
{ return __hblt2(lh, rh); } 
#endif
# 359 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>=(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 359
{ return __hbge2(lh, rh); } 
#endif
# 360 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<=(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 360
{ return __hble2(lh, rh); } 
#endif
# 373 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
#pragma GCC diagnostic pop
# 380
static inline unsigned __internal_float_as_uint(const float f) 
# 381
{ 
# 382
unsigned u; 
# 383 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 383 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
memcpy(&u, &f, sizeof f); 
# 383 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 390 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return u; 
# 391
} 
# 393
static inline float __internal_uint_as_float(unsigned u) 
# 394
{ 
# 395
float f; 
# 396 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 396 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
memcpy(&f, &u, sizeof u); 
# 396 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 403 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return f; 
# 404
} 
# 406
static inline unsigned short __internal_float2bfloat16(const float f, unsigned &sign, unsigned &remainder) 
# 407
{ 
# 408
unsigned x; 
# 410
x = __internal_float_as_uint(f); 
# 412
if ((x & 2147483647U) > 2139095040U) { 
# 413
sign = 0U; 
# 414
remainder = 0U; 
# 415
return static_cast< unsigned short>(32767U); 
# 416
}  
# 417
sign = (x >> 31U); 
# 418
remainder = (x << 16U); 
# 419
return static_cast< unsigned short>(x >> 16U); 
# 420
} 
# 422
static inline __nv_bfloat16 __double2bfloat16(const double x) 
# 423
{ 
# 424 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 424 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
float f = static_cast< float>(x); const double d = static_cast< double>(f); unsigned u = __internal_float_as_uint(f); bool x_is_not_nan = (u << ((unsigned)1U)) <= ((unsigned)4278190080U); if ((x > (0.0)) && (d > x)) { u--; }  if ((x < (0.0)) && (d < x)) { u--; }  if ((d != x) && x_is_not_nan) { u |= 1U; }  f = __internal_uint_as_float(u); return __float2bfloat16(f); 
# 424 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 450 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 452
static inline __nv_bfloat16 __float2bfloat16(const float a) 
# 453
{ 
# 454
__nv_bfloat16 val; 
# 455 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 455 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__nv_bfloat16_raw r; unsigned sign = 0U; unsigned remainder = 0U; (r.x) = __internal_float2bfloat16(a, sign, remainder); if ((remainder > 2147483648U) || ((remainder == 2147483648U) && (((r.x) & 1U) != 0U))) { (r.x)++; }  (val = r); 
# 455 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 467 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 468
} 
# 469
static inline __nv_bfloat16 __float2bfloat16_rn(const float a) 
# 470
{ 
# 471
__nv_bfloat16 val; 
# 472 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 472 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__nv_bfloat16_raw r; unsigned sign = 0U; unsigned remainder = 0U; (r.x) = __internal_float2bfloat16(a, sign, remainder); if ((remainder > 2147483648U) || ((remainder == 2147483648U) && (((r.x) & 1U) != 0U))) { (r.x)++; }  (val = r); 
# 472 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 484 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 485
} 
# 486
static inline __nv_bfloat16 __float2bfloat16_rz(const float a) 
# 487
{ 
# 488
__nv_bfloat16 val; 
# 489 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 489 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__nv_bfloat16_raw r; unsigned sign = 0U; unsigned remainder = 0U; (r.x) = __internal_float2bfloat16(a, sign, remainder); (val = r); 
# 489 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 498 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 499
} 
# 500
static inline __nv_bfloat16 __float2bfloat16_rd(const float a) 
# 501
{ 
# 502 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 502 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__nv_bfloat16 val; __nv_bfloat16_raw r; unsigned sign = 0U; unsigned remainder = 0U; (r.x) = __internal_float2bfloat16(a, sign, remainder); if ((remainder != 0U) && (sign != 0U)) { (r.x)++; }  (val = r); return val; 
# 502 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 518 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 519
static inline __nv_bfloat16 __float2bfloat16_ru(const float a) 
# 520
{ 
# 521 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 521 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__nv_bfloat16 val; __nv_bfloat16_raw r; unsigned sign = 0U; unsigned remainder = 0U; (r.x) = __internal_float2bfloat16(a, sign, remainder); if ((remainder != 0U) && (sign == 0U)) { (r.x)++; }  (val = r); return val; 
# 521 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 537 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 538
static inline __nv_bfloat162 __float2bfloat162_rn(const float a) 
# 539
{ 
# 540
__nv_bfloat162 val; 
# 541 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 541 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
(val = __nv_bfloat162(__float2bfloat16_rn(a), __float2bfloat16_rn(a))); 
# 541 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 548 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 549
} 
# 550
static inline __nv_bfloat162 __floats2bfloat162_rn(const float a, const float b) 
# 551
{ 
# 552
__nv_bfloat162 val; 
# 553 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 553 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
(val = __nv_bfloat162(__float2bfloat16_rn(a), __float2bfloat16_rn(b))); 
# 553 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 559 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 560
} 
# 563
__attribute__((unused)) static inline float __internal_device_bfloat162float(const unsigned short h) 
# 564
{int volatile ___ = 1;(void)h;
# 572 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 564 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 565
float f; 
# 566 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 566 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{ mov.b32 %0, {0,%1};}\n" : "=f" (f) : "h" (h)); 
# 566 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 571 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return f; 
# 572
} 
#endif
# 575 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline float __internal_bfloat162float(const unsigned short h) 
# 576
{ 
# 577
float f; 
# 578 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 578 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned u = (static_cast< unsigned>(h)) << 16; f = __internal_uint_as_float(u); 
# 578 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 584 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return f; 
# 585
} 
# 587
static inline float __bfloat162float(const __nv_bfloat16 a) 
# 588
{ 
# 589
return __internal_bfloat162float(((__nv_bfloat16_raw)a).x); 
# 590
} 
# 591
static inline float __low2float(const __nv_bfloat162 a) 
# 592
{ 
# 593
return __internal_bfloat162float(((__nv_bfloat162_raw)a).x); 
# 594
} 
# 596
static inline float __high2float(const __nv_bfloat162 a) 
# 597
{ 
# 598
return __internal_bfloat162float(((__nv_bfloat162_raw)a).y); 
# 599
} 
# 604
static inline __nv_bfloat162 make_bfloat162(const __nv_bfloat16 x, const __nv_bfloat16 y) 
# 605
{ 
# 606
__nv_bfloat162 t; (t.x) = x; (t.y) = y; return t; 
# 607
} 
# 612
static inline __nv_bfloat162 __float22bfloat162_rn(const float2 a) 
# 613
{ 
# 614
__nv_bfloat162 val = __floats2bfloat162_rn(a.x, a.y); 
# 615
return val; 
# 616
} 
# 617
static inline float2 __bfloat1622float2(const __nv_bfloat162 a) 
# 618
{ 
# 619
float hi_float; 
# 620
float lo_float; 
# 621
lo_float = __internal_bfloat162float(((__nv_bfloat162_raw)a).x); 
# 622
hi_float = __internal_bfloat162float(((__nv_bfloat162_raw)a).y); 
# 623
return make_float2(lo_float, hi_float); 
# 624
} 
# 625
__attribute__((unused)) static inline int __bfloat162int_rn(const __nv_bfloat16 h) 
# 626
{int volatile ___ = 1;(void)h;
# 634 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 626 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 627 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 627 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2int_rn(__bfloat162float(h)); 
# 627 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 634 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 636 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline int __internal_bfloat162int_rz(const __nv_bfloat16 h) 
# 637
{ 
# 638
const float f = __bfloat162float(h); 
# 639
int i; 
# 640 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 640 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const int max_val = ((int)2147483647U); const int min_val = ((int)2147483648U); const unsigned short bits = static_cast< unsigned short>((((__nv_bfloat16_raw)h).x) << 1U); if (bits > ((unsigned short)65280U)) { i = 0; } else { if (f >= (static_cast< float>(max_val))) { i = max_val; } else { if (f < (static_cast< float>(min_val))) { i = min_val; } else { i = (static_cast< int>(f)); }  }  }  
# 640 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 660 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return i; 
# 661
} 
# 663
static inline int __bfloat162int_rz(const __nv_bfloat16 h) 
# 664
{ 
# 665 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 665 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __internal_bfloat162int_rz(h); 
# 665 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 672 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 674
__attribute__((unused)) static inline int __bfloat162int_rd(const __nv_bfloat16 h) 
# 675
{int volatile ___ = 1;(void)h;
# 683 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 675 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 676 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 676 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2int_rd(__bfloat162float(h)); 
# 676 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 683 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 684 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline int __bfloat162int_ru(const __nv_bfloat16 h) 
# 685
{int volatile ___ = 1;(void)h;
# 693 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 685 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 686 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 686 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2int_ru(__bfloat162float(h)); 
# 686 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 693 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 695 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __internal_device_int2bfloat16_rn(const int i) 
# 696
{int volatile ___ = 1;(void)i;
# 710 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 696 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 697 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 697 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const float ru = __int2float_ru(i); const float rd = __int2float_rd(i); float rz = __int2float_rz(i); if (ru != rd) { rz = __uint_as_float(__float_as_uint(rz) | 1U); }  return __float2bfloat16_rn(rz); 
# 697 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 710 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 712 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline __nv_bfloat16 __int2bfloat16_rn(const int i) 
# 713
{ 
# 714 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 714 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const double d = static_cast< double>(i); return __double2bfloat16(d); 
# 714 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 720 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 721
__attribute__((unused)) static inline __nv_bfloat16 __int2bfloat16_rz(const int i) 
# 722
{int volatile ___ = 1;(void)i;
# 730 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 722 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 723 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 723 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rz(__int2float_rz(i)); 
# 723 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 730 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 731 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __int2bfloat16_rd(const int i) 
# 732
{int volatile ___ = 1;(void)i;
# 740 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 732 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 733 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 733 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rd(__int2float_rd(i)); 
# 733 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 740 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 742 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __int2bfloat16_ru(const int i) 
# 743
{int volatile ___ = 1;(void)i;
# 751 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 743 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 744 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 744 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_ru(__int2float_ru(i)); 
# 744 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 751 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 753 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline short __bfloat162short_rn(const __nv_bfloat16 h) 
# 754
{int volatile ___ = 1;(void)h;
# 765 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 754 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 755
short val; 
# 756 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 756 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{ .reg.f32 f;\n  mov.b32 f, {0,%1};\n  cvt.rni.s16.f32 %0,f;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 756 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 764 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 765
} 
#endif
# 767 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline short __internal_device_bfloat162short_rz(const __nv_bfloat16 h) 
# 768
{int volatile ___ = 1;(void)h;
# 779 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 768 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 769
short val; 
# 770 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 770 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{ .reg.f32 f;\n  mov.b32 f, {0,%1};\n  cvt.rzi.s16.f32 %0,f;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 770 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 778 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 779
} 
#endif
# 781 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline short __bfloat162short_rz(const __nv_bfloat16 h) 
# 782
{ 
# 783
short val; 
# 784 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 784 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const float f = __bfloat162float(h); const short max_val = ((short)32767U); const short min_val = ((short)32768U); const unsigned short bits = static_cast< unsigned short>((((__nv_bfloat16_raw)h).x) << 1U); if (bits > ((unsigned short)65280U)) { val = (0); } else { if (f > (static_cast< float>(max_val))) { val = max_val; } else { if (f < (static_cast< float>(min_val))) { val = min_val; } else { val = (static_cast< short>(f)); }  }  }  
# 784 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 805 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 806
} 
# 808
__attribute__((unused)) static inline short __bfloat162short_rd(const __nv_bfloat16 h) 
# 809
{int volatile ___ = 1;(void)h;
# 820 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 809 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 810
short val; 
# 811 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 811 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{ .reg.f32 f;\n  mov.b32 f, {0,%1};\n  cvt.rmi.s16.f32 %0,f;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 811 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 819 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 820
} 
#endif
# 821 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline short __bfloat162short_ru(const __nv_bfloat16 h) 
# 822
{int volatile ___ = 1;(void)h;
# 833 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 822 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 823
short val; 
# 824 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 824 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{ .reg.f32 f;\n  mov.b32 f, {0,%1};\n  cvt.rpi.s16.f32 %0,f;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 824 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 832 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 833
} 
#endif
# 834 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline __nv_bfloat16 __short2bfloat16_rn(const short i) 
# 835
{ 
# 836 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 836 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const float f = static_cast< float>(i); return __float2bfloat16_rn(f); 
# 836 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 844 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 845
__attribute__((unused)) static inline __nv_bfloat16 __short2bfloat16_rz(const short i) 
# 846
{int volatile ___ = 1;(void)i;
# 854 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 846 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 847 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 847 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rz(__int2float_rz(static_cast< int>(i))); 
# 847 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 854 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 855 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __short2bfloat16_rd(const short i) 
# 856
{int volatile ___ = 1;(void)i;
# 864 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 856 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 857 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 857 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rd(__int2float_rd(static_cast< int>(i))); 
# 857 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 864 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 865 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __short2bfloat16_ru(const short i) 
# 866
{int volatile ___ = 1;(void)i;
# 874 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 866 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 867 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 867 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_ru(__int2float_ru(static_cast< int>(i))); 
# 867 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 874 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 876 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __bfloat162uint_rn(const __nv_bfloat16 h) 
# 877
{int volatile ___ = 1;(void)h;
# 885 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 877 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 878 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 878 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2uint_rn(__bfloat162float(h)); 
# 878 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 885 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 887 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline unsigned __internal_bfloat162uint_rz(const __nv_bfloat16 h) 
# 888
{ 
# 889
const float f = __bfloat162float(h); 
# 890
unsigned i; 
# 891 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 891 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const unsigned max_val = 4294967295U; const unsigned min_val = 0U; const unsigned short bits = static_cast< unsigned short>((((__nv_bfloat16_raw)h).x) << 1U); if (bits > ((unsigned short)65280U)) { i = 0U; } else { if (f >= (static_cast< float>(max_val))) { i = max_val; } else { if (f < (static_cast< float>(min_val))) { i = min_val; } else { i = (static_cast< unsigned>(f)); }  }  }  
# 891 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 911 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return i; 
# 912
} 
# 914
static inline unsigned __bfloat162uint_rz(const __nv_bfloat16 h) 
# 915
{ 
# 916 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 916 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __internal_bfloat162uint_rz(h); 
# 916 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 923 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 924
__attribute__((unused)) static inline unsigned __bfloat162uint_rd(const __nv_bfloat16 h) 
# 925
{int volatile ___ = 1;(void)h;
# 933 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 925 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 926 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 926 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2uint_rd(__bfloat162float(h)); 
# 926 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 933 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 934 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __bfloat162uint_ru(const __nv_bfloat16 h) 
# 935
{int volatile ___ = 1;(void)h;
# 943 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 935 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 936 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 936 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2uint_ru(__bfloat162float(h)); 
# 936 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 943 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 945 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __internal_device_uint2bfloat16_rn(const unsigned i) 
# 946
{int volatile ___ = 1;(void)i;
# 960 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 946 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 947 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 947 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const float ru = __uint2float_ru(i); const float rd = __uint2float_rd(i); float rz = __uint2float_rz(i); if (ru != rd) { rz = __uint_as_float(__float_as_uint(rz) | 1U); }  return __float2bfloat16_rn(rz); 
# 947 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 960 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 962 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline __nv_bfloat16 __uint2bfloat16_rn(const unsigned i) 
# 963
{ 
# 964 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 964 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const double d = static_cast< double>(i); return __double2bfloat16(d); 
# 964 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 970 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 972
__attribute__((unused)) static inline __nv_bfloat16 __uint2bfloat16_rz(const unsigned i) 
# 973
{int volatile ___ = 1;(void)i;
# 981 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 973 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 974 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 974 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rz(__uint2float_rz(i)); 
# 974 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 981 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 982 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __uint2bfloat16_rd(const unsigned i) 
# 983
{int volatile ___ = 1;(void)i;
# 991 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 983 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 984 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 984 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rd(__uint2float_rd(i)); 
# 984 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 991 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 992 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __uint2bfloat16_ru(const unsigned i) 
# 993
{int volatile ___ = 1;(void)i;
# 1001 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 993 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 994 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 994 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_ru(__uint2float_ru(i)); 
# 994 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1001 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1003 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned short __bfloat162ushort_rn(const __nv_bfloat16 h) 
# 1004
{int volatile ___ = 1;(void)h;
# 1015 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1004 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1005
unsigned short val; 
# 1006 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1006 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{ .reg.f32 f;\n  mov.b32 f, {0,%1};\n  cvt.rni.u16.f32 %0,f;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1006 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1014 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 1015
} 
#endif
# 1017 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned short __internal_device_bfloat162ushort_rz(const __nv_bfloat16 h) 
# 1018
{int volatile ___ = 1;(void)h;
# 1029 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1018 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1019
unsigned short val; 
# 1020 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1020 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{ .reg.f32 f;\n  mov.b32 f, {0,%1};\n  cvt.rzi.u16.f32 %0,f;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1020 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1028 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 1029
} 
#endif
# 1031 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline unsigned short __bfloat162ushort_rz(const __nv_bfloat16 h) 
# 1032
{ 
# 1033
unsigned short val; 
# 1034 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1034 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const float f = __bfloat162float(h); const unsigned short max_val = (65535U); const unsigned short min_val = (0U); const unsigned short bits = static_cast< unsigned short>((((__nv_bfloat16_raw)h).x) << 1U); if (bits > ((unsigned short)65280U)) { val = (0U); } else { if (f > (static_cast< float>(max_val))) { val = max_val; } else { if (f < (static_cast< float>(min_val))) { val = min_val; } else { val = (static_cast< unsigned short>(f)); }  }  }  
# 1034 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1055 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 1056
} 
# 1057
__attribute__((unused)) static inline unsigned short __bfloat162ushort_rd(const __nv_bfloat16 h) 
# 1058
{int volatile ___ = 1;(void)h;
# 1069 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1058 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1059
unsigned short val; 
# 1060 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1060 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{ .reg.f32 f;\n  mov.b32 f, {0,%1};\n  cvt.rmi.u16.f32 %0,f;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1060 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1068 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 1069
} 
#endif
# 1070 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned short __bfloat162ushort_ru(const __nv_bfloat16 h) 
# 1071
{int volatile ___ = 1;(void)h;
# 1082 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1071 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1072
unsigned short val; 
# 1073 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1073 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{ .reg.f32 f;\n  mov.b32 f, {0,%1};\n  cvt.rpi.u16.f32 %0,f;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1073 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1081 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 1082
} 
#endif
# 1083 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline __nv_bfloat16 __ushort2bfloat16_rn(const unsigned short i) 
# 1084
{ 
# 1085 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1085 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const float f = static_cast< float>(i); return __float2bfloat16_rn(f); 
# 1085 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1093 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1094
__attribute__((unused)) static inline __nv_bfloat16 __ushort2bfloat16_rz(const unsigned short i) 
# 1095
{int volatile ___ = 1;(void)i;
# 1103 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1095 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1096 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1096 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rz(__uint2float_rz(static_cast< unsigned>(i))); 
# 1096 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1103 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1104 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ushort2bfloat16_rd(const unsigned short i) 
# 1105
{int volatile ___ = 1;(void)i;
# 1113 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1105 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1106 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1106 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rd(__uint2float_rd(static_cast< unsigned>(i))); 
# 1106 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1113 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1114 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ushort2bfloat16_ru(const unsigned short i) 
# 1115
{int volatile ___ = 1;(void)i;
# 1123 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1115 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1116 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1116 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_ru(__uint2float_ru(static_cast< unsigned>(i))); 
# 1116 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1123 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1125 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned long long __bfloat162ull_rn(const __nv_bfloat16 h) 
# 1126
{int volatile ___ = 1;(void)h;
# 1134 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1126 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1127 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1127 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2ull_rn(__bfloat162float(h)); 
# 1127 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1134 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1136 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned long long __internal_device_bfloat162ull_rz(const __nv_bfloat16 h) 
# 1137
{int volatile ___ = 1;(void)h;
# 1146 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1137 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1138
unsigned long long i; 
# 1139 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1139 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const float f = __bfloat162float(h); i = __float2ull_rz(f); 
# 1139 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1145 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return i; 
# 1146
} 
#endif
# 1148 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline unsigned long long __bfloat162ull_rz(const __nv_bfloat16 h) 
# 1149
{ 
# 1150 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1150 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const float f = __bfloat162float(h); unsigned long long i; const unsigned long long max_val = 18446744073709551615ULL; const unsigned long long min_val = 0ULL; const unsigned short bits = static_cast< unsigned short>((((__nv_bfloat16_raw)h).x) << 1U); if (bits > ((unsigned short)65280U)) { i = 9223372036854775808ULL; } else { if (f >= (static_cast< float>(max_val))) { i = max_val; } else { if (f < (static_cast< float>(min_val))) { i = min_val; } else { i = (static_cast< unsigned long long>(f)); }  }  }  return i; 
# 1150 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1173 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1175
__attribute__((unused)) static inline unsigned long long __bfloat162ull_rd(const __nv_bfloat16 h) 
# 1176
{int volatile ___ = 1;(void)h;
# 1184 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1176 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1177 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1177 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2ull_rd(__bfloat162float(h)); 
# 1177 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1184 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1185 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned long long __bfloat162ull_ru(const __nv_bfloat16 h) 
# 1186
{int volatile ___ = 1;(void)h;
# 1194 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1186 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1187 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1187 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2ull_ru(__bfloat162float(h)); 
# 1187 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1194 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1196 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __internal_device_ull2bfloat16_rn(const unsigned long long i) 
# 1197
{int volatile ___ = 1;(void)i;
# 1211 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1197 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1198 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1198 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const float ru = __ull2float_ru(i); const float rd = __ull2float_rd(i); float rz = __ull2float_rz(i); if (ru != rd) { rz = __uint_as_float(__float_as_uint(rz) | 1U); }  return __float2bfloat16_rn(rz); 
# 1198 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1211 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1213 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline __nv_bfloat16 __ull2bfloat16_rn(const unsigned long long i) 
# 1214
{ 
# 1216 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1216 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
float f = static_cast< float>(i); const unsigned long long uf = static_cast< unsigned long long>(f); unsigned u = __internal_float_as_uint(f); if (uf > i) { u--; }  if (uf != i) { u |= 1U; }  f = __internal_uint_as_float(u); return __float2bfloat16_rn(f); 
# 1216 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1233 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1234
__attribute__((unused)) static inline __nv_bfloat16 __ull2bfloat16_rz(const unsigned long long i) 
# 1235
{int volatile ___ = 1;(void)i;
# 1243 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1235 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1236 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1236 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rz(__ull2float_rz(i)); 
# 1236 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1243 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1244 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ull2bfloat16_rd(const unsigned long long i) 
# 1245
{int volatile ___ = 1;(void)i;
# 1253 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1245 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1246 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1246 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rd(__ull2float_rd(i)); 
# 1246 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1253 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1254 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ull2bfloat16_ru(const unsigned long long i) 
# 1255
{int volatile ___ = 1;(void)i;
# 1263 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1255 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1256 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1256 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_ru(__ull2float_ru(i)); 
# 1256 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1263 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1264 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline long long __bfloat162ll_rn(const __nv_bfloat16 h) 
# 1265
{int volatile ___ = 1;(void)h;
# 1273 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1265 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1266 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1266 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2ll_rn(__bfloat162float(h)); 
# 1266 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1273 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1275 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline long long __internal_device_bfloat162ll_rz(const __nv_bfloat16 h) 
# 1276
{int volatile ___ = 1;(void)h;
# 1285 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1276 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1277
long long i; 
# 1278 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1278 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const float f = __bfloat162float(h); i = __float2ll_rz(f); 
# 1278 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1284 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return i; 
# 1285
} 
#endif
# 1287 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline long long __bfloat162ll_rz(const __nv_bfloat16 h) 
# 1288
{ 
# 1289 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1289 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
long long i; const float f = __bfloat162float(h); const long long max_val = ((long long)9223372036854775807ULL); const long long min_val = ((long long)9223372036854775808ULL); const unsigned short bits = static_cast< unsigned short>((((__nv_bfloat16_raw)h).x) << 1U); if (bits > ((unsigned short)65280U)) { i = min_val; } else { if (f >= (static_cast< float>(max_val))) { i = max_val; } else { if (f < (static_cast< float>(min_val))) { i = min_val; } else { i = (static_cast< long long>(f)); }  }  }  return i; 
# 1289 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1312 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1313
__attribute__((unused)) static inline long long __bfloat162ll_rd(const __nv_bfloat16 h) 
# 1314
{int volatile ___ = 1;(void)h;
# 1322 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1314 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1315 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1315 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2ll_rd(__bfloat162float(h)); 
# 1315 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1322 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1323 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline long long __bfloat162ll_ru(const __nv_bfloat16 h) 
# 1324
{int volatile ___ = 1;(void)h;
# 1332 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1324 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1325 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1325 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2ll_ru(__bfloat162float(h)); 
# 1325 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1332 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1334 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __internal_device_ll2bfloat16_rn(const long long i) 
# 1335
{int volatile ___ = 1;(void)i;
# 1349 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1335 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1336 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1336 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const float ru = __ll2float_ru(i); const float rd = __ll2float_rd(i); float rz = __ll2float_rz(i); if (ru != rd) { rz = __uint_as_float(__float_as_uint(rz) | 1U); }  return __float2bfloat16_rn(rz); 
# 1336 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1349 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1351 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline __nv_bfloat16 __ll2bfloat16_rn(const long long i) 
# 1352
{ 
# 1353 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1353 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
float f = static_cast< float>(i); const long long lf = static_cast< long long>(f); unsigned u = __internal_float_as_uint(f); if ((f > (0.0F)) && (lf > i)) { u--; }  if ((f < (0.0F)) && (lf < i)) { u--; }  if (lf != i) { u |= 1U; }  f = __internal_uint_as_float(u); return __float2bfloat16_rn(f); 
# 1353 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1373 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1374
__attribute__((unused)) static inline __nv_bfloat16 __ll2bfloat16_rz(const long long i) 
# 1375
{int volatile ___ = 1;(void)i;
# 1383 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1375 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1376 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1376 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rz(__ll2float_rz(i)); 
# 1376 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1383 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1384 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ll2bfloat16_rd(const long long i) 
# 1385
{int volatile ___ = 1;(void)i;
# 1393 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1385 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1386 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1386 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rd(__ll2float_rd(i)); 
# 1386 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1393 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1394 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ll2bfloat16_ru(const long long i) 
# 1395
{int volatile ___ = 1;(void)i;
# 1403 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1395 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1396 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1396 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_ru(__ll2float_ru(i)); 
# 1396 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1403 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1405 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 htrunc(const __nv_bfloat16 h) 
# 1406
{int volatile ___ = 1;(void)h;
# 1414 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1406 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1407 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1407 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rz(truncf(__bfloat162float(h))); 
# 1407 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1414 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1415 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hceil(const __nv_bfloat16 h) 
# 1416
{int volatile ___ = 1;(void)h;
# 1424 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1416 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1417 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1417 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_ru(ceilf(__bfloat162float(h))); 
# 1417 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1424 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1425 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hfloor(const __nv_bfloat16 h) 
# 1426
{int volatile ___ = 1;(void)h;
# 1434 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1426 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1427 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1427 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rd(floorf(__bfloat162float(h))); 
# 1427 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1434 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1435 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hrint(const __nv_bfloat16 h) 
# 1436
{int volatile ___ = 1;(void)h;
# 1444 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1436 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1437 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1437 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rn(rintf(__bfloat162float(h))); 
# 1437 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1444 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1446 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2trunc(const __nv_bfloat162 h) 
# 1447
{int volatile ___ = 1;(void)h;
# 1451
::exit(___);}
#if 0
# 1447
{ 
# 1448
const __nv_bfloat16 low = htrunc(h.x); 
# 1449
const __nv_bfloat16 high = htrunc(h.y); 
# 1450
return __nv_bfloat162(low, high); 
# 1451
} 
#endif
# 1452 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2ceil(const __nv_bfloat162 h) 
# 1453
{int volatile ___ = 1;(void)h;
# 1457
::exit(___);}
#if 0
# 1453
{ 
# 1454
const __nv_bfloat16 low = hceil(h.x); 
# 1455
const __nv_bfloat16 high = hceil(h.y); 
# 1456
return __nv_bfloat162(low, high); 
# 1457
} 
#endif
# 1458 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2floor(const __nv_bfloat162 h) 
# 1459
{int volatile ___ = 1;(void)h;
# 1463
::exit(___);}
#if 0
# 1459
{ 
# 1460
const __nv_bfloat16 low = hfloor(h.x); 
# 1461
const __nv_bfloat16 high = hfloor(h.y); 
# 1462
return __nv_bfloat162(low, high); 
# 1463
} 
#endif
# 1465 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2rint(const __nv_bfloat162 h) 
# 1466
{int volatile ___ = 1;(void)h;
# 1468
::exit(___);}
#if 0
# 1466
{ 
# 1467
return __halves2bfloat162(hrint(__low2bfloat16(h)), hrint(__high2bfloat16(h))); 
# 1468
} 
#endif
# 1469 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __lows2bfloat162(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1470
{int volatile ___ = 1;(void)a;(void)b;
# 1477
::exit(___);}
#if 0
# 1470
{ 
# 1471
__nv_bfloat162 val; 
# 1472
__asm__("{.reg .b16 alow,ahigh,blow,bhigh;\n  mov.b32 {alow,ahigh}, %1;\n  mov.b32 {blow,bhigh}, %2;\n  mov.b32 %0, {alow,blow};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1476
return val; 
# 1477
} 
#endif
# 1478 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __highs2bfloat162(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1479
{int volatile ___ = 1;(void)a;(void)b;
# 1486
::exit(___);}
#if 0
# 1479
{ 
# 1480
__nv_bfloat162 val; 
# 1481
__asm__("{.reg .b16 alow,ahigh,blow,bhigh;\n  mov.b32 {alow,ahigh}, %1;\n  mov.b32 {blow,bhigh}, %2;\n  mov.b32 %0, {ahigh,bhigh};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1485
return val; 
# 1486
} 
#endif
# 1487 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __low2bfloat16(const __nv_bfloat162 a) 
# 1488
{int volatile ___ = 1;(void)a;
# 1494
::exit(___);}
#if 0
# 1488
{ 
# 1489
__nv_bfloat16 ret; 
# 1490
__asm__("{.reg .b16 low,high;\n mov.b32 {low,high}, %1;\n mov.b16 %0, low;}" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1493
return ret; 
# 1494
} 
#endif
# 1495 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline int __hisinf(const __nv_bfloat16 a) 
# 1496
{int volatile ___ = 1;(void)a;
# 1506
::exit(___);}
#if 0
# 1496
{ 
# 1497
int retval; 
# 1498
if ((*(reinterpret_cast< const unsigned short *>(&a))) == 65408U) { 
# 1499
retval = (-1); 
# 1500
} else { if ((*(reinterpret_cast< const unsigned short *>(&a))) == 32640U) { 
# 1501
retval = 1; 
# 1502
} else { 
# 1503
retval = 0; 
# 1504
}  }  
# 1505
return retval; 
# 1506
} 
#endif
# 1507 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __low2bfloat162(const __nv_bfloat162 a) 
# 1508
{int volatile ___ = 1;(void)a;
# 1514
::exit(___);}
#if 0
# 1508
{ 
# 1509
__nv_bfloat162 val; 
# 1510
__asm__("{.reg .b16 low,high;\n  mov.b32 {low,high}, %1;\n  mov.b32 %0, {low,low};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1513
return val; 
# 1514
} 
#endif
# 1515 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __high2bfloat162(const __nv_bfloat162 a) 
# 1516
{int volatile ___ = 1;(void)a;
# 1522
::exit(___);}
#if 0
# 1516
{ 
# 1517
__nv_bfloat162 val; 
# 1518
__asm__("{.reg .b16 low,high;\n  mov.b32 {low,high}, %1;\n  mov.b32 %0, {high,high};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1521
return val; 
# 1522
} 
#endif
# 1523 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __high2bfloat16(const __nv_bfloat162 a) 
# 1524
{int volatile ___ = 1;(void)a;
# 1530
::exit(___);}
#if 0
# 1524
{ 
# 1525
__nv_bfloat16 ret; 
# 1526
__asm__("{.reg .b16 low,high;\n mov.b32 {low,high}, %1;\n mov.b16 %0, high;}" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1529
return ret; 
# 1530
} 
#endif
# 1531 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __halves2bfloat162(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1532
{int volatile ___ = 1;(void)a;(void)b;
# 1537
::exit(___);}
#if 0
# 1532
{ 
# 1533
__nv_bfloat162 val; 
# 1534
__asm__("{  mov.b32 %0, {%1,%2};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 1536
return val; 
# 1537
} 
#endif
# 1538 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __bfloat162bfloat162(const __nv_bfloat16 a) 
# 1539
{int volatile ___ = 1;(void)a;
# 1544
::exit(___);}
#if 0
# 1539
{ 
# 1540
__nv_bfloat162 val; 
# 1541
__asm__("{  mov.b32 %0, {%1,%1};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 1543
return val; 
# 1544
} 
#endif
# 1545 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __lowhigh2highlow(const __nv_bfloat162 a) 
# 1546
{int volatile ___ = 1;(void)a;
# 1552
::exit(___);}
#if 0
# 1546
{ 
# 1547
__nv_bfloat162 val; 
# 1548
__asm__("{.reg .b16 low,high;\n  mov.b32 {low,high}, %1;\n  mov.b32 %0, {high,low};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1551
return val; 
# 1552
} 
#endif
# 1553 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline short __bfloat16_as_short(const __nv_bfloat16 h) 
# 1554
{int volatile ___ = 1;(void)h;
# 1556
::exit(___);}
#if 0
# 1554
{ 
# 1555
return static_cast< short>(*(reinterpret_cast< const unsigned short *>(&h))); 
# 1556
} 
#endif
# 1557 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned short __bfloat16_as_ushort(const __nv_bfloat16 h) 
# 1558
{int volatile ___ = 1;(void)h;
# 1560
::exit(___);}
#if 0
# 1558
{ 
# 1559
return *(reinterpret_cast< const unsigned short *>(&h)); 
# 1560
} 
#endif
# 1561 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __short_as_bfloat16(const short i) 
# 1562
{int volatile ___ = 1;(void)i;
# 1566
::exit(___);}
#if 0
# 1562
{ 
# 1563
__nv_bfloat16 h; 
# 1564
(*(reinterpret_cast< unsigned short *>(&h))) = (static_cast< unsigned short>(i)); 
# 1565
return h; 
# 1566
} 
#endif
# 1567 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ushort_as_bfloat16(const unsigned short i) 
# 1568
{int volatile ___ = 1;(void)i;
# 1572
::exit(___);}
#if 0
# 1568
{ 
# 1569
__nv_bfloat16 h; 
# 1570
(*(reinterpret_cast< unsigned short *>(&h))) = i; 
# 1571
return h; 
# 1572
} 
#endif
# 1584 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_sync(const unsigned mask, const __nv_bfloat162 var, const int delta, const int width) 
# 1585
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1590
::exit(___);}
#if 0
# 1585
{ 
# 1586
unsigned warp_size; 
# 1587
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1588
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1589
{ __nv_bfloat162 r; __asm__ volatile("{shfl.sync.idx.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1590
} 
#endif
# 1591 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_up_sync(const unsigned mask, const __nv_bfloat162 var, const unsigned delta, const int width) 
# 1592
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1597
::exit(___);}
#if 0
# 1592
{ 
# 1593
unsigned warp_size; 
# 1594
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1595
const unsigned c = (warp_size - (static_cast< unsigned>(width))) << 8U; 
# 1596
{ __nv_bfloat162 r; __asm__ volatile("{shfl.sync.up.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1597
} 
#endif
# 1598 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_down_sync(const unsigned mask, const __nv_bfloat162 var, const unsigned delta, const int width) 
# 1599
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1604
::exit(___);}
#if 0
# 1599
{ 
# 1600
unsigned warp_size; 
# 1601
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1602
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1603
{ __nv_bfloat162 r; __asm__ volatile("{shfl.sync.down.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1604
} 
#endif
# 1605 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_xor_sync(const unsigned mask, const __nv_bfloat162 var, const int delta, const int width) 
# 1606
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1611
::exit(___);}
#if 0
# 1606
{ 
# 1607
unsigned warp_size; 
# 1608
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1609
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1610
{ __nv_bfloat162 r; __asm__ volatile("{shfl.sync.bfly.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1611
} 
#endif
# 1615 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_sync(const unsigned mask, const __nv_bfloat16 var, const int delta, const int width) 
# 1616
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1620
::exit(___);}
#if 0
# 1616
{ 
# 1617
const __nv_bfloat162 temp1 = __halves2bfloat162(var, var); 
# 1618
const __nv_bfloat162 temp2 = __shfl_sync(mask, temp1, delta, width); 
# 1619
return __low2bfloat16(temp2); 
# 1620
} 
#endif
# 1621 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_up_sync(const unsigned mask, const __nv_bfloat16 var, const unsigned delta, const int width) 
# 1622
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1626
::exit(___);}
#if 0
# 1622
{ 
# 1623
const __nv_bfloat162 temp1 = __halves2bfloat162(var, var); 
# 1624
const __nv_bfloat162 temp2 = __shfl_up_sync(mask, temp1, delta, width); 
# 1625
return __low2bfloat16(temp2); 
# 1626
} 
#endif
# 1627 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_down_sync(const unsigned mask, const __nv_bfloat16 var, const unsigned delta, const int width) 
# 1628
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1632
::exit(___);}
#if 0
# 1628
{ 
# 1629
const __nv_bfloat162 temp1 = __halves2bfloat162(var, var); 
# 1630
const __nv_bfloat162 temp2 = __shfl_down_sync(mask, temp1, delta, width); 
# 1631
return __low2bfloat16(temp2); 
# 1632
} 
#endif
# 1633 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_xor_sync(const unsigned mask, const __nv_bfloat16 var, const int delta, const int width) 
# 1634
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1638
::exit(___);}
#if 0
# 1634
{ 
# 1635
const __nv_bfloat162 temp1 = __halves2bfloat162(var, var); 
# 1636
const __nv_bfloat162 temp2 = __shfl_xor_sync(mask, temp1, delta, width); 
# 1637
return __low2bfloat16(temp2); 
# 1638
} 
#endif
# 1650 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __ldg(const __nv_bfloat162 *const ptr) 
# 1651
{int volatile ___ = 1;(void)ptr;
# 1655
::exit(___);}
#if 0
# 1651
{ 
# 1652
__nv_bfloat162 ret; 
# 1653
__asm__("ld.global.nc.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1654
return ret; 
# 1655
} 
#endif
# 1656 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ldg(const __nv_bfloat16 *const ptr) 
# 1657
{int volatile ___ = 1;(void)ptr;
# 1661
::exit(___);}
#if 0
# 1657
{ 
# 1658
__nv_bfloat16 ret; 
# 1659
__asm__("ld.global.nc.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1660
return ret; 
# 1661
} 
#endif
# 1662 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __ldcg(const __nv_bfloat162 *const ptr) 
# 1663
{int volatile ___ = 1;(void)ptr;
# 1667
::exit(___);}
#if 0
# 1663
{ 
# 1664
__nv_bfloat162 ret; 
# 1665
__asm__("ld.global.cg.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1666
return ret; 
# 1667
} 
#endif
# 1668 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ldcg(const __nv_bfloat16 *const ptr) 
# 1669
{int volatile ___ = 1;(void)ptr;
# 1673
::exit(___);}
#if 0
# 1669
{ 
# 1670
__nv_bfloat16 ret; 
# 1671
__asm__("ld.global.cg.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1672
return ret; 
# 1673
} 
#endif
# 1674 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __ldca(const __nv_bfloat162 *const ptr) 
# 1675
{int volatile ___ = 1;(void)ptr;
# 1679
::exit(___);}
#if 0
# 1675
{ 
# 1676
__nv_bfloat162 ret; 
# 1677
__asm__("ld.global.ca.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1678
return ret; 
# 1679
} 
#endif
# 1680 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ldca(const __nv_bfloat16 *const ptr) 
# 1681
{int volatile ___ = 1;(void)ptr;
# 1685
::exit(___);}
#if 0
# 1681
{ 
# 1682
__nv_bfloat16 ret; 
# 1683
__asm__("ld.global.ca.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1684
return ret; 
# 1685
} 
#endif
# 1686 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __ldcs(const __nv_bfloat162 *const ptr) 
# 1687
{int volatile ___ = 1;(void)ptr;
# 1691
::exit(___);}
#if 0
# 1687
{ 
# 1688
__nv_bfloat162 ret; 
# 1689
__asm__("ld.global.cs.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1690
return ret; 
# 1691
} 
#endif
# 1692 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ldcs(const __nv_bfloat16 *const ptr) 
# 1693
{int volatile ___ = 1;(void)ptr;
# 1697
::exit(___);}
#if 0
# 1693
{ 
# 1694
__nv_bfloat16 ret; 
# 1695
__asm__("ld.global.cs.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1696
return ret; 
# 1697
} 
#endif
# 1698 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __ldlu(const __nv_bfloat162 *const ptr) 
# 1699
{int volatile ___ = 1;(void)ptr;
# 1703
::exit(___);}
#if 0
# 1699
{ 
# 1700
__nv_bfloat162 ret; 
# 1701
__asm__("ld.global.lu.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr) : "memory"); 
# 1702
return ret; 
# 1703
} 
#endif
# 1704 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ldlu(const __nv_bfloat16 *const ptr) 
# 1705
{int volatile ___ = 1;(void)ptr;
# 1709
::exit(___);}
#if 0
# 1705
{ 
# 1706
__nv_bfloat16 ret; 
# 1707
__asm__("ld.global.lu.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr) : "memory"); 
# 1708
return ret; 
# 1709
} 
#endif
# 1710 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __ldcv(const __nv_bfloat162 *const ptr) 
# 1711
{int volatile ___ = 1;(void)ptr;
# 1715
::exit(___);}
#if 0
# 1711
{ 
# 1712
__nv_bfloat162 ret; 
# 1713
__asm__("ld.global.cv.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr) : "memory"); 
# 1714
return ret; 
# 1715
} 
#endif
# 1716 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ldcv(const __nv_bfloat16 *const ptr) 
# 1717
{int volatile ___ = 1;(void)ptr;
# 1721
::exit(___);}
#if 0
# 1717
{ 
# 1718
__nv_bfloat16 ret; 
# 1719
__asm__("ld.global.cv.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr) : "memory"); 
# 1720
return ret; 
# 1721
} 
#endif
# 1723 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stwb(__nv_bfloat162 *const ptr, const __nv_bfloat162 value) 
# 1724
{int volatile ___ = 1;(void)ptr;(void)value;
# 1726
::exit(___);}
#if 0
# 1724
{ 
# 1725
__asm__("st.global.wb.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1726
} 
#endif
# 1727 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stwb(__nv_bfloat16 *const ptr, const __nv_bfloat16 value) 
# 1728
{int volatile ___ = 1;(void)ptr;(void)value;
# 1730
::exit(___);}
#if 0
# 1728
{ 
# 1729
__asm__("st.global.wb.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1730
} 
#endif
# 1731 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stcg(__nv_bfloat162 *const ptr, const __nv_bfloat162 value) 
# 1732
{int volatile ___ = 1;(void)ptr;(void)value;
# 1734
::exit(___);}
#if 0
# 1732
{ 
# 1733
__asm__("st.global.cg.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1734
} 
#endif
# 1735 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stcg(__nv_bfloat16 *const ptr, const __nv_bfloat16 value) 
# 1736
{int volatile ___ = 1;(void)ptr;(void)value;
# 1738
::exit(___);}
#if 0
# 1736
{ 
# 1737
__asm__("st.global.cg.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1738
} 
#endif
# 1739 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stcs(__nv_bfloat162 *const ptr, const __nv_bfloat162 value) 
# 1740
{int volatile ___ = 1;(void)ptr;(void)value;
# 1742
::exit(___);}
#if 0
# 1740
{ 
# 1741
__asm__("st.global.cs.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1742
} 
#endif
# 1743 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stcs(__nv_bfloat16 *const ptr, const __nv_bfloat16 value) 
# 1744
{int volatile ___ = 1;(void)ptr;(void)value;
# 1746
::exit(___);}
#if 0
# 1744
{ 
# 1745
__asm__("st.global.cs.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1746
} 
#endif
# 1747 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stwt(__nv_bfloat162 *const ptr, const __nv_bfloat162 value) 
# 1748
{int volatile ___ = 1;(void)ptr;(void)value;
# 1750
::exit(___);}
#if 0
# 1748
{ 
# 1749
__asm__("st.global.wt.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1750
} 
#endif
# 1751 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stwt(__nv_bfloat16 *const ptr, const __nv_bfloat16 value) 
# 1752
{int volatile ___ = 1;(void)ptr;(void)value;
# 1754
::exit(___);}
#if 0
# 1752
{ 
# 1753
__asm__("st.global.wt.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1754
} 
#endif
# 1781 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __heq2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1782
{int volatile ___ = 1;(void)a;(void)b;
# 1784 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1782 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1783
{ __nv_bfloat162 val; 
# 1783 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1783 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.eq.f32.f32 low_res, low_a, low_b;\n  set.eq.f32.f32 high_res, high_a, " "high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1783 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1783 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1784
} 
#endif
# 1785 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hne2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1786
{int volatile ___ = 1;(void)a;(void)b;
# 1788 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1786 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1787
{ __nv_bfloat162 val; 
# 1787 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1787 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ne.f32.f32 low_res, low_a, low_b;\n  set.ne.f32.f32 high_res, high_a, " "high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1787 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1787 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1788
} 
#endif
# 1789 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hle2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1790
{int volatile ___ = 1;(void)a;(void)b;
# 1792 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1790 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1791
{ __nv_bfloat162 val; 
# 1791 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1791 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.le.f32.f32 low_res, low_a, low_b;\n  set.le.f32.f32 high_res, high_a, " "high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1791 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1791 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1792
} 
#endif
# 1793 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hge2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1794
{int volatile ___ = 1;(void)a;(void)b;
# 1796 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1794 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1795
{ __nv_bfloat162 val; 
# 1795 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1795 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ge.f32.f32 low_res, low_a, low_b;\n  set.ge.f32.f32 high_res, high_a, " "high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1795 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1795 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1796
} 
#endif
# 1797 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hlt2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1798
{int volatile ___ = 1;(void)a;(void)b;
# 1800 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1798 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1799
{ __nv_bfloat162 val; 
# 1799 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1799 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.lt.f32.f32 low_res, low_a, low_b;\n  set.lt.f32.f32 high_res, high_a, " "high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1799 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1799 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1800
} 
#endif
# 1801 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hgt2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1802
{int volatile ___ = 1;(void)a;(void)b;
# 1804 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1802 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1803
{ __nv_bfloat162 val; 
# 1803 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1803 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.gt.f32.f32 low_res, low_a, low_b;\n  set.gt.f32.f32 high_res, high_a, " "high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1803 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1803 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1804
} 
#endif
# 1805 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hequ2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1806
{int volatile ___ = 1;(void)a;(void)b;
# 1808 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1806 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1807
{ __nv_bfloat162 val; 
# 1807 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1807 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.equ.f32.f32 low_res, low_a, low_b;\n  set.equ.f32.f32 high_res, high_a" ", high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1807 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1807 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1808
} 
#endif
# 1809 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hneu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1810
{int volatile ___ = 1;(void)a;(void)b;
# 1812 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1810 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1811
{ __nv_bfloat162 val; 
# 1811 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1811 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.neu.f32.f32 low_res, low_a, low_b;\n  set.neu.f32.f32 high_res, high_a" ", high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1811 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1811 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1812
} 
#endif
# 1813 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hleu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1814
{int volatile ___ = 1;(void)a;(void)b;
# 1816 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1814 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1815
{ __nv_bfloat162 val; 
# 1815 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1815 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.leu.f32.f32 low_res, low_a, low_b;\n  set.leu.f32.f32 high_res, high_a" ", high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1815 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1815 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1816
} 
#endif
# 1817 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hgeu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1818
{int volatile ___ = 1;(void)a;(void)b;
# 1820 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1818 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1819
{ __nv_bfloat162 val; 
# 1819 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1819 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.geu.f32.f32 low_res, low_a, low_b;\n  set.geu.f32.f32 high_res, high_a" ", high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1819 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1819 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1820
} 
#endif
# 1821 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hltu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1822
{int volatile ___ = 1;(void)a;(void)b;
# 1824 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1822 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1823
{ __nv_bfloat162 val; 
# 1823 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1823 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ltu.f32.f32 low_res, low_a, low_b;\n  set.ltu.f32.f32 high_res, high_a" ", high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1823 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1823 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1824
} 
#endif
# 1825 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hgtu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1826
{int volatile ___ = 1;(void)a;(void)b;
# 1828 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1826 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1827
{ __nv_bfloat162 val; 
# 1827 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1827 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.gtu.f32.f32 low_res, low_a, low_b;\n  set.gtu.f32.f32 high_res, high_a" ", high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1827 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1827 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1828
} 
#endif
# 1855 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __heq2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1856
{int volatile ___ = 1;(void)a;(void)b;
# 1858 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1856 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1857
{ unsigned val; 
# 1857 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1857 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b;\n .reg .u32 high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0" "xffff0000U;\n  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.eq.u32.f32 low_res, low_a, low_b;\n  set.eq.u32.f32 high_" "res, high_a, high_b;\n  shr.u32 low_res, low_res, 16;\n  shl.b32 high_res, high_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1857 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1857 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1858
} 
#endif
# 1859 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __hne2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1860
{int volatile ___ = 1;(void)a;(void)b;
# 1862 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1860 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1861
{ unsigned val; 
# 1861 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1861 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b;\n .reg .u32 high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0" "xffff0000U;\n  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ne.u32.f32 low_res, low_a, low_b;\n  set.ne.u32.f32 high_" "res, high_a, high_b;\n  shr.u32 low_res, low_res, 16;\n  shl.b32 high_res, high_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1861 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1861 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1862
} 
#endif
# 1863 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __hle2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1864
{int volatile ___ = 1;(void)a;(void)b;
# 1866 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1864 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1865
{ unsigned val; 
# 1865 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1865 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b;\n .reg .u32 high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0" "xffff0000U;\n  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.le.u32.f32 low_res, low_a, low_b;\n  set.le.u32.f32 high_" "res, high_a, high_b;\n  shr.u32 low_res, low_res, 16;\n  shl.b32 high_res, high_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1865 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1865 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1866
} 
#endif
# 1867 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __hge2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1868
{int volatile ___ = 1;(void)a;(void)b;
# 1870 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1868 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1869
{ unsigned val; 
# 1869 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1869 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b;\n .reg .u32 high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0" "xffff0000U;\n  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ge.u32.f32 low_res, low_a, low_b;\n  set.ge.u32.f32 high_" "res, high_a, high_b;\n  shr.u32 low_res, low_res, 16;\n  shl.b32 high_res, high_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1869 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1869 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1870
} 
#endif
# 1871 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __hlt2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1872
{int volatile ___ = 1;(void)a;(void)b;
# 1874 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1872 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1873
{ unsigned val; 
# 1873 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1873 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b;\n .reg .u32 high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0" "xffff0000U;\n  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.lt.u32.f32 low_res, low_a, low_b;\n  set.lt.u32.f32 high_" "res, high_a, high_b;\n  shr.u32 low_res, low_res, 16;\n  shl.b32 high_res, high_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1873 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1873 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1874
} 
#endif
# 1875 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __hgt2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1876
{int volatile ___ = 1;(void)a;(void)b;
# 1878 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1876 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1877
{ unsigned val; 
# 1877 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1877 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b;\n .reg .u32 high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0" "xffff0000U;\n  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.gt.u32.f32 low_res, low_a, low_b;\n  set.gt.u32.f32 high_" "res, high_a, high_b;\n  shr.u32 low_res, low_res, 16;\n  shl.b32 high_res, high_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1877 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1877 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1878
} 
#endif
# 1879 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __hequ2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1880
{int volatile ___ = 1;(void)a;(void)b;
# 1882 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1880 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1881
{ unsigned val; 
# 1881 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1881 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b;\n .reg .u32 high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0" "xffff0000U;\n  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.equ.u32.f32 low_res, low_a, low_b;\n  set.equ.u32.f32 hig" "h_res, high_a, high_b;\n  shr.u32 low_res, low_res, 16;\n  shl.b32 high_res, high_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1881 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1881 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1882
} 
#endif
# 1883 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __hneu2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1884
{int volatile ___ = 1;(void)a;(void)b;
# 1886 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1884 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1885
{ unsigned val; 
# 1885 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1885 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b;\n .reg .u32 high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0" "xffff0000U;\n  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.neu.u32.f32 low_res, low_a, low_b;\n  set.neu.u32.f32 hig" "h_res, high_a, high_b;\n  shr.u32 low_res, low_res, 16;\n  shl.b32 high_res, high_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1885 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1885 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1886
} 
#endif
# 1887 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __hleu2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1888
{int volatile ___ = 1;(void)a;(void)b;
# 1890 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1888 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1889
{ unsigned val; 
# 1889 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1889 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b;\n .reg .u32 high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0" "xffff0000U;\n  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.leu.u32.f32 low_res, low_a, low_b;\n  set.leu.u32.f32 hig" "h_res, high_a, high_b;\n  shr.u32 low_res, low_res, 16;\n  shl.b32 high_res, high_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1889 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1889 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1890
} 
#endif
# 1891 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __hgeu2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1892
{int volatile ___ = 1;(void)a;(void)b;
# 1894 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1892 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1893
{ unsigned val; 
# 1893 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1893 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b;\n .reg .u32 high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0" "xffff0000U;\n  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.geu.u32.f32 low_res, low_a, low_b;\n  set.geu.u32.f32 hig" "h_res, high_a, high_b;\n  shr.u32 low_res, low_res, 16;\n  shl.b32 high_res, high_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1893 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1893 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1894
} 
#endif
# 1895 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __hltu2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1896
{int volatile ___ = 1;(void)a;(void)b;
# 1898 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1896 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1897
{ unsigned val; 
# 1897 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1897 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b;\n .reg .u32 high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0" "xffff0000U;\n  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ltu.u32.f32 low_res, low_a, low_b;\n  set.ltu.u32.f32 hig" "h_res, high_a, high_b;\n  shr.u32 low_res, low_res, 16;\n  shl.b32 high_res, high_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1897 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1897 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1898
} 
#endif
# 1899 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __hgtu2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1900
{int volatile ___ = 1;(void)a;(void)b;
# 1902 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1900 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1901
{ unsigned val; 
# 1901 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1901 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b;\n .reg .u32 high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0" "xffff0000U;\n  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.gtu.u32.f32 low_res, low_a, low_b;\n  set.gtu.u32.f32 hig" "h_res, high_a, high_b;\n  shr.u32 low_res, low_res, 16;\n  shl.b32 high_res, high_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1901 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1901 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1902
} 
#endif
# 1931 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbeq2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1932
{int volatile ___ = 1;(void)a;(void)b;
# 1934 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1932 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1933
{ unsigned val; 
# 1933 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1933 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.eq.f32.f32 low_res, low_a, low_b;\n  set.eq.f32.f32 high_res, high_a, " "high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; 
# 1933 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1933 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1934
} 
#endif
# 1935 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbne2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1936
{int volatile ___ = 1;(void)a;(void)b;
# 1938 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1936 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1937
{ unsigned val; 
# 1937 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1937 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ne.f32.f32 low_res, low_a, low_b;\n  set.ne.f32.f32 high_res, high_a, " "high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; 
# 1937 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1937 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1938
} 
#endif
# 1939 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hble2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1940
{int volatile ___ = 1;(void)a;(void)b;
# 1942 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1940 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1941
{ unsigned val; 
# 1941 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1941 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.le.f32.f32 low_res, low_a, low_b;\n  set.le.f32.f32 high_res, high_a, " "high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; 
# 1941 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1941 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1942
} 
#endif
# 1943 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbge2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1944
{int volatile ___ = 1;(void)a;(void)b;
# 1946 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1944 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1945
{ unsigned val; 
# 1945 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1945 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ge.f32.f32 low_res, low_a, low_b;\n  set.ge.f32.f32 high_res, high_a, " "high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; 
# 1945 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1945 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1946
} 
#endif
# 1947 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hblt2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1948
{int volatile ___ = 1;(void)a;(void)b;
# 1950 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1948 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1949
{ unsigned val; 
# 1949 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1949 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.lt.f32.f32 low_res, low_a, low_b;\n  set.lt.f32.f32 high_res, high_a, " "high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; 
# 1949 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1949 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1950
} 
#endif
# 1951 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbgt2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1952
{int volatile ___ = 1;(void)a;(void)b;
# 1954 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1952 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1953
{ unsigned val; 
# 1953 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1953 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.gt.f32.f32 low_res, low_a, low_b;\n  set.gt.f32.f32 high_res, high_a, " "high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; 
# 1953 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1953 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1954
} 
#endif
# 1955 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbequ2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1956
{int volatile ___ = 1;(void)a;(void)b;
# 1958 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1956 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1957
{ unsigned val; 
# 1957 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1957 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.equ.f32.f32 low_res, low_a, low_b;\n  set.equ.f32.f32 high_res, high_a" ", high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; 
# 1957 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1957 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1958
} 
#endif
# 1959 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbneu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1960
{int volatile ___ = 1;(void)a;(void)b;
# 1962 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1960 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1961
{ unsigned val; 
# 1961 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1961 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.neu.f32.f32 low_res, low_a, low_b;\n  set.neu.f32.f32 high_res, high_a" ", high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; 
# 1961 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1961 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1962
} 
#endif
# 1963 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbleu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1964
{int volatile ___ = 1;(void)a;(void)b;
# 1966 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1964 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1965
{ unsigned val; 
# 1965 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1965 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.leu.f32.f32 low_res, low_a, low_b;\n  set.leu.f32.f32 high_res, high_a" ", high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; 
# 1965 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1965 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1966
} 
#endif
# 1967 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbgeu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1968
{int volatile ___ = 1;(void)a;(void)b;
# 1970 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1968 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1969
{ unsigned val; 
# 1969 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1969 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.geu.f32.f32 low_res, low_a, low_b;\n  set.geu.f32.f32 high_res, high_a" ", high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; 
# 1969 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1969 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1970
} 
#endif
# 1971 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbltu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1972
{int volatile ___ = 1;(void)a;(void)b;
# 1974 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1972 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1973
{ unsigned val; 
# 1973 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1973 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ltu.f32.f32 low_res, low_a, low_b;\n  set.ltu.f32.f32 high_res, high_a" ", high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; 
# 1973 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1973 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1974
} 
#endif
# 1975 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbgtu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1976
{int volatile ___ = 1;(void)a;(void)b;
# 1978 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1976 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1977
{ unsigned val; 
# 1977 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1977 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.gtu.f32.f32 low_res, low_a, low_b;\n  set.gtu.f32.f32 high_res, high_a" ", high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; 
# 1977 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1977 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1978
} 
#endif
# 2001 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __heq(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2002
{int volatile ___ = 1;(void)a;(void)b;
# 2004 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2002 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2003
{ 
# 2003 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2003 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.eq.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; 
# 2003 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2003 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 2004
} 
#endif
# 2005 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hne(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2006
{int volatile ___ = 1;(void)a;(void)b;
# 2008 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2006 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2007
{ 
# 2007 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2007 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.ne.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; 
# 2007 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2007 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 2008
} 
#endif
# 2009 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hle(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2010
{int volatile ___ = 1;(void)a;(void)b;
# 2012 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2010 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2011
{ 
# 2011 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2011 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.le.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; 
# 2011 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2011 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 2012
} 
#endif
# 2013 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hge(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2014
{int volatile ___ = 1;(void)a;(void)b;
# 2016 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2014 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2015
{ 
# 2015 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2015 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.ge.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; 
# 2015 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2015 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 2016
} 
#endif
# 2017 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hlt(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2018
{int volatile ___ = 1;(void)a;(void)b;
# 2020 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2018 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2019
{ 
# 2019 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2019 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.lt.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; 
# 2019 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2019 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 2020
} 
#endif
# 2021 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hgt(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2022
{int volatile ___ = 1;(void)a;(void)b;
# 2024 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2022 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2023
{ 
# 2023 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2023 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.gt.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; 
# 2023 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2023 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 2024
} 
#endif
# 2025 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hequ(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2026
{int volatile ___ = 1;(void)a;(void)b;
# 2028 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2026 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2027
{ 
# 2027 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2027 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.equ.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; 
# 2027 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2027 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 2028
} 
#endif
# 2029 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hneu(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2030
{int volatile ___ = 1;(void)a;(void)b;
# 2032 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2030 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2031
{ 
# 2031 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2031 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.neu.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; 
# 2031 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2031 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 2032
} 
#endif
# 2033 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hleu(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2034
{int volatile ___ = 1;(void)a;(void)b;
# 2036 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2034 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2035
{ 
# 2035 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2035 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.leu.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; 
# 2035 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2035 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 2036
} 
#endif
# 2037 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hgeu(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2038
{int volatile ___ = 1;(void)a;(void)b;
# 2040 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2038 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2039
{ 
# 2039 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2039 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.geu.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; 
# 2039 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2039 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 2040
} 
#endif
# 2041 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hltu(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2042
{int volatile ___ = 1;(void)a;(void)b;
# 2044 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2042 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2043
{ 
# 2043 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2043 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.ltu.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; 
# 2043 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2043 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 2044
} 
#endif
# 2045 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hgtu(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2046
{int volatile ___ = 1;(void)a;(void)b;
# 2048 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2046 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2047
{ 
# 2047 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2047 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.gtu.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; 
# 2047 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2047 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 2048
} 
#endif
# 2070 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hadd2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2071
{int volatile ___ = 1;(void)a;(void)b;
# 2083 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2071 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2072
__nv_bfloat162 val; 
# 2073 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2073 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 c;\n  mov.b32 c, 0x3f803f80U;\n  fma.rn.bf16x2 %0,%1,c,%2;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2073 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2082 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 2083
} 
#endif
# 2084 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hsub2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2085
{int volatile ___ = 1;(void)a;(void)b;
# 2097 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2085 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2086
__nv_bfloat162 val; 
# 2087 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2087 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 c;\n  mov.b32 c, 0xbf80bf80U;\n  fma.rn.bf16x2 %0,%2,c,%1;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2087 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2096 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 2097
} 
#endif
# 2098 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hmul2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2099
{int volatile ___ = 1;(void)a;(void)b;
# 2111 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2099 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2100
__nv_bfloat162 val; 
# 2101 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2101 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 c;\n  mov.b32 c, 0x80008000U;\n  fma.rn.bf16x2 %0,%1,%2,c;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2101 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2110 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 2111
} 
#endif
# 2112 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hadd2_rn(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2113
{int volatile ___ = 1;(void)a;(void)b;
# 2125 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2113 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2114
__nv_bfloat162 val; 
# 2115 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2115 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 c;\n  mov.b32 c, 0x3f803f80U;\n  fma.rn.bf16x2 %0,%1,c,%2;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2115 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2124 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 2125
} 
#endif
# 2126 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hsub2_rn(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2127
{int volatile ___ = 1;(void)a;(void)b;
# 2139 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2127 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2128
__nv_bfloat162 val; 
# 2129 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2129 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 c;\n  mov.b32 c, 0xbf80bf80U;\n  fma.rn.bf16x2 %0,%2,c,%1;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2129 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2138 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 2139
} 
#endif
# 2140 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hmul2_rn(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2141
{int volatile ___ = 1;(void)a;(void)b;
# 2153 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2141 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2142
__nv_bfloat162 val; 
# 2143 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2143 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 c;\n  mov.b32 c, 0x80008000U;\n  fma.rn.bf16x2 %0,%1,%2,c;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2143 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2152 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 2153
} 
#endif
# 2154 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hadd2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2155
{int volatile ___ = 1;(void)a;(void)b;
# 2165
::exit(___);}
#if 0
# 2155
{ 
# 2156
__nv_bfloat162 val; 
# 2157
__asm__("{.reg .b32 f, one, zero;\n  mov.b32 one, 0x3f803f80U;\n  mov.b32 zero, 0;\n  fma.rn.bf16x2 f,%1,one,%2;\n  max.bf16x2 f, f, zero" ";\n  min.bf16x2 %0, f, one;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2164
return val; 
# 2165
} 
#endif
# 2166 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hsub2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2167
{int volatile ___ = 1;(void)a;(void)b;
# 2178
::exit(___);}
#if 0
# 2167
{ 
# 2168
__nv_bfloat162 val; 
# 2169
__asm__("{.reg .b32 f, one, zero, mone;\n  mov.b32 one, 0x3f803f80U;\n  mov.b32 zero, 0;\n  mov.b32 mone, 0xbf80bf80U;\n  fma.rn.bf16x2 f" ",%2,mone,%1;\n  max.bf16x2 f, f, zero;\n  min.bf16x2 %0, f, one;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2177
return val; 
# 2178
} 
#endif
# 2179 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hmul2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2180
{int volatile ___ = 1;(void)a;(void)b;
# 2191
::exit(___);}
#if 0
# 2180
{ 
# 2181
__nv_bfloat162 val; 
# 2182
__asm__("{.reg .b32 f, one, zero, mzero;\n  mov.b32 one, 0x3f803f80U;\n  mov.b32 zero, 0;\n  mov.b32 mzero, 0x80008000U;\n  fma.rn.bf16x2" " f,%1,%2,mzero;\n  max.bf16x2 f, f, zero;\n  min.bf16x2 %0, f, one;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2190
return val; 
# 2191
} 
#endif
# 2192 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hfma2(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c) 
# 2193
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2198
::exit(___);}
#if 0
# 2193
{ 
# 2194
__nv_bfloat162 val; 
# 2195
__asm__("{fma.rn.bf16x2 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b))), "r" (*(reinterpret_cast< const unsigned *>(&c)))); 
# 2197
return val; 
# 2198
} 
#endif
# 2199 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hfma2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c) 
# 2200
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2210
::exit(___);}
#if 0
# 2200
{ 
# 2201
__nv_bfloat162 val; 
# 2202
__asm__("{ .reg .b32 f, one, zero;\n  mov.b32 one, 0x3f803f80U;\n  mov.b32 zero, 0;\n  fma.rn.bf16x2 f, %1, %2, %3;\n  max.bf16x2 f, f, z" "ero;\n  min.bf16x2 %0, f, one;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b))), "r" (*(reinterpret_cast< const unsigned *>(&c)))); 
# 2209
return val; 
# 2210
} 
#endif
# 2211 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __h2div(const __nv_bfloat162 a, const __nv_bfloat162 b) {int volatile ___ = 1;(void)a;(void)b;
# 2225
::exit(___);}
#if 0
# 2211
{ 
# 2212
__nv_bfloat16 ha, hb; 
# 2214
ha = __low2bfloat16(a); 
# 2215
hb = __low2bfloat16(b); 
# 2217
const __nv_bfloat16 v1 = __hdiv(ha, hb); 
# 2219
ha = __high2bfloat16(a); 
# 2220
hb = __high2bfloat16(b); 
# 2222
const __nv_bfloat16 v2 = __hdiv(ha, hb); 
# 2224
return __halves2bfloat162(v1, v2); 
# 2225
} 
#endif
# 2240 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hadd(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2241
{int volatile ___ = 1;(void)a;(void)b;
# 2253 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2241 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2242
__nv_bfloat16 val; 
# 2243 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2243 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b16 c;\n  mov.b16 c, 0x3f80U;\n  fma.rn.bf16 %0,%1,c,%2;}\n" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2243 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2252 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 2253
} 
#endif
# 2254 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hsub(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2255
{int volatile ___ = 1;(void)a;(void)b;
# 2267 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2255 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2256
__nv_bfloat16 val; 
# 2257 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2257 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b16 c;\n  mov.b16 c, 0xbf80U;\n  fma.rn.bf16 %0,%2,c,%1;}\n" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2257 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2266 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 2267
} 
#endif
# 2268 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hmul(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2269
{int volatile ___ = 1;(void)a;(void)b;
# 2281 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2269 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2270
__nv_bfloat16 val; 
# 2271 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2271 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b16 c;\n  mov.b16 c, 0x8000U;\n  fma.rn.bf16 %0,%1,%2,c;}\n" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2271 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2280 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 2281
} 
#endif
# 2282 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hadd_rn(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2283
{int volatile ___ = 1;(void)a;(void)b;
# 2295 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2283 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2284
__nv_bfloat16 val; 
# 2285 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2285 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b16 c;\n  mov.b16 c, 0x3f80U;\n  fma.rn.bf16 %0,%1,c,%2;}\n" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2285 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2294 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 2295
} 
#endif
# 2296 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hsub_rn(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2297
{int volatile ___ = 1;(void)a;(void)b;
# 2309 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2297 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2298
__nv_bfloat16 val; 
# 2299 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2299 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b16 c;\n  mov.b16 c, 0xbf80U;\n  fma.rn.bf16 %0,%2,c,%1;}\n" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2299 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2308 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 2309
} 
#endif
# 2310 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hmul_rn(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2311
{int volatile ___ = 1;(void)a;(void)b;
# 2323 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2311 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2312
__nv_bfloat16 val; 
# 2313 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2313 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b16 c;\n  mov.b16 c, 0x8000U;\n  fma.rn.bf16 %0,%1,%2,c;}\n" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2313 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2322 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 2323
} 
#endif
# 2324 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hadd_sat(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2325
{int volatile ___ = 1;(void)a;(void)b;
# 2335
::exit(___);}
#if 0
# 2325
{ 
# 2326
__nv_bfloat16 val; 
# 2327
__asm__("{ .reg .b16 f, one, zero;\n  mov.b16 one, 0x3f80U;\n  mov.b16 zero, 0;\n  fma.rn.bf16 f, %1, one, %2;\n  max.bf16 f, f, zero;\n " " min.bf16 %0, f, one;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2334
return val; 
# 2335
} 
#endif
# 2336 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hsub_sat(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2337
{int volatile ___ = 1;(void)a;(void)b;
# 2348
::exit(___);}
#if 0
# 2337
{ 
# 2338
__nv_bfloat16 val; 
# 2339
__asm__("{ .reg .b16 f, one, zero, mone;\n  mov.b16 one, 0x3f80U;\n  mov.b16 zero, 0;\n  mov.b16 mone, 0xbf80U;\n  fma.rn.bf16 f, %2, mon" "e, %1;\n  max.bf16 f, f, zero;\n  min.bf16 %0, f, one;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2347
return val; 
# 2348
} 
#endif
# 2349 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hmul_sat(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2350
{int volatile ___ = 1;(void)a;(void)b;
# 2361
::exit(___);}
#if 0
# 2350
{ 
# 2351
__nv_bfloat16 val; 
# 2352
__asm__("{ .reg .b16 f, one, zero, mzero;\n  mov.b16 one, 0x3f80U;\n  mov.b16 zero, 0;\n  mov.b16 mzero, 0x8000U;\n  fma.rn.bf16 f, %1, %" "2, mzero;\n  max.bf16 f, f, zero;\n  min.bf16 %0, f, one;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2360
return val; 
# 2361
} 
#endif
# 2362 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hfma(const __nv_bfloat16 a, const __nv_bfloat16 b, const __nv_bfloat16 c) 
# 2363
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2368
::exit(___);}
#if 0
# 2363
{ 
# 2364
__nv_bfloat16 val; 
# 2365
__asm__("{fma.rn.bf16 %0,%1,%2,%3;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b))), "h" (*(reinterpret_cast< const unsigned short *>(&c)))); 
# 2367
return val; 
# 2368
} 
#endif
# 2369 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hfma_sat(const __nv_bfloat16 a, const __nv_bfloat16 b, const __nv_bfloat16 c) 
# 2370
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2380
::exit(___);}
#if 0
# 2370
{ 
# 2371
__nv_bfloat16 val; 
# 2372
__asm__("{ .reg .b16 f, one, zero;\n  mov.b16 one, 0x3f80U;\n  mov.b16 zero, 0;\n  fma.rn.bf16 f, %1, %2, %3;\n  max.bf16 f, f, zero;\n  " "min.bf16 %0, f, one;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b))), "h" (*(reinterpret_cast< const unsigned short *>(&c)))); 
# 2379
return val; 
# 2380
} 
#endif
# 2381 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hdiv(const __nv_bfloat16 a, const __nv_bfloat16 b) {int volatile ___ = 1;(void)a;(void)b;
# 2383
::exit(___);}
#if 0
# 2381
{ 
# 2382
{ __nv_bfloat16 val; __asm__("{.reg .b32 a,b,res;\n  mov.b32 a, {0,%1};\n  mov.b32 b, {0,%2};\n  div.rn.f32 res, a, b;\n  cvt.rn.bf16.f32 %0, res;}\n" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2383
} 
#endif
# 2415 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hsin_internal(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2419
::exit(___);}
#if 0
# 2415
{ 
# 2416
float f = __bfloat162float(a); 
# 2417
f = sinf(f); 
# 2418
return __float2bfloat16_rn(f); 
# 2419
} 
#endif
# 2420 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hsin(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2422
::exit(___);}
#if 0
# 2420
{ 
# 2421
return __hsin_internal(a); 
# 2422
} 
#endif
# 2423 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2sin(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2427
::exit(___);}
#if 0
# 2423
{ 
# 2424
const __nv_bfloat16 l = __low2bfloat16(a); 
# 2425
const __nv_bfloat16 h = __high2bfloat16(a); 
# 2426
return __halves2bfloat162(__hsin_internal(l), __hsin_internal(h)); 
# 2427
} 
#endif
# 2428 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hcos_internal(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2432
::exit(___);}
#if 0
# 2428
{ 
# 2429
float f = __bfloat162float(a); 
# 2430
f = cosf(f); 
# 2431
return __float2bfloat16_rn(f); 
# 2432
} 
#endif
# 2433 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hcos(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2435
::exit(___);}
#if 0
# 2433
{ 
# 2434
return __hcos_internal(a); 
# 2435
} 
#endif
# 2436 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2cos(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2440
::exit(___);}
#if 0
# 2436
{ 
# 2437
const __nv_bfloat16 l = __low2bfloat16(a); 
# 2438
const __nv_bfloat16 h = __high2bfloat16(a); 
# 2439
return __halves2bfloat162(__hcos_internal(l), __hcos_internal(h)); 
# 2440
} 
#endif
# 2455 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hexp(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2468
::exit(___);}
#if 0
# 2455
{ 
# 2456
__nv_bfloat16 val; 
# 2457
__asm__("{.reg.b32          f, C;           \n .reg.b16          h,r;            \n  mov.b16          h,%1;           \n  mov.b32        " "  f,{0,h};        \n  mov.b32          C, 0x3FB8AA3CU;  \n  mul.f32          f,f,C;          \n  ex2.approx.f32   f,f;          " "  \n  cvt.rn.bf16.f32 r,f;            \n  mov.b16          %0,r;           \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2467
return val; 
# 2468
} 
#endif
# 2469 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2exp(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2488
::exit(___);}
#if 0
# 2469
{ 
# 2470
__nv_bfloat162 val; 
# 2471
__asm__("{.reg.b16         hl, hu;         \n .reg.b32         h,r,fl,fu, C;   \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         h," " %1;          \n  mov.b32         fl, {0,hl};     \n  mov.b32         fu, {0,hu};     \n  mov.b32         C, 0x3FB8AA3CU;  \n  m" "ul.f32         fl,fl,C;        \n  mul.f32         fu,fu,C;        \n  ex2.approx.f32      fl, fl;     \n  ex2.approx.f32      f" "u, fu;     \n  cvt.rn.bf16.f32    hl, fl;     \n  cvt.rn.bf16.f32    hu, fu;     \n  mov.b32         r, {hl, hu};    \n  mov.b32" "         %0, r;  \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2487
return val; 
# 2488
} 
#endif
# 2489 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hexp2(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2491
::exit(___);}
#if 0
# 2489
{ 
# 2490
{ __nv_bfloat16 val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  mov.b32         f,{0,r};  \n  ex2.ap" "prox.f32   f,f;  \n  cvt.rn.bf16.f32    r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } 
# 2491
} 
#endif
# 2492 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2exp2(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2494
::exit(___);}
#if 0
# 2492
{ 
# 2493
{ __nv_bfloat162 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         fl" ", {0,hl};     \n  mov.b32         fu, {0,hu};     \n  ex2.approx.f32   fl, fl;     \n  ex2.approx.f32   fu, fu;     \n  cvt.rn.b" "f16.f32    hl, fl;     \n  cvt.rn.bf16.f32    hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } 
# 2494
} 
#endif
# 2495 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hexp10(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2509
::exit(___);}
#if 0
# 2495
{ 
# 2496
__nv_bfloat16 val; 
# 2497
__asm__("{.reg.b16         h, r;           \n .reg.b32         f, C;           \n  mov.b16         h, %1;          \n  mov.b32         f," " {0,h};       \n  mov.b32         C, 0x40549A78U;  \n  mul.f32         f,f,C;          \n  ex2.approx.f32      f, f;       \n  c" "vt.rn.bf16.f32    r, f;       \n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0xBC95U;\n  mov.b16 ulp,0xBF00U;\n  set.eq.f16.f16 p,%1, s" "pc;\n  fma.rn.bf16 r,p,ulp,r;\n}\n  mov.b16         %0, r;          \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2508
return val; 
# 2509
} 
#endif
# 2510 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2exp10(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2529
::exit(___);}
#if 0
# 2510
{ 
# 2511
__nv_bfloat162 val; 
# 2512
__asm__("{.reg.b16         hl, hu;         \n .reg.b32         h,r,fl,fu, C;   \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         fl" ", {0,hl};     \n  mov.b32         fu, {0,hu};     \n  mov.b32         C, 0x40549A78U;  \n  mul.f32         fl,fl,C;        \n  m" "ul.f32         fu,fu,C;        \n  ex2.approx.f32      fl, fl;     \n  ex2.approx.f32      fu, fu;     \n  cvt.rn.bf16.f32    hl" ", fl;     \n  cvt.rn.bf16.f32    hu, fu;     \n  mov.b32         r, {hl, hu};    \n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0xBC95B" "C95U;\n  mov.b32 ulp,0xBF00BF00U;\n  set.eq.f16x2.f16x2 p,%1, spc;\n  fma.rn.bf16x2 r,p,ulp,r;\n}\n  mov.b32         %0, r;  \n}" "" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2528
return val; 
# 2529
} 
#endif
# 2530 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hlog2(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2532
::exit(___);}
#if 0
# 2530
{ 
# 2531
{ __nv_bfloat16 val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  mov.b32         f,{0,r};  \n  lg2.ap" "prox.f32   f,f;  \n  cvt.rn.bf16.f32    r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } 
# 2532
} 
#endif
# 2533 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2log2(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2535
::exit(___);}
#if 0
# 2533
{ 
# 2534
{ __nv_bfloat162 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         fl" ", {0,hl};     \n  mov.b32         fu, {0,hu};     \n  lg2.approx.f32   fl, fl;     \n  lg2.approx.f32   fu, fu;     \n  cvt.rn.b" "f16.f32    hl, fl;     \n  cvt.rn.bf16.f32    hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } 
# 2535
} 
#endif
# 2536 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hlog(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2549
::exit(___);}
#if 0
# 2536
{ 
# 2537
__nv_bfloat16 val; 
# 2538
__asm__("{.reg.b32         f, C;           \n .reg.b16         r,h;            \n  mov.b16         h,%1;           \n  mov.b32         f," "{0,h};        \n  lg2.approx.f32      f,f;        \n  mov.b32         C, 0x3f317218U; \n  mul.f32         f,f,C;          \n  cv" "t.rn.bf16.f32    r,f;        \n  mov.b16         %0,r;           \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2548
return val; 
# 2549
} 
#endif
# 2550 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2log(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2569
::exit(___);}
#if 0
# 2550
{ 
# 2551
__nv_bfloat162 val; 
# 2552
__asm__("{.reg.b16         hl, hu;             \n .reg.b32         r, fl, fu, C, h;    \n  mov.b32         {hl, hu}, %1;       \n  mov.b3" "2         h, %1;              \n  mov.b32         fl, {0,hl};         \n  mov.b32         fu, {0,hu};         \n  lg2.approx.f32" "      fl, fl;         \n  lg2.approx.f32      fu, fu;         \n  mov.b32         C, 0x3f317218U;     \n  mul.f32         fl,fl," "C;            \n  mul.f32         fu,fu,C;            \n  cvt.rn.bf16.f32    hl, fl;         \n  cvt.rn.bf16.f32    hu, fu;     " "    \n  mov.b32         r, {hl, hu};        \n  mov.b32         %0, r;              \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2568
return val; 
# 2569
} 
#endif
# 2570 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hlog10(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2583
::exit(___);}
#if 0
# 2570
{ 
# 2571
__nv_bfloat16 val; 
# 2572
__asm__("{.reg.b16         h, r;           \n .reg.b32         f, C;           \n  mov.b16         h, %1;          \n  mov.b32         f," " {0,h};           \n  lg2.approx.f32      f, f;       \n  mov.b32         C, 0x3E9A209BU;  \n  mul.f32         f,f,C;          \n" "  cvt.rn.bf16.f32    r, f;       \n  mov.b16         %0, r;          \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2582
return val; 
# 2583
} 
#endif
# 2584 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2log10(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2603
::exit(___);}
#if 0
# 2584
{ 
# 2585
__nv_bfloat162 val; 
# 2586
__asm__("{.reg.b16         hl, hu;             \n .reg.b32         r, fl, fu, C, h;    \n  mov.b32         {hl, hu}, %1;       \n  mov.b3" "2         h, %1;              \n  mov.b32         fl, {0,hl};         \n  mov.b32         fu, {0,hu};         \n  lg2.approx.f32" "      fl, fl;         \n  lg2.approx.f32      fu, fu;         \n  mov.b32         C, 0x3E9A209BU;      \n  mul.f32         fl,fl" ",C;            \n  mul.f32         fu,fu,C;            \n  cvt.rn.bf16.f32    hl, fl;         \n  cvt.rn.bf16.f32    hu, fu;    " "     \n  mov.b32         r, {hl, hu};        \n  mov.b32         %0, r;              \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2602
return val; 
# 2603
} 
#endif
# 2606 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2rcp(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2608
::exit(___);}
#if 0
# 2606
{ 
# 2607
{ __nv_bfloat162 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         fl" ", {0,hl};     \n  mov.b32         fu, {0,hu};     \n  rcp.approx.f32   fl, fl;     \n  rcp.approx.f32   fu, fu;     \n  cvt.rn.b" "f16.f32    hl, fl;     \n  cvt.rn.bf16.f32    hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } 
# 2608
} 
#endif
# 2609 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hrcp(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2611
::exit(___);}
#if 0
# 2609
{ 
# 2610
{ __nv_bfloat16 val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  mov.b32         f,{0,r};  \n  rcp.ap" "prox.f32   f,f;  \n  cvt.rn.bf16.f32    r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } 
# 2611
} 
#endif
# 2612 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2rsqrt(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2614
::exit(___);}
#if 0
# 2612
{ 
# 2613
{ __nv_bfloat162 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         fl" ", {0,hl};     \n  mov.b32         fu, {0,hu};     \n  rsqrt.approx.f32   fl, fl;     \n  rsqrt.approx.f32   fu, fu;     \n  cvt." "rn.bf16.f32    hl, fl;     \n  cvt.rn.bf16.f32    hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } 
# 2614
} 
#endif
# 2615 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hrsqrt(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2617
::exit(___);}
#if 0
# 2615
{ 
# 2616
{ __nv_bfloat16 val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  mov.b32         f,{0,r};  \n  rsqrt." "approx.f32   f,f;  \n  cvt.rn.bf16.f32    r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } 
# 2617
} 
#endif
# 2618 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2sqrt(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2620
::exit(___);}
#if 0
# 2618
{ 
# 2619
{ __nv_bfloat162 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         fl" ", {0,hl};     \n  mov.b32         fu, {0,hu};     \n  sqrt.approx.f32   fl, fl;     \n  sqrt.approx.f32   fu, fu;     \n  cvt.rn" ".bf16.f32    hl, fl;     \n  cvt.rn.bf16.f32    hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } 
# 2620
} 
#endif
# 2621 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hsqrt(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2623
::exit(___);}
#if 0
# 2621
{ 
# 2622
{ __nv_bfloat16 val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  mov.b32         f,{0,r};  \n  sqrt.a" "pprox.f32   f,f;  \n  cvt.rn.bf16.f32    r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } 
# 2623
} 
#endif
# 2626 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hisnan2(const __nv_bfloat162 a) 
# 2627
{int volatile ___ = 1;(void)a;
# 2637 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2627 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2628 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2628 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const __nv_bfloat162 b = a; { __nv_bfloat162 val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n .reg .b16 low,high;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high" "_b, %2, 0xffff0000U;\n  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.nan.f32.f32 low_res, low_a, low_b;\n  set.nan.f3" "2.f32 high_res, high_a, high_b;\n  cvt.rn.bf16.f32 low, low_res;\n  cvt.rn.bf16.f32 high, high_res;\n  mov.b32 %0, {low,high};}\n" "" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2628 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2637 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 2638 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hisnan(const __nv_bfloat16 a) 
# 2639
{int volatile ___ = 1;(void)a;
# 2653 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2639 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2640 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2640 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned r; __asm__("{.reg .b32 a;\n  mov.b32 a, {0,%1};\n  set.nan.f32.f32 %0, a, a;}\n" : "=r" (r) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return r != 0U; 
# 2640 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2653 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 2654 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hneg2(const __nv_bfloat162 a) 
# 2655
{int volatile ___ = 1;(void)a;
# 2660
::exit(___);}
#if 0
# 2655
{ 
# 2656
__nv_bfloat162 r; 
# 2657
__asm__("{neg.bf16x2 %0,%1;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2659
return r; 
# 2660
} 
#endif
# 2661 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hneg(const __nv_bfloat16 a) 
# 2662
{int volatile ___ = 1;(void)a;
# 2667
::exit(___);}
#if 0
# 2662
{ 
# 2663
__nv_bfloat16 r; 
# 2664
__asm__("{neg.bf16 %0,%1;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2666
return r; 
# 2667
} 
#endif
# 2668 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __habs2(const __nv_bfloat162 a) 
# 2669
{int volatile ___ = 1;(void)a;
# 2674
::exit(___);}
#if 0
# 2669
{ 
# 2670
__nv_bfloat162 r; 
# 2671
__asm__("{abs.bf16x2 %0,%1;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2673
return r; 
# 2674
} 
#endif
# 2675 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __habs(const __nv_bfloat16 a) 
# 2676
{int volatile ___ = 1;(void)a;
# 2681
::exit(___);}
#if 0
# 2676
{ 
# 2677
__nv_bfloat16 r; 
# 2678
__asm__("{abs.bf16 %0,%1;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2680
return r; 
# 2681
} 
#endif
# 2685 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hmax(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2686
{int volatile ___ = 1;(void)a;(void)b;
# 2691
::exit(___);}
#if 0
# 2686
{ 
# 2687
__nv_bfloat16 val; 
# 2688
__asm__("{ max.bf16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2690
return val; 
# 2691
} 
#endif
# 2692 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hmin(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2693
{int volatile ___ = 1;(void)a;(void)b;
# 2698
::exit(___);}
#if 0
# 2693
{ 
# 2694
__nv_bfloat16 val; 
# 2695
__asm__("{ min.bf16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2697
return val; 
# 2698
} 
#endif
# 2699 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hmax_nan(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2700
{int volatile ___ = 1;(void)a;(void)b;
# 2705
::exit(___);}
#if 0
# 2700
{ 
# 2701
__nv_bfloat16 val; 
# 2702
__asm__("{ max.NaN.bf16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2704
return val; 
# 2705
} 
#endif
# 2706 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hmin_nan(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2707
{int volatile ___ = 1;(void)a;(void)b;
# 2712
::exit(___);}
#if 0
# 2707
{ 
# 2708
__nv_bfloat16 val; 
# 2709
__asm__("{ min.NaN.bf16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2711
return val; 
# 2712
} 
#endif
# 2713 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hfma_relu(const __nv_bfloat16 a, const __nv_bfloat16 b, const __nv_bfloat16 c) 
# 2714
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2719
::exit(___);}
#if 0
# 2714
{ 
# 2715
__nv_bfloat16 val; 
# 2716
__asm__("{ fma.rn.relu.bf16 %0,%1,%2,%3;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b))), "h" (*(reinterpret_cast< const unsigned short *>(&c)))); 
# 2718
return val; 
# 2719
} 
#endif
# 2723 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hmax2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2724
{int volatile ___ = 1;(void)a;(void)b;
# 2729
::exit(___);}
#if 0
# 2724
{ 
# 2725
__nv_bfloat162 val; 
# 2726
__asm__("{ max.bf16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2728
return val; 
# 2729
} 
#endif
# 2730 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hmin2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2731
{int volatile ___ = 1;(void)a;(void)b;
# 2736
::exit(___);}
#if 0
# 2731
{ 
# 2732
__nv_bfloat162 val; 
# 2733
__asm__("{ min.bf16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2735
return val; 
# 2736
} 
#endif
# 2737 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hmax2_nan(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2738
{int volatile ___ = 1;(void)a;(void)b;
# 2743
::exit(___);}
#if 0
# 2738
{ 
# 2739
__nv_bfloat162 val; 
# 2740
__asm__("{ max.NaN.bf16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2742
return val; 
# 2743
} 
#endif
# 2744 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hmin2_nan(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2745
{int volatile ___ = 1;(void)a;(void)b;
# 2750
::exit(___);}
#if 0
# 2745
{ 
# 2746
__nv_bfloat162 val; 
# 2747
__asm__("{ min.NaN.bf16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2749
return val; 
# 2750
} 
#endif
# 2751 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hfma2_relu(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c) 
# 2752
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2757
::exit(___);}
#if 0
# 2752
{ 
# 2753
__nv_bfloat162 val; 
# 2754
__asm__("{ fma.rn.relu.bf16x2 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b))), "r" (*(reinterpret_cast< const unsigned *>(&c)))); 
# 2756
return val; 
# 2757
} 
#endif
# 2759 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hcmadd(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c) 
# 2760
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2770
::exit(___);}
#if 0
# 2760
{ 
# 2765
__nv_bfloat16 real_tmp = __hfma(a.x, b.x, c.x); 
# 2766
__nv_bfloat16 img_tmp = __hfma(a.x, b.y, c.y); 
# 2767
real_tmp = __hfma(__hneg(a.y), b.y, real_tmp); 
# 2768
img_tmp = __hfma(a.y, b.x, img_tmp); 
# 2769
return make_bfloat162(real_tmp, img_tmp); 
# 2770
} 
#endif
# 2780 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 atomicAdd(__nv_bfloat162 *const address, const __nv_bfloat162 val) 
# 2781
{int volatile ___ = 1;(void)address;(void)val;
# 2799 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2781 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2782 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2782 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned *address_as_uint = (unsigned *)address; unsigned old = *address_as_uint; unsigned assumed; do { assumed = old; __nv_bfloat162 new_val = __hadd2(val, *((__nv_bfloat162 *)(&assumed))); old = atomicCAS(address_as_uint, assumed, *((unsigned *)(&new_val))); } while (assumed != old); return *((__nv_bfloat162 *)(&old)); 
# 2782 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2799 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 2801 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 atomicAdd(__nv_bfloat16 *const address, const __nv_bfloat16 val) 
# 2802
{int volatile ___ = 1;(void)address;(void)val;
# 2821 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2802 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2803 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2803 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned short *address_as_us = (unsigned short *)address; unsigned short old = *address_as_us; unsigned short assumed; do { assumed = old; old = atomicCAS(address_as_us, assumed, __bfloat16_as_ushort(__hadd(val, __ushort_as_bfloat16(assumed)))); } while (assumed != old); return __ushort_as_bfloat16(old); 
# 2803 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2821 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 2837 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
typedef __nv_bfloat16 nv_bfloat16; 
# 2838
typedef __nv_bfloat162 nv_bfloat162; 
# 91 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
namespace nvcuda { 
# 92
namespace wmma { 
# 96
__attribute__((unused)) inline float __float_to_tf32(float in) 
# 97
{int volatile ___ = 1;(void)in;
# 103
::exit(___);}
#if 0
# 97
{ 
# 98
float ret; 
# 99
__asm__("{\n  .reg .b32 __$1;\n   cvt.rna.tf32.f32 __$1, %1;\n   mov.b32 %0, __$1;\n}\n" : "=f" (ret) : "f" (in)); 
# 102
return ret; 
# 103
} 
#endif
# 109 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
struct row_major; 
# 110
struct col_major; 
# 111
struct matrix_a; 
# 112
struct matrix_b; 
# 113
struct accumulator; 
# 116
namespace precision { 
# 117
struct tf32; 
# 118
}
# 121
namespace experimental { 
# 122
namespace precision { 
# 123
struct u4; 
# 124
struct s4; 
# 125
struct b1; 
# 126
}
# 127
enum bmmaBitOp { bmmaBitOpXOR = 1, 
# 129
bmmaBitOpAND
# 131
}; 
# 132
enum bmmaAccumulateOp { bmmaAccumulateOpPOPC = 1}; 
# 133
}
# 139
enum layout_t { 
# 140
mem_row_major, mem_col_major
# 141
}; 
# 143
template< class T> 
# 144
struct helper_traits { 
# 145
typedef T element_type; 
# 146
typedef T storage_element_type; 
# 147
typedef T fill_argument_type; 
# 148
}; 
# 151
template<> struct helper_traits< experimental::precision::u4>  { 
# 152
typedef experimental::precision::u4 element_type; 
# 153
typedef unsigned storage_element_type; 
# 154
typedef unsigned fill_argument_type; 
# 155
}; 
# 157
template<> struct helper_traits< experimental::precision::s4>  { 
# 158
typedef experimental::precision::s4 element_type; 
# 159
typedef int storage_element_type; 
# 160
typedef int fill_argument_type; 
# 161
}; 
# 163
template<> struct helper_traits< experimental::precision::b1>  { 
# 164
typedef experimental::precision::b1 element_type; 
# 165
typedef unsigned storage_element_type; 
# 166
typedef unsigned fill_argument_type; 
# 167
}; 
# 171
template<> struct helper_traits< precision::tf32>  { 
# 172
typedef precision::tf32 element_type; 
# 173
typedef float storage_element_type; 
# 174
typedef float fill_argument_type; 
# 175
}; 
# 182
template< class T, int size, int packed_size = size> 
# 183
struct __attribute((aligned(8))) __frag_base { 
# 186
enum { num_elements = size}; 
# 196 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
enum { num_storage_elements = packed_size}; 
# 199
typedef T element_type; 
# 210 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
typedef typename helper_traits< T> ::storage_element_type storage_element_type; 
# 213
storage_element_type x[num_storage_elements]; 
# 214
}; 
# 216
template< class FragEleType, class StorageType, class ArgType> __attribute__((unused)) static inline StorageType 
# 217
__get_storage_value(ArgType in) {int volatile ___ = 1;(void)in;::exit(___);}
#if 0
# 217
{ return in; } 
#endif
# 222 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
template<> __attribute__((unused)) inline unsigned __get_storage_value< experimental::precision::u4, unsigned, unsigned> (unsigned in) 
# 223
{int volatile ___ = 1;(void)in;
# 229
::exit(___);}
#if 0
# 223
{ 
# 226
unsigned val = in & (15); 
# 227
return (((((((val | (val << 4)) | (val << 8)) | (val << 12)) | (val << 16)) | (val << 20)) | (val << 24)) | (val << 28)); 
# 229
} 
#endif
# 233 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
template<> __attribute__((unused)) inline int __get_storage_value< experimental::precision::s4, int, int> (int in) 
# 234
{int volatile ___ = 1;(void)in;
# 240
::exit(___);}
#if 0
# 234
{ 
# 237
int val = in & 15; 
# 238
return (((((((val | (val << 4)) | (val << 8)) | (val << 12)) | (val << 16)) | (val << 20)) | (val << 24)) | (val << 28)); 
# 240
} 
#endif
# 244 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
template<> __attribute__((unused)) inline unsigned __get_storage_value< experimental::precision::b1, unsigned, unsigned> (unsigned in) 
# 245
{int volatile ___ = 1;(void)in;
# 249
::exit(___);}
#if 0
# 245
{ 
# 248
return (in & (1)) ? 4294967295U : (0); 
# 249
} 
#endif
# 252 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
template< class FragEleType, int size, int packed_size> __attribute__((unused)) static inline void 
# 253
fill_fragment(__frag_base< FragEleType, size, packed_size>  &f, const typename helper_traits< FragEleType> ::fill_argument_type &
# 261
in) {int volatile ___ = 1;(void)f;(void)in;
# 270
::exit(___);}
#if 0
# 261
{ 
# 265
typedef typename helper_traits< FragEleType> ::storage_element_type storage_type; 
# 266
storage_type v = __get_storage_value< FragEleType, typename helper_traits< FragEleType> ::storage_element_type> (in); 
# 268
#pragma unroll
for (
# 268
int i = 0; i < (f.num_storage_elements); i++) { 
# 269
((f.x)[i]) = v; }  
# 270
} 
#endif
# 275 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
template< class Use, int m, int n, int k, class T, class Layout = void> class fragment; 
# 280
template<> class fragment< matrix_a, 16, 16, 16, __half, row_major>  : public __frag_base< __half, 16>  { }; 
# 281
template<> class fragment< matrix_a, 16, 16, 16, __half, col_major>  : public __frag_base< __half, 16>  { }; 
# 282
template<> class fragment< matrix_b, 16, 16, 16, __half, row_major>  : public __frag_base< __half, 16>  { }; 
# 283
template<> class fragment< matrix_b, 16, 16, 16, __half, col_major>  : public __frag_base< __half, 16>  { }; 
# 284
template<> class fragment< accumulator, 16, 16, 16, __half>  : public __frag_base< __half, 8>  { }; 
# 285
template<> class fragment< accumulator, 16, 16, 16, float>  : public __frag_base< float, 8>  { }; 
# 288
template<> class fragment< matrix_a, 16, 16, 16, signed char, row_major>  : public __frag_base< signed char, 8>  { }; 
# 289
template<> class fragment< matrix_a, 16, 16, 16, signed char, col_major>  : public __frag_base< signed char, 8>  { }; 
# 290
template<> class fragment< matrix_a, 16, 16, 16, unsigned char, row_major>  : public __frag_base< unsigned char, 8>  { }; 
# 291
template<> class fragment< matrix_a, 16, 16, 16, unsigned char, col_major>  : public __frag_base< unsigned char, 8>  { }; 
# 292
template<> class fragment< matrix_b, 16, 16, 16, signed char, row_major>  : public __frag_base< signed char, 8>  { }; 
# 293
template<> class fragment< matrix_b, 16, 16, 16, signed char, col_major>  : public __frag_base< signed char, 8>  { }; 
# 294
template<> class fragment< matrix_b, 16, 16, 16, unsigned char, row_major>  : public __frag_base< unsigned char, 8>  { }; 
# 295
template<> class fragment< matrix_b, 16, 16, 16, unsigned char, col_major>  : public __frag_base< unsigned char, 8>  { }; 
# 296
template<> class fragment< accumulator, 16, 16, 16, int>  : public __frag_base< int, 8>  { }; 
# 300
template<> class fragment< matrix_a, 16, 16, 16, __nv_bfloat16, row_major>  : public __frag_base< __nv_bfloat16, 8>  { }; 
# 301
template<> class fragment< matrix_a, 16, 16, 16, __nv_bfloat16, col_major>  : public __frag_base< __nv_bfloat16, 8>  { }; 
# 302
template<> class fragment< matrix_b, 16, 16, 16, __nv_bfloat16, row_major>  : public __frag_base< __nv_bfloat16, 8>  { }; 
# 303
template<> class fragment< matrix_b, 16, 16, 16, __nv_bfloat16, col_major>  : public __frag_base< __nv_bfloat16, 8>  { }; 
# 309
template<> class fragment< matrix_a, 32, 8, 16, __half, row_major>  : public __frag_base< __half, 16>  { }; 
# 310
template<> class fragment< matrix_a, 32, 8, 16, __half, col_major>  : public __frag_base< __half, 16>  { }; 
# 311
template<> class fragment< matrix_b, 32, 8, 16, __half, row_major>  : public __frag_base< __half, 16>  { }; 
# 312
template<> class fragment< matrix_b, 32, 8, 16, __half, col_major>  : public __frag_base< __half, 16>  { }; 
# 313
template<> class fragment< accumulator, 32, 8, 16, __half>  : public __frag_base< __half, 8>  { }; 
# 314
template<> class fragment< accumulator, 32, 8, 16, float>  : public __frag_base< float, 8>  { }; 
# 317
template<> class fragment< matrix_a, 32, 8, 16, signed char, row_major>  : public __frag_base< signed char, 16>  { }; 
# 318
template<> class fragment< matrix_a, 32, 8, 16, signed char, col_major>  : public __frag_base< signed char, 16>  { }; 
# 319
template<> class fragment< matrix_a, 32, 8, 16, unsigned char, row_major>  : public __frag_base< unsigned char, 16>  { }; 
# 320
template<> class fragment< matrix_a, 32, 8, 16, unsigned char, col_major>  : public __frag_base< unsigned char, 16>  { }; 
# 321
template<> class fragment< matrix_b, 32, 8, 16, signed char, row_major>  : public __frag_base< signed char, 4>  { }; 
# 322
template<> class fragment< matrix_b, 32, 8, 16, signed char, col_major>  : public __frag_base< signed char, 4>  { }; 
# 323
template<> class fragment< matrix_b, 32, 8, 16, unsigned char, row_major>  : public __frag_base< unsigned char, 4>  { }; 
# 324
template<> class fragment< matrix_b, 32, 8, 16, unsigned char, col_major>  : public __frag_base< unsigned char, 4>  { }; 
# 325
template<> class fragment< accumulator, 32, 8, 16, int>  : public __frag_base< int, 8>  { }; 
# 329
template<> class fragment< matrix_a, 32, 8, 16, __nv_bfloat16, row_major>  : public __frag_base< __nv_bfloat16, 16>  { }; 
# 330
template<> class fragment< matrix_a, 32, 8, 16, __nv_bfloat16, col_major>  : public __frag_base< __nv_bfloat16, 16>  { }; 
# 331
template<> class fragment< matrix_b, 32, 8, 16, __nv_bfloat16, row_major>  : public __frag_base< __nv_bfloat16, 4>  { }; 
# 332
template<> class fragment< matrix_b, 32, 8, 16, __nv_bfloat16, col_major>  : public __frag_base< __nv_bfloat16, 4>  { }; 
# 338
template<> class fragment< matrix_a, 8, 32, 16, __half, row_major>  : public __frag_base< __half, 16>  { }; 
# 339
template<> class fragment< matrix_a, 8, 32, 16, __half, col_major>  : public __frag_base< __half, 16>  { }; 
# 340
template<> class fragment< matrix_b, 8, 32, 16, __half, row_major>  : public __frag_base< __half, 16>  { }; 
# 341
template<> class fragment< matrix_b, 8, 32, 16, __half, col_major>  : public __frag_base< __half, 16>  { }; 
# 342
template<> class fragment< accumulator, 8, 32, 16, __half>  : public __frag_base< __half, 8>  { }; 
# 343
template<> class fragment< accumulator, 8, 32, 16, float>  : public __frag_base< float, 8>  { }; 
# 346
template<> class fragment< matrix_a, 8, 32, 16, signed char, row_major>  : public __frag_base< signed char, 4>  { }; 
# 347
template<> class fragment< matrix_a, 8, 32, 16, signed char, col_major>  : public __frag_base< signed char, 4>  { }; 
# 348
template<> class fragment< matrix_a, 8, 32, 16, unsigned char, row_major>  : public __frag_base< unsigned char, 4>  { }; 
# 349
template<> class fragment< matrix_a, 8, 32, 16, unsigned char, col_major>  : public __frag_base< unsigned char, 4>  { }; 
# 350
template<> class fragment< matrix_b, 8, 32, 16, signed char, row_major>  : public __frag_base< signed char, 16>  { }; 
# 351
template<> class fragment< matrix_b, 8, 32, 16, signed char, col_major>  : public __frag_base< signed char, 16>  { }; 
# 352
template<> class fragment< matrix_b, 8, 32, 16, unsigned char, row_major>  : public __frag_base< unsigned char, 16>  { }; 
# 353
template<> class fragment< matrix_b, 8, 32, 16, unsigned char, col_major>  : public __frag_base< unsigned char, 16>  { }; 
# 354
template<> class fragment< accumulator, 8, 32, 16, int>  : public __frag_base< int, 8>  { }; 
# 358
template<> class fragment< matrix_a, 8, 32, 16, __nv_bfloat16, row_major>  : public __frag_base< __nv_bfloat16, 4>  { }; 
# 359
template<> class fragment< matrix_a, 8, 32, 16, __nv_bfloat16, col_major>  : public __frag_base< __nv_bfloat16, 4>  { }; 
# 360
template<> class fragment< matrix_b, 8, 32, 16, __nv_bfloat16, row_major>  : public __frag_base< __nv_bfloat16, 16>  { }; 
# 361
template<> class fragment< matrix_b, 8, 32, 16, __nv_bfloat16, col_major>  : public __frag_base< __nv_bfloat16, 16>  { }; 
# 368
template<> class fragment< matrix_a, 8, 8, 32, experimental::precision::u4, row_major>  : public __frag_base< experimental::precision::u4, 8, 1>  { }; 
# 369
template<> class fragment< matrix_a, 8, 8, 32, experimental::precision::s4, row_major>  : public __frag_base< experimental::precision::s4, 8, 1>  { }; 
# 370
template<> class fragment< matrix_b, 8, 8, 32, experimental::precision::u4, col_major>  : public __frag_base< experimental::precision::u4, 8, 1>  { }; 
# 371
template<> class fragment< matrix_b, 8, 8, 32, experimental::precision::s4, col_major>  : public __frag_base< experimental::precision::s4, 8, 1>  { }; 
# 372
template<> class fragment< accumulator, 8, 8, 32, int>  : public __frag_base< int, 2>  { }; 
# 377
template<> class fragment< matrix_a, 8, 8, 128, experimental::precision::b1, row_major>  : public __frag_base< experimental::precision::b1, 32, 1>  { }; 
# 378
template<> class fragment< matrix_b, 8, 8, 128, experimental::precision::b1, col_major>  : public __frag_base< experimental::precision::b1, 32, 1>  { }; 
# 379
template<> class fragment< accumulator, 8, 8, 128, int>  : public __frag_base< int, 2>  { }; 
# 386
template<> class fragment< matrix_a, 16, 16, 8, precision::tf32, row_major>  : public __frag_base< precision::tf32, 4>  { }; 
# 387
template<> class fragment< matrix_a, 16, 16, 8, precision::tf32, col_major>  : public __frag_base< precision::tf32, 4>  { }; 
# 388
template<> class fragment< matrix_b, 16, 16, 8, precision::tf32, row_major>  : public __frag_base< precision::tf32, 4>  { }; 
# 389
template<> class fragment< matrix_b, 16, 16, 8, precision::tf32, col_major>  : public __frag_base< precision::tf32, 4>  { }; 
# 390
template<> class fragment< accumulator, 16, 16, 8, float>  : public __frag_base< float, 8>  { }; 
# 395
template<> class fragment< matrix_a, 8, 8, 4, double, row_major>  : public __frag_base< double, 1>  { }; 
# 396
template<> class fragment< matrix_a, 8, 8, 4, double, col_major>  : public __frag_base< double, 1>  { }; 
# 397
template<> class fragment< matrix_b, 8, 8, 4, double, row_major>  : public __frag_base< double, 1>  { }; 
# 398
template<> class fragment< matrix_b, 8, 8, 4, double, col_major>  : public __frag_base< double, 1>  { }; 
# 399
template<> class fragment< accumulator, 8, 8, 4, double>  : public __frag_base< double, 2>  { }; 
# 406
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 16, __half, row_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 406
{ } 
#endif
# 407 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 16, __half, col_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 407
{ } 
#endif
# 408 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 16, __half, row_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 408
{ } 
#endif
# 409 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 16, __half, col_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 409
{ } 
#endif
# 410 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 16, 16, 16, __half>  &a, const __half *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 410
{ } 
#endif
# 411 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 16, 16, 16, float>  &a, const float *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 411
{ } 
#endif
# 414 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 16, signed char, row_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 414
{ } 
#endif
# 415 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 16, signed char, col_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 415
{ } 
#endif
# 416 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 16, unsigned char, row_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 416
{ } 
#endif
# 417 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 16, unsigned char, col_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 417
{ } 
#endif
# 418 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 16, signed char, row_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 418
{ } 
#endif
# 419 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 16, signed char, col_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 419
{ } 
#endif
# 420 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 16, unsigned char, row_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 420
{ } 
#endif
# 421 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 16, unsigned char, col_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 421
{ } 
#endif
# 422 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 16, 16, 16, int>  &a, const int *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 422
{ } 
#endif
# 426 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 16, __nv_bfloat16, row_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 426
{ } 
#endif
# 427 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 16, __nv_bfloat16, col_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 427
{ } 
#endif
# 428 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 16, __nv_bfloat16, row_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 428
{ } 
#endif
# 429 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 16, __nv_bfloat16, col_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 429
{ } 
#endif
# 435 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 32, 8, 16, __half, row_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 435
{ } 
#endif
# 436 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 32, 8, 16, __half, col_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 436
{ } 
#endif
# 437 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 32, 8, 16, __half, row_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 437
{ } 
#endif
# 438 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 32, 8, 16, __half, col_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 438
{ } 
#endif
# 439 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 32, 8, 16, __half>  &a, const __half *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 439
{ } 
#endif
# 440 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 32, 8, 16, float>  &a, const float *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 440
{ } 
#endif
# 443 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 32, 8, 16, signed char, row_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 443
{ } 
#endif
# 444 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 32, 8, 16, signed char, col_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 444
{ } 
#endif
# 445 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 32, 8, 16, unsigned char, row_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 445
{ } 
#endif
# 446 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 32, 8, 16, unsigned char, col_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 446
{ } 
#endif
# 447 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 32, 8, 16, signed char, row_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 447
{ } 
#endif
# 448 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 32, 8, 16, signed char, col_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 448
{ } 
#endif
# 449 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 32, 8, 16, unsigned char, row_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 449
{ } 
#endif
# 450 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 32, 8, 16, unsigned char, col_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 450
{ } 
#endif
# 451 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 32, 8, 16, int>  &a, const int *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 451
{ } 
#endif
# 455 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 32, 8, 16, __nv_bfloat16, row_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 455
{ } 
#endif
# 456 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 32, 8, 16, __nv_bfloat16, col_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 456
{ } 
#endif
# 457 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 32, 8, 16, __nv_bfloat16, row_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 457
{ } 
#endif
# 458 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 32, 8, 16, __nv_bfloat16, col_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 458
{ } 
#endif
# 464 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 32, 16, __half, row_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 464
{ } 
#endif
# 465 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 32, 16, __half, col_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 465
{ } 
#endif
# 466 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 32, 16, __half, row_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 466
{ } 
#endif
# 467 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 32, 16, __half, col_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 467
{ } 
#endif
# 468 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 8, 32, 16, __half>  &a, const __half *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 468
{ } 
#endif
# 469 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 8, 32, 16, float>  &a, const float *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 469
{ } 
#endif
# 472 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 32, 16, signed char, row_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 472
{ } 
#endif
# 473 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 32, 16, signed char, col_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 473
{ } 
#endif
# 474 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 32, 16, unsigned char, row_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 474
{ } 
#endif
# 475 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 32, 16, unsigned char, col_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 475
{ } 
#endif
# 476 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 32, 16, signed char, row_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 476
{ } 
#endif
# 477 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 32, 16, signed char, col_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 477
{ } 
#endif
# 478 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 32, 16, unsigned char, row_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 478
{ } 
#endif
# 479 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 32, 16, unsigned char, col_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 479
{ } 
#endif
# 480 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 8, 32, 16, int>  &a, const int *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 480
{ } 
#endif
# 484 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 32, 16, __nv_bfloat16, row_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 484
{ } 
#endif
# 485 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 32, 16, __nv_bfloat16, col_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 485
{ } 
#endif
# 486 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 32, 16, __nv_bfloat16, row_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 486
{ } 
#endif
# 487 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 32, 16, __nv_bfloat16, col_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 487
{ } 
#endif
# 494 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 8, 32, experimental::precision::s4, row_major>  &a, const void *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 494
{ } 
#endif
# 495 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 8, 32, experimental::precision::u4, row_major>  &a, const void *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 495
{ } 
#endif
# 496 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 8, 32, experimental::precision::s4, col_major>  &a, const void *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 496
{ } 
#endif
# 497 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 8, 32, experimental::precision::u4, col_major>  &a, const void *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 497
{ } 
#endif
# 499 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 8, 8, 32, int>  &a, const int *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 499
{ } 
#endif
# 504 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 8, 128, experimental::precision::b1, row_major>  &a, const void *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 504
{ } 
#endif
# 505 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 8, 128, experimental::precision::b1, col_major>  &a, const void *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 505
{ } 
#endif
# 506 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 8, 8, 128, int>  &a, const int *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 506
{ } 
#endif
# 515 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 8, precision::tf32, row_major>  &a, const float *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 515
{ } 
#endif
# 516 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 8, precision::tf32, col_major>  &a, const float *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 516
{ } 
#endif
# 517 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 8, precision::tf32, row_major>  &a, const float *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 517
{ } 
#endif
# 518 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 8, precision::tf32, col_major>  &a, const float *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 518
{ } 
#endif
# 519 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 16, 16, 8, float>  &a, const float *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 519
{ } 
#endif
# 524 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 8, 4, double, row_major>  &a, const double *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 524
{ } 
#endif
# 525 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 8, 4, double, col_major>  &a, const double *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 525
{ } 
#endif
# 526 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 8, 4, double, row_major>  &a, const double *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 526
{ } 
#endif
# 527 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 8, 4, double, col_major>  &a, const double *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 527
{ } 
#endif
# 528 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 8, 8, 4, double>  &a, const double *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 528
{ } 
#endif
# 534 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(__half *p, const fragment< accumulator, 16, 16, 16, __half>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 534
{ } 
#endif
# 535 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(float *p, const fragment< accumulator, 16, 16, 16, float>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 535
{ } 
#endif
# 537 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(int *p, const fragment< accumulator, 16, 16, 16, int>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 537
{ } 
#endif
# 543 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(__half *p, const fragment< accumulator, 32, 8, 16, __half>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 543
{ } 
#endif
# 544 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(float *p, const fragment< accumulator, 32, 8, 16, float>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 544
{ } 
#endif
# 546 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(int *p, const fragment< accumulator, 32, 8, 16, int>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 546
{ } 
#endif
# 552 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(__half *p, const fragment< accumulator, 8, 32, 16, __half>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 552
{ } 
#endif
# 553 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(float *p, const fragment< accumulator, 8, 32, 16, float>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 553
{ } 
#endif
# 555 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(int *p, const fragment< accumulator, 8, 32, 16, int>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 555
{ } 
#endif
# 562 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(int *p, const fragment< accumulator, 8, 8, 32, int>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 562
{ } 
#endif
# 567 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(int *p, const fragment< accumulator, 8, 8, 128, int>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 567
{ } 
#endif
# 575 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(float *p, const fragment< accumulator, 16, 16, 8, float>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 575
{ } 
#endif
# 580 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(double *p, const fragment< accumulator, 8, 8, 4, double>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 580
{ } 
#endif
# 586 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, __half>  &d, const fragment< matrix_a, 16, 16, 16, __half, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, col_major>  &b, const fragment< accumulator, 16, 16, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 586
{ } 
#endif
# 587 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, __half>  &d, const fragment< matrix_a, 16, 16, 16, __half, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, col_major>  &b, const fragment< accumulator, 16, 16, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 587
{ } 
#endif
# 588 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, __half>  &d, const fragment< matrix_a, 16, 16, 16, __half, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, row_major>  &b, const fragment< accumulator, 16, 16, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 588
{ } 
#endif
# 589 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, __half>  &d, const fragment< matrix_a, 16, 16, 16, __half, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, row_major>  &b, const fragment< accumulator, 16, 16, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 589
{ } 
#endif
# 590 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __half, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, col_major>  &b, const fragment< accumulator, 16, 16, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 590
{ } 
#endif
# 591 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __half, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, col_major>  &b, const fragment< accumulator, 16, 16, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 591
{ } 
#endif
# 592 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __half, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, row_major>  &b, const fragment< accumulator, 16, 16, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 592
{ } 
#endif
# 593 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __half, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, row_major>  &b, const fragment< accumulator, 16, 16, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 593
{ } 
#endif
# 594 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __half, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, col_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 594
{ } 
#endif
# 595 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __half, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, col_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 595
{ } 
#endif
# 596 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __half, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, row_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 596
{ } 
#endif
# 597 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __half, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, row_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 597
{ } 
#endif
# 598 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, __half>  &d, const fragment< matrix_a, 16, 16, 16, __half, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, col_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 598
{ } 
#endif
# 599 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, __half>  &d, const fragment< matrix_a, 16, 16, 16, __half, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, col_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 599
{ } 
#endif
# 600 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, __half>  &d, const fragment< matrix_a, 16, 16, 16, __half, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, row_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 600
{ } 
#endif
# 601 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, __half>  &d, const fragment< matrix_a, 16, 16, 16, __half, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, row_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 601
{ } 
#endif
# 604 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, int>  &d, const fragment< matrix_a, 16, 16, 16, signed char, row_major>  &a, const fragment< matrix_b, 16, 16, 16, signed char, col_major>  &b, const fragment< accumulator, 16, 16, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 604
{ } 
#endif
# 605 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, int>  &d, const fragment< matrix_a, 16, 16, 16, signed char, col_major>  &a, const fragment< matrix_b, 16, 16, 16, signed char, col_major>  &b, const fragment< accumulator, 16, 16, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 605
{ } 
#endif
# 606 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, int>  &d, const fragment< matrix_a, 16, 16, 16, signed char, row_major>  &a, const fragment< matrix_b, 16, 16, 16, signed char, row_major>  &b, const fragment< accumulator, 16, 16, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 606
{ } 
#endif
# 607 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, int>  &d, const fragment< matrix_a, 16, 16, 16, signed char, col_major>  &a, const fragment< matrix_b, 16, 16, 16, signed char, row_major>  &b, const fragment< accumulator, 16, 16, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 607
{ } 
#endif
# 608 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, int>  &d, const fragment< matrix_a, 16, 16, 16, unsigned char, row_major>  &a, const fragment< matrix_b, 16, 16, 16, unsigned char, col_major>  &b, const fragment< accumulator, 16, 16, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 608
{ } 
#endif
# 609 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, int>  &d, const fragment< matrix_a, 16, 16, 16, unsigned char, col_major>  &a, const fragment< matrix_b, 16, 16, 16, unsigned char, col_major>  &b, const fragment< accumulator, 16, 16, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 609
{ } 
#endif
# 610 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, int>  &d, const fragment< matrix_a, 16, 16, 16, unsigned char, row_major>  &a, const fragment< matrix_b, 16, 16, 16, unsigned char, row_major>  &b, const fragment< accumulator, 16, 16, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 610
{ } 
#endif
# 611 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, int>  &d, const fragment< matrix_a, 16, 16, 16, unsigned char, col_major>  &a, const fragment< matrix_b, 16, 16, 16, unsigned char, row_major>  &b, const fragment< accumulator, 16, 16, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 611
{ } 
#endif
# 615 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __nv_bfloat16, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __nv_bfloat16, col_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 615
{ } 
#endif
# 616 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __nv_bfloat16, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __nv_bfloat16, col_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 616
{ } 
#endif
# 617 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __nv_bfloat16, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __nv_bfloat16, row_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 617
{ } 
#endif
# 618 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __nv_bfloat16, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __nv_bfloat16, row_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 618
{ } 
#endif
# 624 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, __half>  &d, const fragment< matrix_a, 32, 8, 16, __half, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, col_major>  &b, const fragment< accumulator, 32, 8, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 624
{ } 
#endif
# 625 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, __half>  &d, const fragment< matrix_a, 32, 8, 16, __half, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, col_major>  &b, const fragment< accumulator, 32, 8, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 625
{ } 
#endif
# 626 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, __half>  &d, const fragment< matrix_a, 32, 8, 16, __half, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, row_major>  &b, const fragment< accumulator, 32, 8, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 626
{ } 
#endif
# 627 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, __half>  &d, const fragment< matrix_a, 32, 8, 16, __half, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, row_major>  &b, const fragment< accumulator, 32, 8, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 627
{ } 
#endif
# 628 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __half, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, col_major>  &b, const fragment< accumulator, 32, 8, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 628
{ } 
#endif
# 629 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __half, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, col_major>  &b, const fragment< accumulator, 32, 8, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 629
{ } 
#endif
# 630 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __half, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, row_major>  &b, const fragment< accumulator, 32, 8, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 630
{ } 
#endif
# 631 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __half, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, row_major>  &b, const fragment< accumulator, 32, 8, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 631
{ } 
#endif
# 632 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __half, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, col_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 632
{ } 
#endif
# 633 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __half, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, col_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 633
{ } 
#endif
# 634 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __half, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, row_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 634
{ } 
#endif
# 635 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __half, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, row_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 635
{ } 
#endif
# 636 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, __half>  &d, const fragment< matrix_a, 32, 8, 16, __half, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, col_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 636
{ } 
#endif
# 637 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, __half>  &d, const fragment< matrix_a, 32, 8, 16, __half, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, col_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 637
{ } 
#endif
# 638 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, __half>  &d, const fragment< matrix_a, 32, 8, 16, __half, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, row_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 638
{ } 
#endif
# 639 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, __half>  &d, const fragment< matrix_a, 32, 8, 16, __half, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, row_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 639
{ } 
#endif
# 642 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, int>  &d, const fragment< matrix_a, 32, 8, 16, signed char, row_major>  &a, const fragment< matrix_b, 32, 8, 16, signed char, col_major>  &b, const fragment< accumulator, 32, 8, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 642
{ } 
#endif
# 643 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, int>  &d, const fragment< matrix_a, 32, 8, 16, signed char, col_major>  &a, const fragment< matrix_b, 32, 8, 16, signed char, col_major>  &b, const fragment< accumulator, 32, 8, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 643
{ } 
#endif
# 644 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, int>  &d, const fragment< matrix_a, 32, 8, 16, signed char, row_major>  &a, const fragment< matrix_b, 32, 8, 16, signed char, row_major>  &b, const fragment< accumulator, 32, 8, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 644
{ } 
#endif
# 645 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, int>  &d, const fragment< matrix_a, 32, 8, 16, signed char, col_major>  &a, const fragment< matrix_b, 32, 8, 16, signed char, row_major>  &b, const fragment< accumulator, 32, 8, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 645
{ } 
#endif
# 646 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, int>  &d, const fragment< matrix_a, 32, 8, 16, unsigned char, row_major>  &a, const fragment< matrix_b, 32, 8, 16, unsigned char, col_major>  &b, const fragment< accumulator, 32, 8, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 646
{ } 
#endif
# 647 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, int>  &d, const fragment< matrix_a, 32, 8, 16, unsigned char, col_major>  &a, const fragment< matrix_b, 32, 8, 16, unsigned char, col_major>  &b, const fragment< accumulator, 32, 8, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 647
{ } 
#endif
# 648 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, int>  &d, const fragment< matrix_a, 32, 8, 16, unsigned char, row_major>  &a, const fragment< matrix_b, 32, 8, 16, unsigned char, row_major>  &b, const fragment< accumulator, 32, 8, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 648
{ } 
#endif
# 649 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, int>  &d, const fragment< matrix_a, 32, 8, 16, unsigned char, col_major>  &a, const fragment< matrix_b, 32, 8, 16, unsigned char, row_major>  &b, const fragment< accumulator, 32, 8, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 649
{ } 
#endif
# 653 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __nv_bfloat16, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __nv_bfloat16, col_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 653
{ } 
#endif
# 654 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __nv_bfloat16, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __nv_bfloat16, col_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 654
{ } 
#endif
# 655 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __nv_bfloat16, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __nv_bfloat16, row_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 655
{ } 
#endif
# 656 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __nv_bfloat16, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __nv_bfloat16, row_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 656
{ } 
#endif
# 662 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, __half>  &d, const fragment< matrix_a, 8, 32, 16, __half, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, col_major>  &b, const fragment< accumulator, 8, 32, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 662
{ } 
#endif
# 663 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, __half>  &d, const fragment< matrix_a, 8, 32, 16, __half, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, col_major>  &b, const fragment< accumulator, 8, 32, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 663
{ } 
#endif
# 664 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, __half>  &d, const fragment< matrix_a, 8, 32, 16, __half, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, row_major>  &b, const fragment< accumulator, 8, 32, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 664
{ } 
#endif
# 665 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, __half>  &d, const fragment< matrix_a, 8, 32, 16, __half, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, row_major>  &b, const fragment< accumulator, 8, 32, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 665
{ } 
#endif
# 666 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __half, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, col_major>  &b, const fragment< accumulator, 8, 32, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 666
{ } 
#endif
# 667 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __half, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, col_major>  &b, const fragment< accumulator, 8, 32, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 667
{ } 
#endif
# 668 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __half, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, row_major>  &b, const fragment< accumulator, 8, 32, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 668
{ } 
#endif
# 669 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __half, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, row_major>  &b, const fragment< accumulator, 8, 32, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 669
{ } 
#endif
# 670 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __half, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, col_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 670
{ } 
#endif
# 671 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __half, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, col_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 671
{ } 
#endif
# 672 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __half, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, row_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 672
{ } 
#endif
# 673 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __half, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, row_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 673
{ } 
#endif
# 674 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, __half>  &d, const fragment< matrix_a, 8, 32, 16, __half, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, col_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 674
{ } 
#endif
# 675 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, __half>  &d, const fragment< matrix_a, 8, 32, 16, __half, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, col_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 675
{ } 
#endif
# 676 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, __half>  &d, const fragment< matrix_a, 8, 32, 16, __half, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, row_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 676
{ } 
#endif
# 677 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, __half>  &d, const fragment< matrix_a, 8, 32, 16, __half, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, row_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 677
{ } 
#endif
# 680 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, int>  &d, const fragment< matrix_a, 8, 32, 16, signed char, row_major>  &a, const fragment< matrix_b, 8, 32, 16, signed char, col_major>  &b, const fragment< accumulator, 8, 32, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 680
{ } 
#endif
# 681 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, int>  &d, const fragment< matrix_a, 8, 32, 16, signed char, col_major>  &a, const fragment< matrix_b, 8, 32, 16, signed char, col_major>  &b, const fragment< accumulator, 8, 32, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 681
{ } 
#endif
# 682 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, int>  &d, const fragment< matrix_a, 8, 32, 16, signed char, row_major>  &a, const fragment< matrix_b, 8, 32, 16, signed char, row_major>  &b, const fragment< accumulator, 8, 32, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 682
{ } 
#endif
# 683 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, int>  &d, const fragment< matrix_a, 8, 32, 16, signed char, col_major>  &a, const fragment< matrix_b, 8, 32, 16, signed char, row_major>  &b, const fragment< accumulator, 8, 32, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 683
{ } 
#endif
# 684 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, int>  &d, const fragment< matrix_a, 8, 32, 16, unsigned char, row_major>  &a, const fragment< matrix_b, 8, 32, 16, unsigned char, col_major>  &b, const fragment< accumulator, 8, 32, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 684
{ } 
#endif
# 685 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, int>  &d, const fragment< matrix_a, 8, 32, 16, unsigned char, col_major>  &a, const fragment< matrix_b, 8, 32, 16, unsigned char, col_major>  &b, const fragment< accumulator, 8, 32, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 685
{ } 
#endif
# 686 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, int>  &d, const fragment< matrix_a, 8, 32, 16, unsigned char, row_major>  &a, const fragment< matrix_b, 8, 32, 16, unsigned char, row_major>  &b, const fragment< accumulator, 8, 32, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 686
{ } 
#endif
# 687 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, int>  &d, const fragment< matrix_a, 8, 32, 16, unsigned char, col_major>  &a, const fragment< matrix_b, 8, 32, 16, unsigned char, row_major>  &b, const fragment< accumulator, 8, 32, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 687
{ } 
#endif
# 691 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __nv_bfloat16, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __nv_bfloat16, col_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 691
{ } 
#endif
# 692 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __nv_bfloat16, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __nv_bfloat16, col_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 692
{ } 
#endif
# 693 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __nv_bfloat16, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __nv_bfloat16, row_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 693
{ } 
#endif
# 694 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __nv_bfloat16, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __nv_bfloat16, row_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 694
{ } 
#endif
# 701 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 8, 32, int>  &d, const fragment< matrix_a, 8, 8, 32, experimental::precision::s4, row_major>  &a, const fragment< matrix_b, 8, 8, 32, experimental::precision::s4, col_major>  &b, const fragment< accumulator, 8, 8, 32, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 701
{ } 
#endif
# 702 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 8, 32, int>  &d, const fragment< matrix_a, 8, 8, 32, experimental::precision::u4, row_major>  &a, const fragment< matrix_b, 8, 8, 32, experimental::precision::u4, col_major>  &b, const fragment< accumulator, 8, 8, 32, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 702
{ } 
#endif
# 708 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void bmma_sync(fragment< accumulator, 8, 8, 128, int>  &d, const fragment< matrix_a, 8, 8, 128, experimental::precision::b1, row_major>  &a, const fragment< matrix_b, 8, 8, 128, experimental::precision::b1, col_major>  &b, const fragment< accumulator, 8, 8, 128, int>  &c, experimental::bmmaBitOp = experimental::bmmaBitOpXOR, experimental::bmmaAccumulateOp = experimental::bmmaAccumulateOpPOPC) 
# 710
{int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 710
{ } 
#endif
# 718 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 8, float>  &d, const fragment< matrix_a, 16, 16, 8, precision::tf32, row_major>  &a, const fragment< matrix_b, 16, 16, 8, precision::tf32, col_major>  &b, const fragment< accumulator, 16, 16, 8, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 718
{ } 
#endif
# 719 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 8, float>  &d, const fragment< matrix_a, 16, 16, 8, precision::tf32, col_major>  &a, const fragment< matrix_b, 16, 16, 8, precision::tf32, col_major>  &b, const fragment< accumulator, 16, 16, 8, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 719
{ } 
#endif
# 720 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 8, float>  &d, const fragment< matrix_a, 16, 16, 8, precision::tf32, row_major>  &a, const fragment< matrix_b, 16, 16, 8, precision::tf32, row_major>  &b, const fragment< accumulator, 16, 16, 8, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 720
{ } 
#endif
# 721 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 8, float>  &d, const fragment< matrix_a, 16, 16, 8, precision::tf32, col_major>  &a, const fragment< matrix_b, 16, 16, 8, precision::tf32, row_major>  &b, const fragment< accumulator, 16, 16, 8, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 721
{ } 
#endif
# 726 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 8, 4, double>  &d, const fragment< matrix_a, 8, 8, 4, double, row_major>  &a, const fragment< matrix_b, 8, 8, 4, double, col_major>  &b, const fragment< accumulator, 8, 8, 4, double>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 726
{ } 
#endif
# 727 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 8, 4, double>  &d, const fragment< matrix_a, 8, 8, 4, double, col_major>  &a, const fragment< matrix_b, 8, 8, 4, double, col_major>  &b, const fragment< accumulator, 8, 8, 4, double>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 727
{ } 
#endif
# 728 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 8, 4, double>  &d, const fragment< matrix_a, 8, 8, 4, double, row_major>  &a, const fragment< matrix_b, 8, 8, 4, double, row_major>  &b, const fragment< accumulator, 8, 8, 4, double>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 728
{ } 
#endif
# 729 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 8, 4, double>  &d, const fragment< matrix_a, 8, 8, 4, double, col_major>  &a, const fragment< matrix_b, 8, 8, 4, double, row_major>  &b, const fragment< accumulator, 8, 8, 4, double>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 729
{ } 
#endif
# 731 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/mma.h"
}
# 732
}
# 8 "bench_mma.cu"
__attribute((always_inline)) __attribute__((unused)) inline unsigned lane_id() 
# 9
{int volatile ___ = 1;
# 13
::exit(___);}
#if 0
# 9
{ 
# 10
unsigned ret; 
# 11
__asm__ volatile("mov.u32 %0, %laneid;" : "=r" (ret) :); 
# 12
return ret; 
# 13
} 
#endif
# 15 "bench_mma.cu"
__attribute((always_inline)) __attribute__((unused)) inline unsigned warp_id() 
# 16
{int volatile ___ = 1;
# 21
::exit(___);}
#if 0
# 16
{ 
# 18
unsigned ret; 
# 19
__asm__ volatile("mov.u32 %0, %warpid;" : "=r" (ret) :); 
# 20
return ret; 
# 21
} 
#endif
# 45 "bench_mma.cu"
void mma_ubench(uint64_t *startClk, uint64_t *stopClk, float *a, float *b, float *res, uint32_t 
# 46
strid) ;
#if 0
# 46
{ 
# 48
uint32_t tid = __device_builtin_variable_threadIdx.x; 
# 49
uint32_t gid = ((__device_builtin_variable_blockIdx.x) * (__device_builtin_variable_blockDim.x)) + tid; 
# 50
uint32_t warpid = gid / __device_builtin_variable_warpSize; 
# 52
a = (a + ((warpid * (16)) * (4))); 
# 53
b = (b + ((warpid * (8)) * (4))); 
# 54
res = (res + ((warpid * (16)) * (8))); 
# 57
float frag_A[2 * 1]; 
# 58
float frag_B[1 * 1]; 
# 59
float frag_D[4 * 1]; 
# 62
for (int i = 0; i < (2 * 1); i++) { 
# 63
(frag_A[i]) = (a[i + (lane_id() * (4))]); 
# 66
}  
# 67
for (int i = 0; i < (1 * 1); i++) { 
# 68
(frag_B[i]) = (b[i + (lane_id() * (1))]); 
# 70
}  
# 73
for (int i = 0; i < (4 * 1); i++) { 
# 75
(frag_D[i]) = (0.0F); 
# 77
}  
# 79
const uint32_t *A = reinterpret_cast< const uint32_t *>(&(frag_A[0])); 
# 80
const uint32_t *B = reinterpret_cast< const uint32_t *>(&(frag_B[0])); 
# 81
float *C = reinterpret_cast< float *>(&(frag_D[0])); 
# 82
float *D = C; 
# 87
float fpuC = frag_D[0]; 
# 91
int intC = (__device_builtin_variable_threadIdx.x) + (2); 
# 93
uint64_t start = (0); 
# 94
uint64_t stop = (0); 
# 96
__asm__ volatile("bar.sync 0;"); 
# 98
__asm__ volatile("mov.u64 %0, %%clock64;" : "=l" (start) : : "memory"); 
# 100
for (int j = 0; j < 1024; ++j) { 
# 101
__asm__ volatile("mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%0,%1,%2,%3}, {%4,%5}, {%6}, {%7,%8,%9,%10};\n" : "=f" (D[0]), "=f" (D[1]), "=f" (D[2]), "=f" (D[3]) : "r" (A[0]), "r" (A[1]), "r" (B[0]), "f" (C[0]), "f" (C[1]), "f" (C[2]), "f" (C[3])); 
# 158 "bench_mma.cu"
__syncwarp(); 
# 160
}  
# 162
__asm__ volatile("mov.u64 %0, %%clock64;" : "=l" (stop) : : "memory"); 
# 163
for (int i = 0; i < (4 * 1); i++) { 
# 164
(res[i]) = (frag_D[i]); 
# 166
(res[i]) += fpuC; 
# 167
(res[i]) += intC; 
# 168
}  
# 171
(startClk[gid]) = start; 
# 172
(stopClk[gid]) = stop; 
# 173
} 
#endif
# 176 "bench_mma.cu"
template< class T, class R> float 
# 177
run(int THREADS_PER_BLOCK, bool report_fma_bw = false) { 
# 180
int BLOCKS_NUM = 1; 
# 181
int TOTAL_THREADS = THREADS_PER_BLOCK * BLOCKS_NUM; 
# 182
int WARP_SIZE = 32; 
# 184
unsigned total_A_SIZE = (16 * 16) * (TOTAL_THREADS / WARP_SIZE); 
# 186
unsigned total_B_SIZE = (8 * 16) * (TOTAL_THREADS / WARP_SIZE); 
# 188
unsigned total_R_SIZE = (16 * 8) * (TOTAL_THREADS / WARP_SIZE); 
# 191
uint64_t *startClk = (uint64_t *)malloc(TOTAL_THREADS * sizeof(uint64_t)); 
# 192
uint64_t *stopClk = (uint64_t *)malloc(TOTAL_THREADS * sizeof(uint64_t)); 
# 193
T *data1 = (T *)malloc(total_A_SIZE * sizeof(T)); 
# 194
T *data2 = (T *)malloc(total_B_SIZE * sizeof(T)); 
# 195
R *res = (R *)malloc(total_R_SIZE * sizeof(R)); 
# 197
uint64_t *startClk_g; 
# 198
uint64_t *stopClk_g; 
# 199
T *data1_g; 
# 200
T *data2_g; 
# 201
R *res_g; 
# 203
for (uint32_t i = (0); i < (16 * 4); i++) { 
# 204
(data1[i]) = ((T)i); 
# 205
}  
# 207
for (uint32_t i = (0); i < (4 * 8); i++) { 
# 208
(data2[i]) = ((T)i); 
# 209
}  
# 211
cudaMalloc(&startClk_g, TOTAL_THREADS * sizeof(uint64_t)); 
# 212
cudaMalloc(&stopClk_g, TOTAL_THREADS * sizeof(uint64_t)); 
# 213
cudaMalloc(&data1_g, total_A_SIZE * sizeof(T)); 
# 214
cudaMalloc(&data2_g, total_B_SIZE * sizeof(T)); 
# 215
cudaMalloc(&res_g, total_R_SIZE * sizeof(R)); 
# 217
cudaMemcpy(data1_g, data1, total_A_SIZE * sizeof(T), cudaMemcpyHostToDevice); 
# 219
cudaMemcpy(data2_g, data2, total_B_SIZE * sizeof(T), cudaMemcpyHostToDevice); 
# 222
(__cudaPushCallConfiguration(BLOCKS_NUM, THREADS_PER_BLOCK)) ? (void)0 : mma_ubench(startClk_g, stopClk_g, data1_g, data2_g, res_g, 0); 
# 224
cudaPeekAtLastError(); 
# 226
cudaMemcpy(startClk, startClk_g, TOTAL_THREADS * sizeof(uint64_t), cudaMemcpyDeviceToHost); 
# 228
cudaMemcpy(stopClk, stopClk_g, TOTAL_THREADS * sizeof(uint64_t), cudaMemcpyDeviceToHost); 
# 231
cudaMemcpy(res, res_g, total_R_SIZE * sizeof(R), cudaMemcpyDeviceToHost); 
# 233
float mma_bw, fma_bw; 
# 234
uint64_t total_time = (*std::max_element(&(stopClk[0]), &(stopClk[TOTAL_THREADS]))) - (*std::min_element(&(startClk[0]), &(startClk[TOTAL_THREADS]))); 
# 238
float fpuFMA = ((float)(((((1024 * TOTAL_THREADS) * 1) * 1) * 1) * 0)) / ((float)total_time); 
# 241
mma_bw = (((float)(1024 * TOTAL_THREADS)) / ((float)total_time)); 
# 244
fma_bw = (((float)(((((1024 * 16) * 8) * 4) * 1) * (TOTAL_THREADS / WARP_SIZE))) / ((float)total_time)); 
# 250
(((((std::cout << ("mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32  latency "))) << (((float)total_time) / ((float)1024)))) << (" cycles\n")); 
# 251
(((((std::cout << ("FMA tensor bandwidth = "))) << (fma_bw + fpuFMA))) << ("(FMA/clk/SM)\n")); 
# 253
(((((std::cout << ("Total Clk number = "))) << total_time)) << ("\n")); 
# 255
if (report_fma_bw) { 
# 256
return fma_bw; } else { 
# 258
return mma_bw; }  
# 259
} 
# 261
int main() { 
# 264
(((std::cout << ("***********************************"))) << (std::endl)); 
# 265
(((((std::cout << ("mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 microbenchmark with ILP = "))) << (1))) << (std::endl)); 
# 266
for (int i = 1; i <= 32; i = (i * 2)) { 
# 267
(((((std::cout << ("Number of warps = "))) << i)) << (std::endl)); 
# 268
run< float, float> (32 * i); 
# 269
(std::cout << (std::endl)); 
# 270
}  
# 274
return 0; 
# 275
} 

# 1 "bench_mma.cudafe1.stub.c"
#define _NV_ANON_NAMESPACE _GLOBAL__N__8f7893b0_12_bench_mma_cu_088b08f1
#ifdef _NV_ANON_NAMESPACE
#endif
# 1 "bench_mma.cudafe1.stub.c"
#include "bench_mma.cudafe1.stub.c"
# 1 "bench_mma.cudafe1.stub.c"
#undef _NV_ANON_NAMESPACE

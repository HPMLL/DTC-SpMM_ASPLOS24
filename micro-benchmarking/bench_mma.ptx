//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-32688072
// Cuda compilation tools, release 12.1, V12.1.105
// Based on NVVM 7.0.1
//

.version 8.1
.target sm_89
.address_size 64

	// .globl	_Z10mma_ubenchPmS_PfS0_S0_j

.visible .entry _Z10mma_ubenchPmS_PfS0_S0_j(
	.param .u64 _Z10mma_ubenchPmS_PfS0_S0_j_param_0,
	.param .u64 _Z10mma_ubenchPmS_PfS0_S0_j_param_1,
	.param .u64 _Z10mma_ubenchPmS_PfS0_S0_j_param_2,
	.param .u64 _Z10mma_ubenchPmS_PfS0_S0_j_param_3,
	.param .u64 _Z10mma_ubenchPmS_PfS0_S0_j_param_4,
	.param .u32 _Z10mma_ubenchPmS_PfS0_S0_j_param_5
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<538>;
	.reg .b32 	%r<222>;
	.reg .b64 	%rd<41>;


	ld.param.u64 	%rd9, [_Z10mma_ubenchPmS_PfS0_S0_j_param_2];
	ld.param.u64 	%rd10, [_Z10mma_ubenchPmS_PfS0_S0_j_param_3];
	cvta.to.global.u64 	%rd12, %rd9;
	mov.u32 	%r12, %ntid.x;
	mov.u32 	%r13, %ctaid.x;
	mov.u32 	%r1, %tid.x;
	mad.lo.s32 	%r2, %r13, %r12, %r1;
	mov.u32 	%r14, WARP_SZ;
	div.u32 	%r15, %r2, %r14;
	shl.b32 	%r16, %r15, 6;
	cvt.u64.u32 	%rd13, %r16;
	shl.b32 	%r18, %r15, 5;
	cvt.u64.u32 	%rd14, %r18;
	// begin inline asm
	mov.u32 %r8, %laneid;
	// end inline asm
	shl.b32 	%r19, %r8, 2;
	cvt.u64.u32 	%rd15, %r19;
	add.s64 	%rd16, %rd15, %rd13;
	shl.b64 	%rd17, %rd16, 2;
	add.s64 	%rd18, %rd12, %rd17;
	ld.global.u32 	%r3, [%rd18];
	// begin inline asm
	mov.u32 %r9, %laneid;
	// end inline asm
	shl.b32 	%r20, %r9, 2;
	or.b32  	%r21, %r20, 1;
	cvt.u64.u32 	%rd19, %r21;
	add.s64 	%rd20, %rd19, %rd13;
	shl.b64 	%rd21, %rd20, 2;
	add.s64 	%rd22, %rd12, %rd21;
	ld.global.u32 	%r4, [%rd22];
	// begin inline asm
	mov.u32 %r10, %laneid;
	// end inline asm
	cvt.u64.u32 	%rd23, %r10;
	add.s64 	%rd24, %rd23, %rd14;
	cvta.to.global.u64 	%rd25, %rd10;
	shl.b64 	%rd26, %rd24, 2;
	add.s64 	%rd27, %rd25, %rd26;
	ld.global.u32 	%r5, [%rd27];
	// begin inline asm
	bar.sync 0;
	// end inline asm
	// begin inline asm
	mov.u64 %rd6, %clock64;
	// end inline asm
	mov.u32 	%r221, 0;
	mov.f32 	%f534, 0f00000000;
	mov.f32 	%f535, %f534;
	mov.f32 	%f536, %f534;
	mov.f32 	%f537, %f534;

$L__BB0_1:
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f13,%f14,%f15,%f16}, {%r3,%r4}, {%r5}, {%f537,%f536,%f535,%f534};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f21,%f22,%f23,%f24}, {%r3,%r4}, {%r5}, {%f13,%f14,%f15,%f16};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f29,%f30,%f31,%f32}, {%r3,%r4}, {%r5}, {%f21,%f22,%f23,%f24};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f37,%f38,%f39,%f40}, {%r3,%r4}, {%r5}, {%f29,%f30,%f31,%f32};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f45,%f46,%f47,%f48}, {%r3,%r4}, {%r5}, {%f37,%f38,%f39,%f40};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f53,%f54,%f55,%f56}, {%r3,%r4}, {%r5}, {%f45,%f46,%f47,%f48};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f61,%f62,%f63,%f64}, {%r3,%r4}, {%r5}, {%f53,%f54,%f55,%f56};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f69,%f70,%f71,%f72}, {%r3,%r4}, {%r5}, {%f61,%f62,%f63,%f64};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f77,%f78,%f79,%f80}, {%r3,%r4}, {%r5}, {%f69,%f70,%f71,%f72};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f85,%f86,%f87,%f88}, {%r3,%r4}, {%r5}, {%f77,%f78,%f79,%f80};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f93,%f94,%f95,%f96}, {%r3,%r4}, {%r5}, {%f85,%f86,%f87,%f88};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f101,%f102,%f103,%f104}, {%r3,%r4}, {%r5}, {%f93,%f94,%f95,%f96};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f109,%f110,%f111,%f112}, {%r3,%r4}, {%r5}, {%f101,%f102,%f103,%f104};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f117,%f118,%f119,%f120}, {%r3,%r4}, {%r5}, {%f109,%f110,%f111,%f112};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f125,%f126,%f127,%f128}, {%r3,%r4}, {%r5}, {%f117,%f118,%f119,%f120};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f133,%f134,%f135,%f136}, {%r3,%r4}, {%r5}, {%f125,%f126,%f127,%f128};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f141,%f142,%f143,%f144}, {%r3,%r4}, {%r5}, {%f133,%f134,%f135,%f136};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f149,%f150,%f151,%f152}, {%r3,%r4}, {%r5}, {%f141,%f142,%f143,%f144};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f157,%f158,%f159,%f160}, {%r3,%r4}, {%r5}, {%f149,%f150,%f151,%f152};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f165,%f166,%f167,%f168}, {%r3,%r4}, {%r5}, {%f157,%f158,%f159,%f160};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f173,%f174,%f175,%f176}, {%r3,%r4}, {%r5}, {%f165,%f166,%f167,%f168};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f181,%f182,%f183,%f184}, {%r3,%r4}, {%r5}, {%f173,%f174,%f175,%f176};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f189,%f190,%f191,%f192}, {%r3,%r4}, {%r5}, {%f181,%f182,%f183,%f184};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f197,%f198,%f199,%f200}, {%r3,%r4}, {%r5}, {%f189,%f190,%f191,%f192};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f205,%f206,%f207,%f208}, {%r3,%r4}, {%r5}, {%f197,%f198,%f199,%f200};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f213,%f214,%f215,%f216}, {%r3,%r4}, {%r5}, {%f205,%f206,%f207,%f208};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f221,%f222,%f223,%f224}, {%r3,%r4}, {%r5}, {%f213,%f214,%f215,%f216};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f229,%f230,%f231,%f232}, {%r3,%r4}, {%r5}, {%f221,%f222,%f223,%f224};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f237,%f238,%f239,%f240}, {%r3,%r4}, {%r5}, {%f229,%f230,%f231,%f232};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f245,%f246,%f247,%f248}, {%r3,%r4}, {%r5}, {%f237,%f238,%f239,%f240};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f253,%f254,%f255,%f256}, {%r3,%r4}, {%r5}, {%f245,%f246,%f247,%f248};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f261,%f262,%f263,%f264}, {%r3,%r4}, {%r5}, {%f253,%f254,%f255,%f256};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f269,%f270,%f271,%f272}, {%r3,%r4}, {%r5}, {%f261,%f262,%f263,%f264};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f277,%f278,%f279,%f280}, {%r3,%r4}, {%r5}, {%f269,%f270,%f271,%f272};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f285,%f286,%f287,%f288}, {%r3,%r4}, {%r5}, {%f277,%f278,%f279,%f280};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f293,%f294,%f295,%f296}, {%r3,%r4}, {%r5}, {%f285,%f286,%f287,%f288};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f301,%f302,%f303,%f304}, {%r3,%r4}, {%r5}, {%f293,%f294,%f295,%f296};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f309,%f310,%f311,%f312}, {%r3,%r4}, {%r5}, {%f301,%f302,%f303,%f304};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f317,%f318,%f319,%f320}, {%r3,%r4}, {%r5}, {%f309,%f310,%f311,%f312};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f325,%f326,%f327,%f328}, {%r3,%r4}, {%r5}, {%f317,%f318,%f319,%f320};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f333,%f334,%f335,%f336}, {%r3,%r4}, {%r5}, {%f325,%f326,%f327,%f328};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f341,%f342,%f343,%f344}, {%r3,%r4}, {%r5}, {%f333,%f334,%f335,%f336};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f349,%f350,%f351,%f352}, {%r3,%r4}, {%r5}, {%f341,%f342,%f343,%f344};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f357,%f358,%f359,%f360}, {%r3,%r4}, {%r5}, {%f349,%f350,%f351,%f352};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f365,%f366,%f367,%f368}, {%r3,%r4}, {%r5}, {%f357,%f358,%f359,%f360};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f373,%f374,%f375,%f376}, {%r3,%r4}, {%r5}, {%f365,%f366,%f367,%f368};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f381,%f382,%f383,%f384}, {%r3,%r4}, {%r5}, {%f373,%f374,%f375,%f376};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f389,%f390,%f391,%f392}, {%r3,%r4}, {%r5}, {%f381,%f382,%f383,%f384};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f397,%f398,%f399,%f400}, {%r3,%r4}, {%r5}, {%f389,%f390,%f391,%f392};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f405,%f406,%f407,%f408}, {%r3,%r4}, {%r5}, {%f397,%f398,%f399,%f400};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f413,%f414,%f415,%f416}, {%r3,%r4}, {%r5}, {%f405,%f406,%f407,%f408};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f421,%f422,%f423,%f424}, {%r3,%r4}, {%r5}, {%f413,%f414,%f415,%f416};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f429,%f430,%f431,%f432}, {%r3,%r4}, {%r5}, {%f421,%f422,%f423,%f424};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f437,%f438,%f439,%f440}, {%r3,%r4}, {%r5}, {%f429,%f430,%f431,%f432};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f445,%f446,%f447,%f448}, {%r3,%r4}, {%r5}, {%f437,%f438,%f439,%f440};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f453,%f454,%f455,%f456}, {%r3,%r4}, {%r5}, {%f445,%f446,%f447,%f448};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f461,%f462,%f463,%f464}, {%r3,%r4}, {%r5}, {%f453,%f454,%f455,%f456};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f469,%f470,%f471,%f472}, {%r3,%r4}, {%r5}, {%f461,%f462,%f463,%f464};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f477,%f478,%f479,%f480}, {%r3,%r4}, {%r5}, {%f469,%f470,%f471,%f472};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f485,%f486,%f487,%f488}, {%r3,%r4}, {%r5}, {%f477,%f478,%f479,%f480};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f493,%f494,%f495,%f496}, {%r3,%r4}, {%r5}, {%f485,%f486,%f487,%f488};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f501,%f502,%f503,%f504}, {%r3,%r4}, {%r5}, {%f493,%f494,%f495,%f496};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f509,%f510,%f511,%f512}, {%r3,%r4}, {%r5}, {%f501,%f502,%f503,%f504};

	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32 {%f537,%f536,%f535,%f534}, {%r3,%r4}, {%r5}, {%f509,%f510,%f511,%f512};

	// end inline asm
	bar.warp.sync 	-1;
	add.s32 	%r221, %r221, 64;
	setp.ne.s32 	%p1, %r221, 1024;
	@%p1 bra 	$L__BB0_1;

	mov.u32 	%r220, %tid.x;
	mov.u32 	%r219, %ntid.x;
	mov.u32 	%r218, %ctaid.x;
	mad.lo.s32 	%r217, %r218, %r219, %r220;
	shl.b32 	%r216, %r15, 7;
	cvt.u64.u32 	%rd40, %r216;
	ld.param.u64 	%rd39, [_Z10mma_ubenchPmS_PfS0_S0_j_param_1];
	cvta.to.global.u64 	%rd38, %rd39;
	ld.param.u64 	%rd37, [_Z10mma_ubenchPmS_PfS0_S0_j_param_0];
	cvta.to.global.u64 	%rd36, %rd37;
	ld.param.u64 	%rd35, [_Z10mma_ubenchPmS_PfS0_S0_j_param_4];
	cvta.to.global.u64 	%rd34, %rd35;
	mov.u32 	%r215, %tid.x;
	add.s32 	%r214, %r215, 2;
	// begin inline asm
	mov.u64 %rd28, %clock64;
	// end inline asm
	cvt.rn.f32.s32 	%f525, %r214;
	add.f32 	%f526, %f537, 0f00000000;
	add.f32 	%f527, %f526, %f525;
	shl.b64 	%rd29, %rd40, 2;
	add.s64 	%rd30, %rd34, %rd29;
	st.global.f32 	[%rd30], %f527;
	add.f32 	%f528, %f536, 0f00000000;
	add.f32 	%f529, %f528, %f525;
	st.global.f32 	[%rd30+4], %f529;
	add.f32 	%f530, %f535, 0f00000000;
	add.f32 	%f531, %f530, %f525;
	st.global.f32 	[%rd30+8], %f531;
	add.f32 	%f532, %f534, 0f00000000;
	add.f32 	%f533, %f532, %f525;
	st.global.f32 	[%rd30+12], %f533;
	mul.wide.u32 	%rd31, %r217, 8;
	add.s64 	%rd32, %rd36, %rd31;
	st.global.u64 	[%rd32], %rd6;
	add.s64 	%rd33, %rd38, %rd31;
	st.global.u64 	[%rd33], %rd28;
	ret;

}

